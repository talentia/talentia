[
    {
        "id": 137496,
        "uuid": "6c53c1a119daa2fe82dd",
        "user": {
            "id": 1054,
            "url_name": "a_yasui",
            "profile_image_url": "https://pbs.twimg.com/profile_images/3670878724/3c31fab5c27d24fbbb0fded007052c9a_normal.jpeg"
        },
        "title": "Scala 関西勉強会",
        "created_at": "2014-09-20 16:46:48 +0900",
        "updated_at": "2014-09-20 16:46:48 +0900",
        "created_at_in_words": "3日",
        "updated_at_in_words": "3日",
        "tags": [
            {
                "name": "勉強会",
                "url_name": "%e5%8b%89%e5%bc%b7%e4%bc%9a",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/51713336a1474837883624c6cc2b10de6a21ddd8/medium.jpg?1387910883",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/a_yasui/items/6c53c1a119daa2fe82dd",
        "created_at_as_seconds": 1411199208,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n2014/09/20\n\n# Skinny Scala祭りとか\n\n@aa7th? さん\n\n- 学習曲線の話とか聞けた\n- 言語設計者の方の思想を聞けた\n\n## 関西も盛り上げていこうと思った\n\n- 東京は「もういいよね」感なので。\n- 関西待ってるだけじゃヤバイ\n\n## SkinnyFramework\n\n- Scala製ふるすたっく web フレームワーク\n- Scala on Rails\n- Scalatraベース(超シンプルなフレームワーク)\n\n- Servletコンテナ上で動く\n- 国産( @seratch さん )\n\n### How do I use?\n\n- http://skinny-framework.org/\n- 空Zipファイルがおいてるから、それをダウンロードして試すのが速い\n - ( Homebrew, YEOMANでも可 )\n- ./skinny run\n- localhost:8080\n\n- Scaffolding\n - ./skinny g scaffolding members member name:String ...\n - ./skinny db:migrate\n  - 開発はデフォルトでh2 Database. 設定は application.conf\n - ./skinny run\n - localhost:8080/members でもう出る。\n\n### 中身\n\n```scala\npackage controller\n\nclass RootController extends ApplicationController {\n\tdef index = {\n\t\tset(\"name\", \"Scalaなんとか\")\n\t\trender(\"/root/index\")\n\t}\n}\n```\n\n### SkinnyResource\n\n- Restful web Resource\n- 変更したい箇所はoverrideして書き換えればok\n- SkinnyResource を使わない CRUDサンプル in Qiita\n\n### View\n\n```\n<%@val name: String %>\nhellow, ${name}\n```\n\nこんな感じ\n\n#### View Tmeplate\n\n- Scalate を使ってる\n- 形式は Mustache, Scaml, Jade, SSP ( default は SSP )\n - Jade は何かちょっとややこしい？\n\n### Skinny-ORM\n\n\n- ScalikeJDBC Base\n- SkinnyCRUDMapper Traintを継承すると使える\n- Play2 でも他のフレームワークで使える\n\n### その他\n\n- Validator, extends ValidationRule Trait\n- ReverseScaffold \n- Assets(Less, Sass,Scala.js...)\n- Mail\n- FactoryGirl\n- etc...\n\n### Deploy\n\n- war ファイルにして tomcat, jetty に配置\n- Heroku もサポートしたら、ScalaとHerokuの相性がいまいち( ホントはどうにかしたいらしい )\n\n### 感想\n\n- 直感で使いやすい\n- Scala の難しい文法がわからんでもとりあえず大丈夫\n\n- マニュアルやせらさんのブログ記事とか、Scalatraの情報などを元に割とつまらなく簡単なものは作れた\n- Scafolldingが\n\n### 参考資料\n\n全部セラさんの記事\n\nhttp://seratch.hatenablog.jp/\n\n\n# 英語とScalaと私と？\n\ncuret が skinny 製\n\n@daisky さん\n\nScala祭りの再演\n\nせっかく作ったのでもう一度(前の10人ぐらいしか聞いてなかったから)\n\n\n## 僕は英語が苦手です ( I'm not good at English )\n\nTOEIC Score: 300 点\n\n日本語文献は増えてきた\n\nトラブルシューティングだと stackoverflow とか…\n\n- 英語の本(Functional Programming Scala)を読んでる\n- 技術書の英語はパターンあるから、Google翻訳でなんとか意味がとれる\n\n\n# FAQ ? 参加登録時アンケートの質問に答えてみる\n\n@kitora_naoki さん シナジーマーケティング(株)\n\n確率統計テキストマイニング、など。\n\n- Haskellとどのくらい違う？\n - -> だいぶ違う\n - Haskell: 純粋関数型言語\n - Scala: 非純粋関数型言語\n\n- どうやって他の人に教育、学習させているのか？\n - 教育らしい教育をやってません\n - しいて言えば、コードレビュー？ペアプロ\n\n- Java ではなく Scalaを使うことを\n - Scala使います\n - 熱意と覚悟\n- Scala のいいところ\n - いろいろ\n- わるいところ\n - コンパイルが遅い\n - ヒープダンプが解析にくい\n - Java のイマイチな所を引き継いでる\n  - 型消去など\n- JavaとScalaの違い\n - 問題の視点を切り替えた方がいい\n - データ構造が違う\n - Java:List (配列リスト)\n - Scala:List (単方向リスト)\n - 関数型言語では再帰をよく使うから、単方向にしている？\n\n\n# PHPからScalaへ…その後\n\n@UAdachi さん From Chatwork\n\n\n## Chatwork のなんとか\n\nビジネスチャットツール\n\n## PHP から Scalaへ\n\nまだ Scala プロダクションは動いてませんよ。\n\n「チャットワーク　ビール」で検索\n\n\n## なぜ？\n\n- 静的型付け言語を使いたい\n- 合宿やったの3月終わり\n - 進捗道ですか？\n - 学習（5月中旬〜）\n - プロジェクト発足( 7月上旬〜 )\n - 社内勉強会( 8月下旬〜 )\n\n## 独習時期\n\n- PLAY で APIを作ってみる\n- コップ本とか。\n\n### 成果\n\n- SCALAの文法ぐらい\n\n## Join\n\n加藤さん @j5ik2o さん( 糖質制限、肉、、、 )がChatworkにJoinしたから、一緒に。\n\n### 課題\n\n- 簡単なデータ構造\n- 数列、単語カウンター、検索？\n- Akka で Map/Reduce\n\n## レビュー\n\nプルリクしてレビュー\n\n### 成果\n\nパターンマッチ使えるように鳴った。高階関数が使えるように鳴った。\n\n## プロジェクト発足→ペアプロ\n\n7月中旬\n\n- リモートペパプロ\n- ペアプロ:ソロ = 3:7 の時間割合\n- ソロの時は見よう見まねで\n\n### 成果\n\n効率的にできた\n\n- monadic programing へようこそ\n\n## ペアプロのいいところ\n\n- 自然とコーディングに集中できる\n\n## ペアプロで大切なこと\n\n1. 大切なこと\n - だらだらやらない\n - 終了後にコードを噛み砕く時間を用意\n - たまには雑談する（コンパイル中とか）\n\n## どうやってリモートで？\n\nscreenHero\n\n- 自分のキーボードでペアプロできる\n- さくさく（自分が詰まってる時に相手の画面をさくっと見せてくれる）\n- エディタの設定は諦める\n - Emacs派 vs Vim派(かとじゅんさん)\n\n## matome\n\nScalaに移行します宣言\n- ビズリーチさんと勉強会できた\n- 採用（かとじゅんさん）が来た\n\n今後のChatworkに期待してください\n\n\n# さくさくアンドロイド\n\namaya @0x17E さん\n\nLT\n\n- ライブラリを使わない時はおとなしくJavaの方がいい\n\n## Scaloid\n\nhttps://github.com/pocorall/scaloid\n\n- XMLから開放\n- ただし、Scaloid を使うので、細かい所までいじろうとしたらXMLさわるはめに…\n\n## Macroid\n\nhttps://github.com/macroid/macroid\n\n- Scaloid より XML から開放\n- 比較的新しいので公式ドキュメント以外がない\n- DSLの癖が強い\n\n\n## Android-sdk-plugin\n\nAndroid開発用のsbtPlugin\n\n- ビルドが遅い\n\n\n# ぼっち.scala\n\n@tnoda_ さん\n\nScalaリア充はsbtのバグ踏んで爆発してください\n\n## Scalaぼっちの学習\n\nZPD概念（教育学的なアレ）\n\n人でできるかも、と、誰かと一緒ならできるかも、のギャップの差がZPD。\n\n## 効率のよい学習に必要なもの（でぼっちに(ry\n\n- 適切なガイダンス    => MOOC\n- 適切なフィードバック => オンラインジャッジ\n - 段階的にフィードバックがいる\n\n\n- 目標が遠いと、違う方向に行ってしまう\n- 適切な、ガイダンス、フィードバックがアレば順序立てていける。\n\nぼっちだと、圧倒的に不利よね\n\n## ぼっちでもできる学習法\n\n\n\n### MOOC \n大々的にやってる基本無料で利用できる大学の講義\n- http://coursera.org\n - Scala で検索\n - Odasky センセイの講義が出てくる\n - わからんかったら、とりあえず一番上を押したらいいよ\n\n### オンラインジャッジ\n\nわかりやすく言えば、仕様→納品→検収\n\n1. プログラミングコンテスト主演害者が公開してることが多い\n2. 直ぐに結果を知ることができる\n3. 他の人の回答を参考にすることができる\n3. コンテストに参加しなくてもいい\n\nScalaを使えるサイト\n\n1. HackerRank / Scala 2.11 (おすすめ\n2. Atcoder    / 2.9.1 (おすすえｍ\n3. Codeforces / 2.11.2 (問題文の英語が稀に酷い\n\n\n#### www.hackerrank.com\n\nコンテスト。決まった課題、決まった期間で正確さなどを競う\n\n社会人でも参加できる長い開催期間\n\n関数プログラミング限定コンテスト\n\n開催期間１０日間、参加人数が少ない。\n\nオンラインジャッジはいつでも使える。\n難易度の幅は広い\n\nProjectEulerの問題採点もしてくれる\n\n#### atcoder.jp\n\n他の人の回答を見て勉強できる\n\n初心者用の問題が用意されている\n\n# とりあえず使える sbt\n\n@kuchitama さん\n\nhttp://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish\n\n## sbt\n\n- Simple (???)\n - 本家でもSimple消えた\n- Scala Build Tool \n\n## 0.13.5\n\nから ver1 に向けて準備段階\n\n## .sbt or .scala\n\n- 基本は .sbt に。\n- 複雑な処理は .scala に\n - 再利用できそうなら plugin\n\n## Typesafe Activator\n\n- sbt-np plugin いらず\n- scala,java,playのひな形生成\n- play2,3 では標準\n\n## デモ\n\n- `activator new`\n\n- `activator ui` : ウェブ画面で\n\n## 基本の設定\n\n- (key)(method)(setting[s])\n- method:\n - := キーに対して settings を更新\n - += キーに Settingを追加\n - など\n\n\n## 依存ライブラリの取得\n\n- % : Scala のバージョンを指定して依存性を解決\n - Javaのライブラリを使いたいときはこっち\n - groupid % artifactid % revision\n- %% : Scalaのバージョンを自動的に追加して依存性\n - groupid %% artifactid %% revision\n- Configuration\n - 使う時だけ依存性を解決させる\n - groupid %% artifactid %% revision % Configuration\n\n\n\n## まとめ\n\n- activator で簡単プロジェクト作成\n- 依存ライブラリの取得は %, %% \n- 基本のsbtタスクは覚えやすい\n\n",
        "body": "<p>2014/09/20</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>Skinny Scala祭りとか\n      </h1><p><b><a href=\"/aa7th\" title=\"aa7th\" target=\"_blank\">@aa7th</a></b>? さん</p>\n\n<ul>\n<li>学習曲線の話とか聞けた</li>\n<li>言語設計者の方の思想を聞けた</li>\n</ul>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>関西も盛り上げていこうと思った\n      </h2>\n<ul>\n<li>東京は「もういいよね」感なので。</li>\n<li>関西待ってるだけじゃヤバイ</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>SkinnyFramework\n      </h2>\n<ul>\n<li>Scala製ふるすたっく web フレームワーク</li>\n<li>Scala on Rails</li>\n<li><p>Scalatraベース(超シンプルなフレームワーク)</p></li>\n<li><p>Servletコンテナ上で動く</p></li>\n<li><p>国産( @seratch さん )</p></li>\n</ul>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>How do I use?\n      </h3>\n<ul>\n<li><a href=\"http://skinny-framework.org/\" title=\"http://skinny-framework.org/\" target=\"_blank\">http://skinny-framework.org/</a></li>\n<li>空Zipファイルがおいてるから、それをダウンロードして試すのが速い\n\n<ul>\n<li>( Homebrew, YEOMANでも可 )</li>\n</ul></li>\n<li>./skinny run</li>\n<li><p>localhost:8080</p></li>\n<li><p>Scaffolding</p>\n\n<ul>\n<li>./skinny g scaffolding members member name:String ...</li>\n<li>./skinny db:migrate</li>\n<li>開発はデフォルトでh2 Database. 設定は application.conf</li>\n<li>./skinny run</li>\n<li>localhost:8080/members でもう出る。</li>\n</ul></li>\n</ul>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>中身\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controller</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RootController</span> <span class=\"k\">extends</span> <span class=\"nc\">ApplicationController</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">index</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n        <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Scalaなんとか&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">render</span><span class=\"o\">(</span><span class=\"s\">&quot;/root/index&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>SkinnyResource\n      </h3>\n<ul>\n<li>Restful web Resource</li>\n<li>変更したい箇所はoverrideして書き換えればok</li>\n<li>SkinnyResource を使わない CRUDサンプル in Qiita</li>\n</ul>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>View\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&lt;%@val name: String %&gt;\nhellow, ${name}\n</pre></div></div><p>こんな感じ</p>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>View Tmeplate\n      </h4>\n<ul>\n<li>Scalate を使ってる</li>\n<li>形式は Mustache, Scaml, Jade, SSP ( default は SSP )\n\n<ul>\n<li>Jade は何かちょっとややこしい？</li>\n</ul></li>\n</ul>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>Skinny-ORM\n      </h3>\n<ul>\n<li>ScalikeJDBC Base</li>\n<li>SkinnyCRUDMapper Traintを継承すると使える</li>\n<li>Play2 でも他のフレームワークで使える</li>\n</ul>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>その他\n      </h3>\n<ul>\n<li>Validator, extends ValidationRule Trait</li>\n<li>ReverseScaffold </li>\n<li>Assets(Less, Sass,Scala.js...)</li>\n<li>Mail</li>\n<li>FactoryGirl</li>\n<li>etc...</li>\n</ul>\n<h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>Deploy\n      </h3>\n<ul>\n<li>war ファイルにして tomcat, jetty に配置</li>\n<li>Heroku もサポートしたら、ScalaとHerokuの相性がいまいち( ホントはどうにかしたいらしい )</li>\n</ul>\n<h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>感想\n      </h3>\n<ul>\n<li>直感で使いやすい</li>\n<li><p>Scala の難しい文法がわからんでもとりあえず大丈夫</p></li>\n<li><p>マニュアルやせらさんのブログ記事とか、Scalatraの情報などを元に割とつまらなく簡単なものは作れた</p></li>\n<li><p>Scafolldingが</p></li>\n</ul>\n<h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>参考資料\n      </h3><p>全部セラさんの記事</p>\n<p><a href=\"http://seratch.hatenablog.jp/\" title=\"http://seratch.hatenablog.jp/\" target=\"_blank\">http://seratch.hatenablog.jp/</a></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>英語とScalaと私と？\n      </h1><p>curet が skinny 製</p>\n<p>@daisky さん</p>\n<p>Scala祭りの再演</p>\n<p>せっかく作ったのでもう一度(前の10人ぐらいしか聞いてなかったから)</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>僕は英語が苦手です ( I&#39;m not good at English )\n      </h2><p>TOEIC Score: 300 点</p>\n<p>日本語文献は増えてきた</p>\n<p>トラブルシューティングだと stackoverflow とか…</p>\n\n<ul>\n<li>英語の本(Functional Programming Scala)を読んでる</li>\n<li>技術書の英語はパターンあるから、Google翻訳でなんとか意味がとれる</li>\n</ul>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>FAQ ? 参加登録時アンケートの質問に答えてみる\n      </h1><p>@kitora_naoki さん シナジーマーケティング(株)</p>\n<p>確率統計テキストマイニング、など。</p>\n\n<ul>\n<li><p>Haskellとどのくらい違う？</p>\n\n<ul>\n<li>-&gt; だいぶ違う</li>\n<li>Haskell: 純粋関数型言語</li>\n<li>Scala: 非純粋関数型言語</li>\n</ul></li>\n<li><p>どうやって他の人に教育、学習させているのか？</p>\n\n<ul>\n<li>教育らしい教育をやってません</li>\n<li>しいて言えば、コードレビュー？ペアプロ</li>\n</ul></li>\n<li><p>Java ではなく Scalaを使うことを</p>\n\n<ul>\n<li>Scala使います</li>\n<li>熱意と覚悟</li>\n</ul></li>\n<li><p>Scala のいいところ</p>\n\n<ul>\n<li>いろいろ</li>\n</ul></li>\n<li><p>わるいところ</p>\n\n<ul>\n<li>コンパイルが遅い</li>\n<li>ヒープダンプが解析にくい</li>\n<li>Java のイマイチな所を引き継いでる</li>\n<li>型消去など</li>\n</ul></li>\n<li><p>JavaとScalaの違い</p>\n\n<ul>\n<li>問題の視点を切り替えた方がいい</li>\n<li>データ構造が違う</li>\n<li>Java:List (配列リスト)</li>\n<li>Scala:List (単方向リスト)</li>\n<li>関数型言語では再帰をよく使うから、単方向にしている？</li>\n</ul></li>\n</ul>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>PHPからScalaへ…その後\n      </h1><p>@UAdachi さん From Chatwork</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>Chatwork のなんとか\n      </h2><p>ビジネスチャットツール</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>PHP から Scalaへ\n      </h2><p>まだ Scala プロダクションは動いてませんよ。</p>\n<p>「チャットワーク　ビール」で検索</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>なぜ？\n      </h2>\n<ul>\n<li>静的型付け言語を使いたい</li>\n<li>合宿やったの3月終わり\n\n<ul>\n<li>進捗道ですか？</li>\n<li>学習（5月中旬〜）</li>\n<li>プロジェクト発足( 7月上旬〜 )</li>\n<li>社内勉強会( 8月下旬〜 )</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>独習時期\n      </h2>\n<ul>\n<li>PLAY で APIを作ってみる</li>\n<li>コップ本とか。</li>\n</ul>\n<h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>成果\n      </h3>\n<ul>\n<li>SCALAの文法ぐらい</li>\n</ul>\n<h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>Join\n      </h2><p>加藤さん <b><a href=\"/j5ik2o\" title=\"j5ik2o\" target=\"_blank\">@j5ik2o</a></b> さん( 糖質制限、肉、、、 )がChatworkにJoinしたから、一緒に。</p>\n<h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>課題\n      </h3>\n<ul>\n<li>簡単なデータ構造</li>\n<li>数列、単語カウンター、検索？</li>\n<li>Akka で Map/Reduce</li>\n</ul>\n<h2>\n        <span id=\"2-9\" class=\"fragment\"></span>\n        <a href=\"#2-9\"><i class=\"fa fa-link\"></i></a>レビュー\n      </h2><p>プルリクしてレビュー</p>\n<h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>成果\n      </h3><p>パターンマッチ使えるように鳴った。高階関数が使えるように鳴った。</p>\n<h2>\n        <span id=\"2-10\" class=\"fragment\"></span>\n        <a href=\"#2-10\"><i class=\"fa fa-link\"></i></a>プロジェクト発足→ペアプロ\n      </h2><p>7月中旬</p>\n\n<ul>\n<li>リモートペパプロ</li>\n<li>ペアプロ:ソロ = 3:7 の時間割合</li>\n<li>ソロの時は見よう見まねで</li>\n</ul>\n<h3>\n        <span id=\"3-13\" class=\"fragment\"></span>\n        <a href=\"#3-13\"><i class=\"fa fa-link\"></i></a>成果\n      </h3><p>効率的にできた</p>\n\n<ul>\n<li>monadic programing へようこそ</li>\n</ul>\n<h2>\n        <span id=\"2-11\" class=\"fragment\"></span>\n        <a href=\"#2-11\"><i class=\"fa fa-link\"></i></a>ペアプロのいいところ\n      </h2>\n<ul>\n<li>自然とコーディングに集中できる</li>\n</ul>\n<h2>\n        <span id=\"2-12\" class=\"fragment\"></span>\n        <a href=\"#2-12\"><i class=\"fa fa-link\"></i></a>ペアプロで大切なこと\n      </h2>\n<ol>\n<li>大切なこと\n\n<ul>\n<li>だらだらやらない</li>\n<li>終了後にコードを噛み砕く時間を用意</li>\n<li>たまには雑談する（コンパイル中とか）</li>\n</ul></li>\n</ol>\n<h2>\n        <span id=\"2-13\" class=\"fragment\"></span>\n        <a href=\"#2-13\"><i class=\"fa fa-link\"></i></a>どうやってリモートで？\n      </h2><p>screenHero</p>\n\n<ul>\n<li>自分のキーボードでペアプロできる</li>\n<li>さくさく（自分が詰まってる時に相手の画面をさくっと見せてくれる）</li>\n<li>エディタの設定は諦める\n\n<ul>\n<li>Emacs派 vs Vim派(かとじゅんさん)</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-14\" class=\"fragment\"></span>\n        <a href=\"#2-14\"><i class=\"fa fa-link\"></i></a>matome\n      </h2><p>Scalaに移行します宣言<br>\n- ビズリーチさんと勉強会できた<br>\n- 採用（かとじゅんさん）が来た</p>\n<p>今後のChatworkに期待してください</p>\n<h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>さくさくアンドロイド\n      </h1><p>amaya @0x17E さん</p>\n<p>LT</p>\n\n<ul>\n<li>ライブラリを使わない時はおとなしくJavaの方がいい</li>\n</ul>\n<h2>\n        <span id=\"2-15\" class=\"fragment\"></span>\n        <a href=\"#2-15\"><i class=\"fa fa-link\"></i></a>Scaloid\n      </h2><p><a href=\"https://github.com/pocorall/scaloid\" title=\"https://github.com/pocorall/scaloid\" target=\"_blank\">https://github.com/pocorall/scaloid</a></p>\n\n<ul>\n<li>XMLから開放</li>\n<li>ただし、Scaloid を使うので、細かい所までいじろうとしたらXMLさわるはめに…</li>\n</ul>\n<h2>\n        <span id=\"2-16\" class=\"fragment\"></span>\n        <a href=\"#2-16\"><i class=\"fa fa-link\"></i></a>Macroid\n      </h2><p><a href=\"https://github.com/macroid/macroid\" title=\"https://github.com/macroid/macroid\" target=\"_blank\">https://github.com/macroid/macroid</a></p>\n\n<ul>\n<li>Scaloid より XML から開放</li>\n<li>比較的新しいので公式ドキュメント以外がない</li>\n<li>DSLの癖が強い</li>\n</ul>\n<h2>\n        <span id=\"2-17\" class=\"fragment\"></span>\n        <a href=\"#2-17\"><i class=\"fa fa-link\"></i></a>Android-sdk-plugin\n      </h2><p>Android開発用のsbtPlugin</p>\n\n<ul>\n<li>ビルドが遅い</li>\n</ul>\n<h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>ぼっち.scala\n      </h1><p><b><a href=\"/tnoda_\" title=\"tnoda_\" target=\"_blank\">@tnoda_</a></b> さん</p>\n<p>Scalaリア充はsbtのバグ踏んで爆発してください</p>\n<h2>\n        <span id=\"2-18\" class=\"fragment\"></span>\n        <a href=\"#2-18\"><i class=\"fa fa-link\"></i></a>Scalaぼっちの学習\n      </h2><p>ZPD概念（教育学的なアレ）</p>\n<p>人でできるかも、と、誰かと一緒ならできるかも、のギャップの差がZPD。</p>\n<h2>\n        <span id=\"2-19\" class=\"fragment\"></span>\n        <a href=\"#2-19\"><i class=\"fa fa-link\"></i></a>効率のよい学習に必要なもの（でぼっちに(ry\n      </h2>\n<ul>\n<li>適切なガイダンス    =&gt; MOOC</li>\n<li><p>適切なフィードバック =&gt; オンラインジャッジ</p>\n\n<ul>\n<li>段階的にフィードバックがいる</li>\n</ul></li>\n<li><p>目標が遠いと、違う方向に行ってしまう</p></li>\n<li><p>適切な、ガイダンス、フィードバックがアレば順序立てていける。</p></li>\n</ul>\n<p>ぼっちだと、圧倒的に不利よね</p>\n<h2>\n        <span id=\"2-20\" class=\"fragment\"></span>\n        <a href=\"#2-20\"><i class=\"fa fa-link\"></i></a>ぼっちでもできる学習法\n      </h2><h3>\n        <span id=\"3-14\" class=\"fragment\"></span>\n        <a href=\"#3-14\"><i class=\"fa fa-link\"></i></a>MOOC\n      </h3><p>大々的にやってる基本無料で利用できる大学の講義<br>\n- <a href=\"http://coursera.org\" title=\"http://coursera.org\" target=\"_blank\">http://coursera.org</a><br>\n - Scala で検索<br>\n - Odasky センセイの講義が出てくる<br>\n - わからんかったら、とりあえず一番上を押したらいいよ</p>\n<h3>\n        <span id=\"3-15\" class=\"fragment\"></span>\n        <a href=\"#3-15\"><i class=\"fa fa-link\"></i></a>オンラインジャッジ\n      </h3><p>わかりやすく言えば、仕様→納品→検収</p>\n\n<ol>\n<li>プログラミングコンテスト主演害者が公開してることが多い</li>\n<li>直ぐに結果を知ることができる</li>\n<li>他の人の回答を参考にすることができる</li>\n<li>コンテストに参加しなくてもいい</li>\n</ol>\n<p>Scalaを使えるサイト</p>\n\n<ol>\n<li>HackerRank / Scala 2.11 (おすすめ</li>\n<li>Atcoder    / 2.9.1 (おすすえｍ</li>\n<li>Codeforces / 2.11.2 (問題文の英語が稀に酷い</li>\n</ol>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a><a href=\"http://www.hackerrank.com\" title=\"\">www.hackerrank.com</a>\n      </h4><p>コンテスト。決まった課題、決まった期間で正確さなどを競う</p>\n<p>社会人でも参加できる長い開催期間</p>\n<p>関数プログラミング限定コンテスト</p>\n<p>開催期間１０日間、参加人数が少ない。</p>\n<p>オンラインジャッジはいつでも使える。<br>\n難易度の幅は広い</p>\n<p>ProjectEulerの問題採点もしてくれる</p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>atcoder.jp\n      </h4><p>他の人の回答を見て勉強できる</p>\n<p>初心者用の問題が用意されている</p>\n<h1>\n        <span id=\"1-7\" class=\"fragment\"></span>\n        <a href=\"#1-7\"><i class=\"fa fa-link\"></i></a>とりあえず使える sbt\n      </h1><p><b><a href=\"/kuchitama\" title=\"kuchitama\" target=\"_blank\">@kuchitama</a></b> さん</p>\n<p><a href=\"http://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish\" title=\"http://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish\" target=\"_blank\">http://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish</a></p>\n<h2>\n        <span id=\"2-21\" class=\"fragment\"></span>\n        <a href=\"#2-21\"><i class=\"fa fa-link\"></i></a>sbt\n      </h2>\n<ul>\n<li>Simple (???)\n\n<ul>\n<li>本家でもSimple消えた</li>\n</ul></li>\n<li>Scala Build Tool </li>\n</ul>\n<h2>\n        <span id=\"2-22\" class=\"fragment\"></span>\n        <a href=\"#2-22\"><i class=\"fa fa-link\"></i></a>0.13.5\n      </h2><p>から ver1 に向けて準備段階</p>\n<h2>\n        <span id=\"2-23\" class=\"fragment\"></span>\n        <a href=\"#2-23\"><i class=\"fa fa-link\"></i></a>.sbt or .scala\n      </h2>\n<ul>\n<li>基本は .sbt に。</li>\n<li>複雑な処理は .scala に\n\n<ul>\n<li>再利用できそうなら plugin</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-24\" class=\"fragment\"></span>\n        <a href=\"#2-24\"><i class=\"fa fa-link\"></i></a>Typesafe Activator\n      </h2>\n<ul>\n<li>sbt-np plugin いらず</li>\n<li>scala,java,playのひな形生成</li>\n<li>play2,3 では標準</li>\n</ul>\n<h2>\n        <span id=\"2-25\" class=\"fragment\"></span>\n        <a href=\"#2-25\"><i class=\"fa fa-link\"></i></a>デモ\n      </h2>\n<ul>\n<li><p><code>activator new</code></p></li>\n<li><p><code>activator ui</code> : ウェブ画面で</p></li>\n</ul>\n<h2>\n        <span id=\"2-26\" class=\"fragment\"></span>\n        <a href=\"#2-26\"><i class=\"fa fa-link\"></i></a>基本の設定\n      </h2>\n<ul>\n<li>(key)(method)(setting[s])</li>\n<li>method:\n\n<ul>\n<li>:= キーに対して settings を更新</li>\n<li>+= キーに Settingを追加</li>\n<li>など</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-27\" class=\"fragment\"></span>\n        <a href=\"#2-27\"><i class=\"fa fa-link\"></i></a>依存ライブラリの取得\n      </h2>\n<ul>\n<li>% : Scala のバージョンを指定して依存性を解決\n\n<ul>\n<li>Javaのライブラリを使いたいときはこっち</li>\n<li>groupid % artifactid % revision</li>\n</ul></li>\n<li>%% : Scalaのバージョンを自動的に追加して依存性\n\n<ul>\n<li>groupid %% artifactid %% revision</li>\n</ul></li>\n<li>Configuration\n\n<ul>\n<li>使う時だけ依存性を解決させる</li>\n<li>groupid %% artifactid %% revision % Configuration</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-28\" class=\"fragment\"></span>\n        <a href=\"#2-28\"><i class=\"fa fa-link\"></i></a>まとめ\n      </h2>\n<ul>\n<li>activator で簡単プロジェクト作成</li>\n<li>依存ライブラリの取得は %, %% </li>\n<li>基本のsbtタスクは覚えやすい</li>\n</ul>\n",
        "stock_users": [
            "MAKOTO_MOBY",
            "kasumani",
            "Kuchitama"
        ]
    },
    {
        "id": 134838,
        "uuid": "e97f8686e3e1af388f6d",
        "user": {
            "id": 5441,
            "url_name": "kawachi",
            "profile_image_url": "https://secure.gravatar.com/avatar/35ea8f83cd8d191f834c69a5481613e9?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "Playframework の I18N で 1st, 2nd, 3rd, 4th, ...",
        "created_at": "2014-09-17 12:39:18 +0900",
        "updated_at": "2014-09-17 12:40:40 +0900",
        "created_at_in_words": "6日",
        "updated_at_in_words": "6日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/kawachi/items/e97f8686e3e1af388f6d",
        "created_at_as_seconds": 1410925158,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n`conf/messages` を書くときに、引数が 1 なら 1st, 2 なら 2nd, 3 なら 3rd, 4 なら 4th を出したい。\n\n### 何もしなかった例\n\n````\nranking={0}th\n````\n\nこれでは 1th, 2th, 3th, 4th, になる。\n\n### 解決法\n\nPlay の I18N は [`java.text.MessageFormat`](http://docs.oracle.com/javase/jp/6/api/java/text/MessageFormat.html) を内部で使っているので、choice パターンを使うことができる。\n\n````\nranking={0,choice,1#1st|2#2nd|3#3rd|3<{0,number,integer}th}\n````\n\nこれで 1st, 2nd, 3rd, 4th, 5th, ... となる。\n\nパターンの解釈\n\n* `{` パターン開始\n* `0,` 最初の引数を対象にする\n* `choice,` 次の選択肢から選ぶ\n* `1#1st` 引数が 1 なら 1st\n* `|2#2nd` または引数が 2 なら 2nd\n* `|3#3rd` または引数が 3 なら 3rd\n* `|3<{0,number,integer}th` または引数が3より大きいなら、最初の引数を整数としてフォーマットして th をつけたもの\n* `}` パターン終了\n\nどのパターンにも当てはまらない場合にどうなるか気になる。\n`choice` を指定した場合にはフォーマッタとして [`java.text.ChoiceFormat`](http://dodododo.jp/java/javase_6_docs_ja/api/java/text/ChoiceFormat.html) が使われる。 ChoiceFormat には次のように書かれているので、きっとこれと同じ挙動だろう。\n\n> 一致するものがない場合、数値 (X) が小さすぎるのか大きすぎるのかによって、最初または最後のインデックスが使用されます。\n\n上で挙げたパターンに対して 0 を引数に与えると、最初のパターンより小さいので 1st が返される。\n\n### 上記解決法がダメな場合\n\nさて、既にお気づきだと思うが、20th までは大丈夫なものの 21st が望み通りに出せない。22nd, 23rd しかり。全パターンを書き出すことは不可能（無限）。\n\n与えられる数の上限が決まっている場合や、ある程度大きい数の場合には後置文字列が間違ってても気にしない場合には使える。\n\nもっと素敵な解決法はきっと誰かがコメントに書いてくれるだろう。\n（すみません。書いてください。おねがいします。）\n",
        "body": "<p><code>conf/messages</code> を書くときに、引数が 1 なら 1st, 2 なら 2nd, 3 なら 3rd, 4 なら 4th を出したい。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>何もしなかった例\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ranking={0}th\n</pre></div></div><p>これでは 1th, 2th, 3th, 4th, になる。</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>解決法\n      </h3><p>Play の I18N は <a href=\"http://docs.oracle.com/javase/jp/6/api/java/text/MessageFormat.html\" title=\"\" target=\"_blank\"><code>java.text.MessageFormat</code></a> を内部で使っているので、choice パターンを使うことができる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ranking={0,choice,1#1st|2#2nd|3#3rd|3&lt;{0,number,integer}th}\n</pre></div></div><p>これで 1st, 2nd, 3rd, 4th, 5th, ... となる。</p>\n<p>パターンの解釈</p>\n\n<ul>\n<li><code>{</code> パターン開始</li>\n<li><code>0,</code> 最初の引数を対象にする</li>\n<li><code>choice,</code> 次の選択肢から選ぶ</li>\n<li><code>1#1st</code> 引数が 1 なら 1st</li>\n<li><code>|2#2nd</code> または引数が 2 なら 2nd</li>\n<li><code>|3#3rd</code> または引数が 3 なら 3rd</li>\n<li><code>|3&lt;{0,number,integer}th</code> または引数が3より大きいなら、最初の引数を整数としてフォーマットして th をつけたもの</li>\n<li><code>}</code> パターン終了</li>\n</ul>\n<p>どのパターンにも当てはまらない場合にどうなるか気になる。<br>\n<code>choice</code> を指定した場合にはフォーマッタとして <a href=\"http://dodododo.jp/java/javase_6_docs_ja/api/java/text/ChoiceFormat.html\" title=\"\" target=\"_blank\"><code>java.text.ChoiceFormat</code></a> が使われる。 ChoiceFormat には次のように書かれているので、きっとこれと同じ挙動だろう。</p>\n\n<blockquote>\n<p>一致するものがない場合、数値 (X) が小さすぎるのか大きすぎるのかによって、最初または最後のインデックスが使用されます。</p>\n</blockquote>\n<p>上で挙げたパターンに対して 0 を引数に与えると、最初のパターンより小さいので 1st が返される。</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>上記解決法がダメな場合\n      </h3><p>さて、既にお気づきだと思うが、20th までは大丈夫なものの 21st が望み通りに出せない。22nd, 23rd しかり。全パターンを書き出すことは不可能（無限）。</p>\n<p>与えられる数の上限が決まっている場合や、ある程度大きい数の場合には後置文字列が間違ってても気にしない場合には使える。</p>\n<p>もっと素敵な解決法はきっと誰かがコメントに書いてくれるだろう。<br>\n（すみません。書いてください。おねがいします。）</p>\n",
        "stock_users": [
            "mtoyoshi",
            "n_slender",
            "kasumani",
            "Reds",
            "nilfigo"
        ]
    },
    {
        "id": 134438,
        "uuid": "cd4ba1ef294880bd01b1",
        "user": {
            "id": 39824,
            "url_name": "visualskyrim",
            "profile_image_url": "https://avatars.githubusercontent.com/u/2673434?"
        },
        "title": "Akka - Logging to multiple files",
        "created_at": "2014-09-16 20:45:42 +0900",
        "updated_at": "2014-09-16 20:45:42 +0900",
        "created_at_in_words": "7日",
        "updated_at_in_words": "7日",
        "tags": [
            {
                "name": "Akka",
                "url_name": "akka",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "logback",
                "url_name": "logback",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/visualskyrim/items/cd4ba1ef294880bd01b1",
        "created_at_as_seconds": 1410867942,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nRef:\n\n[1] - [Defining 1 logback file per level](http://stackoverflow.com/a/9344385/1105455)\n[2] - [logback - manual](http://logback.qos.ch/manual/filters.html#levelFilter)\n[3] - [Akka - Log into files](http://qiita.com/visualskyrim/items/8aa73b1136180660234e)\n\nIn my last memo about how to use logback in Akka to log into file system, I showed the way to config `logback.xml`.\n\nHowever, recently I find it killing me when I use this log file for bug-shooting, because all the log, including *debug*, *info*, *warning*, *error* are all in one file. And what I am really looking for is *error*, which is really rare in the log file.\n\nSo, it seems reasonable to place logs of different level into different files. In my case, which would also cover most cases, I will place all the *info* log line into **info.log**, and all the *error* log and above to the **error.log**.\n\nSince we are place log into different files, we are going to use multiple appenders.\n\n#### To put info log one file\n\n```xml:logback.xml\n\t<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>log/info.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- Daily rollover with compression -->\n            <fileNamePattern>process-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 30 days worth of history -->\n            <maxHistory>90</maxHistory>\n        </rollingPolicy>\n        <append>true</append>\n        <!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n        <encoder>\n            <pattern>%d,%msg%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n```\n \nThe key point is in the ***filter*** element. This filter uses [LevelFilter](http://logback.qos.ch/manual/filters.html#levelFilter) to decide which level of log should be logged.\n\n\n#### To put error and all levels above to another file\n\n```xml:logback.xml\n\t<appender name=\"ERROR_FILE\" class = \"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>\n            log/error.log\n        </file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- daily rollover with compression -->\n            <fileNamePattern>error-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 1 week worth of history -->\n            <maxHistory>100</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n    </appender>\n```\n\nIn this example, we use [ThresholdFilter](http://logback.qos.ch/manual/filters.html#thresholdFilter) to select all the levels above the *error* to log file.\n\n#### Then, put two appenders together\n\nThis is the tricky part. We ganna use two ***root logger*** in the same *logback.xml*.\n\n```xml:logback.xml\n\n<configuration>\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>log/process.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- Daily rollover with compression -->\n            <fileNamePattern>process-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 30 days worth of history -->\n            <maxHistory>90</maxHistory>\n        </rollingPolicy>\n        <append>true</append>\n        <!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n        <encoder>\n            <pattern>%d,%msg%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class = \"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>\n            log/error.log\n        </file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- daily rollover with compression -->\n            <fileNamePattern>error-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 1 week worth of history -->\n            <maxHistory>100</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n    <root level=\"INFO\">\n        <appender-ref ref=\"FILE\" />\n    </root>\n</configuration>\n```\n\n***\n\n#### Finally\n\nNow, in your SomeActor.scala:\n\n```scala:SomeActor.scala\n\nclass SomeActor extends Actor with ActorLogging {\n\n  implicit val ec = context.dispatcher\n\n  def receive = {\n    case x: SomeMsg =>\n      log.info(\"will be logged into info.log\")\n      log.error(\"will be logged into error.log\")\n  }\n}\n```\n\nHope this will help you.\n",
        "body": "<p>Ref:</p>\n<p>[1] - <a href=\"http://stackoverflow.com/a/9344385/1105455\" title=\"\" target=\"_blank\">Defining 1 logback file per level</a><br>\n[2] - <a href=\"http://logback.qos.ch/manual/filters.html#levelFilter\" title=\"\" target=\"_blank\">logback - manual</a><br>\n[3] - <a href=\"http://qiita.com/visualskyrim/items/8aa73b1136180660234e\" title=\"\">Akka - Log into files</a></p>\n<p>In my last memo about how to use logback in Akka to log into file system, I showed the way to config <code>logback.xml</code>.</p>\n<p>However, recently I find it killing me when I use this log file for bug-shooting, because all the log, including <em>debug</em>, <em>info</em>, <em>warning</em>, <em>error</em> are all in one file. And what I am really looking for is <em>error</em>, which is really rare in the log file.</p>\n<p>So, it seems reasonable to place logs of different level into different files. In my case, which would also cover most cases, I will place all the <em>info</em> log line into <strong>info.log</strong>, and all the <em>error</em> log and above to the <strong>error.log</strong>.</p>\n<p>Since we are place log into different files, we are going to use multiple appenders.</p>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>To put info log one file\n      </h4><div class=\"code-frame\" data-lang=\"xml\"><div class=\"code-lang\"><span class=\"bold\">logback.xml</span></div><div class=\"highlight\"><pre>    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;FILE&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>log/info.log<span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- Daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>process-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 30 days worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>90<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;append&gt;</span>true<span class=\"nt\">&lt;/append&gt;</span>\n        <span class=\"c\">&lt;!-- encoders are assigned the type</span>\n<span class=\"c\">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%d,%msg%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>INFO<span class=\"nt\">&lt;/level&gt;</span>\n            <span class=\"nt\">&lt;onMatch&gt;</span>ACCEPT<span class=\"nt\">&lt;/onMatch&gt;</span>\n            <span class=\"nt\">&lt;onMismatch&gt;</span>DENY<span class=\"nt\">&lt;/onMismatch&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n</pre></div></div><p>The key point is in the <strong><em>filter</em></strong> element. This filter uses <a href=\"http://logback.qos.ch/manual/filters.html#levelFilter\" title=\"\" target=\"_blank\">LevelFilter</a> to decide which level of log should be logged.</p>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>To put error and all levels above to another file\n      </h4><div class=\"code-frame\" data-lang=\"xml\"><div class=\"code-lang\"><span class=\"bold\">logback.xml</span></div><div class=\"highlight\"><pre>    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ERROR_FILE&quot;</span> <span class=\"na\">class =</span> <span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>\n            log/error.log\n        <span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>error-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 1 week worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>100<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>ERROR<span class=\"nt\">&lt;/level&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n</pre></div></div><p>In this example, we use <a href=\"http://logback.qos.ch/manual/filters.html#thresholdFilter\" title=\"\" target=\"_blank\">ThresholdFilter</a> to select all the levels above the <em>error</em> to log file.</p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>Then, put two appenders together\n      </h4><p>This is the tricky part. We ganna use two <strong><em>root logger</em></strong> in the same <em>logback.xml</em>.</p>\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"code-lang\"><span class=\"bold\">logback.xml</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;configuration&gt;</span>\n    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;FILE&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>log/process.log<span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- Daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>process-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 30 days worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>90<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;append&gt;</span>true<span class=\"nt\">&lt;/append&gt;</span>\n        <span class=\"c\">&lt;!-- encoders are assigned the type</span>\n<span class=\"c\">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%d,%msg%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>INFO<span class=\"nt\">&lt;/level&gt;</span>\n            <span class=\"nt\">&lt;onMatch&gt;</span>ACCEPT<span class=\"nt\">&lt;/onMatch&gt;</span>\n            <span class=\"nt\">&lt;onMismatch&gt;</span>DENY<span class=\"nt\">&lt;/onMismatch&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n\n    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ERROR_FILE&quot;</span> <span class=\"na\">class =</span> <span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>\n            log/error.log\n        <span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>error-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 1 week worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>100<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>ERROR<span class=\"nt\">&lt;/level&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n\n    <span class=\"nt\">&lt;root</span> <span class=\"na\">level=</span><span class=\"s\">&quot;ERROR&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;appender-ref</span> <span class=\"na\">ref=</span><span class=\"s\">&quot;ERROR_FILE&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/root&gt;</span>\n    <span class=\"nt\">&lt;root</span> <span class=\"na\">level=</span><span class=\"s\">&quot;INFO&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;appender-ref</span> <span class=\"na\">ref=</span><span class=\"s\">&quot;FILE&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/root&gt;</span>\n<span class=\"nt\">&lt;/configuration&gt;</span>\n</pre></div></div>\n<hr>\n<h4>\n        <span id=\"4-4\" class=\"fragment\"></span>\n        <a href=\"#4-4\"><i class=\"fa fa-link\"></i></a>Finally\n      </h4><p>Now, in your SomeActor.scala:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">SomeActor.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">SomeActor</span> <span class=\"k\">extends</span> <span class=\"nc\">Actor</span> <span class=\"k\">with</span> <span class=\"nc\">ActorLogging</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">ec</span> <span class=\"k\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">SomeMsg</span> <span class=\"o\">=&gt;</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">&quot;will be logged into info.log&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">(</span><span class=\"s\">&quot;will be logged into error.log&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>Hope this will help you.</p>\n",
        "stock_users": [
            "kasumani",
            "poad1010",
            "morozumi_h"
        ]
    },
    {
        "id": 133621,
        "uuid": "a553519c3de1dec4da41",
        "user": {
            "id": 94,
            "url_name": "takc923",
            "profile_image_url": "https://secure.gravatar.com/avatar/9562160b36b5d453e8aa45f6d28c84df"
        },
        "title": "classのコンストラクタの最初の引数グループがimplicitだった時の挙動",
        "created_at": "2014-09-15 15:55:28 +0900",
        "updated_at": "2014-09-15 15:55:28 +0900",
        "created_at_in_words": "8日",
        "updated_at_in_words": "8日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 2,
        "url": "http://qiita.com/takc923/items/a553519c3de1dec4da41",
        "created_at_as_seconds": 1410764128,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# 概要\nclassのコンストラクタ関数の最初の引数グループをimplicitなアレにしたらどうなるんだろう、と思ったので遊んでみた。\n\n# case class\n\n## 試したログ\n```\n$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> case class Hoge(implicit a:String)\ndefined class Hoge\n\nscala> Hoge\nres0: Hoge.type = Hoge     ### `Hoge`だとコンストラクタではなくオブジェクトとして認識される\n\nscala> Hoge(\"str\")         ### 直接指定してみる\n<console>:10: error: too many arguments for method apply: ()(implicit a: String)Hoge in object Hoge\n              Hoge(\"str\")                         ### ↑コンストラクタのシグネチャがapply()(implicit a: String)になってる\n                  ^\n\nscala> Hoge()(\"str\")       ### 試しにそのとおりにやってみる。\nres2: Hoge = Hoge(str)     ### 動いた\n\nscala> implicit val a = \"implicit string\"    ### implicit parameterを定義してやってみる\na: String = implicit string\n\nscala> Hoge()\nres3: Hoge = Hoge(implicit string)    ### 動いた\n```\n\n## 結果\ncase classのコンストラクタの最初の引数グループをimplicitにすると、勝手にcurry化されて2つ目の引数グループになる。\nこういう場合、pattern matchってどうなるんだろう？と思って調べてみたら、implicitとか関係なくcurry化されたcase classは自動で`unapply`を実装して**くれない**らしい（＝そのままではpattern matchで使えない）\n\n- http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala\n\n自前でunapplyを実装すれば使える模様。\n\n# caseじゃないclass\n## 試したログ\n```\n$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> class Hoge(implicit val a:String)\ndefined class Hoge\n\nscala> new Hoge\n<console>:9: error: could not find implicit value for parameter a: String\n              new Hoge\n              ^\n### implicit定義してないので当たり前\n\nscala> new Hoge(\"str\")    ### 直接指定してみる\n<console>:9: error: too many arguments for constructor Hoge: ()(implicit a: String)Hoge\n              new Hoge(\"str\")                        ↑case classと同じく勝手にcurry化されてる\n              ^\n\nscala> new Hoge()(\"str\")     ### 2つめの引数グループに直接指定。\nres2: Hoge = Hoge@194527c6   ### 動いた。\n\nscala> res2.a\nres3: String = str    ### ちゃんと中身もある\n\nscala> implicit val a = \"implicit string\"   ### implicit定義して試してみる\na: String = implicit string\n\nscala> new Hoge()\nres4: Hoge = Hoge@6963eb77    ### 普通に動く\n\nscala> new Hoge\nres5: Hoge = Hoge@78924119    ### もはや1つめのカッコも省略できる\n```\n\n## 結果\ncase classと同じ。\n\n# 感想\n勝手にcurry化されるのはびびった。ただ、こういうのは豆知識として知っておくのはいいけど、それを気にしないようなコードを書くように心がけよう。\nあとimplicit云々関係なくコンストラクタがcurry化されてるとcase classでもパターンマッチが（自前でunapplyを書かない限り）使えず、case classの旨味がかなり減っちゃう。仮に自前でunapply書いたとしても、パターンマッチの書き方が混乱しそう。\n\nあとcurry化した時の引数のカッコが分かれるやつを、「引数グループ」って表現したけど、それ専用の用語ってあるのかな。\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h1><p>classのコンストラクタ関数の最初の引数グループをimplicitなアレにしたらどうなるんだろう、と思ったので遊んでみた。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>case class\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>試したログ\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala&gt; case class Hoge(implicit a:String)\ndefined class Hoge\n\nscala&gt; Hoge\nres0: Hoge.type = Hoge     ### `Hoge`だとコンストラクタではなくオブジェクトとして認識される\n\nscala&gt; Hoge(&quot;str&quot;)         ### 直接指定してみる\n&lt;console&gt;:10: error: too many arguments for method apply: ()(implicit a: String)Hoge in object Hoge\n              Hoge(&quot;str&quot;)                         ### ↑コンストラクタのシグネチャがapply()(implicit a: String)になってる\n                  ^\n\nscala&gt; Hoge()(&quot;str&quot;)       ### 試しにそのとおりにやってみる。\nres2: Hoge = Hoge(str)     ### 動いた\n\nscala&gt; implicit val a = &quot;implicit string&quot;    ### implicit parameterを定義してやってみる\na: String = implicit string\n\nscala&gt; Hoge()\nres3: Hoge = Hoge(implicit string)    ### 動いた\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>結果\n      </h2><p>case classのコンストラクタの最初の引数グループをimplicitにすると、勝手にcurry化されて2つ目の引数グループになる。<br>\nこういう場合、pattern matchってどうなるんだろう？と思って調べてみたら、implicitとか関係なくcurry化されたcase classは自動で<code>unapply</code>を実装して<strong>くれない</strong>らしい（＝そのままではpattern matchで使えない）</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala\" title=\"http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala\" target=\"_blank\">http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala</a></li>\n</ul>\n<p>自前でunapplyを実装すれば使える模様。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>caseじゃないclass\n      </h1><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>試したログ\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala&gt; class Hoge(implicit val a:String)\ndefined class Hoge\n\nscala&gt; new Hoge\n&lt;console&gt;:9: error: could not find implicit value for parameter a: String\n              new Hoge\n              ^\n### implicit定義してないので当たり前\n\nscala&gt; new Hoge(&quot;str&quot;)    ### 直接指定してみる\n&lt;console&gt;:9: error: too many arguments for constructor Hoge: ()(implicit a: String)Hoge\n              new Hoge(&quot;str&quot;)                        ↑case classと同じく勝手にcurry化されてる\n              ^\n\nscala&gt; new Hoge()(&quot;str&quot;)     ### 2つめの引数グループに直接指定。\nres2: Hoge = Hoge@194527c6   ### 動いた。\n\nscala&gt; res2.a\nres3: String = str    ### ちゃんと中身もある\n\nscala&gt; implicit val a = &quot;implicit string&quot;   ### implicit定義して試してみる\na: String = implicit string\n\nscala&gt; new Hoge()\nres4: Hoge = Hoge@6963eb77    ### 普通に動く\n\nscala&gt; new Hoge\nres5: Hoge = Hoge@78924119    ### もはや1つめのカッコも省略できる\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>結果\n      </h2><p>case classと同じ。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>感想\n      </h1><p>勝手にcurry化されるのはびびった。ただ、こういうのは豆知識として知っておくのはいいけど、それを気にしないようなコードを書くように心がけよう。<br>\nあとimplicit云々関係なくコンストラクタがcurry化されてるとcase classでもパターンマッチが（自前でunapplyを書かない限り）使えず、case classの旨味がかなり減っちゃう。仮に自前でunapply書いたとしても、パターンマッチの書き方が混乱しそう。</p>\n<p>あとcurry化した時の引数のカッコが分かれるやつを、「引数グループ」って表現したけど、それ専用の用語ってあるのかな。</p>\n",
        "stock_users": [
            "Reds"
        ]
    },
    {
        "id": 132365,
        "uuid": "2fc1b10f7b6b22a0d0e2",
        "user": {
            "id": 7262,
            "url_name": "NAKANO_Akihito",
            "profile_image_url": "https://pbs.twimg.com/profile_images/3047552777/d02dd7cbcc51c15d91bd4a9e5be15354_normal.jpeg"
        },
        "title": "Scala製コマンドラインツールをIntelliJ IDEAで書いて公開する",
        "created_at": "2014-09-12 16:47:13 +0900",
        "updated_at": "2014-09-12 16:59:21 +0900",
        "created_at_in_words": "11日",
        "updated_at_in_words": "11日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "giter8",
                "url_name": "giter8",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Conscript",
                "url_name": "conscript",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 7,
        "comment_count": 0,
        "url": "http://qiita.com/NAKANO_Akihito/items/2fc1b10f7b6b22a0d0e2",
        "created_at_as_seconds": 1410508033,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n- sbt を使ったプロジェクトを\n- IntelliJ IDEA で書いて\n- Conscript でインストールできるように公開する\n- リポジトリには Github Pages を使う\n\n### ひな形を作成する\n\n#### giter8\n\n[https://github.com/n8han/giter8](https://github.com/n8han/giter8)\n\ngithub 上に公開されているテンプレートをもとにプロジェクトのひな形を作るツール。\n\n```\n$ g8 n8han/conscript\n```\n- Conscript を使ったアプリケーション用のひな形が生成される\n- アプリケーション名、組織名等を対話形式で入力する\n- 組織名は、ドメインを持っていない場合は github の url を使うのが一般的らしい (e.g. com.github.ackintosh)\n\n#### 生成されるひな形\n\n```\n.\n├── build.sbt\n├── project\n│   └── plugins.sbt\n└── src\n    └── main\n        ├── conscript\n        │   └── app\n        │       └── launchconfig\n        └── scala\n            └── App.scala\n```\n\n\n### intelliJ IDEA用のプロジェクトファイルを作成\n\nsbt を使ったプロジェクトを intelliJ IDEA にインポートするために、[mpeltonen/sbt-idea](https://github.com/mpeltonen/sbt-idea) を使う。\n\n- `./project/plugins.sbt` に追記\n\n```./project/plugins.sbt\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0\")\n```\n\n- プロジェクトファイルを作成\n\n```\n$ sbt gen-idea\n```\n- [File] -> [Import Project...] でインポートする\n\n### 実装・テストする\n\n- `src/main/scala/App.scala`\n\nクラス名等を変えた場合は `src/main/conscript/app/launchconfig` の name と、ディレクトリ名(app)も変更する。\n\n\n- sbt を対話モードで起動してコンパイル等を行う\n\n```\n$ stb\n> \n```\n\n- コンパイル\n\n```\n> compile\n[success] Total time: 0 s, completed 2014/09/11 23:15:34\n```\n\n- 実行\n\n```\n> run\n[info] Running com.github.ackintosh.App\n```\n\n- テストコードは `src/test/scala/` に書く\n- テスト実行\n\n```\n> test\n[info] Compiling 1 Scala source to /Users/Ack/Develop/scala/[アプリケーション名]/target/scala-2.11/test-classes...\n[info] AppTest:\n[info] Run completed in 511 milliseconds.\n...\n[info] All tests passed.\n```\n\n### リポジトリに Github Pages を使う\n\n#### Github Pagesを作る\n\n- リポジトリの [Settings] -> [Github Pages] で作れる\n- 表示確認\n\n```\nhttp://[ユーザ名].github.io/[リポジトリ名]/\n```\n\n#### ビルド設定\n\n- ビルドしたファイルの出力先を設定する\n\n```\n$ git checkout gh-pages\n$ pwd\n[Github Pages を作成したディレクトリ]\n```\n\n```build.sbt\npublishTo := Some(Resolver.file(\"アプリケーション名\", file(\"Github Pages を作成したディレクトリ\"))(Patterns(true, Resolver.mavenStyleBasePattern)))\n```\n\n#### ビルド\n\n```\n$ sbt publish\n```\n\n- publishTo で指定したディレクトリに下記のように出力される\n\n```\n.\n└── com\n   └── github\n       └── [Githubユーザー名]\n           └── [アプリケーション名]_2.11\n               └── 0.1.0\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.jar\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.pom\n                   ├── [アプリケーション名]_2.11-0.1.0.pom.md5\n                   └── [アプリケーション名]_2.11-0.1.0.pom.sha1\n```\n\n#### Github Pages に公開\n\n- push するだけ\n\n```\n$ git add .\n$ git commit -m \"release 0.1.0\"\n$ git push origin gh-pages\n```\n\n### Conscript用設定\n\n```src/main/conscript/[アプリケーション名]/launchconfig\n[repositories]\n  gh-pages:http://ackintosh.github.io/[Github Pages を作成したリポジトリ名]/\n```\n\nGithub に push しておく。\n\nこれで Github Pages にアップしたアプリケーションを Conscript を使ってインストールできるようになった。\n\n### インストール確認\n\n```\n$ cs [Githubユーザー名]/[アプリケーション名]\nConscripted [Githubユーザー名]/[アプリケーション名] to /Users/xxx/bin/[アプリケーション名]\n```\n\n### Link\n\n- [Scala 開発環境構築手順 - Gists - Github](https://gist.github.com/kmizu/1876800)\n\nScala環境構築\n\n- [n8han/giter8](https://github.com/n8han/giter8)\n\na command line tool to apply templates defined on github\n\n- [n8han/conscript](https://github.com/n8han/conscript)\n\nThis is a tool for installing and updating Scala software programs.\n\n- [mpeltonen/sbt-idea](https://github.com/mpeltonen/sbt-idea)\n\nA simple-build-tool (sbt) plugin/processor for creating IntelliJ IDEA project files\n\n",
        "body": "<ul>\n<li>sbt を使ったプロジェクトを</li>\n<li>IntelliJ IDEA で書いて</li>\n<li>Conscript でインストールできるように公開する</li>\n<li>リポジトリには Github Pages を使う</li>\n</ul>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>ひな形を作成する\n      </h3><h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>giter8\n      </h4><p><a href=\"https://github.com/n8han/giter8\" title=\"\" target=\"_blank\">https://github.com/n8han/giter8</a></p>\n<p>github 上に公開されているテンプレートをもとにプロジェクトのひな形を作るツール。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ g8 n8han/conscript\n</pre></div></div>\n<ul>\n<li>Conscript を使ったアプリケーション用のひな形が生成される</li>\n<li>アプリケーション名、組織名等を対話形式で入力する</li>\n<li>組織名は、ドメインを持っていない場合は github の url を使うのが一般的らしい (e.g. com.github.ackintosh)</li>\n</ul>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>生成されるひな形\n      </h4><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>.\n├── build.sbt\n├── project\n│   └── plugins.sbt\n└── src\n    └── main\n        ├── conscript\n        │   └── app\n        │       └── launchconfig\n        └── scala\n            └── App.scala\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>intelliJ IDEA用のプロジェクトファイルを作成\n      </h3><p>sbt を使ったプロジェクトを intelliJ IDEA にインポートするために、<a href=\"https://github.com/mpeltonen/sbt-idea\" title=\"\" target=\"_blank\">mpeltonen/sbt-idea</a> を使う。</p>\n\n<ul>\n<li><code>./project/plugins.sbt</code> に追記</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">./project/plugins.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">addSbtPlugin</span><span class=\"o\">(</span><span class=\"s\">&quot;com.github.mpeltonen&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;sbt-idea&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.6.0&quot;</span><span class=\"o\">)</span>\n</pre></div></div>\n<ul>\n<li>プロジェクトファイルを作成</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sbt gen-idea\n</pre></div></div>\n<ul>\n<li>[File] -&gt; [Import Project...] でインポートする</li>\n</ul>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>実装・テストする\n      </h3>\n<ul>\n<li><code>src/main/scala/App.scala</code></li>\n</ul>\n<p>クラス名等を変えた場合は <code>src/main/conscript/app/launchconfig</code> の name と、ディレクトリ名(app)も変更する。</p>\n\n<ul>\n<li>sbt を対話モードで起動してコンパイル等を行う</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ stb\n&gt; \n</pre></div></div>\n<ul>\n<li>コンパイル</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; compile\n[success] Total time: 0 s, completed 2014/09/11 23:15:34\n</pre></div></div>\n<ul>\n<li>実行</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; run\n[info] Running com.github.ackintosh.App\n</pre></div></div>\n<ul>\n<li>テストコードは <code>src/test/scala/</code> に書く</li>\n<li>テスト実行</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; test\n[info] Compiling 1 Scala source to /Users/Ack/Develop/scala/[アプリケーション名]/target/scala-2.11/test-classes...\n[info] AppTest:\n[info] Run completed in 511 milliseconds.\n...\n[info] All tests passed.\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>リポジトリに Github Pages を使う\n      </h3><h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>Github Pagesを作る\n      </h4>\n<ul>\n<li>リポジトリの [Settings] -&gt; [Github Pages] で作れる</li>\n<li>表示確認</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>http://[ユーザ名].github.io/[リポジトリ名]/\n</pre></div></div><h4>\n        <span id=\"4-4\" class=\"fragment\"></span>\n        <a href=\"#4-4\"><i class=\"fa fa-link\"></i></a>ビルド設定\n      </h4>\n<ul>\n<li>ビルドしたファイルの出力先を設定する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ git checkout gh-pages\n$ pwd\n[Github Pages を作成したディレクトリ]\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">publishTo</span> <span class=\"o\">:=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s\">&quot;アプリケーション名&quot;</span><span class=\"o\">,</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s\">&quot;Github Pages を作成したディレクトリ&quot;</span><span class=\"o\">))(</span><span class=\"nc\">Patterns</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">mavenStyleBasePattern</span><span class=\"o\">)))</span>\n</pre></div></div><h4>\n        <span id=\"4-5\" class=\"fragment\"></span>\n        <a href=\"#4-5\"><i class=\"fa fa-link\"></i></a>ビルド\n      </h4><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sbt publish\n</pre></div></div>\n<ul>\n<li>publishTo で指定したディレクトリに下記のように出力される</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>.\n└── com\n   └── github\n       └── [Githubユーザー名]\n           └── [アプリケーション名]_2.11\n               └── 0.1.0\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.jar\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.pom\n                   ├── [アプリケーション名]_2.11-0.1.0.pom.md5\n                   └── [アプリケーション名]_2.11-0.1.0.pom.sha1\n</pre></div></div><h4>\n        <span id=\"4-6\" class=\"fragment\"></span>\n        <a href=\"#4-6\"><i class=\"fa fa-link\"></i></a>Github Pages に公開\n      </h4>\n<ul>\n<li>push するだけ</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ git add .\n$ git commit -m &quot;release 0.1.0&quot;\n$ git push origin gh-pages\n</pre></div></div><h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>Conscript用設定\n      </h3><div class=\"code-frame\" data-lang=\"src/main/conscript/[アプリケーション名]/launchconfig\"><div class=\"highlight\"><pre>[repositories]\n  gh-pages:http://ackintosh.github.io/[Github Pages を作成したリポジトリ名]/\n</pre></div></div><p>Github に push しておく。</p>\n<p>これで Github Pages にアップしたアプリケーションを Conscript を使ってインストールできるようになった。</p>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>インストール確認\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ cs [Githubユーザー名]/[アプリケーション名]\nConscripted [Githubユーザー名]/[アプリケーション名] to /Users/xxx/bin/[アプリケーション名]\n</pre></div></div><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>Link\n      </h3>\n<ul>\n<li><a href=\"https://gist.github.com/kmizu/1876800\" title=\"\" target=\"_blank\">Scala 開発環境構築手順 - Gists - Github</a></li>\n</ul>\n<p>Scala環境構築</p>\n\n<ul>\n<li><a href=\"https://github.com/n8han/giter8\" title=\"\" target=\"_blank\">n8han/giter8</a></li>\n</ul>\n<p>a command line tool to apply templates defined on github</p>\n\n<ul>\n<li><a href=\"https://github.com/n8han/conscript\" title=\"\" target=\"_blank\">n8han/conscript</a></li>\n</ul>\n<p>This is a tool for installing and updating Scala software programs.</p>\n\n<ul>\n<li><a href=\"https://github.com/mpeltonen/sbt-idea\" title=\"\" target=\"_blank\">mpeltonen/sbt-idea</a></li>\n</ul>\n<p>A simple-build-tool (sbt) plugin/processor for creating IntelliJ IDEA project files</p>\n",
        "stock_users": [
            "_marony",
            "kasumani",
            "mmizutani",
            "Reds",
            "MasahiroSakoda",
            "kawachi",
            "poad1010"
        ]
    },
    {
        "id": 132322,
        "uuid": "a2b607cdfedd21974687",
        "user": {
            "id": 12647,
            "url_name": "takezoux2@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/5e1313c5d1166060f2e2ca677b4e40da?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "[Scala]implicit parameterを使ったDI",
        "created_at": "2014-09-12 15:35:35 +0900",
        "updated_at": "2014-09-12 15:35:35 +0900",
        "created_at_in_words": "11日",
        "updated_at_in_words": "11日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "DI",
                "url_name": "di",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/takezoux2@github/items/a2b607cdfedd21974687",
        "created_at_as_seconds": 1410503735,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "ScalaでDIを行う方法はいろいろありますが、最近お気に入りのDIのやりかたの紹介です。\n\nimplicit defと、implicit parameterを組み合わせて必要なコンポーネントの受け渡しをコンパイラーに任せてしまいます。\n\n利点\n\n* Scalaの標準機能のみで簡単に実装できてライブラリ不要\n* 全てコードで記述できるので、XML地獄や新しいDSLを覚える必要がない\n* 使いたいコンポーネントをコンストラクタに追加するだけで使えて楽\n\n欠点\n\n* コンストラクターDIしか出来ない\n\n## 手順\n\n1. インジェクションしたいコンポーネントをimplicit defで列挙したクラス(トレイト)を作る\n1. コンポーネントを使うクラスで、使いたいコンポーネントをimplicit parameterで定義\n1. コンポーネントを使うクラスを生成する際にコンポーネントを列挙したクラスのフィールドをimportする\n\nのが、実装の大まかな流れになります。\n\n## サンプルコード\n\nでは、早速サンプルコードを。\n\n### 基本部分\n\n\n```scala:Repositories.scala\ntrait Repositories{\n  // DIしたいコンポーネントをimplicit defで列挙\n  implicit def userRepo : UserRepository\n  implicit def mailService : MailService\n}\n```\n\n```scala:UserRepository.scala\n\n// DIで渡したいコンポーネントの定義\ntrait UserRepository{\n  def getUser(id : Long) : Option[UserDAO]\n}\n\ncase class UserDAO(id : Long){\n  //...implements\n}\n```\n\n```scala:UserFacade.scala\n\n// 使用したいコンポーネントを、コンストラクタのimplicit parameterに指定する\nclass UserFacade()(implicit userRepo : UserRepository){\n\n  def changeNickname(id : Long,nickname : String) : Optino[UserDAO]= {\n    userRepo.getUser(id).map(_.setAndSaveNickname(nickname))\n  }\n} \n\n\n```\n\n```scala:Factory.scala\n\nclass Factory(repos : Repositories){\n  \n  // コンポーネントを列挙したクラスのフィールドをimportしてやる\n  import repos._\n\n  lazy val userFacade = new UserFacade() // 勝手に必要なコンポーネントが渡される\n}\n\n\n```\n\n### 使い方\n\n```scala:Production.scala\nobject RepositoriesForProduction extends Repositories{\n  // lazy valにしておくと、不要なコンポーネントが初期化されない\n  lazy val userRepo = new TrueImplementedUserRepository()\n  lazy val mailService = new TrueImplmentedMailService()\n}\nval factory = new Factory(RepositoriesForProduction )\nval userFacade = factory.userFacade\nuserFacade.changeNickname(1,\"クドリャフカ\")\n```\n\n\n```scala:Test.scala\n\nobject RepositoriesForTest extends Repositories{\n  // テスト用の場合は、mock化したコンポーネント\n  lazy val userRepo = mock[UserRepository]\n  lazy val mailService = mock[MailService]\n}\n// 初期化の方法は変わらず\nval factory = new Factory(RepositoriesForTest)\nval userFacade = factory.userFacade\nuserFacade.changeNickname(1,\"クドリャフカ\")\n```\n\n\nといった感じになります。\n\n## 補足\n\nあと、先ほど利点で挙げた「使いたいコンポーネントをコンストラクタに書くだけでいい」という事を補足しておきます。\n例えば、「パスワードリセットして通知メールを送る」機能を追加するとします。\nその場合、UserFacade.scalaだけを次のように修正します。\n\n```scala:UserFacade.scala\n\n// メール機能を使いたいのでMailServiceを追加\nclass UserFacade()(implicit userRepo : UserRepository,mailService : MailService){\n\n  def changeNickname(id : Long,nickname : String) : Optino[UserDAO]= {\n    userRepo.getUser(id).map(_.setAndSaveNickname(nickname))\n  }\n  \n  def resetPassword() = {\n    userRepo.getUser(id).foreach( user => {\n      val newPassword = user.resetPassword() // resetPassword()は実装済みとする\n      emailService.sendTo(user,\"パスワードリセット\",s\"新しいパスワードは${newPassword}です\")\n    })\n  }\n} \n\n\n```\n\nこれだけで初期化部分の修正なしに、UserFacadeでEmailServiceを使えるようになります。\n",
        "body": "<p>ScalaでDIを行う方法はいろいろありますが、最近お気に入りのDIのやりかたの紹介です。</p>\n<p>implicit defと、implicit parameterを組み合わせて必要なコンポーネントの受け渡しをコンパイラーに任せてしまいます。</p>\n<p>利点</p>\n\n<ul>\n<li>Scalaの標準機能のみで簡単に実装できてライブラリ不要</li>\n<li>全てコードで記述できるので、XML地獄や新しいDSLを覚える必要がない</li>\n<li>使いたいコンポーネントをコンストラクタに追加するだけで使えて楽</li>\n</ul>\n<p>欠点</p>\n\n<ul>\n<li>コンストラクターDIしか出来ない</li>\n</ul>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>手順\n      </h2>\n<ol>\n<li>インジェクションしたいコンポーネントをimplicit defで列挙したクラス(トレイト)を作る</li>\n<li>コンポーネントを使うクラスで、使いたいコンポーネントをimplicit parameterで定義</li>\n<li>コンポーネントを使うクラスを生成する際にコンポーネントを列挙したクラスのフィールドをimportする</li>\n</ol>\n<p>のが、実装の大まかな流れになります。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>サンプルコード\n      </h2><p>では、早速サンプルコードを。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>基本部分\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Repositories.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Repositories</span><span class=\"o\">{</span>\n  <span class=\"c1\">// DIしたいコンポーネントをimplicit defで列挙</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">userRepo</span> <span class=\"k\">:</span> <span class=\"kt\">UserRepository</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">mailService</span> <span class=\"k\">:</span> <span class=\"kt\">MailService</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserRepository.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">// DIで渡したいコンポーネントの定義</span>\n<span class=\"k\">trait</span> <span class=\"nc\">UserRepository</span><span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">UserDAO</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">UserDAO</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">){</span>\n  <span class=\"c1\">//...implements</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserFacade.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">// 使用したいコンポーネントを、コンストラクタのimplicit parameterに指定する</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserFacade</span><span class=\"o\">()(</span><span class=\"k\">implicit</span> <span class=\"n\">userRepo</span> <span class=\"k\">:</span> <span class=\"kt\">UserRepository</span><span class=\"o\">){</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span><span class=\"n\">nickname</span> <span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Optino</span><span class=\"o\">[</span><span class=\"kt\">UserDAO</span><span class=\"o\">]</span><span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">userRepo</span><span class=\"o\">.</span><span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">setAndSaveNickname</span><span class=\"o\">(</span><span class=\"n\">nickname</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> \n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Factory.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Factory</span><span class=\"o\">(</span><span class=\"n\">repos</span> <span class=\"k\">:</span> <span class=\"kt\">Repositories</span><span class=\"o\">){</span>\n\n  <span class=\"c1\">// コンポーネントを列挙したクラスのフィールドをimportしてやる</span>\n  <span class=\"k\">import</span> <span class=\"nn\">repos._</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">userFacade</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">UserFacade</span><span class=\"o\">()</span> <span class=\"c1\">// 勝手に必要なコンポーネントが渡される</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>使い方\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Production.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">RepositoriesForProduction</span> <span class=\"k\">extends</span> <span class=\"nc\">Repositories</span><span class=\"o\">{</span>\n  <span class=\"c1\">// lazy valにしておくと、不要なコンポーネントが初期化されない</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">userRepo</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">TrueImplementedUserRepository</span><span class=\"o\">()</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">mailService</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">TrueImplmentedMailService</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n<span class=\"k\">val</span> <span class=\"n\">factory</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Factory</span><span class=\"o\">(</span><span class=\"nc\">RepositoriesForProduction</span> <span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">userFacade</span> <span class=\"k\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">userFacade</span>\n<span class=\"n\">userFacade</span><span class=\"o\">.</span><span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s\">&quot;クドリャフカ&quot;</span><span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Test.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">RepositoriesForTest</span> <span class=\"k\">extends</span> <span class=\"nc\">Repositories</span><span class=\"o\">{</span>\n  <span class=\"c1\">// テスト用の場合は、mock化したコンポーネント</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">userRepo</span> <span class=\"k\">=</span> <span class=\"n\">mock</span><span class=\"o\">[</span><span class=\"kt\">UserRepository</span><span class=\"o\">]</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">mailService</span> <span class=\"k\">=</span> <span class=\"n\">mock</span><span class=\"o\">[</span><span class=\"kt\">MailService</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// 初期化の方法は変わらず</span>\n<span class=\"k\">val</span> <span class=\"n\">factory</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Factory</span><span class=\"o\">(</span><span class=\"nc\">RepositoriesForTest</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">userFacade</span> <span class=\"k\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">userFacade</span>\n<span class=\"n\">userFacade</span><span class=\"o\">.</span><span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s\">&quot;クドリャフカ&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>といった感じになります。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>補足\n      </h2><p>あと、先ほど利点で挙げた「使いたいコンポーネントをコンストラクタに書くだけでいい」という事を補足しておきます。<br>\n例えば、「パスワードリセットして通知メールを送る」機能を追加するとします。<br>\nその場合、UserFacade.scalaだけを次のように修正します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserFacade.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">// メール機能を使いたいのでMailServiceを追加</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserFacade</span><span class=\"o\">()(</span><span class=\"k\">implicit</span> <span class=\"n\">userRepo</span> <span class=\"k\">:</span> <span class=\"kt\">UserRepository</span><span class=\"o\">,</span><span class=\"n\">mailService</span> <span class=\"k\">:</span> <span class=\"kt\">MailService</span><span class=\"o\">){</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span><span class=\"n\">nickname</span> <span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Optino</span><span class=\"o\">[</span><span class=\"kt\">UserDAO</span><span class=\"o\">]</span><span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">userRepo</span><span class=\"o\">.</span><span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">setAndSaveNickname</span><span class=\"o\">(</span><span class=\"n\">nickname</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">resetPassword</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">userRepo</span><span class=\"o\">.</span><span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">foreach</span><span class=\"o\">(</span> <span class=\"n\">user</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">newPassword</span> <span class=\"k\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">resetPassword</span><span class=\"o\">()</span> <span class=\"c1\">// resetPassword()は実装済みとする</span>\n      <span class=\"n\">emailService</span><span class=\"o\">.</span><span class=\"n\">sendTo</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">,</span><span class=\"s\">&quot;パスワードリセット&quot;</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"s\">&quot;新しいパスワードは${newPassword}です&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">})</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> \n</pre></div></div><p>これだけで初期化部分の修正なしに、UserFacadeでEmailServiceを使えるようになります。</p>\n",
        "stock_users": [
            "MAKOTO_MOBY",
            "kasumani",
            "mtoyoshi",
            "Reds",
            "kawachi"
        ]
    },
    {
        "id": 131948,
        "uuid": "8a89b2ef345ef7d1c0d9",
        "user": {
            "id": 46605,
            "url_name": "sasarkyz",
            "profile_image_url": "https://pbs.twimg.com/profile_images/484722223865810944/9i2hbgk-_normal.jpeg"
        },
        "title": "scala 事始め",
        "created_at": "2014-09-12 00:53:46 +0900",
        "updated_at": "2014-09-12 00:54:23 +0900",
        "created_at_in_words": "12日",
        "updated_at_in_words": "12日",
        "tags": [
            {
                "name": "Mac",
                "url_name": "mac",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0cbda729ead4559760ec64ae744a5aef937e0b08/medium.jpg?1403645170",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 0,
        "url": "http://qiita.com/sasarkyz/items/8a89b2ef345ef7d1c0d9",
        "created_at_as_seconds": 1410450826,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n# はじめに\n最近 java をいじっていたので scala を触ってみようと思います。\n全然わからないです。やってみようかなって思ってたけど手を出してない方。一緒にはじめましょう！\n\n# インストール\n何はともあれインストールしないと使えません。\nbrew で入れられました\n\n```bash\n$ brew install scala\n==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/scala-2.11.2.mavericks.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring scala-2.11.2.mavericks.bottle.tar.gz\n==> Caveats\nTo use with IntelliJ, set the Scala home to:\n  /usr/local/opt/scala/idea\n\nBash completion has been installed to:\n  /usr/local/etc/bash_completion.d\n==> Summary\n🍺  /usr/local/Cellar/scala/2.11.2: 46 files, 29M\n```\n\nビール。。。？\n\nとりあえずわからないけどコマンド叩いてみるとインタプリタモードになった。\n\n```bash\n$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_60).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala>\n```\n\n# Hello World\nへろーわーるどくらいやってみたいよね。\njava と文法似てるッて聞いたので多分どうにかなるんじゃないかとふんでる\n\n```bash\nscala> System.out.println(\"Hello, World\");\nHello, World\n```\n\nよかった。\n\nでもこれ以上わからないので、ここからはコップ本読み進めていきます。\n\n# ファイルから実行\n```hello.scala\nprintln(\"Hello World\")\n```\n\njava と違って長ったらしく import 書かなくていいんですね。\nコンパイル？遅い印象があります。どうなんだろう。僕のマシンが非力なだけかな\n\n```bash\n$ scala hello.scala\nHello World\n```\n\n# おわりに\nこれ以上やってもただの入門書のコピペになりそうなのでこのへんで。\njava に比べて割りと親切な印象を受けました。もうちょっと読み進めていきたいです。\nこれからもちょくちょく scala ネタ投稿していきたいと思います。\n\n\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>最近 java をいじっていたので scala を触ってみようと思います。<br>\n全然わからないです。やってみようかなって思ってたけど手を出してない方。一緒にはじめましょう！</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>インストール\n      </h1><p>何はともあれインストールしないと使えません。<br>\nbrew で入れられました</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>brew install <span class=\"nv\">scala</span>\n<span class=\"o\">==</span>&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/scala-2.11.2.mavericks.bottle.tar.gz\n<span class=\"c\">######################################################################## 100.0%</span>\n<span class=\"o\">==</span>&gt; Pouring scala-2.11.2.mavericks.bottle.tar.gz\n<span class=\"o\">==</span>&gt; Caveats\nTo use with IntelliJ, <span class=\"nb\">set </span>the Scala home to:\n  /usr/local/opt/scala/idea\n\nBash completion has been installed to:\n  /usr/local/etc/bash_completion.d\n<span class=\"o\">==</span>&gt; Summary\n🍺  /usr/local/Cellar/scala/2.11.2: <span class=\"m\">46</span> files, 29M\n</pre></div></div><p>ビール。。。？</p>\n<p>とりあえずわからないけどコマンド叩いてみるとインタプリタモードになった。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>scala\nWelcome to Scala version 2.11.2 <span class=\"o\">(</span>Java HotSpot<span class=\"o\">(</span>TM<span class=\"o\">)</span> 64-Bit Server VM, Java 1.7.0_60<span class=\"o\">)</span>.\nType in expressions to have them evaluated.\nType :help <span class=\"k\">for</span> more information.\n\nscala&gt;\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Hello World\n      </h1><p>へろーわーるどくらいやってみたいよね。<br>\njava と文法似てるッて聞いたので多分どうにかなるんじゃないかとふんでる</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>scala&gt; System.out.println<span class=\"o\">(</span><span class=\"s2\">&quot;Hello, World&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\nHello, World\n</pre></div></div><p>よかった。</p>\n<p>でもこれ以上わからないので、ここからはコップ本読み進めていきます。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>ファイルから実行\n      </h1><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">hello.scala</span></div><div class=\"highlight\"><pre><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello World&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>java と違って長ったらしく import 書かなくていいんですね。<br>\nコンパイル？遅い印象があります。どうなんだろう。僕のマシンが非力なだけかな</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>scala hello.scala\nHello World\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>おわりに\n      </h1><p>これ以上やってもただの入門書のコピペになりそうなのでこのへんで。<br>\njava に比べて割りと親切な印象を受けました。もうちょっと読み進めていきたいです。<br>\nこれからもちょくちょく scala ネタ投稿していきたいと思います。</p>\n",
        "stock_users": [
            "seiya1311"
        ]
    },
    {
        "id": 131926,
        "uuid": "0a9c474a952acfbdabfc",
        "user": {
            "id": 34165,
            "url_name": "takudo",
            "profile_image_url": "https://pbs.twimg.com/profile_images/433549008900870144/3o-jGLrB_normal.jpeg"
        },
        "title": "【Android】Android with Scala 事始め【Scala】",
        "created_at": "2014-09-12 00:06:02 +0900",
        "updated_at": "2014-09-12 00:13:01 +0900",
        "created_at_in_words": "12日",
        "updated_at_in_words": "12日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Android",
                "url_name": "android",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0062451c92bb932b6bb257a40a35eee709b5597c/medium.jpg?1403644757",
                "versions": []
            },
            {
                "name": "IntelliJ",
                "url_name": "intellij",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/86ce6198a1ef4a3e5be6bf29893bff9bbda3fa4e/medium.jpg?1367911208",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/takudo/items/0a9c474a952acfbdabfc",
        "created_at_as_seconds": 1410447962,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n__2014/09/11時点__\n\nタイトル通り。\n今ならずいぶん簡単にできますよ～ということをアピールします。\nなお私、JavaでのAndroid開発はやったことはありません...。\n\n__※注意__\n__利用している[pfn/android-sdk-plugin](https://github.com/pfn/android-sdk-plugin)はバージョンアップが激しいです。情報がすぐに古くなる可能性が有ります。__\n\n__この手法のメリットは、下記です__\n\n* Scalaで書ける（Better Java, OOPxFP）\n* sbtによるビルド管理（パッケージの追加など、比較的楽）\n\n\n#検証環境\n\n* MacOSX 10.9.4\n* IntelliJ IDEA 14 EAP(Scalaプラグインインストール済み)\n* GenyMotion(エミュレータ）\n\n#事前準備\n\n* android sdk インストール\n* sbtインストール\n\n#プロジェクトの作成\n\n* 基本、[ココ](https://github.com/pfn/android-sdk-plugin#usage)の手順に沿って行くだけですが、一応順番に。\n\n##ひな形ファイルの用意\n\nsbtプロジェクトを配置するディレクトリつくって、その配下にsbtプラグインの記述をします。\n\n\n```shell\n$ mkdir [path/to/project]\n$ mkdir [path/to/project]/project\n$ cd [path/to/project]\n$ vi project/plugins.sbt\n```\n\n```plugins.sbt\naddSbtPlugin(\"com.hanhuy.sbt\" % \"android-sdk-plugin\" % \"1.3.5\")\n\nresolvers += Resolver.sbtPluginRepo(\"snapshots\")\n\naddSbtPlugin(\"com.hanhuy.sbt\" % \"sbt-idea\" % \"1.7.0-SNAPSHOT\")\n```\n\n↑IntelliJ用のプラグインも入れてます\n\n\n##コマンドでプロジェクトのひな形作成\n\nsbtコマンドと拡張コマンドで、プロジェクトのひな形を作ります\n\n```shell\n\n$ cd [path/to/project]\n$ sbt\n#~~~~~sbtコンソールが起動していろいろ入る\n> gen-android android-19 com.takudo.hogehoge takudotest\n\n```\ngen-androidの引数は\n\n* APIレベル\n* パッケージ名\n* 名称\n\nの順で↑の例のように渡す。\n\n\n\n__※この後 [error] java.lang.NoClassDefFoundError: sbt/Plugins が発生、sbtのバージョンを0.13.5に変更することでエラーが出なくなる__\n\n```project/build.properties\nsbt.version=0.13.5\n```\n\n##IntelliJ用設定ファイルを作る\n\n```\n$ sbt\n> gen-idea\n\n```\n\nIntelliJで開いてみる\n\nFile > Openからプロジェクトのディレクトリを選択する\n\n![IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/bfdbcf8e-6214-21c7-8584-6d3fe3d57e5b.jpeg \"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\")\n\n\n##エミュレータで動かしてみる\n\n### sbt でビルド\n\nsbtコンソールでデバッグ用パッケージを作成します。\n\n```\n> ~android:package-debug\n```\n（頭の~でファイルの変更を監視してコンパイルかけてくれるようになります）\n\n### IntelliJ　SDK設定\n\nIntelliJのSDK設定ができていないはずなので、選択します\n\nFile　>　ProjectStructure\n\n![Project_Structure.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/97ff3edc-f4cc-db52-9c42-3a1bd9a0cf07.jpeg \"Project_Structure.jpg\")\n\n![Project_Structure.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/a51b45e0-68da-16e0-ee08-bb7d525af1f7.jpeg \"Project_Structure.jpg\")\n\n![Project_Structure.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/a8efc9af-76a6-9078-130a-df9b25dd7582.jpeg \"Project_Structure.jpg\")\n\n### IntelliJデバッグ設定\n\nIntelliJのデバッグのEditConfigurationsで、\n下記のようにデバッグ設定を作ります。\n\n![Run_Debug_Configurations.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/7611144a-afcf-213c-fa00-6ec7171015f9.jpeg \"Run_Debug_Configurations.jpg\")\n\n### デバッグ実行\n\n虫のアイコンをクリックするとデバイス選択画面が出るので、GenyMotionで動かしているエミュレータを選択します。\n\n![Choose_Device.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/86e0c7d3-5006-9791-40b7-0b9c4bc20115.jpeg \"Choose_Device.jpg\")\n\nおー動いた！\n\n![Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/34327bde-f276-515c-a71d-6b88203926e8.jpeg \"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\")\n\nブレイクポイントでも止まります。\n\n![IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/74509241-4465-de14-d44f-09fef15a3981.jpeg \"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\")\n\nでもまだこれJavaのソースなんで、Scalaで書きます。\n\n#Scalaでソースコード書いてみる\n\nとりあえずデフォルトで出来上がるJavaのMainActivityをそっくりScalaに移植します。\n\nsrc/main配下に、\nsrc/main/scala/[パッケージ]/MainActivity.scala\nを作りましょう。\n\n（Javaのソースコードをコピーして、scalaのファイルに貼り付けると面白いので試してみてください）\n\nscalaのコードはこんなかんじだと思います。\n\n```scala:src/main/scala/[パッケージ]/MainActivity.scala\n\npackage [パッケージ]\n\nimport android.app.Activity\nimport android.os.Bundle\n\nclass MainActivity extends Activity {\n  /** Called when the activity is first created. */\n  override def onCreate(savedInstanceState: Bundle) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.main)\n  }\n}\n\n```\n\nで、忘れずにjavaのファイルを消しておきましょう\nsrc/main/java/[パッケージ]/MainActivity.java\n\nでは虫アイコンからデバッグ開始！\n\n![Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/1204ec09-cffa-11a3-4a38-4ef56f8daf55.jpeg \"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\")\n\nブレークポイントでも止まります。\n\n![IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/0b577360-d5ee-6de9-aa98-801816721e2d.jpeg \"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\")\n\n以上です。\n\n---\n\nAndroid始めたばかりというのもありますが、Scalaっぽいimmutableな書き方がしづらい場面が多々ある気がしています。\n今後進めていく上で、Scalaでの開発上の良いプラクティスがあれば共有したいなと思っています。\n\n",
        "body": "<p><strong>2014/09/11時点</strong></p>\n<p>タイトル通り。<br>\n今ならずいぶん簡単にできますよ～ということをアピールします。<br>\nなお私、JavaでのAndroid開発はやったことはありません...。</p>\n<p><strong>※注意</strong><br>\n<strong>利用している<a href=\"https://github.com/pfn/android-sdk-plugin\" title=\"\" target=\"_blank\">pfn/android-sdk-plugin</a>はバージョンアップが激しいです。情報がすぐに古くなる可能性が有ります。</strong></p>\n<p><strong>この手法のメリットは、下記です</strong></p>\n\n<ul>\n<li>Scalaで書ける（Better Java, OOPxFP）</li>\n<li>sbtによるビルド管理（パッケージの追加など、比較的楽）</li>\n</ul>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>検証環境\n      </h1>\n<ul>\n<li>MacOSX 10.9.4</li>\n<li>IntelliJ IDEA 14 EAP(Scalaプラグインインストール済み)</li>\n<li>GenyMotion(エミュレータ）</li>\n</ul>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>事前準備\n      </h1>\n<ul>\n<li>android sdk インストール</li>\n<li>sbtインストール</li>\n</ul>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>プロジェクトの作成\n      </h1>\n<ul>\n<li>基本、<a href=\"https://github.com/pfn/android-sdk-plugin#usage\" title=\"\" target=\"_blank\">ココ</a>の手順に沿って行くだけですが、一応順番に。</li>\n</ul>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>ひな形ファイルの用意\n      </h2><p>sbtプロジェクトを配置するディレクトリつくって、その配下にsbtプラグインの記述をします。</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>$ mkdir [path/to/project]\n$ mkdir [path/to/project]/project\n$ cd [path/to/project]\n$ vi project/plugins.sbt\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">plugins.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">addSbtPlugin</span><span class=\"o\">(</span><span class=\"s\">&quot;com.hanhuy.sbt&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;android-sdk-plugin&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.3.5&quot;</span><span class=\"o\">)</span>\n\n<span class=\"n\">resolvers</span> <span class=\"o\">+=</span> <span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">sbtPluginRepo</span><span class=\"o\">(</span><span class=\"s\">&quot;snapshots&quot;</span><span class=\"o\">)</span>\n\n<span class=\"n\">addSbtPlugin</span><span class=\"o\">(</span><span class=\"s\">&quot;com.hanhuy.sbt&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;sbt-idea&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.7.0-SNAPSHOT&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>↑IntelliJ用のプラグインも入れてます</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>コマンドでプロジェクトのひな形作成\n      </h2><p>sbtコマンドと拡張コマンドで、プロジェクトのひな形を作ります</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>$ cd [path/to/project]\n$ sbt\n#~~~~~sbtコンソールが起動していろいろ入る\n&gt; gen-android android-19 com.takudo.hogehoge takudotest\n</pre></div></div><p>gen-androidの引数は</p>\n\n<ul>\n<li>APIレベル</li>\n<li>パッケージ名</li>\n<li>名称</li>\n</ul>\n<p>の順で↑の例のように渡す。</p>\n<p><strong>※この後 [error] java.lang.NoClassDefFoundError: sbt/Plugins が発生、sbtのバージョンを0.13.5に変更することでエラーが出なくなる</strong></p>\n<div class=\"code-frame\" data-lang=\"ini\"><div class=\"code-lang\"><span class=\"bold\">project/build.properties</span></div><div class=\"highlight\"><pre><span class=\"na\">sbt.version</span><span class=\"o\">=</span><span class=\"s\">0.13.5</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>IntelliJ用設定ファイルを作る\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sbt\n&gt; gen-idea\n</pre></div></div><p>IntelliJで開いてみる</p>\n<p>File &gt; Openからプロジェクトのディレクトリを選択する</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/bfdbcf8e-6214-21c7-8584-6d3fe3d57e5b.jpeg\" title=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\" alt=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\"></img></p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>エミュレータで動かしてみる\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>sbt でビルド\n      </h3><p>sbtコンソールでデバッグ用パッケージを作成します。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; ~android:package-debug\n</pre></div></div><p>（頭の~でファイルの変更を監視してコンパイルかけてくれるようになります）</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>IntelliJ　SDK設定\n      </h3><p>IntelliJのSDK設定ができていないはずなので、選択します</p>\n<p>File　&gt;　ProjectStructure</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/97ff3edc-f4cc-db52-9c42-3a1bd9a0cf07.jpeg\" title=\"Project_Structure.jpg\" alt=\"Project_Structure.jpg\"></img></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/a51b45e0-68da-16e0-ee08-bb7d525af1f7.jpeg\" title=\"Project_Structure.jpg\" alt=\"Project_Structure.jpg\"></img></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/a8efc9af-76a6-9078-130a-df9b25dd7582.jpeg\" title=\"Project_Structure.jpg\" alt=\"Project_Structure.jpg\"></img></p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>IntelliJデバッグ設定\n      </h3><p>IntelliJのデバッグのEditConfigurationsで、<br>\n下記のようにデバッグ設定を作ります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/7611144a-afcf-213c-fa00-6ec7171015f9.jpeg\" title=\"Run_Debug_Configurations.jpg\" alt=\"Run_Debug_Configurations.jpg\"></img></p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>デバッグ実行\n      </h3><p>虫のアイコンをクリックするとデバイス選択画面が出るので、GenyMotionで動かしているエミュレータを選択します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/86e0c7d3-5006-9791-40b7-0b9c4bc20115.jpeg\" title=\"Choose_Device.jpg\" alt=\"Choose_Device.jpg\"></img></p>\n<p>おー動いた！</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/34327bde-f276-515c-a71d-6b88203926e8.jpeg\" title=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\" alt=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\"></img></p>\n<p>ブレイクポイントでも止まります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/74509241-4465-de14-d44f-09fef15a3981.jpeg\" title=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\" alt=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\"></img></p>\n<p>でもまだこれJavaのソースなんで、Scalaで書きます。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>Scalaでソースコード書いてみる\n      </h1><p>とりあえずデフォルトで出来上がるJavaのMainActivityをそっくりScalaに移植します。</p>\n<p>src/main配下に、<br>\nsrc/main/scala/[パッケージ]/MainActivity.scala<br>\nを作りましょう。</p>\n<p>（Javaのソースコードをコピーして、scalaのファイルに貼り付けると面白いので試してみてください）</p>\n<p>scalaのコードはこんなかんじだと思います。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">src/main/scala/[パッケージ]/MainActivity.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"err\">[</span><span class=\"nn\">パッケ</span><span class=\"err\">ー</span><span class=\"n\">ジ</span><span class=\"err\">]</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">android.app.Activity</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.os.Bundle</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"k\">extends</span> <span class=\"nc\">Activity</span> <span class=\"o\">{</span>\n  <span class=\"cm\">/** Called when the activity is first created. */</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"k\">:</span> <span class=\"kt\">Bundle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"n\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">)</span>\n    <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>で、忘れずにjavaのファイルを消しておきましょう<br>\nsrc/main/java/[パッケージ]/MainActivity.java</p>\n<p>では虫アイコンからデバッグ開始！</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/1204ec09-cffa-11a3-4a38-4ef56f8daf55.jpeg\" title=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\" alt=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\"></img></p>\n<p>ブレークポイントでも止まります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/0b577360-d5ee-6de9-aa98-801816721e2d.jpeg\" title=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\" alt=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\"></img></p>\n<p>以上です。</p>\n\n<hr>\n<p>Android始めたばかりというのもありますが、Scalaっぽいimmutableな書き方がしづらい場面が多々ある気がしています。<br>\n今後進めていく上で、Scalaでの開発上の良いプラクティスがあれば共有したいなと思っています。</p>\n",
        "stock_users": [
            "tomoya0x00",
            "amyu_san",
            "soraiyu",
            "oret"
        ]
    },
    {
        "id": 131022,
        "uuid": "9545255ca326fe0c967b",
        "user": {
            "id": 16900,
            "url_name": "mikamix",
            "profile_image_url": "https://secure.gravatar.com/avatar/16faa4cd93ddd347e77b0be9e36791ed"
        },
        "title": "Slickで共通のクエリを定義する方法",
        "created_at": "2014-09-11 00:17:29 +0900",
        "updated_at": "2014-09-11 00:17:29 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "13日",
        "tags": [
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/mikamix/items/9545255ca326fe0c967b",
        "created_at_as_seconds": 1410362249,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 概要\n\nSlickで特定、もしくは複数のテーブルにおける共通のクエリを定義する方法です。\n\nクラスにマップせず、できるだけ`Query`の状態で引き回すことでFRMとしての特性を最大限引き出すことが可能になります。\n\n公式に上がっている[プレゼン資料](http://slick.typesafe.com/talks/2013-12-03_Scala-eXchange/2013-12-03_Patterns-for-Slick-database-applications-Scala-eXchange.pdf)を参考にしましたので、より詳しく知りたい方はこちらもお読み下さい。\n\n## 解説\n\n### 複数のテーブルに共通のクエリを用意する\n\n例えば全てのテーブルに`id`を定義し、`table.filter(_.id === id)`といった形でアクセスしたい場合、まずは以下の様な`trait`を用意します。\n\n```scala:WithId.scala\n\ntrait WithId {\n\n  def id = column[Int](\"id\", O.PrimaryKey)\n}\n\n```\n\nそして`Table`クラスを作成する際にこの`WithId`をミックスインします。\n\n```scala:Coffee.scala\n\nclass Coffees(tag: Tag) extends Table[Coffee](tag, \"coffees\") with WithId {\n\n  def name = column[String](\"coffee_name\")\n\n  def * = (id, name) <> (Coffee.tuppled, Coffee.unapply)\n}\n\n```\n\nさらに、以下の様な`implicit class`を定義してやることで、全てのテーブルクラスに対して`findById`でアクセスできるようになります。\n\n```scala:QueryExtensions.scala\n\nimplicit class QueryExtensions[T <: WithId, E, _](val q: Query[T, E, _]) {\n\n  def findById(id: column[Int]) = q.filter(_.id === id)\n}\n\n```\n\n### 特定のテーブルに固有のクエリを用意する\n\n例えば、`Coffees`テーブルを`coffee_name`の値でフィルターしたい場合は、以下の様にします。\n\n```scala:CoffeesExtensions.scala\n\nimplicit class CoffeesExtensions(val q: Query[Coffees, Coffee, _]) {\n\n  def findByName(name: column[String]) = q.filter(_.name === name)\n}\n\n```\n\nこれで、`Coffees`のテーブルに`findByName`でアクセスできるようになります。\n\n### どうやって利用するか\n\nサンプルなどにあるCakeパターンを利用するのもいいですし、以下の用に`trait`を用意して使いたい場所でミックスインすることもできます。\n\n```CoffeesComponent.scala\n\ntrait CoffeesComponent {\n\n  val coffees = TableQuery[Coffees]\n\n  implicit class CoffeesExtensions...\n}\n\n```\n\nまた、これらの`Query`はそれぞれ利用先でチェーンしたり、他のテーブルと`join`することもできます。\nさらには、`join`そのものも他の`Query`を引数に取るメソッドを先ほどの`QueryExtension`で定義することで共通化することができます。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h2><p>Slickで特定、もしくは複数のテーブルにおける共通のクエリを定義する方法です。</p>\n<p>クラスにマップせず、できるだけ<code>Query</code>の状態で引き回すことでFRMとしての特性を最大限引き出すことが可能になります。</p>\n<p>公式に上がっている<a href=\"http://slick.typesafe.com/talks/2013-12-03_Scala-eXchange/2013-12-03_Patterns-for-Slick-database-applications-Scala-eXchange.pdf\" title=\"\" target=\"_blank\">プレゼン資料</a>を参考にしましたので、より詳しく知りたい方はこちらもお読み下さい。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>解説\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>複数のテーブルに共通のクエリを用意する\n      </h3><p>例えば全てのテーブルに<code>id</code>を定義し、<code>table.filter(_.id === id)</code>といった形でアクセスしたい場合、まずは以下の様な<code>trait</code>を用意します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">WithId.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">WithId</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">id</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>そして<code>Table</code>クラスを作成する際にこの<code>WithId</code>をミックスインします。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Coffee.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Coffees</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Coffee</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;coffees&quot;</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"nc\">WithId</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>さらに、以下の様な<code>implicit class</code>を定義してやることで、全てのテーブルクラスに対して<code>findById</code>でアクセスできるようになります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">QueryExtensions.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">QueryExtensions</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">WithId</span>, <span class=\"kt\">E</span>, <span class=\"k\">_</span><span class=\"o\">](</span><span class=\"k\">val</span> <span class=\"n\">q</span><span class=\"k\">:</span> <span class=\"kt\">Query</span><span class=\"o\">[</span><span class=\"kt\">T</span>, <span class=\"kt\">E</span>, <span class=\"k\">_</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">findById</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">column</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>特定のテーブルに固有のクエリを用意する\n      </h3><p>例えば、<code>Coffees</code>テーブルを<code>coffee_name</code>の値でフィルターしたい場合は、以下の様にします。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">CoffeesExtensions.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeesExtensions</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">q</span><span class=\"k\">:</span> <span class=\"kt\">Query</span><span class=\"o\">[</span><span class=\"kt\">Coffees</span>, <span class=\"kt\">Coffee</span>, <span class=\"k\">_</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">findByName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">===</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>これで、<code>Coffees</code>のテーブルに<code>findByName</code>でアクセスできるようになります。</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>どうやって利用するか\n      </h3><p>サンプルなどにあるCakeパターンを利用するのもいいですし、以下の用に<code>trait</code>を用意して使いたい場所でミックスインすることもできます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">CoffeesComponent.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">CoffeesComponent</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">coffees</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">Coffees</span><span class=\"o\">]</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeesExtensions</span><span class=\"o\">...</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>また、これらの<code>Query</code>はそれぞれ利用先でチェーンしたり、他のテーブルと<code>join</code>することもできます。<br>\nさらには、<code>join</code>そのものも他の<code>Query</code>を引数に取るメソッドを先ほどの<code>QueryExtension</code>で定義することで共通化することができます。</p>\n",
        "stock_users": [
            "gutio",
            "kasumani",
            "Reds",
            "takumakei@github"
        ]
    },
    {
        "id": 130959,
        "uuid": "4b07f1e762a458241edb",
        "user": {
            "id": 16900,
            "url_name": "mikamix",
            "profile_image_url": "https://secure.gravatar.com/avatar/16faa4cd93ddd347e77b0be9e36791ed"
        },
        "title": "Slickで自分で定義したcase classにマップする方法",
        "created_at": "2014-09-10 22:33:02 +0900",
        "updated_at": "2014-09-11 00:20:05 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "13日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/mikamix/items/4b07f1e762a458241edb",
        "created_at_as_seconds": 1410355982,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 概要\nSlickで特定のカラム型を自分で定義したクラスにマッピングする方法です。\n\n## 解説\n\n### カラムとクラスを一対一でマップする\n\n単一のカラムであれば、以下の様に`MappedTo`を使うことで通常のカラム型と一対一で紐づけることができます。\n\n```scala:Coffee.scala\n\ncase class CoffeeId(value: Int) extends MappedTo[Int]\n\ncase class Coffee(coffeeId: CoffeeId, coffeeName: String)\n\nclass Coffees(tag: Tag) extends Table[Coffee](tag, \"coffees\") {\n\n  def coffeeId = column[CoffeeId](\"coffee_id\", O.PrimaryKey)\n\n  def coffeeName = column[String](\"coffee_name\")\n\n  def * = (coffeeId, coffeeName) <> (Coffee.tuppled, Coffee.unapply)\n}\n\n```\n\n### 複数のカラムを一つのクラスにマップする\n\n複数のカラムを一つのクラスにマップする場合は、以下の様に`<>`を使って`*`の場合と同様に定義します。\n\n```scala:Coffee2.scala\n\ncase class CoffeeId(value: Int) extends MappedTo[Int]\n\ncase class CoffeeName(japanese: String, english: String)\n\ncase class Coffee(coffeeId: CoffeeId, coffeeName: CoffeeName)\n\nclass Coffees(tag: Tag) extends Table[Coffee](tag, \"coffees\") {\n\n  def coffeeId = column[CoffeeId](\"coffee_id\", O.PrimaryKey)\n\n  def japaneseName = column[String](\"japanese_name\")\n\n  def englishName = column[String](\"english_name\")\n\n  def coffeeName = (japaneseName, englishName) <> (CoffeeName.tuppled, CoffeeName.unapply)\n\n  def * = (coffeeId, coffeeName) <> (Coffee.tuppled, Coffee.unapply)\n}\n```\n\n### 自分で変換処理を書きたい場合\n\n自分で変換処理を書きたい場合は、以下の様に`MappedColumnType`を使用することでエンコード、デコードの処理を記述できます。\n\n```\nimplicit val dateTimeColumnType = MappedColumnType.base[org.joda.time.DateTime, java.sql.Timestamp](\n  { dt => new java.sql.Timestamp(dt.getMillis) },\n  { ts => new org.joda.time.DateTime(ts) }\n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h2><p>Slickで特定のカラム型を自分で定義したクラスにマッピングする方法です。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>解説\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>カラムとクラスを一対一でマップする\n      </h3><p>単一のカラムであれば、以下の様に<code>MappedTo</code>を使うことで通常のカラム型と一対一で紐づけることができます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Coffee.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeeId</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">MappedTo</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Coffee</span><span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"k\">:</span> <span class=\"kt\">CoffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Coffees</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Coffee</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;coffees&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeId</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">CoffeeId</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeName</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>複数のカラムを一つのクラスにマップする\n      </h3><p>複数のカラムを一つのクラスにマップする場合は、以下の様に<code>&lt;&gt;</code>を使って<code>*</code>の場合と同様に定義します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Coffee2.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeeId</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">MappedTo</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeeName</span><span class=\"o\">(</span><span class=\"n\">japanese</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">english</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Coffee</span><span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"k\">:</span> <span class=\"kt\">CoffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"k\">:</span> <span class=\"kt\">CoffeeName</span><span class=\"o\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Coffees</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Coffee</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;coffees&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeId</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">CoffeeId</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">japaneseName</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;japanese_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">englishName</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;english_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeName</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">japaneseName</span><span class=\"o\">,</span> <span class=\"n\">englishName</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">CoffeeName</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">CoffeeName</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>自分で変換処理を書きたい場合\n      </h3><p>自分で変換処理を書きたい場合は、以下の様に<code>MappedColumnType</code>を使用することでエンコード、デコードの処理を記述できます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>implicit val dateTimeColumnType = MappedColumnType.base[org.joda.time.DateTime, java.sql.Timestamp](\n  { dt =&gt; new java.sql.Timestamp(dt.getMillis) },\n  { ts =&gt; new org.joda.time.DateTime(ts) }\n)\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "takumakei@github",
            "Reds"
        ]
    },
    {
        "id": 130452,
        "uuid": "4a0a2342a57849653f38",
        "user": {
            "id": 5441,
            "url_name": "kawachi",
            "profile_image_url": "https://secure.gravatar.com/avatar/35ea8f83cd8d191f834c69a5481613e9?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "Playframework の Lang でつらいところ",
        "created_at": "2014-09-10 14:36:49 +0900",
        "updated_at": "2014-09-10 15:16:41 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "13日",
        "tags": [
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 5,
        "url": "http://qiita.com/kawachi/items/4a0a2342a57849653f38",
        "created_at_as_seconds": 1410327409,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 基本的な使い方\n\nPlayframework で国際化するときには `play.api.i18n.Messages()` を使う。\n\nhttps://www.playframework.com/documentation/2.3.x/ScalaI18N\n\n````\nval title = Messages(\"home.title\")\n````\n\nでもって `conf/messages`, `conf/messages.ja` などに次のように書いておくと翻訳される。\n\n````\nhome.title=ホーム\n````\n\n`Messages(\"home.title\")` は [`play.api.i18n.Messages`](https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.i18n.Messages$) の `apply()` メソッドを呼び出している。`apply()` メソッドは `play.api.i18n.Lang` 型 (以下 `Lang`)の implicit 引数を取る。\n\n````\ndef apply(key: String, args: Any*)(implicit lang: Lang): String\n````\n\n`Messages.apply()` はテンプレートの中で使われることが多い。\n公式ドキュメントでは twirl テンプレートに implicit で Lang を渡すように Note が書かれている。\n\n````\n@* テンプレートの引数宣言。implicit で Lang を渡す *@\n@()(implicit lang: Lang)\n\n<h1>@Messages(\"home.title\")</h1>\n````\n\nテンプレート以外の場合でも同じように implicit で渡すことができる。\n\n````\n  // Scala コード中で implicit として渡す\n  def title(implicit l: Lang) = Messages(\"home.title\")\n````\n\nコントローラメソッドを Action で書くときは implicit な `play.api.mvc.Request` を取るようにして使う。\n\n\n````\n  def index = Action { implicit request =>\n    Ok(views.html.index())\n  }\n````\n\n## 問題\n\n`Lang` implicit を渡し忘れてもコンパイルエラーにならない。\n\n`Lang` companion object に implicit が定義されている。引数で渡し忘れるとそちらが使われる。\n\nなお companion object の実装は、JVMが動作している環境のデフォルト言語となる。リクエストごとに言語を切り替えたいことが多いため、companion object の実装が使われると残念な思いをすることが多い。\n\n### よくある例1. テンプレートの引数で宣言し忘れる\n\n````\n@* (implicit lang: Lang) を付け忘れ *@\n@()\n\n<h1>@Messages(\"home.title\")</h1>\n````\n\n### よくある例2. 関数の引数で宣言し忘れる\n\n````\n  // (implicit l: Lang) を付け忘れ\n  def title = Messages(\"home.title\")\n````\n\n### よくある例3. implicit request を付け忘れる\n\n`Request` から `Lang` へは `play.api.mvc.Controller#request2lang()` の implicit 変換がなされるが、`Request` がなければ `Lang` へも変換されない。\n\n````\n  // implicit request => を付け忘れ\n  def index = Action {\n    Ok(views.html.index())\n  }\n````\n\n### よくはないけどはまった例\n\nわかったよ。implicit で引き回すから忘れるんだろう。普通の引数にすればいいじゃないか。\n\n````\n  // Play 2.2 では companion object の Lang が使われてしまう\n  def index = Action { implicit request =>\n    // 暗黙的なものを取り出して、\n    val lang = implicitly[Lang]\n    // 以下 lang を明示的に渡して回る\n    ...\n  }\n````\n\nPlay 2.2 では `Request` から `Lang` に変換する implicit def の名前が lang で、local 変数によって implicit が効かなくなる模様。（Scala のバグ？)\nlang 以外の変数名(例えば `_lang`)を使えば期待したとおり動作する。\n\nPlay 2.3 では request2lang という名前に置き換わった。 `val request2lang = ...` とすれば同じような問題が発生しそう。\n\nhttps://github.com/playframework/playframework/issues/2605\nhttps://gist.github.com/tkawachi/8e4987441f775786d1d8\n\n## 解決法\n\n<del>だれか良い解決法をください。</del>\nコメント欄に素敵な解決策が。\n\n## メモ\n\nIntelliJ で Cmd+Shift+p を押すと、カーソルがある場所で使われている implicit がどこで定義されているかを参照することができる。便利。知らなかった。\n \n![Screen Shot 2014-09-10 at 14.17.35.png](https://qiita-image-store.s3.amazonaws.com/0/5441/a7c8de78-d4a9-5ab6-6bf6-086150c0d7b2.png \"Screen Shot 2014-09-10 at 14.17.35.png\")\n\nhttp://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>基本的な使い方\n      </h2><p>Playframework で国際化するときには <code>play.api.i18n.Messages()</code> を使う。</p>\n<p><a href=\"https://www.playframework.com/documentation/2.3.x/ScalaI18N\" title=\"https://www.playframework.com/documentation/2.3.x/ScalaI18N\" target=\"_blank\">https://www.playframework.com/documentation/2.3.x/ScalaI18N</a></p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>val title = Messages(&quot;home.title&quot;)\n</pre></div></div><p>でもって <code>conf/messages</code>, <code>conf/messages.ja</code> などに次のように書いておくと翻訳される。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>home.title=ホーム\n</pre></div></div><p><code>Messages(&quot;home.title&quot;)</code> は <a href=\"https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.i18n.Messages$\" title=\"\" target=\"_blank\"><code>play.api.i18n.Messages</code></a> の <code>apply()</code> メソッドを呼び出している。<code>apply()</code> メソッドは <code>play.api.i18n.Lang</code> 型 (以下 <code>Lang</code>)の implicit 引数を取る。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>def apply(key: String, args: Any*)(implicit lang: Lang): String\n</pre></div></div><p><code>Messages.apply()</code> はテンプレートの中で使われることが多い。<br>\n公式ドキュメントでは twirl テンプレートに implicit で Lang を渡すように Note が書かれている。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>@* テンプレートの引数宣言。implicit で Lang を渡す *@\n@()(implicit lang: Lang)\n\n&lt;h1&gt;@Messages(&quot;home.title&quot;)&lt;/h1&gt;\n</pre></div></div><p>テンプレート以外の場合でも同じように implicit で渡すことができる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // Scala コード中で implicit として渡す\n  def title(implicit l: Lang) = Messages(&quot;home.title&quot;)\n</pre></div></div><p>コントローラメソッドを Action で書くときは implicit な <code>play.api.mvc.Request</code> を取るようにして使う。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  def index = Action { implicit request =&gt;\n    Ok(views.html.index())\n  }\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>問題\n      </h2><p><code>Lang</code> implicit を渡し忘れてもコンパイルエラーにならない。</p>\n<p><code>Lang</code> companion object に implicit が定義されている。引数で渡し忘れるとそちらが使われる。</p>\n<p>なお companion object の実装は、JVMが動作している環境のデフォルト言語となる。リクエストごとに言語を切り替えたいことが多いため、companion object の実装が使われると残念な思いをすることが多い。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>よくある例1. テンプレートの引数で宣言し忘れる\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>@* (implicit lang: Lang) を付け忘れ *@\n@()\n\n&lt;h1&gt;@Messages(&quot;home.title&quot;)&lt;/h1&gt;\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>よくある例2. 関数の引数で宣言し忘れる\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // (implicit l: Lang) を付け忘れ\n  def title = Messages(&quot;home.title&quot;)\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>よくある例3. implicit request を付け忘れる\n      </h3><p><code>Request</code> から <code>Lang</code> へは <code>play.api.mvc.Controller#request2lang()</code> の implicit 変換がなされるが、<code>Request</code> がなければ <code>Lang</code> へも変換されない。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // implicit request =&gt; を付け忘れ\n  def index = Action {\n    Ok(views.html.index())\n  }\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>よくはないけどはまった例\n      </h3><p>わかったよ。implicit で引き回すから忘れるんだろう。普通の引数にすればいいじゃないか。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // Play 2.2 では companion object の Lang が使われてしまう\n  def index = Action { implicit request =&gt;\n    // 暗黙的なものを取り出して、\n    val lang = implicitly[Lang]\n    // 以下 lang を明示的に渡して回る\n    ...\n  }\n</pre></div></div><p>Play 2.2 では <code>Request</code> から <code>Lang</code> に変換する implicit def の名前が lang で、local 変数によって implicit が効かなくなる模様。（Scala のバグ？)<br>\nlang 以外の変数名(例えば <code>_lang</code>)を使えば期待したとおり動作する。</p>\n<p>Play 2.3 では request2lang という名前に置き換わった。 <code>val request2lang = ...</code> とすれば同じような問題が発生しそう。</p>\n<p><a href=\"https://github.com/playframework/playframework/issues/2605\" title=\"https://github.com/playframework/playframework/issues/2605\" target=\"_blank\">https://github.com/playframework/playframework/issues/2605</a><br>\n<a href=\"https://gist.github.com/tkawachi/8e4987441f775786d1d8\" title=\"https://gist.github.com/tkawachi/8e4987441f775786d1d8\" target=\"_blank\">https://gist.github.com/tkawachi/8e4987441f775786d1d8</a></p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>解決法\n      </h2><del>だれか良い解決法をください。</del>\n<p>コメント欄に素敵な解決策が。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>メモ\n      </h2><p>IntelliJ で Cmd+Shift+p を押すと、カーソルがある場所で使われている implicit がどこで定義されているかを参照することができる。便利。知らなかった。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/5441/a7c8de78-d4a9-5ab6-6bf6-086150c0d7b2.png\" title=\"Screen Shot 2014-09-10 at 14.17.35.png\" alt=\"Screen Shot 2014-09-10 at 14.17.35.png\"></img></p>\n<p><a href=\"http://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions\" title=\"http://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions\" target=\"_blank\">http://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions</a></p>\n",
        "stock_users": [
            "kasumani",
            "garbagetown",
            "Reds",
            "takumakei@github"
        ]
    },
    {
        "id": 130325,
        "uuid": "f969b461b5521e8a2329",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "traitの動的mix-in時の自分型(self-type)使用有無によるコードの違い",
        "created_at": "2014-09-10 12:09:00 +0900",
        "updated_at": "2014-09-11 15:33:04 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "12日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/f969b461b5521e8a2329",
        "created_at_as_seconds": 1410318540,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "## はじめに\n処理コンテキストに応じて、クラスの振る舞いを変更したいとする。\nこんな時はインスタンス生成と同時にtraitをmix-inして無名サブクラスを作る作戦が取れる。\nなおこの時、trait側でベースとなるクラスのメンバ変数やメソッドにアクセスする際に自分型を使う場合と使わない場合でコード量や宣言内容が変わってくるため簡単にまとめたいと思う。\n\n## コード\n\n### mix-inするtraitの宣言\nトレイトBの方がmix-in先を固定していないためより抽象的といえるが、一方でここでの用途はFooの振る舞いを変更するためのtraitなのだ、というように使用が限定的に決まっているのなら不必要な抽象と言える。\nそこでトレイトAのように自分型を使って参照をもってしまえばmix-in先のメンバ変数に容易にアクセスできるため、より簡潔に書くことができるようになる。\n\n```scala\ntrait A { self: Foo =>\n  override def compute = self.str * (self.num * 2)\n}\n\ntrait B {\n  val str: String\n  val num: Int\n\n  def compute = str * (num * 3)\n}\n```\n\n### ベースクラスとコンパニオンオブジェクト\nBをmix-inするとcomputeメソッドはFooにもBにも宣言されていることからコンパイルエラーとなる。以下のようにどちらのcomputeを使うのかを明示的に宣言してやる必要がある。\n一方、Aは既にA側のcomputeをoverrideすると宣言していることからnew時に明示的に宣言してやる必要はない。\n\n```scala\nclass Foo(val str: String, val num: Int) {\n  def compute = str * num\n}\n\nobject Foo {\n  def apply(str: String, num: Int)(implicit mode: Mode = ModeNormal) = mode match {\n    case ModeA => new Foo(str, num) with A\n    case ModeB => new Foo(str, num) with B {\n      override def compute = super[B].compute\n    }\n    case _ => new Foo(str, num)\n  }\n}\n```\n\n### Main部\n\n```scala\nobject Main extends App {\n  implicit val mode = ModeB\n  val foo = Foo(\"*\", 2)\n  println(foo.compute)  // ******\n}\n```\n\n### Mode部\n\n```scala\ntrait Mode\nobject ModeA extends Mode\nobject ModeB extends Mode\nobject ModeNormal extends Mode\n```\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h2><p>処理コンテキストに応じて、クラスの振る舞いを変更したいとする。<br>\nこんな時はインスタンス生成と同時にtraitをmix-inして無名サブクラスを作る作戦が取れる。<br>\nなおこの時、trait側でベースとなるクラスのメンバ変数やメソッドにアクセスする際に自分型を使う場合と使わない場合でコード量や宣言内容が変わってくるため簡単にまとめたいと思う。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>コード\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>mix-inするtraitの宣言\n      </h3><p>トレイトBの方がmix-in先を固定していないためより抽象的といえるが、一方でここでの用途はFooの振る舞いを変更するためのtraitなのだ、というように使用が限定的に決まっているのなら不必要な抽象と言える。<br>\nそこでトレイトAのように自分型を使って参照をもってしまえばmix-in先のメンバ変数に容易にアクセスできるため、より簡潔に書くことができるようになる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">A</span> <span class=\"o\">{</span> <span class=\"n\">self</span><span class=\"k\">:</span> <span class=\"kt\">Foo</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">str</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">B</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n  <span class=\"k\">val</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"n\">str</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>ベースクラスとコンパニオンオブジェクト\n      </h3><p>Bをmix-inするとcomputeメソッドはFooにもBにも宣言されていることからコンパイルエラーとなる。以下のようにどちらのcomputeを使うのかを明示的に宣言してやる必要がある。<br>\n一方、Aは既にA側のcomputeをoverrideすると宣言していることからnew時に明示的に宣言してやる必要はない。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"k\">val</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"n\">str</span> <span class=\"o\">*</span> <span class=\"n\">num</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Foo</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">mode</span><span class=\"k\">:</span> <span class=\"kt\">Mode</span> <span class=\"o\">=</span> <span class=\"nc\">ModeNormal</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">mode</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">ModeA</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">A</span>\n    <span class=\"k\">case</span> <span class=\"nc\">ModeB</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">B</span> <span class=\"o\">{</span>\n      <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"k\">super</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">].</span><span class=\"n\">compute</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>Main部\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">mode</span> <span class=\"k\">=</span> <span class=\"nc\">ModeB</span>\n  <span class=\"k\">val</span> <span class=\"n\">foo</span> <span class=\"k\">=</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"s\">&quot;*&quot;</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"o\">)</span>  <span class=\"c1\">// ******</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>Mode部\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Mode</span>\n<span class=\"k\">object</span> <span class=\"nc\">ModeA</span> <span class=\"k\">extends</span> <span class=\"nc\">Mode</span>\n<span class=\"k\">object</span> <span class=\"nc\">ModeB</span> <span class=\"k\">extends</span> <span class=\"nc\">Mode</span>\n<span class=\"k\">object</span> <span class=\"nc\">ModeNormal</span> <span class=\"k\">extends</span> <span class=\"nc\">Mode</span>\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 129699,
        "uuid": "0554832846fef96ef3d6",
        "user": {
            "id": 37648,
            "url_name": "nmatsui",
            "profile_image_url": "https://gravatar.com/avatar/8d6b48de5a510d9eb81968651d7cec53?d=https%3A%2F%2Fidenticons.github.com%2Ff645b5d6491634697f002f5404c0979b.png&r=x"
        },
        "title": "Twitter -&gt; (Kinesis | Kafka) -&gt; Storm -&gt; Redis",
        "created_at": "2014-09-09 18:34:54 +0900",
        "updated_at": "2014-09-09 18:34:54 +0900",
        "created_at_in_words": "14日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.10"
                ]
            },
            {
                "name": "Twitter4J",
                "url_name": "twitter4j",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "4.0.2"
                ]
            },
            {
                "name": "Kafka",
                "url_name": "kafka",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "0.8.1.1"
                ]
            },
            {
                "name": "KinesisClient",
                "url_name": "kinesisclient",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "1.1.0"
                ]
            },
            {
                "name": "storm",
                "url_name": "storm",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2a372d3b69e80a8ed05b12b7c3d20dcb757b43a5/medium.jpg?1408468361",
                "versions": [
                    "0.9.2"
                ]
            }
        ],
        "stock_count": 10,
        "comment_count": 0,
        "url": "http://qiita.com/nmatsui/items/0554832846fef96ef3d6",
        "created_at_as_seconds": 1410255294,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# AWS Kinesis、Apache Kafka、Apache Stormを連携させるサンプルプログラム\n\n以下のようなサンプルプログラムを作りました。\n\nTwitter Streaming API\n　-> **Producer**　-> (AWS Kinesis | Apache Kafka)　-> Apache Storm[**WordCounter**]\n　　-> Redis\n\n![TweetStreamWordCounter.png](https://qiita-image-store.s3.amazonaws.com/0/37648/066921d3-ea4d-f264-947d-5a8df2cd82cc.png)\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/38740780?startSlide=18\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/nbykmatsui/20140905-aws-nightinithdlt2/18\" title=\"20140905 AWS Night in ITHD LT2\" target=\"_blank\">20140905 AWS Night in ITHD LT2</a> </strong> from <strong><a href=\"//www.slideshare.net/nbykmatsui\" target=\"_blank\">Nobuyuki Matsui</a></strong> </div>\n\n## Vagrant\n\n環境構築用のVagrantfile、Berksfile、各種Cookbook\n\nhttps://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant\n\n### 検証した環境\n\n* HostOS\n - MacOS X(10.7)\n - Oracle VM VirtualBox(4.3.14)\n - Berkshelf(3.1.3)\n - Vagrant(1.6.3)\n - vagrant-omnibus(1.4.1)\n - vagrant-vbguest(0.10.0)\n\n### インストール\n\n1. VirtualBox、Vagrant、Berkshelfをインストール\n2. `git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant.git`\n3. `berks vendor cookbooks`\n4. `vagrant up --provision`\n\nこれにより、下記２つのVMが立ち上がり、`/etc/hosts`が設定されます。\n\n* VM 1: Apache Zookeeper & Apache Kafka用\n - Ubuntu Server(14.04.1 LTS)\n - Oracle JDK(1.8.0_20)\n - Apache Zookeeper(3.3.3) [Apache Kafka install packageに内包されたバージョン]\n - Apache Kafka(0.8.1.1)\n\n* VM 2: Apache Storm & Redis用\n - Ubuntu Server(14.04.1 LTS)\n - Oracle JDK(1.8.0_20)\n - SBT(0.13.5)\n - Apache Storm(0.9.2-incubating)\n\n## WordCounter\n\nApache Storm用の単語出現頻度をカウントするプログラム\n\nhttps://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter\n\n1. AWS Kinesis用のSpout or Apache Kafka用のSpoutを用いてTweetを取得\n1. 下記３つのBoltを用いて単語の出現頻度をカウント\n 1. KinesisとKafkaのデータ構造差異を吸収\n 2. kuromojiを用いて形態素解析\n 3. 単語数のカウント\n1. 出現数をスコアとして単語をRedisのソート済みセット型に登録\n\n### インストール\n\n1. VM 2上で`git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter.git`\n2. `src/main/resources/*.properties.template`を`src/main/resources/*.properties`にリネーム\n3. `AwsCredentials.properties`にAWSのAPI情報をセット\n * もしプロキシ配下で動作させる場合、`kinesis.properties`にプロキシ情報をセット\n1. `sbt compile`\n * Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる\n1. `sbt assembly`\n\n### 依存ライブラリ\n\n* Java\n - Oracle JDK(1.8.0_20)\n - Scala(2.10.4)\n - SBT(0.13.5)\n* Library\n - Apache Storm(0.9.2-incubating)\n - KafkaSpout(0.9.2-incubating)\n - KinesisSpout\n - Kuromoji(0.7.7)\n - Redis Client(2.12)\n\nKinesisSpoutは、[awslabsのkinesis-storm-spout](https://github.com/awslabs/kinesis-storm-spout)にbuild.sbtを追加し、バグフィックスしたもの（ https://github.com/nmatsui/kinesis-storm-spout ）を利用\n\n## Producer\n\nTwitter Streaming APIから取得したTweetをAWS KinesisもしくはApache Kafkaへ連続的に投入するプログラム\n\nhttps://github.com/nmatsui/twitter-kinesis-kafka-storm_producer\n\n1. Twitter Streaming APIから指定したFilterQueryを用いてTweetを連続的に取得\n2. AWS KinesisもしくはApache Kafkaへ投入\n\n### インストール\n\n1. VM 2上で`git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer.git`\n2. `src/main/resources/*.properties.template`を`src/main/resources/*.properties`にリネーム\n3. `AwsCredentials.properties`にAWSのAPI情報をセット\n * もしプロキシ配下で動作させる場合、`kinesis.properties`と`twitter.properties`にプロキシ情報をセット\n1. `sbt compile`\n * Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる\n1. `sbt assembly`\n\n### 依存ライブラリ\n\n* Java\n - Oracle JDK(1.8.0_20)\n - Scala(2.10.4)\n - SBT(0.13.5)\n* Library\n - Twitter4J(4.0.2)\n - Apache Kafka Library(0.8.1.1)\n - Amazon Kinesis Client Library(1.1.0)\n\n## 利用方法\n\n### AWS Kinesis準備\n\n1. AWS Kinesisに\"tweets\"という名前のStreamを作成\n * 現在のバージョンではUS EAST(N.Virginia)のKinesisにのみ対応\n\n### Apache Kafka準備\n\n1. VM 1にログイン\n1. Apache Zookeeper起動\n2. Apache Kafka起動\n3. Apache Kafkaへ\"tweets\"という名前のtopicを作成\n\nZookeeperやKafkaの起動手順等は、[公式サイトのQuickStart](http://kafka.apache.org/documentation.html#quickstart)を参照\n\n### Redis起動確認\n\n1. `redis-cli -h redis --raw`でRedisに接続できることを確認\n\n### Apache StromのTopology起動\n\n1. `java -jar target/scala-2.10/wordcounter.jar (TEST|KAFKA|KINESIS)`\n * TEST: AWS KinesisやApache Kafkaに接続せず、ランダムな文章をBoltに流すSpoutに接続\n * KAFKA: KafkaSpoutに接続\n * KINESIS: KinesisSpoutに接続\n\n### Producer起動\n\n1. `java -jar target/scala-2.10/tweetstreamer.jar (TEST|KAFKA|KINESIS) query_words...`\n * TEST: AWS KinesisやApache Kafkaに接続せずTwitter Streaming APIから取得したTweetをログ出力するのみ\n * KAFKA: Apache KafkaにTweetをputする\n * KINESIS: AWS KinesisにTweetをputする\n3. `query_words`は、Twitter Streaming APIの\"statuses/filter\"エンドポイントに渡されるフィルタワード\n * 空白区切りで複数の単語を指定可能\n * 指定した単語のいづれかが含まれるTweetが抽出される\n\n正しく環境構築できていれば、取得したTweetがログ出力され、Redisに登録される\n\n### Redis確認\n\n1. `redis-cli -h redis --raw`でRedisに接続\n2. Redis-CLI上で`zrange words 0 -1 withscores`を実行すると、出現頻度の昇順で単語が表示される\n\nRedisの結果をクリアする場合、Redis-CLI上で`del words`を実行\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>AWS Kinesis、Apache Kafka、Apache Stormを連携させるサンプルプログラム\n      </h1><p>以下のようなサンプルプログラムを作りました。</p>\n<p>Twitter Streaming API<br>\n　-&gt; <strong>Producer</strong>　-&gt; (AWS Kinesis | Apache Kafka)　-&gt; Apache Storm[<strong>WordCounter</strong>]<br>\n　　-&gt; Redis</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/37648/066921d3-ea4d-f264-947d-5a8df2cd82cc.png\" title=\"\" alt=\"TweetStreamWordCounter.png\"></img></p>\n<p>  <div> <strong> <a href=\"//www.slideshare.net/nbykmatsui/20140905-aws-nightinithdlt2/18\" title=\"20140905 AWS Night in ITHD LT2\">20140905 AWS Night in ITHD LT2</a> </strong> from <strong><a href=\"//www.slideshare.net/nbykmatsui\">Nobuyuki Matsui</a></strong> </div></p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Vagrant\n      </h2><p>環境構築用のVagrantfile、Berksfile、各種Cookbook</p>\n<p><a href=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant\" title=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant\" target=\"_blank\">https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant</a></p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>検証した環境\n      </h3>\n<ul>\n<li>HostOS\n\n<ul>\n<li>MacOS X(10.7)</li>\n<li>Oracle VM VirtualBox(4.3.14)</li>\n<li>Berkshelf(3.1.3)</li>\n<li>Vagrant(1.6.3)</li>\n<li>vagrant-omnibus(1.4.1)</li>\n<li>vagrant-vbguest(0.10.0)</li>\n</ul></li>\n</ul>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>インストール\n      </h3>\n<ol>\n<li>VirtualBox、Vagrant、Berkshelfをインストール</li>\n<li><code>git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant.git</code></li>\n<li><code>berks vendor cookbooks</code></li>\n<li><code>vagrant up --provision</code></li>\n</ol>\n<p>これにより、下記２つのVMが立ち上がり、<code>/etc/hosts</code>が設定されます。</p>\n\n<ul>\n<li><p>VM 1: Apache Zookeeper &amp; Apache Kafka用</p>\n\n<ul>\n<li>Ubuntu Server(14.04.1 LTS)</li>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>Apache Zookeeper(3.3.3) [Apache Kafka install packageに内包されたバージョン]</li>\n<li>Apache Kafka(0.8.1.1)</li>\n</ul></li>\n<li><p>VM 2: Apache Storm &amp; Redis用</p>\n\n<ul>\n<li>Ubuntu Server(14.04.1 LTS)</li>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>SBT(0.13.5)</li>\n<li>Apache Storm(0.9.2-incubating)</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>WordCounter\n      </h2><p>Apache Storm用の単語出現頻度をカウントするプログラム</p>\n<p><a href=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter\" title=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter\" target=\"_blank\">https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter</a></p>\n\n<ol>\n<li>AWS Kinesis用のSpout or Apache Kafka用のSpoutを用いてTweetを取得</li>\n<li>下記３つのBoltを用いて単語の出現頻度をカウント\n\n<ol>\n<li>KinesisとKafkaのデータ構造差異を吸収</li>\n<li>kuromojiを用いて形態素解析</li>\n<li>単語数のカウント</li>\n</ol></li>\n<li>出現数をスコアとして単語をRedisのソート済みセット型に登録</li>\n</ol>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>インストール\n      </h3>\n<ol>\n<li>VM 2上で<code>git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter.git</code></li>\n<li><code>src/main/resources/*.properties.template</code>を<code>src/main/resources/*.properties</code>にリネーム</li>\n<li><code>AwsCredentials.properties</code>にAWSのAPI情報をセット\n\n<ul>\n<li>もしプロキシ配下で動作させる場合、<code>kinesis.properties</code>にプロキシ情報をセット</li>\n</ul></li>\n<li><code>sbt compile</code>\n\n<ul>\n<li>Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる</li>\n</ul></li>\n<li><code>sbt assembly</code></li>\n</ol>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>依存ライブラリ\n      </h3>\n<ul>\n<li>Java\n\n<ul>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>Scala(2.10.4)</li>\n<li>SBT(0.13.5)</li>\n</ul></li>\n<li>Library\n\n<ul>\n<li>Apache Storm(0.9.2-incubating)</li>\n<li>KafkaSpout(0.9.2-incubating)</li>\n<li>KinesisSpout</li>\n<li>Kuromoji(0.7.7)</li>\n<li>Redis Client(2.12)</li>\n</ul></li>\n</ul>\n<p>KinesisSpoutは、<a href=\"https://github.com/awslabs/kinesis-storm-spout\" title=\"\" target=\"_blank\">awslabsのkinesis-storm-spout</a>にbuild.sbtを追加し、バグフィックスしたもの（ <a href=\"https://github.com/nmatsui/kinesis-storm-spout\" title=\"https://github.com/nmatsui/kinesis-storm-spout\" target=\"_blank\">https://github.com/nmatsui/kinesis-storm-spout</a> ）を利用</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Producer\n      </h2><p>Twitter Streaming APIから取得したTweetをAWS KinesisもしくはApache Kafkaへ連続的に投入するプログラム</p>\n<p><a href=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer\" title=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer\" target=\"_blank\">https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer</a></p>\n\n<ol>\n<li>Twitter Streaming APIから指定したFilterQueryを用いてTweetを連続的に取得</li>\n<li>AWS KinesisもしくはApache Kafkaへ投入</li>\n</ol>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>インストール\n      </h3>\n<ol>\n<li>VM 2上で<code>git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer.git</code></li>\n<li><code>src/main/resources/*.properties.template</code>を<code>src/main/resources/*.properties</code>にリネーム</li>\n<li><code>AwsCredentials.properties</code>にAWSのAPI情報をセット\n\n<ul>\n<li>もしプロキシ配下で動作させる場合、<code>kinesis.properties</code>と<code>twitter.properties</code>にプロキシ情報をセット</li>\n</ul></li>\n<li><code>sbt compile</code>\n\n<ul>\n<li>Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる</li>\n</ul></li>\n<li><code>sbt assembly</code></li>\n</ol>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>依存ライブラリ\n      </h3>\n<ul>\n<li>Java\n\n<ul>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>Scala(2.10.4)</li>\n<li>SBT(0.13.5)</li>\n</ul></li>\n<li>Library\n\n<ul>\n<li>Twitter4J(4.0.2)</li>\n<li>Apache Kafka Library(0.8.1.1)</li>\n<li>Amazon Kinesis Client Library(1.1.0)</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>利用方法\n      </h2><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>AWS Kinesis準備\n      </h3>\n<ol>\n<li>AWS Kinesisに&quot;tweets&quot;という名前のStreamを作成\n\n<ul>\n<li>現在のバージョンではUS EAST(N.Virginia)のKinesisにのみ対応</li>\n</ul></li>\n</ol>\n<h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>Apache Kafka準備\n      </h3>\n<ol>\n<li>VM 1にログイン</li>\n<li>Apache Zookeeper起動</li>\n<li>Apache Kafka起動</li>\n<li>Apache Kafkaへ&quot;tweets&quot;という名前のtopicを作成</li>\n</ol>\n<p>ZookeeperやKafkaの起動手順等は、<a href=\"http://kafka.apache.org/documentation.html#quickstart\" title=\"\" target=\"_blank\">公式サイトのQuickStart</a>を参照</p>\n<h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>Redis起動確認\n      </h3>\n<ol>\n<li><code>redis-cli -h redis --raw</code>でRedisに接続できることを確認</li>\n</ol>\n<h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>Apache StromのTopology起動\n      </h3>\n<ol>\n<li><code>java -jar target/scala-2.10/wordcounter.jar (TEST|KAFKA|KINESIS)</code>\n\n<ul>\n<li>TEST: AWS KinesisやApache Kafkaに接続せず、ランダムな文章をBoltに流すSpoutに接続</li>\n<li>KAFKA: KafkaSpoutに接続</li>\n<li>KINESIS: KinesisSpoutに接続</li>\n</ul></li>\n</ol>\n<h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>Producer起動\n      </h3>\n<ol>\n<li><code>java -jar target/scala-2.10/tweetstreamer.jar (TEST|KAFKA|KINESIS) query_words...</code>\n\n<ul>\n<li>TEST: AWS KinesisやApache Kafkaに接続せずTwitter Streaming APIから取得したTweetをログ出力するのみ</li>\n<li>KAFKA: Apache KafkaにTweetをputする</li>\n<li>KINESIS: AWS KinesisにTweetをputする</li>\n</ul></li>\n<li><code>query_words</code>は、Twitter Streaming APIの&quot;statuses/filter&quot;エンドポイントに渡されるフィルタワード\n\n<ul>\n<li>空白区切りで複数の単語を指定可能</li>\n<li>指定した単語のいづれかが含まれるTweetが抽出される</li>\n</ul></li>\n</ol>\n<p>正しく環境構築できていれば、取得したTweetがログ出力され、Redisに登録される</p>\n<h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>Redis確認\n      </h3>\n<ol>\n<li><code>redis-cli -h redis --raw</code>でRedisに接続</li>\n<li>Redis-CLI上で<code>zrange words 0 -1 withscores</code>を実行すると、出現頻度の昇順で単語が表示される</li>\n</ol>\n<p>Redisの結果をクリアする場合、Redis-CLI上で<code>del words</code>を実行</p>\n",
        "stock_users": [
            "wkodate",
            "seiiichi_o",
            "mikamix",
            "morozumi_h",
            "laqiiz",
            "inokappa",
            "suzryo",
            "Reds",
            "poad1010",
            "JunSuzukiJapan@github"
        ]
    },
    {
        "id": 129554,
        "uuid": "d84793e285b4602c77c8",
        "user": {
            "id": 1054,
            "url_name": "a_yasui",
            "profile_image_url": "https://pbs.twimg.com/profile_images/3670878724/3c31fab5c27d24fbbb0fded007052c9a_normal.jpeg"
        },
        "title": "Docker で PlayFramework2 の環境を作るメモ書き",
        "created_at": "2014-09-09 16:11:53 +0900",
        "updated_at": "2014-09-09 16:11:53 +0900",
        "created_at_in_words": "14日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "docker",
                "url_name": "docker",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5dd175e323bc9dac09e906b515d54316d527890f/medium.jpg?1379804192",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/a_yasui/items/d84793e285b4602c77c8",
        "created_at_as_seconds": 1410246713,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\nDockerでPlayFrameworkが動くと聞いて試して見たメモ\n\n\n## Dockerfile\n\nhttps://registry.hub.docker.com/u/adamalex/play-docker-ci/\n\nこれを利用\n\n最終的には Typesafe Activator が動くっぽい。\n\n```shell\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker init\n2014/09/09 15:35:42 Creating VM boot2docker-vm...\n2014/09/09 15:35:42 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)\n2014/09/09 15:35:42 Setting NIC #1 to use NAT network...\n2014/09/09 15:35:43 Port forwarding [ssh] tcp://127.0.0.1:2022 --> :22\n2014/09/09 15:35:43 Port forwarding [docker] tcp://127.0.0.1:2375 --> :2375\n2014/09/09 15:35:43 Setting NIC #2 to use host-only network \"vboxnet1\"...\n2014/09/09 15:35:43 Setting VM storage...\n2014/09/09 15:35:52 Done. Type `boot2docker up` to start the VM.\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker up\n2014/09/09 15:35:58 Waiting for VM to be started...\n............\n2014/09/09 15:36:34 Started.\n2014/09/09 15:36:34 To connect the Docker client to the Docker daemon, please set:\n2014/09/09 15:36:34     export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:36-09/09/14] $ export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:37-09/09/14] $ docker build --tag='myplayapp' .\nSending build context to Docker daemon 4.096 kB\nSending build context to Docker daemon\nStep 0 : FROM        ubuntu:14.04\nPulling repository ubuntu\n826544226fdc: Download complete\n511136ea3c5a: Download complete\nb3553b91f79f: Download complete\nca63a3899a99: Download complete\nff01d67c9471: Download complete\n7428bd008763: Download complete\nc7c7108e0ad8: Download complete\n...<中略>\n ---> 024e10e08e02\nRemoving intermediate container ad2584cc710d\nStep 7 : ADD         app /root/app\n2014/09/09 15:44:28 app: no such file or directory\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:44-09/09/14] $\n```\n\n\nPlay のプロジェクト内で `docker build` をする気配だったので、ちょっとやり直し。\n\n```shell\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ ls\n./\t\t../\t\tDockerfile\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ play new fakeit\n       _\n _ __ | | __ _ _  _\n| '_ \\| |/ _' | || |\n|  __/|_|\\____|\\__ /\n|_|            |__/\n\nplay 2.2.3 built with Scala 2.10.3 (running Java 1.6.0_65), http://www.playframework.com\n\nThe new application will be created in /Users/yasui/Documents/develop/docker-play/fakeit\n\nWhat is the application name? [fakeit]\n>\n\nWhich template do you want to use for this new application?\n\n  1             - Create a simple Scala application\n  2             - Create a simple Java application\n\n> 1\nOK, application fakeit is created.\n\nHave fun!\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ mv Dockerfile fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ cd fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ ls\n./\t\t../\t\t.gitignore\tDockerfile\tREADME\t\tapp/\t\tbuild.sbt\tconf/\t\tproject/\tpublic/\t\ttest/\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ docker build --tag='myplayapp' .\n<中略>\nRemoving intermediate container 5b91b72a03f8\nStep 18 : EXPOSE      9000\n ---> Running in ce520b393fe9\n ---> 3c85624c2101\nRemoving intermediate container ce520b393fe9\nSuccessfully built 3c85624c2101\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:54-09/09/14] $\n\n```\n\n\nビルドできたので、起動させる\n\n```shell\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][16:04-09/09/14] $ docker run -i -t -p 9000:9000 myplayapp\nPlay server process ID is 9\n[info] play - Application started (Prod)\n[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n```\n\nまぁ、こんな感じ。\n\nファイル更新するたびにdockerを再起動する必要があるとか、まだここら辺の対処がわかんないけど、こんな感じで動く。\n\n",
        "body": "<p>DockerでPlayFrameworkが動くと聞いて試して見たメモ</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Dockerfile\n      </h2><p><a href=\"https://registry.hub.docker.com/u/adamalex/play-docker-ci/\" title=\"https://registry.hub.docker.com/u/adamalex/play-docker-ci/\" target=\"_blank\">https://registry.hub.docker.com/u/adamalex/play-docker-ci/</a></p>\n<p>これを利用</p>\n<p>最終的には Typesafe Activator が動くっぽい。</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker init\n2014/09/09 15:35:42 Creating VM boot2docker-vm...\n2014/09/09 15:35:42 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)\n2014/09/09 15:35:42 Setting NIC #1 to use NAT network...\n2014/09/09 15:35:43 Port forwarding [ssh] tcp://127.0.0.1:2022 --&gt; :22\n2014/09/09 15:35:43 Port forwarding [docker] tcp://127.0.0.1:2375 --&gt; :2375\n2014/09/09 15:35:43 Setting NIC #2 to use host-only network &quot;vboxnet1&quot;...\n2014/09/09 15:35:43 Setting VM storage...\n2014/09/09 15:35:52 Done. Type `boot2docker up` to start the VM.\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker up\n2014/09/09 15:35:58 Waiting for VM to be started...\n............\n2014/09/09 15:36:34 Started.\n2014/09/09 15:36:34 To connect the Docker client to the Docker daemon, please set:\n2014/09/09 15:36:34     export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:36-09/09/14] $ export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:37-09/09/14] $ docker build --tag=&#39;myplayapp&#39; .\nSending build context to Docker daemon 4.096 kB\nSending build context to Docker daemon\nStep 0 : FROM        ubuntu:14.04\nPulling repository ubuntu\n826544226fdc: Download complete\n511136ea3c5a: Download complete\nb3553b91f79f: Download complete\nca63a3899a99: Download complete\nff01d67c9471: Download complete\n7428bd008763: Download complete\nc7c7108e0ad8: Download complete\n...&lt;中略&gt;\n ---&gt; 024e10e08e02\nRemoving intermediate container ad2584cc710d\nStep 7 : ADD         app /root/app\n2014/09/09 15:44:28 app: no such file or directory\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:44-09/09/14] $\n</pre></div></div><p>Play のプロジェクト内で <code>docker build</code> をする気配だったので、ちょっとやり直し。</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ ls\n./      ../     Dockerfile\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ play new fakeit\n       _\n _ __ | | __ _ _  _\n| &#39;_ \\| |/ _&#39; | || |\n|  __/|_|\\____|\\__ /\n|_|            |__/\n\nplay 2.2.3 built with Scala 2.10.3 (running Java 1.6.0_65), http://www.playframework.com\n\nThe new application will be created in /Users/yasui/Documents/develop/docker-play/fakeit\n\nWhat is the application name? [fakeit]\n&gt;\n\nWhich template do you want to use for this new application?\n\n  1             - Create a simple Scala application\n  2             - Create a simple Java application\n\n&gt; 1\nOK, application fakeit is created.\n\nHave fun!\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ mv Dockerfile fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ cd fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ ls\n./      ../     .gitignore  Dockerfile  README      app/        build.sbt   conf/       project/    public/     test/\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ docker build --tag=&#39;myplayapp&#39; .\n&lt;中略&gt;\nRemoving intermediate container 5b91b72a03f8\nStep 18 : EXPOSE      9000\n ---&gt; Running in ce520b393fe9\n ---&gt; 3c85624c2101\nRemoving intermediate container ce520b393fe9\nSuccessfully built 3c85624c2101\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:54-09/09/14] $\n</pre></div></div><p>ビルドできたので、起動させる</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][16:04-09/09/14] $ docker run -i -t -p 9000:9000 myplayapp\nPlay server process ID is 9\n[info] play - Application started (Prod)\n[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n</pre></div></div><p>まぁ、こんな感じ。</p>\n<p>ファイル更新するたびにdockerを再起動する必要があるとか、まだここら辺の対処がわかんないけど、こんな感じで動く。</p>\n",
        "stock_users": [
            "Reds",
            "uni"
        ]
    },
    {
        "id": 129056,
        "uuid": "35a19fe11bdaf4f2431f",
        "user": {
            "id": 8437,
            "url_name": "ozw_sei",
            "profile_image_url": "https://pbs.twimg.com/profile_images/416733123821314048/-PInIT51_normal.jpeg"
        },
        "title": "Odersky教授",
        "created_at": "2014-09-08 20:41:48 +0900",
        "updated_at": "2014-09-09 09:31:39 +0900",
        "created_at_in_words": "15日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/ozw_sei/items/35a19fe11bdaf4f2431f",
        "created_at_as_seconds": 1410176508,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "- Functional Programming Principles in Scala\n\t- https://www.coursera.org/course/progfun\n\n- scala-evolutions\n\t- http://www.slideshare.net/Odersky/scala-evolution\n\n- scala-simple-parts\n\t- https://www.youtube.com/watch?v=ecekSCX3B4Q\n\n- scala-with-style\n\t- https://www.youtube.com/watch?v=kkTFx3-duc8\n\n- working hard to keep it simple\n\t- https://www.youtube.com/watch?v=3jg1AheF4n0\n\n- Simple is not easy\n\t- http://eed3si9n.com/ja/simplicity-matters\nPlayの監視ツール\nhttp://kamon.io/\n\nJVMモニタリングは必須\n- full-gcでアラート\nhttp://yuuki.hatenablog.com/entry/2014/04/08/074507\n\nPlayモニタリング\n\n以前はTomCat\n\nAkkaのチューニング\n- デフォルトだとThreadが24個しか立たない\n\nPlay akka configuration\n- understand play thread pools\n\n\n\n- sbt\n\t- とりあえず読むべき\n\t\t- http://www.scala-sbt.org/0.13/tutorial/ja/index.html\n\n\n\n\n\nhttps://github.com/cb372/scalamatsuri-my-first-macro\n\n\n\n\n\nSpark-sqlのトレーニングビデオ\nhttp://spark-summit.org/2014/training\n\nGraphはDatabricsのサービス\n\n\n\n\n\n\n\n",
        "body": "<ul>\n<li><p>Functional Programming Principles in Scala</p>\n\n<ul>\n<li><a href=\"https://www.coursera.org/course/progfun\" title=\"https://www.coursera.org/course/progfun\" target=\"_blank\">https://www.coursera.org/course/progfun</a></li>\n</ul></li>\n<li><p>scala-evolutions</p>\n\n<ul>\n<li><a href=\"http://www.slideshare.net/Odersky/scala-evolution\" title=\"http://www.slideshare.net/Odersky/scala-evolution\" target=\"_blank\">http://www.slideshare.net/Odersky/scala-evolution</a></li>\n</ul></li>\n<li><p>scala-simple-parts</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ecekSCX3B4Q\" title=\"https://www.youtube.com/watch?v=ecekSCX3B4Q\" target=\"_blank\">https://www.youtube.com/watch?v=ecekSCX3B4Q</a></li>\n</ul></li>\n<li><p>scala-with-style</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=kkTFx3-duc8\" title=\"https://www.youtube.com/watch?v=kkTFx3-duc8\" target=\"_blank\">https://www.youtube.com/watch?v=kkTFx3-duc8</a></li>\n</ul></li>\n<li><p>working hard to keep it simple</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=3jg1AheF4n0\" title=\"https://www.youtube.com/watch?v=3jg1AheF4n0\" target=\"_blank\">https://www.youtube.com/watch?v=3jg1AheF4n0</a></li>\n</ul></li>\n<li><p>Simple is not easy</p>\n\n<ul>\n<li><a href=\"http://eed3si9n.com/ja/simplicity-matters\" title=\"http://eed3si9n.com/ja/simplicity-matters\" target=\"_blank\">http://eed3si9n.com/ja/simplicity-matters</a>\nPlayの監視ツール\n<a href=\"http://kamon.io/\" title=\"http://kamon.io/\" target=\"_blank\">http://kamon.io/</a></li>\n</ul></li>\n</ul>\n<p>JVMモニタリングは必須<br>\n- full-gcでアラート<br>\n<a href=\"http://yuuki.hatenablog.com/entry/2014/04/08/074507\" title=\"http://yuuki.hatenablog.com/entry/2014/04/08/074507\" target=\"_blank\">http://yuuki.hatenablog.com/entry/2014/04/08/074507</a></p>\n<p>Playモニタリング</p>\n<p>以前はTomCat</p>\n<p>Akkaのチューニング<br>\n- デフォルトだとThreadが24個しか立たない</p>\n<p>Play akka configuration<br>\n- understand play thread pools</p>\n\n<ul>\n<li>sbt\n\n<ul>\n<li>とりあえず読むべき\n\n<ul>\n<li><a href=\"http://www.scala-sbt.org/0.13/tutorial/ja/index.html\" title=\"http://www.scala-sbt.org/0.13/tutorial/ja/index.html\" target=\"_blank\">http://www.scala-sbt.org/0.13/tutorial/ja/index.html</a></li>\n</ul></li>\n</ul></li>\n</ul>\n<p><a href=\"https://github.com/cb372/scalamatsuri-my-first-macro\" title=\"https://github.com/cb372/scalamatsuri-my-first-macro\" target=\"_blank\">https://github.com/cb372/scalamatsuri-my-first-macro</a></p>\n<p>Spark-sqlのトレーニングビデオ<br>\n<a href=\"http://spark-summit.org/2014/training\" title=\"http://spark-summit.org/2014/training\" target=\"_blank\">http://spark-summit.org/2014/training</a></p>\n<p>GraphはDatabricsのサービス</p>\n",
        "stock_users": [
            "kumazo@github",
            "nanjakkun",
            "poad1010",
            "Reds",
            "kasumani",
            "sbjib"
        ]
    },
    {
        "id": 129052,
        "uuid": "41c1ba6aedb4e1908966",
        "user": {
            "id": 8437,
            "url_name": "ozw_sei",
            "profile_image_url": "https://pbs.twimg.com/profile_images/416733123821314048/-PInIT51_normal.jpeg"
        },
        "title": "Scala",
        "created_at": "2014-09-08 20:40:35 +0900",
        "updated_at": "2014-09-08 20:40:35 +0900",
        "created_at_in_words": "15日",
        "updated_at_in_words": "15日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 9,
        "comment_count": 0,
        "url": "http://qiita.com/ozw_sei/items/41c1ba6aedb4e1908966",
        "created_at_as_seconds": 1410176435,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "http://eed3si9n.com/ja/simplicity-matters\n##Scalaの議論場になっているところ\n- scala is too acedemic\n- scala has sold out to indeusrry\n- scala types are too hard\n- scala types are not sict enough\n- scala is everything and the kitchen sink\n- Scalaは何でも入れすぎ\n\n##Scalaのコンセプト\n- Scalable\n\t- meaning Scalable\n\t\t- Growable\n\t\t\t- Growing language\n\t\t\t- https://www.youtube.com/watch?v=_ahvzDzKdB0\n\t\t- 言語設計の視点での成長できる言語\n\t\t- スケーラブル\n\t\t\t- ひとつは成長、もうひとつは小さなところでも大きなところでも使えるところ\n\t\t- 言語は抽象化に徹して、ライブラリで高度な機能を実現する。\n\t\t\t- sbt, scalaz, akka, slick, specsなど\n\t\n##Growable = Good?\n- The lisp curse\n\t- DSLは諸刃の剣である\n\t- growableはlispでもそうだが、何でも自分でやるとなると、コミュニティの分断化が起きる\n\t- 所謂「Lispの呪い」バベルの塔\n\n##Growth\n- 大きな問題にも使えて小さなものにも活用可能だ\n\n- 関数型？オブジェクト指向？\n\t- お互いで嫌い合っているところがある\n\n- お互いを組み合わせた新しい名前が必要「モジューラー」はどうだろうか。\n\n- 単純な部品を組み合わせる\n\n- should we back to modula-2?\n\t- modular programing\n\n- 似た構造だが、ハードウェアに近すぎた\n- ジョンフォンノイマン（Fortranの作者）はチューリング翔を受賞したが、受賞時にはもうオワコンを言っていた\n- メモリを一つ一つ読み込まなければならない問題をvon-neumann bottleneckと呼んだ\n\nSimple != Easy\n\n\n\n3. グループ\n- なんでもグループ化したり、入れ子にでくう\n- 性的スコープが基本\n古典的な手続き型言語だとループになんでも書く傾向にあるがScalaだと関数を高級関数に渡す\n名前をつけるのも大事\n一行ごとに意味のある名前を定義する（テストに出る）\n同じロジックに一行ごとに意味のある名前をつけてみた\n\n4. 再帰\n\t- あとで読む人のことを考えるということ\n\t- 極力コレクションやflatMapでやる\n\t- flatMapで煩雑になる時は再帰を考える\n\t- パターンマッチと再帰は相性が良い\n\t- boxingならばパフォーマンスも関係ない\n\t- 高級感数にはペナルティがある.\n\t\t- だからカリカリ早くしたいときは再帰が良い\n\t\t- 再帰は任意の回数繰り返せるし、ほぼすべての場合loopより便利\n\n5. 抽象化\n\t- だがしかし、ボイラープレート多め\n\t- 関数は抽象的な式\n\t- 値でも名前があってもなくても良い\n\t\n6. 集約\n\t- pythonは名前を付ける必要があるけど、それがいい事のほうが良い\n\t- コレクションはデータの集約\n\t- Sparkのように巨大なコレクションでも同じ考え方を使ってる\n\t- TransformはCRUDのかわり\n\t- 基本的に色々再利用しているので同じ演算には同じ名前を使用しているはず\n\t- Scalaコレクションユーザの多くはうまく言っていると言っているが・・・　\n\t- 型が嘘であることもある\n\n7. 可変性\n- 可変であることはモジューラに反してはいないか？\n- それでも使うべき時がある\n\t- caching : lazy val memoized functions, intermed name, LRLCache \n\t- persisting: once a value is stable, store it in an object\n\t- copy on write\n\t- fresh value\n\t- typer state\n\n##関数型の特徴にキャッシュがある\n- 所謂メモ化\n- ここでは可変コレクションが便利\n\t- lazy valはあるけれど使い道はかなり限られる\n- persisting 永続化\n\t- Mapになんでも入れすぎるとメモリリークする\n\t\n\n##なぜモナドを使わないのか?\n- モナドにも制限がある\n- 継承関係を検査kするisSubTypeの具体例\n\n```example.scala\nif(isSubType(t1, t2) && usSybType(t2, t3)) result\n\n// Monado\nfor{\n\tc1 -> isSubType(t1, t2) \n\tc2 -> isSubType(t2, t3)\n\tif c1 && c2\n} yield result\n```\n\n- ifのかわりにfor式で結果を引き出す必要がある。\n- どっちのほうがいい？場合によよるけど。\n\t- 関数型原理派に反するけど私は上のifでいいと思ってる\n\n##型付けの話\n- Clojure\n\t- syntax\n- Scala\n\t- arguments\n- Haskell\n\t- effects\n- Idris\n\t- values\n- Conq\n\t- correctness\n",
        "body": "<p><a href=\"http://eed3si9n.com/ja/simplicity-matters\" title=\"http://eed3si9n.com/ja/simplicity-matters\" target=\"_blank\">http://eed3si9n.com/ja/simplicity-matters</a></p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Scalaの議論場になっているところ\n      </h2>\n<ul>\n<li>scala is too acedemic</li>\n<li>scala has sold out to indeusrry</li>\n<li>scala types are too hard</li>\n<li>scala types are not sict enough</li>\n<li>scala is everything and the kitchen sink</li>\n<li>Scalaは何でも入れすぎ</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Scalaのコンセプト\n      </h2>\n<ul>\n<li>Scalable\n\n<ul>\n<li>meaning Scalable\n\n<ul>\n<li>Growable\n\n<ul>\n<li>Growing language</li>\n<li><a href=\"https://www.youtube.com/watch?v=_ahvzDzKdB0\" title=\"https://www.youtube.com/watch?v=_ahvzDzKdB0\" target=\"_blank\">https://www.youtube.com/watch?v=_ahvzDzKdB0</a></li>\n</ul></li>\n<li>言語設計の視点での成長できる言語</li>\n<li>スケーラブル\n\n<ul>\n<li>ひとつは成長、もうひとつは小さなところでも大きなところでも使えるところ</li>\n</ul></li>\n<li>言語は抽象化に徹して、ライブラリで高度な機能を実現する。\n\n<ul>\n<li>sbt, scalaz, akka, slick, specsなど</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Growable = Good?\n      </h2>\n<ul>\n<li>The lisp curse\n\n<ul>\n<li>DSLは諸刃の剣である</li>\n<li>growableはlispでもそうだが、何でも自分でやるとなると、コミュニティの分断化が起きる</li>\n<li>所謂「Lispの呪い」バベルの塔</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>Growth\n      </h2>\n<ul>\n<li><p>大きな問題にも使えて小さなものにも活用可能だ</p></li>\n<li><p>関数型？オブジェクト指向？</p>\n\n<ul>\n<li>お互いで嫌い合っているところがある</li>\n</ul></li>\n<li><p>お互いを組み合わせた新しい名前が必要「モジューラー」はどうだろうか。</p></li>\n<li><p>単純な部品を組み合わせる</p></li>\n<li><p>should we back to modula-2?</p>\n\n<ul>\n<li>modular programing</li>\n</ul></li>\n<li><p>似た構造だが、ハードウェアに近すぎた</p></li>\n<li><p>ジョンフォンノイマン（Fortranの作者）はチューリング翔を受賞したが、受賞時にはもうオワコンを言っていた</p></li>\n<li><p>メモリを一つ一つ読み込まなければならない問題をvon-neumann bottleneckと呼んだ</p></li>\n</ul>\n<p>Simple != Easy</p>\n\n<ol>\n<li>グループ</li>\n<li>なんでもグループ化したり、入れ子にでくう</li>\n<li><p>性的スコープが基本<br>\n古典的な手続き型言語だとループになんでも書く傾向にあるがScalaだと関数を高級関数に渡す<br>\n名前をつけるのも大事<br>\n一行ごとに意味のある名前を定義する（テストに出る）<br>\n同じロジックに一行ごとに意味のある名前をつけてみた</p></li>\n<li><p>再帰</p>\n\n<ul>\n<li>あとで読む人のことを考えるということ</li>\n<li>極力コレクションやflatMapでやる</li>\n<li>flatMapで煩雑になる時は再帰を考える</li>\n<li>パターンマッチと再帰は相性が良い</li>\n<li>boxingならばパフォーマンスも関係ない</li>\n<li>高級感数にはペナルティがある.\n\n<ul>\n<li>だからカリカリ早くしたいときは再帰が良い</li>\n<li>再帰は任意の回数繰り返せるし、ほぼすべての場合loopより便利</li>\n</ul></li>\n</ul></li>\n<li><p>抽象化</p>\n\n<ul>\n<li>だがしかし、ボイラープレート多め</li>\n<li>関数は抽象的な式</li>\n<li>値でも名前があってもなくても良い</li>\n</ul></li>\n<li><p>集約</p>\n\n<ul>\n<li>pythonは名前を付ける必要があるけど、それがいい事のほうが良い</li>\n<li>コレクションはデータの集約</li>\n<li>Sparkのように巨大なコレクションでも同じ考え方を使ってる</li>\n<li>TransformはCRUDのかわり</li>\n<li>基本的に色々再利用しているので同じ演算には同じ名前を使用しているはず</li>\n<li>Scalaコレクションユーザの多くはうまく言っていると言っているが・・・　</li>\n<li>型が嘘であることもある</li>\n</ul></li>\n<li><p>可変性</p></li>\n<li><p>可変であることはモジューラに反してはいないか？</p></li>\n<li><p>それでも使うべき時がある</p>\n\n<ul>\n<li>caching : lazy val memoized functions, intermed name, LRLCache </li>\n<li>persisting: once a value is stable, store it in an object</li>\n<li>copy on write</li>\n<li>fresh value</li>\n<li>typer state</li>\n</ul></li>\n</ol>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>関数型の特徴にキャッシュがある\n      </h2>\n<ul>\n<li>所謂メモ化</li>\n<li>ここでは可変コレクションが便利\n\n<ul>\n<li>lazy valはあるけれど使い道はかなり限られる</li>\n</ul></li>\n<li>persisting 永続化\n\n<ul>\n<li>Mapになんでも入れすぎるとメモリリークする</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>なぜモナドを使わないのか?\n      </h2>\n<ul>\n<li>モナドにも制限がある</li>\n<li>継承関係を検査kするisSubTypeの具体例</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">example.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isSubType</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">usSybType</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">t3</span><span class=\"o\">))</span> <span class=\"n\">result</span>\n\n<span class=\"c1\">// Monado</span>\n<span class=\"k\">for</span><span class=\"o\">{</span>\n    <span class=\"n\">c1</span> <span class=\"o\">-&gt;</span> <span class=\"n\">isSubType</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">)</span> \n    <span class=\"n\">c2</span> <span class=\"o\">-&gt;</span> <span class=\"n\">isSubType</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">c1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c2</span>\n<span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"n\">result</span>\n</pre></div></div>\n<ul>\n<li>ifのかわりにfor式で結果を引き出す必要がある。</li>\n<li>どっちのほうがいい？場合によよるけど。\n\n<ul>\n<li>関数型原理派に反するけど私は上のifでいいと思ってる</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>型付けの話\n      </h2>\n<ul>\n<li>Clojure\n\n<ul>\n<li>syntax</li>\n</ul></li>\n<li>Scala\n\n<ul>\n<li>arguments</li>\n</ul></li>\n<li>Haskell\n\n<ul>\n<li>effects</li>\n</ul></li>\n<li>Idris\n\n<ul>\n<li>values</li>\n</ul></li>\n<li>Conq\n\n<ul>\n<li>correctness</li>\n</ul></li>\n</ul>\n",
        "stock_users": [
            "takehiro_t59",
            "kumazo@github",
            "tos-miyake",
            "Hugo62044083",
            "poad1010",
            "Reds",
            "kasumani",
            "sbjib",
            "KatsuoBushiFPGA"
        ]
    },
    {
        "id": 128446,
        "uuid": "1c28f0b21dbd4d06262b",
        "user": {
            "id": 47014,
            "url_name": "rubyu",
            "profile_image_url": "https://pbs.twimg.com/profile_images/585391487/qBqPu0mK.20061024094725_normal.jpg"
        },
        "title": "sys.processで複数のProcessBuilderを接続した場合にブロッキングが発生する問題（2.12.0-M1で解決予定）",
        "created_at": "2014-09-08 08:09:57 +0900",
        "updated_at": "2014-09-09 12:43:07 +0900",
        "created_at_in_words": "15日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/rubyu/items/1c28f0b21dbd4d06262b",
        "created_at_as_seconds": 1410131397,
        "tweet": true,
        "gist_url": "https://gist.github.com/9b1a82bfe0ddcc2df6e5",
        "private": false,
        "raw_body": "外部のコマンドを連続で叩く用途に`sys.process`を使っていて気づいたのですが、ProcessBuilderを繋げて使用する場合に、例えば以下のような状況で、内部でブロックしてしまって応答がなくなることがあります。（[[SI-8768] scala.sys.process.PipedProcesses.runAndExitValue() may block and never return value - Scala](https://issues.scala-lang.org/browse/SI-8768)）\n\n```scala\nimport sys.process._\n\ndef input = new ByteArrayInputStream(\"input\".getBytes)\n// wcコマンドにinputという文字列を標準入力から渡す x 100回\nfor (i <- 0 until 100)\n  \"wc\" #< input !!\n```\n\nソースを調べると、`ProcessImpl.scala`の`PipedProcesses`中で、`SyncVar`を介した値のやり取りで、タイミングによってブロッキングが発生する感じです。（以下のコード中で、`first`と`second`が正常に接続されず、かつ`second`が標準入力のデータを前提としている場合にブロックする）\n\n```scala\n  private[process] class PipedProcesses(a: ProcessBuilder, b: ProcessBuilder, defaultIO: ProcessIO, toError: Boolean) extends CompoundProcess {\n    protected[this] override def runAndExitValue() = {\n      val currentSource = new SyncVar[Option[InputStream]]\n      val pipeOut       = new PipedOutputStream\n      val source        = new PipeSource(currentSource, pipeOut, a.toString)\n      source.start()\n\n      val pipeIn      = new PipedInputStream(pipeOut)\n      val currentSink = new SyncVar[Option[OutputStream]]\n      val sink        = new PipeSink(pipeIn, currentSink, b.toString)\n      sink.start()\n\n      def handleOutOrError(fromOutput: InputStream) = currentSource put Some(fromOutput)\n\n      val firstIO =\n        if (toError)\n          defaultIO.withError(handleOutOrError)\n        else\n          defaultIO.withOutput(handleOutOrError)\n      // この処理より\n      val secondIO = defaultIO.withInput(toInput => currentSink put Some(toInput))\n      val second = b.run(secondIO)\n      val first = a.run(firstIO)\n      try {\n        runInterruptible {\n          val exit1 = first.exitValue()\n          currentSource put None\n          // こっちのが早いタイミングで実行されると、プロセスが正常に接続されない\n          currentSink put None\n          val exit2 = second.exitValue()\n          // Since file redirection (e.g. #>) is implemented as a piped process,\n          // we ignore its exit value so cmd #> file doesn't always return 0.\n          if (b.hasExitValue) exit2 else exit1\n        } {\n          first.destroy()\n          second.destroy()\n        }\n      }\n      finally {\n        BasicIO close pipeIn\n        BasicIO close pipeOut\n      }\n    }\n  }\n```\n\nまた、このクラスではリソースリーク（[[SI-7350] scala.sys.process.ProcessImpl.PipedProcess.destroy() does not clean up pipe threads - Scala](https://issues.scala-lang.org/browse/SI-7350)）なども発生することがあります。\n\nちょっとアレなので使用を避けるべきかちょっと考えたのですが、結局修正して使うことにしました。送ったパッチは[マージされた](https://github.com/scala/scala/pull/3920)ので、Scala 2.12.0-M1で恐らく修正が反映されるはずです。僕ぐらいのショボい英語力でもpull requestを送ってやりとりするのに問題ない（ほんとか？）ことがわかったのは収穫でした。\n\nそれほどレアなユースケースではないと思うんですが、「このDSLカッケーっしょー？」って`sys.process`の記事を見かけるわりに、誰も気がついていないということはもしかして、みんな実際には`sys.process`を使ってない…？\n",
        "body": "<p>外部のコマンドを連続で叩く用途に<code>sys.process</code>を使っていて気づいたのですが、ProcessBuilderを繋げて使用する場合に、例えば以下のような状況で、内部でブロックしてしまって応答がなくなることがあります。（<a href=\"https://issues.scala-lang.org/browse/SI-8768\" title=\"\" target=\"_blank\">[SI-8768] scala.sys.process.PipedProcesses.runAndExitValue() may block and never return value - Scala</a>）</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">sys.process._</span>\n\n<span class=\"k\">def</span> <span class=\"n\">input</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ByteArrayInputStream</span><span class=\"o\">(</span><span class=\"s\">&quot;input&quot;</span><span class=\"o\">.</span><span class=\"n\">getBytes</span><span class=\"o\">)</span>\n<span class=\"c1\">// wcコマンドにinputという文字列を標準入力から渡す x 100回</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"k\">&lt;-</span> <span class=\"mi\">0</span> <span class=\"n\">until</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n  <span class=\"s\">&quot;wc&quot;</span> <span class=\"o\">#&lt;</span> <span class=\"n\">input</span> <span class=\"o\">!!</span>\n</pre></div></div><p>ソースを調べると、<code>ProcessImpl.scala</code>の<code>PipedProcesses</code>中で、<code>SyncVar</code>を介した値のやり取りで、タイミングによってブロッキングが発生する感じです。（以下のコード中で、<code>first</code>と<code>second</code>が正常に接続されず、かつ<code>second</code>が標準入力のデータを前提としている場合にブロックする）</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">private</span><span class=\"o\">[</span><span class=\"kt\">process</span><span class=\"o\">]</span> <span class=\"k\">class</span> <span class=\"nc\">PipedProcesses</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">ProcessBuilder</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">ProcessBuilder</span><span class=\"o\">,</span> <span class=\"n\">defaultIO</span><span class=\"k\">:</span> <span class=\"kt\">ProcessIO</span><span class=\"o\">,</span> <span class=\"n\">toError</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">CompoundProcess</span> <span class=\"o\">{</span>\n    <span class=\"k\">protected</span><span class=\"o\">[</span><span class=\"kt\">this</span><span class=\"o\">]</span> <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">runAndExitValue</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">currentSource</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SyncVar</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">InputStream</span><span class=\"o\">]]</span>\n      <span class=\"k\">val</span> <span class=\"n\">pipeOut</span>       <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipedOutputStream</span>\n      <span class=\"k\">val</span> <span class=\"n\">source</span>        <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipeSource</span><span class=\"o\">(</span><span class=\"n\">currentSource</span><span class=\"o\">,</span> <span class=\"n\">pipeOut</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n      <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"o\">()</span>\n\n      <span class=\"k\">val</span> <span class=\"n\">pipeIn</span>      <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipedInputStream</span><span class=\"o\">(</span><span class=\"n\">pipeOut</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">currentSink</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SyncVar</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">OutputStream</span><span class=\"o\">]]</span>\n      <span class=\"k\">val</span> <span class=\"n\">sink</span>        <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipeSink</span><span class=\"o\">(</span><span class=\"n\">pipeIn</span><span class=\"o\">,</span> <span class=\"n\">currentSink</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n      <span class=\"n\">sink</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"o\">()</span>\n\n      <span class=\"k\">def</span> <span class=\"n\">handleOutOrError</span><span class=\"o\">(</span><span class=\"n\">fromOutput</span><span class=\"k\">:</span> <span class=\"kt\">InputStream</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">currentSource</span> <span class=\"n\">put</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">fromOutput</span><span class=\"o\">)</span>\n\n      <span class=\"k\">val</span> <span class=\"n\">firstIO</span> <span class=\"k\">=</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toError</span><span class=\"o\">)</span>\n          <span class=\"n\">defaultIO</span><span class=\"o\">.</span><span class=\"n\">withError</span><span class=\"o\">(</span><span class=\"n\">handleOutOrError</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">defaultIO</span><span class=\"o\">.</span><span class=\"n\">withOutput</span><span class=\"o\">(</span><span class=\"n\">handleOutOrError</span><span class=\"o\">)</span>\n      <span class=\"c1\">// この処理より</span>\n      <span class=\"k\">val</span> <span class=\"n\">secondIO</span> <span class=\"k\">=</span> <span class=\"n\">defaultIO</span><span class=\"o\">.</span><span class=\"n\">withInput</span><span class=\"o\">(</span><span class=\"n\">toInput</span> <span class=\"k\">=&gt;</span> <span class=\"n\">currentSink</span> <span class=\"n\">put</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">toInput</span><span class=\"o\">))</span>\n      <span class=\"k\">val</span> <span class=\"n\">second</span> <span class=\"k\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">secondIO</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">first</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">firstIO</span><span class=\"o\">)</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">runInterruptible</span> <span class=\"o\">{</span>\n          <span class=\"k\">val</span> <span class=\"n\">exit1</span> <span class=\"k\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">exitValue</span><span class=\"o\">()</span>\n          <span class=\"n\">currentSource</span> <span class=\"n\">put</span> <span class=\"nc\">None</span>\n          <span class=\"c1\">// こっちのが早いタイミングで実行されると、プロセスが正常に接続されない</span>\n          <span class=\"n\">currentSink</span> <span class=\"n\">put</span> <span class=\"nc\">None</span>\n          <span class=\"k\">val</span> <span class=\"n\">exit2</span> <span class=\"k\">=</span> <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"n\">exitValue</span><span class=\"o\">()</span>\n          <span class=\"c1\">// Since file redirection (e.g. #&gt;) is implemented as a piped process,</span>\n          <span class=\"c1\">// we ignore its exit value so cmd #&gt; file doesn&#39;t always return 0.</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">hasExitValue</span><span class=\"o\">)</span> <span class=\"n\">exit2</span> <span class=\"k\">else</span> <span class=\"n\">exit1</span>\n        <span class=\"o\">}</span> <span class=\"o\">{</span>\n          <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"o\">()</span>\n          <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">finally</span> <span class=\"o\">{</span>\n        <span class=\"nc\">BasicIO</span> <span class=\"n\">close</span> <span class=\"n\">pipeIn</span>\n        <span class=\"nc\">BasicIO</span> <span class=\"n\">close</span> <span class=\"n\">pipeOut</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p>また、このクラスではリソースリーク（<a href=\"https://issues.scala-lang.org/browse/SI-7350\" title=\"\" target=\"_blank\">[SI-7350] scala.sys.process.ProcessImpl.PipedProcess.destroy() does not clean up pipe threads - Scala</a>）なども発生することがあります。</p>\n<p>ちょっとアレなので使用を避けるべきかちょっと考えたのですが、結局修正して使うことにしました。送ったパッチは<a href=\"https://github.com/scala/scala/pull/3920\" title=\"\" target=\"_blank\">マージされた</a>ので、Scala 2.12.0-M1で恐らく修正が反映されるはずです。僕ぐらいのショボい英語力でもpull requestを送ってやりとりするのに問題ない（ほんとか？）ことがわかったのは収穫でした。</p>\n<p>それほどレアなユースケースではないと思うんですが、「このDSLカッケーっしょー？」って<code>sys.process</code>の記事を見かけるわりに、誰も気がついていないということはもしかして、みんな実際には<code>sys.process</code>を使ってない…？</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 127269,
        "uuid": "32fa2433e566b2bb5557",
        "user": {
            "id": 19408,
            "url_name": "_shimada",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1407436362/avatar_normal.jpg"
        },
        "title": "play-scala 2.3.4にScalikeJDBC 2.1.1を組み合わせようとしてハマったこと。",
        "created_at": "2014-09-05 12:43:39 +0900",
        "updated_at": "2014-09-05 12:45:39 +0900",
        "created_at_in_words": "18日",
        "updated_at_in_words": "18日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": [
                    "2.3.4"
                ]
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/_shimada/items/32fa2433e566b2bb5557",
        "created_at_as_seconds": 1409888619,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 1. play.pluginsは自分で作る\n\n`activator new` したプロジェクトには `conf/play.plugins` というファイルがないので、自分で作って書き込む必要がある。\n書き込む内容は[CookBook](https://github.com/scalikejdbc/scalikejdbc-cookbook/blob/master/ja/10_play.md)に書いてある。\n\n\n## 2. Build.scalaはbuild.sbtに読み替える\n\nCookBookには Build.scala を編集しろとあるが、build.sbt しかない。そして中を見ても見慣れた\n`\"hogehoge\" %% \"hoge\" % \"x.x.x\"`\nといったライブラリを登録する記述が見当たらない。しかしよく見ると…\n\n```build.sbt\nlibraryDependencies ++= Seq(\n  jdbc,\n  anorm,\n  cache,\n  ws\n)\n```\n\nおそらくjdbc, anormなどが定義済みの変数だかになっているだけなので、その中に\n`\"org.scalikejdbc\" %% \"scalikejdbc\" % \"2.1.1\"`\nを追加すれば登録できる。\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>1. play.pluginsは自分で作る\n      </h2><p><code>activator new</code> したプロジェクトには <code>conf/play.plugins</code> というファイルがないので、自分で作って書き込む必要がある。<br>\n書き込む内容は<a href=\"https://github.com/scalikejdbc/scalikejdbc-cookbook/blob/master/ja/10_play.md\" title=\"\" target=\"_blank\">CookBook</a>に書いてある。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>2. Build.scalaはbuild.sbtに読み替える\n      </h2><p>CookBookには Build.scala を編集しろとあるが、build.sbt しかない。そして中を見ても見慣れた<br>\n<code>&quot;hogehoge&quot; %% &quot;hoge&quot; % &quot;x.x.x&quot;</code><br>\nといったライブラリを登録する記述が見当たらない。しかしよく見ると…</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"n\">jdbc</span><span class=\"o\">,</span>\n  <span class=\"n\">anorm</span><span class=\"o\">,</span>\n  <span class=\"n\">cache</span><span class=\"o\">,</span>\n  <span class=\"n\">ws</span>\n<span class=\"o\">)</span>\n</pre></div></div><p>おそらくjdbc, anormなどが定義済みの変数だかになっているだけなので、その中に<br>\n<code>&quot;org.scalikejdbc&quot; %% &quot;scalikejdbc&quot; % &quot;2.1.1&quot;</code><br>\nを追加すれば登録できる。</p>\n",
        "stock_users": [
            "kasumani",
            "nilfigo"
        ]
    },
    {
        "id": 125651,
        "uuid": "ff5cc81664a2545b85d1",
        "user": {
            "id": 13148,
            "url_name": "bells17",
            "profile_image_url": "https://avatars.githubusercontent.com/u/2158863?"
        },
        "title": "Scala + PlayFramework(主にmacで)",
        "created_at": "2014-09-04 01:47:02 +0900",
        "updated_at": "2014-09-04 01:47:02 +0900",
        "created_at_in_words": "20日",
        "updated_at_in_words": "20日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/bells17/items/ff5cc81664a2545b85d1",
        "created_at_as_seconds": 1409762822,
        "tweet": false,
        "gist_url": "https://gist.github.com/ac91f7b3d64742e4e34b",
        "private": false,
        "raw_body": "\n\n## 環境構築\n\n### Scala\n\nhttp://qiita.com/shoma2da/items/b131c53ffa958c9386f7\n\nこれでScalaが動くところまで試せる\n\n### Play Framework\n\nhttp://seratch.hatenablog.jp/entry/20120410/1334074688\nhttp://seratch.hatenablog.jp/entry/20120118/1326888522\n\nmacなら\n\n```\nbrew install play\n```\n\nしたあとにプロジェクトを作りたいディレクトリで\n\n```\nplay new [プロジェクト名]\n\nWhat is the application name? \n> [プロジェクト名]\n\n```\n\nで行ける\n\n\n### エディタ\nIntelliJ IDEA\nhttp://www.jetbrains.com/idea/\n\n有償版もあるがJava Scalaで無料で利用できるCommunity Editionがあるのでこれがおすすめ\n\nIntelliJ IDEA + Scala + Play Framwork環境構築\nhttp://d.hatena.ne.jp/absj31/20130119/1358590311\nhttp://www.playframework-ja.org/documentation/2.1.5/IDE\n\n\nここに書いてあることをやればローカルでのplayの起動+IntelliJ IDEAを使用したデバッグまでの環境構築が完了\n\n\n一応コマンドをまとめると\nIntelliJ IDEAでPlayを利用するためのJavaのパッケージ？を/path/to/project/.idea/に生成するコマンドは\n\n```\nplay\n\n[プロジェクト名] $ idea with-sources=yes\n```\n\nを行う\n\n\n\nIntelliJ IDEAのデバッグコンソールを利用できるようにするにはIntelliJ IDEAで\n>\nRun/Debug Configurations の設定ダイアログを開き、Run -> Edit Configurations をクリックします\nRemote 設定を追加し、Remote を選択します\n以下の内容を設定します。\n名前を設定する\nTransport: Socket を設定する\nDebugger mode: Attach を設定する\nHost: localhost を設定する\nPort: 9999 を設定する\nインポートしたモジュールを選択する\nApply をクリックし、ダイアログをクローズします\n\nを設定してから\n\n```\nplay debug\n\n[プロジェクト名] $ run\n```\n\nでplayを起動してからIntelliJ IDEAでブレークポイントを設定して\nhttp://localhost:9000\nを開くとブラウザでページ読み込みが完了しないで設定した部分のブレークポイントでページが止まる\n\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>環境構築\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>Scala\n      </h3><p><a href=\"http://qiita.com/shoma2da/items/b131c53ffa958c9386f7\" title=\"http://qiita.com/shoma2da/items/b131c53ffa958c9386f7\">http://qiita.com/shoma2da/items/b131c53ffa958c9386f7</a></p>\n<p>これでScalaが動くところまで試せる</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>Play Framework\n      </h3><p><a href=\"http://seratch.hatenablog.jp/entry/20120410/1334074688\" title=\"http://seratch.hatenablog.jp/entry/20120410/1334074688\" target=\"_blank\">http://seratch.hatenablog.jp/entry/20120410/1334074688</a><br>\n<a href=\"http://seratch.hatenablog.jp/entry/20120118/1326888522\" title=\"http://seratch.hatenablog.jp/entry/20120118/1326888522\" target=\"_blank\">http://seratch.hatenablog.jp/entry/20120118/1326888522</a></p>\n<p>macなら</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>brew install play\n</pre></div></div><p>したあとにプロジェクトを作りたいディレクトリで</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>play new [プロジェクト名]\n\nWhat is the application name? \n&gt; [プロジェクト名]\n</pre></div></div><p>で行ける</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>エディタ\n      </h3><p>IntelliJ IDEA<br>\n<a href=\"http://www.jetbrains.com/idea/\" title=\"http://www.jetbrains.com/idea/\" target=\"_blank\">http://www.jetbrains.com/idea/</a></p>\n<p>有償版もあるがJava Scalaで無料で利用できるCommunity Editionがあるのでこれがおすすめ</p>\n<p>IntelliJ IDEA + Scala + Play Framwork環境構築<br>\n<a href=\"http://d.hatena.ne.jp/absj31/20130119/1358590311\" title=\"http://d.hatena.ne.jp/absj31/20130119/1358590311\" target=\"_blank\">http://d.hatena.ne.jp/absj31/20130119/1358590311</a><br>\n<a href=\"http://www.playframework-ja.org/documentation/2.1.5/IDE\" title=\"http://www.playframework-ja.org/documentation/2.1.5/IDE\" target=\"_blank\">http://www.playframework-ja.org/documentation/2.1.5/IDE</a></p>\n<p>ここに書いてあることをやればローカルでのplayの起動+IntelliJ IDEAを使用したデバッグまでの環境構築が完了</p>\n<p>一応コマンドをまとめると<br>\nIntelliJ IDEAでPlayを利用するためのJavaのパッケージ？を/path/to/project/.idea/に生成するコマンドは</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>play\n\n[プロジェクト名] $ idea with-sources=yes\n</pre></div></div><p>を行う</p>\n<p>IntelliJ IDEAのデバッグコンソールを利用できるようにするにはIntelliJ IDEAで</p>\n\n<blockquote>\n<p>Run/Debug Configurations の設定ダイアログを開き、Run -&gt; Edit Configurations をクリックします<br>\nRemote 設定を追加し、Remote を選択します<br>\n以下の内容を設定します。<br>\n名前を設定する<br>\nTransport: Socket を設定する<br>\nDebugger mode: Attach を設定する<br>\nHost: localhost を設定する<br>\nPort: 9999 を設定する<br>\nインポートしたモジュールを選択する<br>\nApply をクリックし、ダイアログをクローズします</p>\n</blockquote>\n<p>を設定してから</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>play debug\n\n[プロジェクト名] $ run\n</pre></div></div><p>でplayを起動してからIntelliJ IDEAでブレークポイントを設定して<br>\n<a href=\"http://localhost:9000\" title=\"http://localhost:9000\" target=\"_blank\">http://localhost:9000</a><br>\nを開くとブラウザでページ読み込みが完了しないで設定した部分のブレークポイントでページが止まる</p>\n",
        "stock_users": [
            "kasumani",
            "nakanaide",
            "Ray701",
            "tetsuzin",
            "Reds"
        ]
    },
    {
        "id": 121842,
        "uuid": "76f9da5489a5d905eea5",
        "user": {
            "id": 8437,
            "url_name": "ozw_sei",
            "profile_image_url": "https://pbs.twimg.com/profile_images/416733123821314048/-PInIT51_normal.jpeg"
        },
        "title": "Slick2.0に適当なWeb向けラッパーをつくってみた",
        "created_at": "2014-08-31 20:54:31 +0900",
        "updated_at": "2014-08-31 23:01:23 +0900",
        "created_at_in_words": "23日",
        "updated_at_in_words": "23日",
        "tags": [
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            },
            {
                "name": "Play2",
                "url_name": "play2",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f8d7c0088c04def66debcfcc9915914dc2c11df/medium.jpg?1364840479",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/ozw_sei/items/76f9da5489a5d905eea5",
        "created_at_as_seconds": 1409486071,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n##環境\n- Scala2.11\n- Play2.3\n- Slick2.1\n\n##要件\n- エンティティ・テーブル定義でcreated, updated, del_flgなど全てのテーブルの共通のカラムをいちいち入力するのがだるい。\n- findByIdやcreate, insertをテーブルごとに定義するのだるい\n\nつまり、Slickは純粋にSQL操作をScalaのコレクションっぽく操作できるAPIとして設計されてるけど、Webアプリケーション開発でそのまま使うは使えないなぁと\n\n##コード\n```TableBase.scala\n\ntrait TableBase[T <: EntityBase]{ self: Table[T] =>\n  def id: Column[Option[Long]] = column[Option[Long]](\"id\", O.PrimaryKey, O.AutoInc)\n  def created = column[Option[Timestamp]](\"created\", O.NotNull)\n  def updated = column[Option[Timestamp]](\"updated\", O.NotNull)\n}\n\n```\n\n```DaoBase.scala\ntrait DAOBase[E <: EntityBase, T <: Table[E]{def id:Column[Option[Long]]}]{\n  protected def query : TableQuery[T]\n\n\n  def findById(id:Long)(implicit session:Session) : Option[E] = {\n    query.filter(_.id === id).firstOption\n  }\n\n  def create(entity:E)(implicit session:Session){\n    query.insert(entity)\n  }\n\n  def remove(entity:E)(implicit session:Session) {\n    remove(entity.id.get)\n  }\n\n  def remove(id:Long)(implicit session:Session) {\n    query.filter(_.id === id).delete\n  }\n\n  def update(entity:E)(implicit session:Session) {\n    query.filter(_.id === entity.id).update(entity)\n  }\n}\n```\n\n\n```EntityBase.scala\n\ntrait EntityBase {\n  val id:Option[Long]\n  val created: Timestamp = new Timestamp(System.currentTimeMillis)\n  val updated: Timestamp = new Timestamp(System.currentTimeMillis)\n}\n```\n\n##使い方\n\n```Human.scala\n\n//エンティティ定義\ncase class Human(id: Option[Long], name: String) extends EntityBase\n\n// DAO定義\nobject Humans extends DAOBase[Human, HumansTable]{\n  override def query = TableQuery[HumansTable]\n  //ここに固有のデータ抽出処理はここに書く\n}\n\n// テーブル定義\nclass HumansTable(tag: Tag) extends Table[Human](tag, \"humans\") with TableBase[Human]{\n  def name = column[String](\"name\", O.NotNull)\n  def * = (id, name) <> (Human.tupled, Human.unapply)\n}\n\n```\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>環境\n      </h2>\n<ul>\n<li>Scala2.11</li>\n<li>Play2.3</li>\n<li>Slick2.1</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>要件\n      </h2>\n<ul>\n<li>エンティティ・テーブル定義でcreated, updated, del_flgなど全てのテーブルの共通のカラムをいちいち入力するのがだるい。</li>\n<li>findByIdやcreate, insertをテーブルごとに定義するのだるい</li>\n</ul>\n<p>つまり、Slickは純粋にSQL操作をScalaのコレクションっぽく操作できるAPIとして設計されてるけど、Webアプリケーション開発でそのまま使うは使えないなぁと</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>コード\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">TableBase.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">TableBase</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">EntityBase</span><span class=\"o\">]{</span> <span class=\"n\">self</span><span class=\"k\">:</span> <span class=\"kt\">Table</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span>\n  <span class=\"k\">def</span> <span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">created</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Timestamp</span><span class=\"o\">]](</span><span class=\"s\">&quot;created&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">updated</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Timestamp</span><span class=\"o\">]](</span><span class=\"s\">&quot;updated&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">DaoBase.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">DAOBase</span><span class=\"o\">[</span><span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">EntityBase</span>, <span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Table</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]{</span><span class=\"kt\">def</span> <span class=\"kt\">id:Column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]]}]{</span>\n  <span class=\"k\">protected</span> <span class=\"k\">def</span> <span class=\"n\">query</span> <span class=\"k\">:</span> <span class=\"kt\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n\n\n  <span class=\"k\">def</span> <span class=\"n\">findById</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span><span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">firstOption</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"k\">:</span><span class=\"kt\">E</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">){</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"k\">:</span><span class=\"kt\">E</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span><span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">delete</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"k\">:</span><span class=\"kt\">E</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">EntityBase.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">EntityBase</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">id</span><span class=\"k\">:</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]</span>\n  <span class=\"k\">val</span> <span class=\"n\">created</span><span class=\"k\">:</span> <span class=\"kt\">Timestamp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Timestamp</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">currentTimeMillis</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">updated</span><span class=\"k\">:</span> <span class=\"kt\">Timestamp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Timestamp</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">currentTimeMillis</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>使い方\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Human.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">//エンティティ定義</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Human</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">],</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">EntityBase</span>\n\n<span class=\"c1\">// DAO定義</span>\n<span class=\"k\">object</span> <span class=\"nc\">Humans</span> <span class=\"k\">extends</span> <span class=\"nc\">DAOBase</span><span class=\"o\">[</span><span class=\"kt\">Human</span>, <span class=\"kt\">HumansTable</span><span class=\"o\">]{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">query</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">HumansTable</span><span class=\"o\">]</span>\n  <span class=\"c1\">//ここに固有のデータ抽出処理はここに書く</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// テーブル定義</span>\n<span class=\"k\">class</span> <span class=\"nc\">HumansTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Human</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;humans&quot;</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"nc\">TableBase</span><span class=\"o\">[</span><span class=\"kt\">Human</span><span class=\"o\">]{</span>\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Human</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Human</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "gutio",
            "morozumi_h",
            "kasumani",
            "Reds"
        ]
    }
]