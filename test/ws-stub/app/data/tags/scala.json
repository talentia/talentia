[
    {
        "id": 137496,
        "uuid": "6c53c1a119daa2fe82dd",
        "user": {
            "id": 1054,
            "url_name": "a_yasui",
            "profile_image_url": "https://pbs.twimg.com/profile_images/3670878724/3c31fab5c27d24fbbb0fded007052c9a_normal.jpeg"
        },
        "title": "Scala 関西勉強会",
        "created_at": "2014-09-20 16:46:48 +0900",
        "updated_at": "2014-09-20 16:46:48 +0900",
        "created_at_in_words": "3日",
        "updated_at_in_words": "3日",
        "tags": [
            {
                "name": "勉強会",
                "url_name": "%e5%8b%89%e5%bc%b7%e4%bc%9a",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/51713336a1474837883624c6cc2b10de6a21ddd8/medium.jpg?1387910883",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/a_yasui/items/6c53c1a119daa2fe82dd",
        "created_at_as_seconds": 1411199208,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n2014/09/20\n\n# Skinny Scala祭りとか\n\n@aa7th? さん\n\n- 学習曲線の話とか聞けた\n- 言語設計者の方の思想を聞けた\n\n## 関西も盛り上げていこうと思った\n\n- 東京は「もういいよね」感なので。\n- 関西待ってるだけじゃヤバイ\n\n## SkinnyFramework\n\n- Scala製ふるすたっく web フレームワーク\n- Scala on Rails\n- Scalatraベース(超シンプルなフレームワーク)\n\n- Servletコンテナ上で動く\n- 国産( @seratch さん )\n\n### How do I use?\n\n- http://skinny-framework.org/\n- 空Zipファイルがおいてるから、それをダウンロードして試すのが速い\n - ( Homebrew, YEOMANでも可 )\n- ./skinny run\n- localhost:8080\n\n- Scaffolding\n - ./skinny g scaffolding members member name:String ...\n - ./skinny db:migrate\n  - 開発はデフォルトでh2 Database. 設定は application.conf\n - ./skinny run\n - localhost:8080/members でもう出る。\n\n### 中身\n\n```scala\npackage controller\n\nclass RootController extends ApplicationController {\n\tdef index = {\n\t\tset(\"name\", \"Scalaなんとか\")\n\t\trender(\"/root/index\")\n\t}\n}\n```\n\n### SkinnyResource\n\n- Restful web Resource\n- 変更したい箇所はoverrideして書き換えればok\n- SkinnyResource を使わない CRUDサンプル in Qiita\n\n### View\n\n```\n<%@val name: String %>\nhellow, ${name}\n```\n\nこんな感じ\n\n#### View Tmeplate\n\n- Scalate を使ってる\n- 形式は Mustache, Scaml, Jade, SSP ( default は SSP )\n - Jade は何かちょっとややこしい？\n\n### Skinny-ORM\n\n\n- ScalikeJDBC Base\n- SkinnyCRUDMapper Traintを継承すると使える\n- Play2 でも他のフレームワークで使える\n\n### その他\n\n- Validator, extends ValidationRule Trait\n- ReverseScaffold \n- Assets(Less, Sass,Scala.js...)\n- Mail\n- FactoryGirl\n- etc...\n\n### Deploy\n\n- war ファイルにして tomcat, jetty に配置\n- Heroku もサポートしたら、ScalaとHerokuの相性がいまいち( ホントはどうにかしたいらしい )\n\n### 感想\n\n- 直感で使いやすい\n- Scala の難しい文法がわからんでもとりあえず大丈夫\n\n- マニュアルやせらさんのブログ記事とか、Scalatraの情報などを元に割とつまらなく簡単なものは作れた\n- Scafolldingが\n\n### 参考資料\n\n全部セラさんの記事\n\nhttp://seratch.hatenablog.jp/\n\n\n# 英語とScalaと私と？\n\ncuret が skinny 製\n\n@daisky さん\n\nScala祭りの再演\n\nせっかく作ったのでもう一度(前の10人ぐらいしか聞いてなかったから)\n\n\n## 僕は英語が苦手です ( I'm not good at English )\n\nTOEIC Score: 300 点\n\n日本語文献は増えてきた\n\nトラブルシューティングだと stackoverflow とか…\n\n- 英語の本(Functional Programming Scala)を読んでる\n- 技術書の英語はパターンあるから、Google翻訳でなんとか意味がとれる\n\n\n# FAQ ? 参加登録時アンケートの質問に答えてみる\n\n@kitora_naoki さん シナジーマーケティング(株)\n\n確率統計テキストマイニング、など。\n\n- Haskellとどのくらい違う？\n - -> だいぶ違う\n - Haskell: 純粋関数型言語\n - Scala: 非純粋関数型言語\n\n- どうやって他の人に教育、学習させているのか？\n - 教育らしい教育をやってません\n - しいて言えば、コードレビュー？ペアプロ\n\n- Java ではなく Scalaを使うことを\n - Scala使います\n - 熱意と覚悟\n- Scala のいいところ\n - いろいろ\n- わるいところ\n - コンパイルが遅い\n - ヒープダンプが解析にくい\n - Java のイマイチな所を引き継いでる\n  - 型消去など\n- JavaとScalaの違い\n - 問題の視点を切り替えた方がいい\n - データ構造が違う\n - Java:List (配列リスト)\n - Scala:List (単方向リスト)\n - 関数型言語では再帰をよく使うから、単方向にしている？\n\n\n# PHPからScalaへ…その後\n\n@UAdachi さん From Chatwork\n\n\n## Chatwork のなんとか\n\nビジネスチャットツール\n\n## PHP から Scalaへ\n\nまだ Scala プロダクションは動いてませんよ。\n\n「チャットワーク　ビール」で検索\n\n\n## なぜ？\n\n- 静的型付け言語を使いたい\n- 合宿やったの3月終わり\n - 進捗道ですか？\n - 学習（5月中旬〜）\n - プロジェクト発足( 7月上旬〜 )\n - 社内勉強会( 8月下旬〜 )\n\n## 独習時期\n\n- PLAY で APIを作ってみる\n- コップ本とか。\n\n### 成果\n\n- SCALAの文法ぐらい\n\n## Join\n\n加藤さん @j5ik2o さん( 糖質制限、肉、、、 )がChatworkにJoinしたから、一緒に。\n\n### 課題\n\n- 簡単なデータ構造\n- 数列、単語カウンター、検索？\n- Akka で Map/Reduce\n\n## レビュー\n\nプルリクしてレビュー\n\n### 成果\n\nパターンマッチ使えるように鳴った。高階関数が使えるように鳴った。\n\n## プロジェクト発足→ペアプロ\n\n7月中旬\n\n- リモートペパプロ\n- ペアプロ:ソロ = 3:7 の時間割合\n- ソロの時は見よう見まねで\n\n### 成果\n\n効率的にできた\n\n- monadic programing へようこそ\n\n## ペアプロのいいところ\n\n- 自然とコーディングに集中できる\n\n## ペアプロで大切なこと\n\n1. 大切なこと\n - だらだらやらない\n - 終了後にコードを噛み砕く時間を用意\n - たまには雑談する（コンパイル中とか）\n\n## どうやってリモートで？\n\nscreenHero\n\n- 自分のキーボードでペアプロできる\n- さくさく（自分が詰まってる時に相手の画面をさくっと見せてくれる）\n- エディタの設定は諦める\n - Emacs派 vs Vim派(かとじゅんさん)\n\n## matome\n\nScalaに移行します宣言\n- ビズリーチさんと勉強会できた\n- 採用（かとじゅんさん）が来た\n\n今後のChatworkに期待してください\n\n\n# さくさくアンドロイド\n\namaya @0x17E さん\n\nLT\n\n- ライブラリを使わない時はおとなしくJavaの方がいい\n\n## Scaloid\n\nhttps://github.com/pocorall/scaloid\n\n- XMLから開放\n- ただし、Scaloid を使うので、細かい所までいじろうとしたらXMLさわるはめに…\n\n## Macroid\n\nhttps://github.com/macroid/macroid\n\n- Scaloid より XML から開放\n- 比較的新しいので公式ドキュメント以外がない\n- DSLの癖が強い\n\n\n## Android-sdk-plugin\n\nAndroid開発用のsbtPlugin\n\n- ビルドが遅い\n\n\n# ぼっち.scala\n\n@tnoda_ さん\n\nScalaリア充はsbtのバグ踏んで爆発してください\n\n## Scalaぼっちの学習\n\nZPD概念（教育学的なアレ）\n\n人でできるかも、と、誰かと一緒ならできるかも、のギャップの差がZPD。\n\n## 効率のよい学習に必要なもの（でぼっちに(ry\n\n- 適切なガイダンス    => MOOC\n- 適切なフィードバック => オンラインジャッジ\n - 段階的にフィードバックがいる\n\n\n- 目標が遠いと、違う方向に行ってしまう\n- 適切な、ガイダンス、フィードバックがアレば順序立てていける。\n\nぼっちだと、圧倒的に不利よね\n\n## ぼっちでもできる学習法\n\n\n\n### MOOC \n大々的にやってる基本無料で利用できる大学の講義\n- http://coursera.org\n - Scala で検索\n - Odasky センセイの講義が出てくる\n - わからんかったら、とりあえず一番上を押したらいいよ\n\n### オンラインジャッジ\n\nわかりやすく言えば、仕様→納品→検収\n\n1. プログラミングコンテスト主演害者が公開してることが多い\n2. 直ぐに結果を知ることができる\n3. 他の人の回答を参考にすることができる\n3. コンテストに参加しなくてもいい\n\nScalaを使えるサイト\n\n1. HackerRank / Scala 2.11 (おすすめ\n2. Atcoder    / 2.9.1 (おすすえｍ\n3. Codeforces / 2.11.2 (問題文の英語が稀に酷い\n\n\n#### www.hackerrank.com\n\nコンテスト。決まった課題、決まった期間で正確さなどを競う\n\n社会人でも参加できる長い開催期間\n\n関数プログラミング限定コンテスト\n\n開催期間１０日間、参加人数が少ない。\n\nオンラインジャッジはいつでも使える。\n難易度の幅は広い\n\nProjectEulerの問題採点もしてくれる\n\n#### atcoder.jp\n\n他の人の回答を見て勉強できる\n\n初心者用の問題が用意されている\n\n# とりあえず使える sbt\n\n@kuchitama さん\n\nhttp://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish\n\n## sbt\n\n- Simple (???)\n - 本家でもSimple消えた\n- Scala Build Tool \n\n## 0.13.5\n\nから ver1 に向けて準備段階\n\n## .sbt or .scala\n\n- 基本は .sbt に。\n- 複雑な処理は .scala に\n - 再利用できそうなら plugin\n\n## Typesafe Activator\n\n- sbt-np plugin いらず\n- scala,java,playのひな形生成\n- play2,3 では標準\n\n## デモ\n\n- `activator new`\n\n- `activator ui` : ウェブ画面で\n\n## 基本の設定\n\n- (key)(method)(setting[s])\n- method:\n - := キーに対して settings を更新\n - += キーに Settingを追加\n - など\n\n\n## 依存ライブラリの取得\n\n- % : Scala のバージョンを指定して依存性を解決\n - Javaのライブラリを使いたいときはこっち\n - groupid % artifactid % revision\n- %% : Scalaのバージョンを自動的に追加して依存性\n - groupid %% artifactid %% revision\n- Configuration\n - 使う時だけ依存性を解決させる\n - groupid %% artifactid %% revision % Configuration\n\n\n\n## まとめ\n\n- activator で簡単プロジェクト作成\n- 依存ライブラリの取得は %, %% \n- 基本のsbtタスクは覚えやすい\n\n",
        "body": "<p>2014/09/20</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>Skinny Scala祭りとか\n      </h1><p><b><a href=\"/aa7th\" title=\"aa7th\" target=\"_blank\">@aa7th</a></b>? さん</p>\n\n<ul>\n<li>学習曲線の話とか聞けた</li>\n<li>言語設計者の方の思想を聞けた</li>\n</ul>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>関西も盛り上げていこうと思った\n      </h2>\n<ul>\n<li>東京は「もういいよね」感なので。</li>\n<li>関西待ってるだけじゃヤバイ</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>SkinnyFramework\n      </h2>\n<ul>\n<li>Scala製ふるすたっく web フレームワーク</li>\n<li>Scala on Rails</li>\n<li><p>Scalatraベース(超シンプルなフレームワーク)</p></li>\n<li><p>Servletコンテナ上で動く</p></li>\n<li><p>国産( @seratch さん )</p></li>\n</ul>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>How do I use?\n      </h3>\n<ul>\n<li><a href=\"http://skinny-framework.org/\" title=\"http://skinny-framework.org/\" target=\"_blank\">http://skinny-framework.org/</a></li>\n<li>空Zipファイルがおいてるから、それをダウンロードして試すのが速い\n\n<ul>\n<li>( Homebrew, YEOMANでも可 )</li>\n</ul></li>\n<li>./skinny run</li>\n<li><p>localhost:8080</p></li>\n<li><p>Scaffolding</p>\n\n<ul>\n<li>./skinny g scaffolding members member name:String ...</li>\n<li>./skinny db:migrate</li>\n<li>開発はデフォルトでh2 Database. 設定は application.conf</li>\n<li>./skinny run</li>\n<li>localhost:8080/members でもう出る。</li>\n</ul></li>\n</ul>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>中身\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controller</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RootController</span> <span class=\"k\">extends</span> <span class=\"nc\">ApplicationController</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">index</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n        <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Scalaなんとか&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">render</span><span class=\"o\">(</span><span class=\"s\">&quot;/root/index&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>SkinnyResource\n      </h3>\n<ul>\n<li>Restful web Resource</li>\n<li>変更したい箇所はoverrideして書き換えればok</li>\n<li>SkinnyResource を使わない CRUDサンプル in Qiita</li>\n</ul>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>View\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&lt;%@val name: String %&gt;\nhellow, ${name}\n</pre></div></div><p>こんな感じ</p>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>View Tmeplate\n      </h4>\n<ul>\n<li>Scalate を使ってる</li>\n<li>形式は Mustache, Scaml, Jade, SSP ( default は SSP )\n\n<ul>\n<li>Jade は何かちょっとややこしい？</li>\n</ul></li>\n</ul>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>Skinny-ORM\n      </h3>\n<ul>\n<li>ScalikeJDBC Base</li>\n<li>SkinnyCRUDMapper Traintを継承すると使える</li>\n<li>Play2 でも他のフレームワークで使える</li>\n</ul>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>その他\n      </h3>\n<ul>\n<li>Validator, extends ValidationRule Trait</li>\n<li>ReverseScaffold </li>\n<li>Assets(Less, Sass,Scala.js...)</li>\n<li>Mail</li>\n<li>FactoryGirl</li>\n<li>etc...</li>\n</ul>\n<h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>Deploy\n      </h3>\n<ul>\n<li>war ファイルにして tomcat, jetty に配置</li>\n<li>Heroku もサポートしたら、ScalaとHerokuの相性がいまいち( ホントはどうにかしたいらしい )</li>\n</ul>\n<h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>感想\n      </h3>\n<ul>\n<li>直感で使いやすい</li>\n<li><p>Scala の難しい文法がわからんでもとりあえず大丈夫</p></li>\n<li><p>マニュアルやせらさんのブログ記事とか、Scalatraの情報などを元に割とつまらなく簡単なものは作れた</p></li>\n<li><p>Scafolldingが</p></li>\n</ul>\n<h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>参考資料\n      </h3><p>全部セラさんの記事</p>\n<p><a href=\"http://seratch.hatenablog.jp/\" title=\"http://seratch.hatenablog.jp/\" target=\"_blank\">http://seratch.hatenablog.jp/</a></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>英語とScalaと私と？\n      </h1><p>curet が skinny 製</p>\n<p>@daisky さん</p>\n<p>Scala祭りの再演</p>\n<p>せっかく作ったのでもう一度(前の10人ぐらいしか聞いてなかったから)</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>僕は英語が苦手です ( I&#39;m not good at English )\n      </h2><p>TOEIC Score: 300 点</p>\n<p>日本語文献は増えてきた</p>\n<p>トラブルシューティングだと stackoverflow とか…</p>\n\n<ul>\n<li>英語の本(Functional Programming Scala)を読んでる</li>\n<li>技術書の英語はパターンあるから、Google翻訳でなんとか意味がとれる</li>\n</ul>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>FAQ ? 参加登録時アンケートの質問に答えてみる\n      </h1><p>@kitora_naoki さん シナジーマーケティング(株)</p>\n<p>確率統計テキストマイニング、など。</p>\n\n<ul>\n<li><p>Haskellとどのくらい違う？</p>\n\n<ul>\n<li>-&gt; だいぶ違う</li>\n<li>Haskell: 純粋関数型言語</li>\n<li>Scala: 非純粋関数型言語</li>\n</ul></li>\n<li><p>どうやって他の人に教育、学習させているのか？</p>\n\n<ul>\n<li>教育らしい教育をやってません</li>\n<li>しいて言えば、コードレビュー？ペアプロ</li>\n</ul></li>\n<li><p>Java ではなく Scalaを使うことを</p>\n\n<ul>\n<li>Scala使います</li>\n<li>熱意と覚悟</li>\n</ul></li>\n<li><p>Scala のいいところ</p>\n\n<ul>\n<li>いろいろ</li>\n</ul></li>\n<li><p>わるいところ</p>\n\n<ul>\n<li>コンパイルが遅い</li>\n<li>ヒープダンプが解析にくい</li>\n<li>Java のイマイチな所を引き継いでる</li>\n<li>型消去など</li>\n</ul></li>\n<li><p>JavaとScalaの違い</p>\n\n<ul>\n<li>問題の視点を切り替えた方がいい</li>\n<li>データ構造が違う</li>\n<li>Java:List (配列リスト)</li>\n<li>Scala:List (単方向リスト)</li>\n<li>関数型言語では再帰をよく使うから、単方向にしている？</li>\n</ul></li>\n</ul>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>PHPからScalaへ…その後\n      </h1><p>@UAdachi さん From Chatwork</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>Chatwork のなんとか\n      </h2><p>ビジネスチャットツール</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>PHP から Scalaへ\n      </h2><p>まだ Scala プロダクションは動いてませんよ。</p>\n<p>「チャットワーク　ビール」で検索</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>なぜ？\n      </h2>\n<ul>\n<li>静的型付け言語を使いたい</li>\n<li>合宿やったの3月終わり\n\n<ul>\n<li>進捗道ですか？</li>\n<li>学習（5月中旬〜）</li>\n<li>プロジェクト発足( 7月上旬〜 )</li>\n<li>社内勉強会( 8月下旬〜 )</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>独習時期\n      </h2>\n<ul>\n<li>PLAY で APIを作ってみる</li>\n<li>コップ本とか。</li>\n</ul>\n<h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>成果\n      </h3>\n<ul>\n<li>SCALAの文法ぐらい</li>\n</ul>\n<h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>Join\n      </h2><p>加藤さん <b><a href=\"/j5ik2o\" title=\"j5ik2o\" target=\"_blank\">@j5ik2o</a></b> さん( 糖質制限、肉、、、 )がChatworkにJoinしたから、一緒に。</p>\n<h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>課題\n      </h3>\n<ul>\n<li>簡単なデータ構造</li>\n<li>数列、単語カウンター、検索？</li>\n<li>Akka で Map/Reduce</li>\n</ul>\n<h2>\n        <span id=\"2-9\" class=\"fragment\"></span>\n        <a href=\"#2-9\"><i class=\"fa fa-link\"></i></a>レビュー\n      </h2><p>プルリクしてレビュー</p>\n<h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>成果\n      </h3><p>パターンマッチ使えるように鳴った。高階関数が使えるように鳴った。</p>\n<h2>\n        <span id=\"2-10\" class=\"fragment\"></span>\n        <a href=\"#2-10\"><i class=\"fa fa-link\"></i></a>プロジェクト発足→ペアプロ\n      </h2><p>7月中旬</p>\n\n<ul>\n<li>リモートペパプロ</li>\n<li>ペアプロ:ソロ = 3:7 の時間割合</li>\n<li>ソロの時は見よう見まねで</li>\n</ul>\n<h3>\n        <span id=\"3-13\" class=\"fragment\"></span>\n        <a href=\"#3-13\"><i class=\"fa fa-link\"></i></a>成果\n      </h3><p>効率的にできた</p>\n\n<ul>\n<li>monadic programing へようこそ</li>\n</ul>\n<h2>\n        <span id=\"2-11\" class=\"fragment\"></span>\n        <a href=\"#2-11\"><i class=\"fa fa-link\"></i></a>ペアプロのいいところ\n      </h2>\n<ul>\n<li>自然とコーディングに集中できる</li>\n</ul>\n<h2>\n        <span id=\"2-12\" class=\"fragment\"></span>\n        <a href=\"#2-12\"><i class=\"fa fa-link\"></i></a>ペアプロで大切なこと\n      </h2>\n<ol>\n<li>大切なこと\n\n<ul>\n<li>だらだらやらない</li>\n<li>終了後にコードを噛み砕く時間を用意</li>\n<li>たまには雑談する（コンパイル中とか）</li>\n</ul></li>\n</ol>\n<h2>\n        <span id=\"2-13\" class=\"fragment\"></span>\n        <a href=\"#2-13\"><i class=\"fa fa-link\"></i></a>どうやってリモートで？\n      </h2><p>screenHero</p>\n\n<ul>\n<li>自分のキーボードでペアプロできる</li>\n<li>さくさく（自分が詰まってる時に相手の画面をさくっと見せてくれる）</li>\n<li>エディタの設定は諦める\n\n<ul>\n<li>Emacs派 vs Vim派(かとじゅんさん)</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-14\" class=\"fragment\"></span>\n        <a href=\"#2-14\"><i class=\"fa fa-link\"></i></a>matome\n      </h2><p>Scalaに移行します宣言<br>\n- ビズリーチさんと勉強会できた<br>\n- 採用（かとじゅんさん）が来た</p>\n<p>今後のChatworkに期待してください</p>\n<h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>さくさくアンドロイド\n      </h1><p>amaya @0x17E さん</p>\n<p>LT</p>\n\n<ul>\n<li>ライブラリを使わない時はおとなしくJavaの方がいい</li>\n</ul>\n<h2>\n        <span id=\"2-15\" class=\"fragment\"></span>\n        <a href=\"#2-15\"><i class=\"fa fa-link\"></i></a>Scaloid\n      </h2><p><a href=\"https://github.com/pocorall/scaloid\" title=\"https://github.com/pocorall/scaloid\" target=\"_blank\">https://github.com/pocorall/scaloid</a></p>\n\n<ul>\n<li>XMLから開放</li>\n<li>ただし、Scaloid を使うので、細かい所までいじろうとしたらXMLさわるはめに…</li>\n</ul>\n<h2>\n        <span id=\"2-16\" class=\"fragment\"></span>\n        <a href=\"#2-16\"><i class=\"fa fa-link\"></i></a>Macroid\n      </h2><p><a href=\"https://github.com/macroid/macroid\" title=\"https://github.com/macroid/macroid\" target=\"_blank\">https://github.com/macroid/macroid</a></p>\n\n<ul>\n<li>Scaloid より XML から開放</li>\n<li>比較的新しいので公式ドキュメント以外がない</li>\n<li>DSLの癖が強い</li>\n</ul>\n<h2>\n        <span id=\"2-17\" class=\"fragment\"></span>\n        <a href=\"#2-17\"><i class=\"fa fa-link\"></i></a>Android-sdk-plugin\n      </h2><p>Android開発用のsbtPlugin</p>\n\n<ul>\n<li>ビルドが遅い</li>\n</ul>\n<h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>ぼっち.scala\n      </h1><p><b><a href=\"/tnoda_\" title=\"tnoda_\" target=\"_blank\">@tnoda_</a></b> さん</p>\n<p>Scalaリア充はsbtのバグ踏んで爆発してください</p>\n<h2>\n        <span id=\"2-18\" class=\"fragment\"></span>\n        <a href=\"#2-18\"><i class=\"fa fa-link\"></i></a>Scalaぼっちの学習\n      </h2><p>ZPD概念（教育学的なアレ）</p>\n<p>人でできるかも、と、誰かと一緒ならできるかも、のギャップの差がZPD。</p>\n<h2>\n        <span id=\"2-19\" class=\"fragment\"></span>\n        <a href=\"#2-19\"><i class=\"fa fa-link\"></i></a>効率のよい学習に必要なもの（でぼっちに(ry\n      </h2>\n<ul>\n<li>適切なガイダンス    =&gt; MOOC</li>\n<li><p>適切なフィードバック =&gt; オンラインジャッジ</p>\n\n<ul>\n<li>段階的にフィードバックがいる</li>\n</ul></li>\n<li><p>目標が遠いと、違う方向に行ってしまう</p></li>\n<li><p>適切な、ガイダンス、フィードバックがアレば順序立てていける。</p></li>\n</ul>\n<p>ぼっちだと、圧倒的に不利よね</p>\n<h2>\n        <span id=\"2-20\" class=\"fragment\"></span>\n        <a href=\"#2-20\"><i class=\"fa fa-link\"></i></a>ぼっちでもできる学習法\n      </h2><h3>\n        <span id=\"3-14\" class=\"fragment\"></span>\n        <a href=\"#3-14\"><i class=\"fa fa-link\"></i></a>MOOC\n      </h3><p>大々的にやってる基本無料で利用できる大学の講義<br>\n- <a href=\"http://coursera.org\" title=\"http://coursera.org\" target=\"_blank\">http://coursera.org</a><br>\n - Scala で検索<br>\n - Odasky センセイの講義が出てくる<br>\n - わからんかったら、とりあえず一番上を押したらいいよ</p>\n<h3>\n        <span id=\"3-15\" class=\"fragment\"></span>\n        <a href=\"#3-15\"><i class=\"fa fa-link\"></i></a>オンラインジャッジ\n      </h3><p>わかりやすく言えば、仕様→納品→検収</p>\n\n<ol>\n<li>プログラミングコンテスト主演害者が公開してることが多い</li>\n<li>直ぐに結果を知ることができる</li>\n<li>他の人の回答を参考にすることができる</li>\n<li>コンテストに参加しなくてもいい</li>\n</ol>\n<p>Scalaを使えるサイト</p>\n\n<ol>\n<li>HackerRank / Scala 2.11 (おすすめ</li>\n<li>Atcoder    / 2.9.1 (おすすえｍ</li>\n<li>Codeforces / 2.11.2 (問題文の英語が稀に酷い</li>\n</ol>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a><a href=\"http://www.hackerrank.com\" title=\"\">www.hackerrank.com</a>\n      </h4><p>コンテスト。決まった課題、決まった期間で正確さなどを競う</p>\n<p>社会人でも参加できる長い開催期間</p>\n<p>関数プログラミング限定コンテスト</p>\n<p>開催期間１０日間、参加人数が少ない。</p>\n<p>オンラインジャッジはいつでも使える。<br>\n難易度の幅は広い</p>\n<p>ProjectEulerの問題採点もしてくれる</p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>atcoder.jp\n      </h4><p>他の人の回答を見て勉強できる</p>\n<p>初心者用の問題が用意されている</p>\n<h1>\n        <span id=\"1-7\" class=\"fragment\"></span>\n        <a href=\"#1-7\"><i class=\"fa fa-link\"></i></a>とりあえず使える sbt\n      </h1><p><b><a href=\"/kuchitama\" title=\"kuchitama\" target=\"_blank\">@kuchitama</a></b> さん</p>\n<p><a href=\"http://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish\" title=\"http://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish\" target=\"_blank\">http://www.slideshare.net/KiyotakaKunihira/scala-beginners4-publish</a></p>\n<h2>\n        <span id=\"2-21\" class=\"fragment\"></span>\n        <a href=\"#2-21\"><i class=\"fa fa-link\"></i></a>sbt\n      </h2>\n<ul>\n<li>Simple (???)\n\n<ul>\n<li>本家でもSimple消えた</li>\n</ul></li>\n<li>Scala Build Tool </li>\n</ul>\n<h2>\n        <span id=\"2-22\" class=\"fragment\"></span>\n        <a href=\"#2-22\"><i class=\"fa fa-link\"></i></a>0.13.5\n      </h2><p>から ver1 に向けて準備段階</p>\n<h2>\n        <span id=\"2-23\" class=\"fragment\"></span>\n        <a href=\"#2-23\"><i class=\"fa fa-link\"></i></a>.sbt or .scala\n      </h2>\n<ul>\n<li>基本は .sbt に。</li>\n<li>複雑な処理は .scala に\n\n<ul>\n<li>再利用できそうなら plugin</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-24\" class=\"fragment\"></span>\n        <a href=\"#2-24\"><i class=\"fa fa-link\"></i></a>Typesafe Activator\n      </h2>\n<ul>\n<li>sbt-np plugin いらず</li>\n<li>scala,java,playのひな形生成</li>\n<li>play2,3 では標準</li>\n</ul>\n<h2>\n        <span id=\"2-25\" class=\"fragment\"></span>\n        <a href=\"#2-25\"><i class=\"fa fa-link\"></i></a>デモ\n      </h2>\n<ul>\n<li><p><code>activator new</code></p></li>\n<li><p><code>activator ui</code> : ウェブ画面で</p></li>\n</ul>\n<h2>\n        <span id=\"2-26\" class=\"fragment\"></span>\n        <a href=\"#2-26\"><i class=\"fa fa-link\"></i></a>基本の設定\n      </h2>\n<ul>\n<li>(key)(method)(setting[s])</li>\n<li>method:\n\n<ul>\n<li>:= キーに対して settings を更新</li>\n<li>+= キーに Settingを追加</li>\n<li>など</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-27\" class=\"fragment\"></span>\n        <a href=\"#2-27\"><i class=\"fa fa-link\"></i></a>依存ライブラリの取得\n      </h2>\n<ul>\n<li>% : Scala のバージョンを指定して依存性を解決\n\n<ul>\n<li>Javaのライブラリを使いたいときはこっち</li>\n<li>groupid % artifactid % revision</li>\n</ul></li>\n<li>%% : Scalaのバージョンを自動的に追加して依存性\n\n<ul>\n<li>groupid %% artifactid %% revision</li>\n</ul></li>\n<li>Configuration\n\n<ul>\n<li>使う時だけ依存性を解決させる</li>\n<li>groupid %% artifactid %% revision % Configuration</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-28\" class=\"fragment\"></span>\n        <a href=\"#2-28\"><i class=\"fa fa-link\"></i></a>まとめ\n      </h2>\n<ul>\n<li>activator で簡単プロジェクト作成</li>\n<li>依存ライブラリの取得は %, %% </li>\n<li>基本のsbtタスクは覚えやすい</li>\n</ul>\n",
        "stock_users": [
            "MAKOTO_MOBY",
            "kasumani",
            "Kuchitama"
        ]
    },
    {
        "id": 134838,
        "uuid": "e97f8686e3e1af388f6d",
        "user": {
            "id": 5441,
            "url_name": "kawachi",
            "profile_image_url": "https://secure.gravatar.com/avatar/35ea8f83cd8d191f834c69a5481613e9?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "Playframework の I18N で 1st, 2nd, 3rd, 4th, ...",
        "created_at": "2014-09-17 12:39:18 +0900",
        "updated_at": "2014-09-17 12:40:40 +0900",
        "created_at_in_words": "6日",
        "updated_at_in_words": "6日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/kawachi/items/e97f8686e3e1af388f6d",
        "created_at_as_seconds": 1410925158,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n`conf/messages` を書くときに、引数が 1 なら 1st, 2 なら 2nd, 3 なら 3rd, 4 なら 4th を出したい。\n\n### 何もしなかった例\n\n````\nranking={0}th\n````\n\nこれでは 1th, 2th, 3th, 4th, になる。\n\n### 解決法\n\nPlay の I18N は [`java.text.MessageFormat`](http://docs.oracle.com/javase/jp/6/api/java/text/MessageFormat.html) を内部で使っているので、choice パターンを使うことができる。\n\n````\nranking={0,choice,1#1st|2#2nd|3#3rd|3<{0,number,integer}th}\n````\n\nこれで 1st, 2nd, 3rd, 4th, 5th, ... となる。\n\nパターンの解釈\n\n* `{` パターン開始\n* `0,` 最初の引数を対象にする\n* `choice,` 次の選択肢から選ぶ\n* `1#1st` 引数が 1 なら 1st\n* `|2#2nd` または引数が 2 なら 2nd\n* `|3#3rd` または引数が 3 なら 3rd\n* `|3<{0,number,integer}th` または引数が3より大きいなら、最初の引数を整数としてフォーマットして th をつけたもの\n* `}` パターン終了\n\nどのパターンにも当てはまらない場合にどうなるか気になる。\n`choice` を指定した場合にはフォーマッタとして [`java.text.ChoiceFormat`](http://dodododo.jp/java/javase_6_docs_ja/api/java/text/ChoiceFormat.html) が使われる。 ChoiceFormat には次のように書かれているので、きっとこれと同じ挙動だろう。\n\n> 一致するものがない場合、数値 (X) が小さすぎるのか大きすぎるのかによって、最初または最後のインデックスが使用されます。\n\n上で挙げたパターンに対して 0 を引数に与えると、最初のパターンより小さいので 1st が返される。\n\n### 上記解決法がダメな場合\n\nさて、既にお気づきだと思うが、20th までは大丈夫なものの 21st が望み通りに出せない。22nd, 23rd しかり。全パターンを書き出すことは不可能（無限）。\n\n与えられる数の上限が決まっている場合や、ある程度大きい数の場合には後置文字列が間違ってても気にしない場合には使える。\n\nもっと素敵な解決法はきっと誰かがコメントに書いてくれるだろう。\n（すみません。書いてください。おねがいします。）\n",
        "body": "<p><code>conf/messages</code> を書くときに、引数が 1 なら 1st, 2 なら 2nd, 3 なら 3rd, 4 なら 4th を出したい。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>何もしなかった例\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ranking={0}th\n</pre></div></div><p>これでは 1th, 2th, 3th, 4th, になる。</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>解決法\n      </h3><p>Play の I18N は <a href=\"http://docs.oracle.com/javase/jp/6/api/java/text/MessageFormat.html\" title=\"\" target=\"_blank\"><code>java.text.MessageFormat</code></a> を内部で使っているので、choice パターンを使うことができる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ranking={0,choice,1#1st|2#2nd|3#3rd|3&lt;{0,number,integer}th}\n</pre></div></div><p>これで 1st, 2nd, 3rd, 4th, 5th, ... となる。</p>\n<p>パターンの解釈</p>\n\n<ul>\n<li><code>{</code> パターン開始</li>\n<li><code>0,</code> 最初の引数を対象にする</li>\n<li><code>choice,</code> 次の選択肢から選ぶ</li>\n<li><code>1#1st</code> 引数が 1 なら 1st</li>\n<li><code>|2#2nd</code> または引数が 2 なら 2nd</li>\n<li><code>|3#3rd</code> または引数が 3 なら 3rd</li>\n<li><code>|3&lt;{0,number,integer}th</code> または引数が3より大きいなら、最初の引数を整数としてフォーマットして th をつけたもの</li>\n<li><code>}</code> パターン終了</li>\n</ul>\n<p>どのパターンにも当てはまらない場合にどうなるか気になる。<br>\n<code>choice</code> を指定した場合にはフォーマッタとして <a href=\"http://dodododo.jp/java/javase_6_docs_ja/api/java/text/ChoiceFormat.html\" title=\"\" target=\"_blank\"><code>java.text.ChoiceFormat</code></a> が使われる。 ChoiceFormat には次のように書かれているので、きっとこれと同じ挙動だろう。</p>\n\n<blockquote>\n<p>一致するものがない場合、数値 (X) が小さすぎるのか大きすぎるのかによって、最初または最後のインデックスが使用されます。</p>\n</blockquote>\n<p>上で挙げたパターンに対して 0 を引数に与えると、最初のパターンより小さいので 1st が返される。</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>上記解決法がダメな場合\n      </h3><p>さて、既にお気づきだと思うが、20th までは大丈夫なものの 21st が望み通りに出せない。22nd, 23rd しかり。全パターンを書き出すことは不可能（無限）。</p>\n<p>与えられる数の上限が決まっている場合や、ある程度大きい数の場合には後置文字列が間違ってても気にしない場合には使える。</p>\n<p>もっと素敵な解決法はきっと誰かがコメントに書いてくれるだろう。<br>\n（すみません。書いてください。おねがいします。）</p>\n",
        "stock_users": [
            "mtoyoshi",
            "n_slender",
            "kasumani",
            "Reds",
            "nilfigo"
        ]
    },
    {
        "id": 134438,
        "uuid": "cd4ba1ef294880bd01b1",
        "user": {
            "id": 39824,
            "url_name": "visualskyrim",
            "profile_image_url": "https://avatars.githubusercontent.com/u/2673434?"
        },
        "title": "Akka - Logging to multiple files",
        "created_at": "2014-09-16 20:45:42 +0900",
        "updated_at": "2014-09-16 20:45:42 +0900",
        "created_at_in_words": "7日",
        "updated_at_in_words": "7日",
        "tags": [
            {
                "name": "Akka",
                "url_name": "akka",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "logback",
                "url_name": "logback",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/visualskyrim/items/cd4ba1ef294880bd01b1",
        "created_at_as_seconds": 1410867942,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nRef:\n\n[1] - [Defining 1 logback file per level](http://stackoverflow.com/a/9344385/1105455)\n[2] - [logback - manual](http://logback.qos.ch/manual/filters.html#levelFilter)\n[3] - [Akka - Log into files](http://qiita.com/visualskyrim/items/8aa73b1136180660234e)\n\nIn my last memo about how to use logback in Akka to log into file system, I showed the way to config `logback.xml`.\n\nHowever, recently I find it killing me when I use this log file for bug-shooting, because all the log, including *debug*, *info*, *warning*, *error* are all in one file. And what I am really looking for is *error*, which is really rare in the log file.\n\nSo, it seems reasonable to place logs of different level into different files. In my case, which would also cover most cases, I will place all the *info* log line into **info.log**, and all the *error* log and above to the **error.log**.\n\nSince we are place log into different files, we are going to use multiple appenders.\n\n#### To put info log one file\n\n```xml:logback.xml\n\t<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>log/info.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- Daily rollover with compression -->\n            <fileNamePattern>process-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 30 days worth of history -->\n            <maxHistory>90</maxHistory>\n        </rollingPolicy>\n        <append>true</append>\n        <!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n        <encoder>\n            <pattern>%d,%msg%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n```\n \nThe key point is in the ***filter*** element. This filter uses [LevelFilter](http://logback.qos.ch/manual/filters.html#levelFilter) to decide which level of log should be logged.\n\n\n#### To put error and all levels above to another file\n\n```xml:logback.xml\n\t<appender name=\"ERROR_FILE\" class = \"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>\n            log/error.log\n        </file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- daily rollover with compression -->\n            <fileNamePattern>error-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 1 week worth of history -->\n            <maxHistory>100</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n    </appender>\n```\n\nIn this example, we use [ThresholdFilter](http://logback.qos.ch/manual/filters.html#thresholdFilter) to select all the levels above the *error* to log file.\n\n#### Then, put two appenders together\n\nThis is the tricky part. We ganna use two ***root logger*** in the same *logback.xml*.\n\n```xml:logback.xml\n\n<configuration>\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>log/process.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- Daily rollover with compression -->\n            <fileNamePattern>process-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 30 days worth of history -->\n            <maxHistory>90</maxHistory>\n        </rollingPolicy>\n        <append>true</append>\n        <!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n        <encoder>\n            <pattern>%d,%msg%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class = \"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>\n            log/error.log\n        </file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- daily rollover with compression -->\n            <fileNamePattern>error-log-%d{yyyy-MM-dd}.gz</fileNamePattern>\n            <!-- keep 1 week worth of history -->\n            <maxHistory>100</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n    <root level=\"INFO\">\n        <appender-ref ref=\"FILE\" />\n    </root>\n</configuration>\n```\n\n***\n\n#### Finally\n\nNow, in your SomeActor.scala:\n\n```scala:SomeActor.scala\n\nclass SomeActor extends Actor with ActorLogging {\n\n  implicit val ec = context.dispatcher\n\n  def receive = {\n    case x: SomeMsg =>\n      log.info(\"will be logged into info.log\")\n      log.error(\"will be logged into error.log\")\n  }\n}\n```\n\nHope this will help you.\n",
        "body": "<p>Ref:</p>\n<p>[1] - <a href=\"http://stackoverflow.com/a/9344385/1105455\" title=\"\" target=\"_blank\">Defining 1 logback file per level</a><br>\n[2] - <a href=\"http://logback.qos.ch/manual/filters.html#levelFilter\" title=\"\" target=\"_blank\">logback - manual</a><br>\n[3] - <a href=\"http://qiita.com/visualskyrim/items/8aa73b1136180660234e\" title=\"\">Akka - Log into files</a></p>\n<p>In my last memo about how to use logback in Akka to log into file system, I showed the way to config <code>logback.xml</code>.</p>\n<p>However, recently I find it killing me when I use this log file for bug-shooting, because all the log, including <em>debug</em>, <em>info</em>, <em>warning</em>, <em>error</em> are all in one file. And what I am really looking for is <em>error</em>, which is really rare in the log file.</p>\n<p>So, it seems reasonable to place logs of different level into different files. In my case, which would also cover most cases, I will place all the <em>info</em> log line into <strong>info.log</strong>, and all the <em>error</em> log and above to the <strong>error.log</strong>.</p>\n<p>Since we are place log into different files, we are going to use multiple appenders.</p>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>To put info log one file\n      </h4><div class=\"code-frame\" data-lang=\"xml\"><div class=\"code-lang\"><span class=\"bold\">logback.xml</span></div><div class=\"highlight\"><pre>    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;FILE&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>log/info.log<span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- Daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>process-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 30 days worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>90<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;append&gt;</span>true<span class=\"nt\">&lt;/append&gt;</span>\n        <span class=\"c\">&lt;!-- encoders are assigned the type</span>\n<span class=\"c\">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%d,%msg%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>INFO<span class=\"nt\">&lt;/level&gt;</span>\n            <span class=\"nt\">&lt;onMatch&gt;</span>ACCEPT<span class=\"nt\">&lt;/onMatch&gt;</span>\n            <span class=\"nt\">&lt;onMismatch&gt;</span>DENY<span class=\"nt\">&lt;/onMismatch&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n</pre></div></div><p>The key point is in the <strong><em>filter</em></strong> element. This filter uses <a href=\"http://logback.qos.ch/manual/filters.html#levelFilter\" title=\"\" target=\"_blank\">LevelFilter</a> to decide which level of log should be logged.</p>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>To put error and all levels above to another file\n      </h4><div class=\"code-frame\" data-lang=\"xml\"><div class=\"code-lang\"><span class=\"bold\">logback.xml</span></div><div class=\"highlight\"><pre>    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ERROR_FILE&quot;</span> <span class=\"na\">class =</span> <span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>\n            log/error.log\n        <span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>error-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 1 week worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>100<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>ERROR<span class=\"nt\">&lt;/level&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n</pre></div></div><p>In this example, we use <a href=\"http://logback.qos.ch/manual/filters.html#thresholdFilter\" title=\"\" target=\"_blank\">ThresholdFilter</a> to select all the levels above the <em>error</em> to log file.</p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>Then, put two appenders together\n      </h4><p>This is the tricky part. We ganna use two <strong><em>root logger</em></strong> in the same <em>logback.xml</em>.</p>\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"code-lang\"><span class=\"bold\">logback.xml</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;configuration&gt;</span>\n    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;FILE&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>log/process.log<span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- Daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>process-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 30 days worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>90<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;append&gt;</span>true<span class=\"nt\">&lt;/append&gt;</span>\n        <span class=\"c\">&lt;!-- encoders are assigned the type</span>\n<span class=\"c\">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%d,%msg%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>INFO<span class=\"nt\">&lt;/level&gt;</span>\n            <span class=\"nt\">&lt;onMatch&gt;</span>ACCEPT<span class=\"nt\">&lt;/onMatch&gt;</span>\n            <span class=\"nt\">&lt;onMismatch&gt;</span>DENY<span class=\"nt\">&lt;/onMismatch&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n\n    <span class=\"nt\">&lt;appender</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ERROR_FILE&quot;</span> <span class=\"na\">class =</span> <span class=\"s\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;file&gt;</span>\n            log/error.log\n        <span class=\"nt\">&lt;/file&gt;</span>\n        <span class=\"nt\">&lt;rollingPolicy</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"c\">&lt;!-- daily rollover with compression --&gt;</span>\n            <span class=\"nt\">&lt;fileNamePattern&gt;</span>error-log-%d{yyyy-MM-dd}.gz<span class=\"nt\">&lt;/fileNamePattern&gt;</span>\n            <span class=\"c\">&lt;!-- keep 1 week worth of history --&gt;</span>\n            <span class=\"nt\">&lt;maxHistory&gt;</span>100<span class=\"nt\">&lt;/maxHistory&gt;</span>\n        <span class=\"nt\">&lt;/rollingPolicy&gt;</span>\n        <span class=\"nt\">&lt;encoder&gt;</span>\n            <span class=\"nt\">&lt;pattern&gt;</span>%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n<span class=\"nt\">&lt;/pattern&gt;</span>\n        <span class=\"nt\">&lt;/encoder&gt;</span>\n        <span class=\"nt\">&lt;filter</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;level&gt;</span>ERROR<span class=\"nt\">&lt;/level&gt;</span>\n        <span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/appender&gt;</span>\n\n    <span class=\"nt\">&lt;root</span> <span class=\"na\">level=</span><span class=\"s\">&quot;ERROR&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;appender-ref</span> <span class=\"na\">ref=</span><span class=\"s\">&quot;ERROR_FILE&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/root&gt;</span>\n    <span class=\"nt\">&lt;root</span> <span class=\"na\">level=</span><span class=\"s\">&quot;INFO&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;appender-ref</span> <span class=\"na\">ref=</span><span class=\"s\">&quot;FILE&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/root&gt;</span>\n<span class=\"nt\">&lt;/configuration&gt;</span>\n</pre></div></div>\n<hr>\n<h4>\n        <span id=\"4-4\" class=\"fragment\"></span>\n        <a href=\"#4-4\"><i class=\"fa fa-link\"></i></a>Finally\n      </h4><p>Now, in your SomeActor.scala:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">SomeActor.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">SomeActor</span> <span class=\"k\">extends</span> <span class=\"nc\">Actor</span> <span class=\"k\">with</span> <span class=\"nc\">ActorLogging</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">ec</span> <span class=\"k\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">dispatcher</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">SomeMsg</span> <span class=\"o\">=&gt;</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">&quot;will be logged into info.log&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">(</span><span class=\"s\">&quot;will be logged into error.log&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>Hope this will help you.</p>\n",
        "stock_users": [
            "kasumani",
            "poad1010",
            "morozumi_h"
        ]
    },
    {
        "id": 133621,
        "uuid": "a553519c3de1dec4da41",
        "user": {
            "id": 94,
            "url_name": "takc923",
            "profile_image_url": "https://secure.gravatar.com/avatar/9562160b36b5d453e8aa45f6d28c84df"
        },
        "title": "classのコンストラクタの最初の引数グループがimplicitだった時の挙動",
        "created_at": "2014-09-15 15:55:28 +0900",
        "updated_at": "2014-09-15 15:55:28 +0900",
        "created_at_in_words": "8日",
        "updated_at_in_words": "8日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 2,
        "url": "http://qiita.com/takc923/items/a553519c3de1dec4da41",
        "created_at_as_seconds": 1410764128,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# 概要\nclassのコンストラクタ関数の最初の引数グループをimplicitなアレにしたらどうなるんだろう、と思ったので遊んでみた。\n\n# case class\n\n## 試したログ\n```\n$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> case class Hoge(implicit a:String)\ndefined class Hoge\n\nscala> Hoge\nres0: Hoge.type = Hoge     ### `Hoge`だとコンストラクタではなくオブジェクトとして認識される\n\nscala> Hoge(\"str\")         ### 直接指定してみる\n<console>:10: error: too many arguments for method apply: ()(implicit a: String)Hoge in object Hoge\n              Hoge(\"str\")                         ### ↑コンストラクタのシグネチャがapply()(implicit a: String)になってる\n                  ^\n\nscala> Hoge()(\"str\")       ### 試しにそのとおりにやってみる。\nres2: Hoge = Hoge(str)     ### 動いた\n\nscala> implicit val a = \"implicit string\"    ### implicit parameterを定義してやってみる\na: String = implicit string\n\nscala> Hoge()\nres3: Hoge = Hoge(implicit string)    ### 動いた\n```\n\n## 結果\ncase classのコンストラクタの最初の引数グループをimplicitにすると、勝手にcurry化されて2つ目の引数グループになる。\nこういう場合、pattern matchってどうなるんだろう？と思って調べてみたら、implicitとか関係なくcurry化されたcase classは自動で`unapply`を実装して**くれない**らしい（＝そのままではpattern matchで使えない）\n\n- http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala\n\n自前でunapplyを実装すれば使える模様。\n\n# caseじゃないclass\n## 試したログ\n```\n$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> class Hoge(implicit val a:String)\ndefined class Hoge\n\nscala> new Hoge\n<console>:9: error: could not find implicit value for parameter a: String\n              new Hoge\n              ^\n### implicit定義してないので当たり前\n\nscala> new Hoge(\"str\")    ### 直接指定してみる\n<console>:9: error: too many arguments for constructor Hoge: ()(implicit a: String)Hoge\n              new Hoge(\"str\")                        ↑case classと同じく勝手にcurry化されてる\n              ^\n\nscala> new Hoge()(\"str\")     ### 2つめの引数グループに直接指定。\nres2: Hoge = Hoge@194527c6   ### 動いた。\n\nscala> res2.a\nres3: String = str    ### ちゃんと中身もある\n\nscala> implicit val a = \"implicit string\"   ### implicit定義して試してみる\na: String = implicit string\n\nscala> new Hoge()\nres4: Hoge = Hoge@6963eb77    ### 普通に動く\n\nscala> new Hoge\nres5: Hoge = Hoge@78924119    ### もはや1つめのカッコも省略できる\n```\n\n## 結果\ncase classと同じ。\n\n# 感想\n勝手にcurry化されるのはびびった。ただ、こういうのは豆知識として知っておくのはいいけど、それを気にしないようなコードを書くように心がけよう。\nあとimplicit云々関係なくコンストラクタがcurry化されてるとcase classでもパターンマッチが（自前でunapplyを書かない限り）使えず、case classの旨味がかなり減っちゃう。仮に自前でunapply書いたとしても、パターンマッチの書き方が混乱しそう。\n\nあとcurry化した時の引数のカッコが分かれるやつを、「引数グループ」って表現したけど、それ専用の用語ってあるのかな。\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h1><p>classのコンストラクタ関数の最初の引数グループをimplicitなアレにしたらどうなるんだろう、と思ったので遊んでみた。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>case class\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>試したログ\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala&gt; case class Hoge(implicit a:String)\ndefined class Hoge\n\nscala&gt; Hoge\nres0: Hoge.type = Hoge     ### `Hoge`だとコンストラクタではなくオブジェクトとして認識される\n\nscala&gt; Hoge(&quot;str&quot;)         ### 直接指定してみる\n&lt;console&gt;:10: error: too many arguments for method apply: ()(implicit a: String)Hoge in object Hoge\n              Hoge(&quot;str&quot;)                         ### ↑コンストラクタのシグネチャがapply()(implicit a: String)になってる\n                  ^\n\nscala&gt; Hoge()(&quot;str&quot;)       ### 試しにそのとおりにやってみる。\nres2: Hoge = Hoge(str)     ### 動いた\n\nscala&gt; implicit val a = &quot;implicit string&quot;    ### implicit parameterを定義してやってみる\na: String = implicit string\n\nscala&gt; Hoge()\nres3: Hoge = Hoge(implicit string)    ### 動いた\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>結果\n      </h2><p>case classのコンストラクタの最初の引数グループをimplicitにすると、勝手にcurry化されて2つ目の引数グループになる。<br>\nこういう場合、pattern matchってどうなるんだろう？と思って調べてみたら、implicitとか関係なくcurry化されたcase classは自動で<code>unapply</code>を実装して<strong>くれない</strong>らしい（＝そのままではpattern matchで使えない）</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala\" title=\"http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala\" target=\"_blank\">http://stackoverflow.com/questions/7269698/case-classes-pattern-matching-and-curried-constructors-in-scala</a></li>\n</ul>\n<p>自前でunapplyを実装すれば使える模様。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>caseじゃないclass\n      </h1><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>試したログ\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala&gt; class Hoge(implicit val a:String)\ndefined class Hoge\n\nscala&gt; new Hoge\n&lt;console&gt;:9: error: could not find implicit value for parameter a: String\n              new Hoge\n              ^\n### implicit定義してないので当たり前\n\nscala&gt; new Hoge(&quot;str&quot;)    ### 直接指定してみる\n&lt;console&gt;:9: error: too many arguments for constructor Hoge: ()(implicit a: String)Hoge\n              new Hoge(&quot;str&quot;)                        ↑case classと同じく勝手にcurry化されてる\n              ^\n\nscala&gt; new Hoge()(&quot;str&quot;)     ### 2つめの引数グループに直接指定。\nres2: Hoge = Hoge@194527c6   ### 動いた。\n\nscala&gt; res2.a\nres3: String = str    ### ちゃんと中身もある\n\nscala&gt; implicit val a = &quot;implicit string&quot;   ### implicit定義して試してみる\na: String = implicit string\n\nscala&gt; new Hoge()\nres4: Hoge = Hoge@6963eb77    ### 普通に動く\n\nscala&gt; new Hoge\nres5: Hoge = Hoge@78924119    ### もはや1つめのカッコも省略できる\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>結果\n      </h2><p>case classと同じ。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>感想\n      </h1><p>勝手にcurry化されるのはびびった。ただ、こういうのは豆知識として知っておくのはいいけど、それを気にしないようなコードを書くように心がけよう。<br>\nあとimplicit云々関係なくコンストラクタがcurry化されてるとcase classでもパターンマッチが（自前でunapplyを書かない限り）使えず、case classの旨味がかなり減っちゃう。仮に自前でunapply書いたとしても、パターンマッチの書き方が混乱しそう。</p>\n<p>あとcurry化した時の引数のカッコが分かれるやつを、「引数グループ」って表現したけど、それ専用の用語ってあるのかな。</p>\n",
        "stock_users": [
            "Reds"
        ]
    },
    {
        "id": 132365,
        "uuid": "2fc1b10f7b6b22a0d0e2",
        "user": {
            "id": 7262,
            "url_name": "NAKANO_Akihito",
            "profile_image_url": "https://pbs.twimg.com/profile_images/3047552777/d02dd7cbcc51c15d91bd4a9e5be15354_normal.jpeg"
        },
        "title": "Scala製コマンドラインツールをIntelliJ IDEAで書いて公開する",
        "created_at": "2014-09-12 16:47:13 +0900",
        "updated_at": "2014-09-12 16:59:21 +0900",
        "created_at_in_words": "11日",
        "updated_at_in_words": "11日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "giter8",
                "url_name": "giter8",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Conscript",
                "url_name": "conscript",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 7,
        "comment_count": 0,
        "url": "http://qiita.com/NAKANO_Akihito/items/2fc1b10f7b6b22a0d0e2",
        "created_at_as_seconds": 1410508033,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n- sbt を使ったプロジェクトを\n- IntelliJ IDEA で書いて\n- Conscript でインストールできるように公開する\n- リポジトリには Github Pages を使う\n\n### ひな形を作成する\n\n#### giter8\n\n[https://github.com/n8han/giter8](https://github.com/n8han/giter8)\n\ngithub 上に公開されているテンプレートをもとにプロジェクトのひな形を作るツール。\n\n```\n$ g8 n8han/conscript\n```\n- Conscript を使ったアプリケーション用のひな形が生成される\n- アプリケーション名、組織名等を対話形式で入力する\n- 組織名は、ドメインを持っていない場合は github の url を使うのが一般的らしい (e.g. com.github.ackintosh)\n\n#### 生成されるひな形\n\n```\n.\n├── build.sbt\n├── project\n│   └── plugins.sbt\n└── src\n    └── main\n        ├── conscript\n        │   └── app\n        │       └── launchconfig\n        └── scala\n            └── App.scala\n```\n\n\n### intelliJ IDEA用のプロジェクトファイルを作成\n\nsbt を使ったプロジェクトを intelliJ IDEA にインポートするために、[mpeltonen/sbt-idea](https://github.com/mpeltonen/sbt-idea) を使う。\n\n- `./project/plugins.sbt` に追記\n\n```./project/plugins.sbt\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0\")\n```\n\n- プロジェクトファイルを作成\n\n```\n$ sbt gen-idea\n```\n- [File] -> [Import Project...] でインポートする\n\n### 実装・テストする\n\n- `src/main/scala/App.scala`\n\nクラス名等を変えた場合は `src/main/conscript/app/launchconfig` の name と、ディレクトリ名(app)も変更する。\n\n\n- sbt を対話モードで起動してコンパイル等を行う\n\n```\n$ stb\n> \n```\n\n- コンパイル\n\n```\n> compile\n[success] Total time: 0 s, completed 2014/09/11 23:15:34\n```\n\n- 実行\n\n```\n> run\n[info] Running com.github.ackintosh.App\n```\n\n- テストコードは `src/test/scala/` に書く\n- テスト実行\n\n```\n> test\n[info] Compiling 1 Scala source to /Users/Ack/Develop/scala/[アプリケーション名]/target/scala-2.11/test-classes...\n[info] AppTest:\n[info] Run completed in 511 milliseconds.\n...\n[info] All tests passed.\n```\n\n### リポジトリに Github Pages を使う\n\n#### Github Pagesを作る\n\n- リポジトリの [Settings] -> [Github Pages] で作れる\n- 表示確認\n\n```\nhttp://[ユーザ名].github.io/[リポジトリ名]/\n```\n\n#### ビルド設定\n\n- ビルドしたファイルの出力先を設定する\n\n```\n$ git checkout gh-pages\n$ pwd\n[Github Pages を作成したディレクトリ]\n```\n\n```build.sbt\npublishTo := Some(Resolver.file(\"アプリケーション名\", file(\"Github Pages を作成したディレクトリ\"))(Patterns(true, Resolver.mavenStyleBasePattern)))\n```\n\n#### ビルド\n\n```\n$ sbt publish\n```\n\n- publishTo で指定したディレクトリに下記のように出力される\n\n```\n.\n└── com\n   └── github\n       └── [Githubユーザー名]\n           └── [アプリケーション名]_2.11\n               └── 0.1.0\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.jar\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.pom\n                   ├── [アプリケーション名]_2.11-0.1.0.pom.md5\n                   └── [アプリケーション名]_2.11-0.1.0.pom.sha1\n```\n\n#### Github Pages に公開\n\n- push するだけ\n\n```\n$ git add .\n$ git commit -m \"release 0.1.0\"\n$ git push origin gh-pages\n```\n\n### Conscript用設定\n\n```src/main/conscript/[アプリケーション名]/launchconfig\n[repositories]\n  gh-pages:http://ackintosh.github.io/[Github Pages を作成したリポジトリ名]/\n```\n\nGithub に push しておく。\n\nこれで Github Pages にアップしたアプリケーションを Conscript を使ってインストールできるようになった。\n\n### インストール確認\n\n```\n$ cs [Githubユーザー名]/[アプリケーション名]\nConscripted [Githubユーザー名]/[アプリケーション名] to /Users/xxx/bin/[アプリケーション名]\n```\n\n### Link\n\n- [Scala 開発環境構築手順 - Gists - Github](https://gist.github.com/kmizu/1876800)\n\nScala環境構築\n\n- [n8han/giter8](https://github.com/n8han/giter8)\n\na command line tool to apply templates defined on github\n\n- [n8han/conscript](https://github.com/n8han/conscript)\n\nThis is a tool for installing and updating Scala software programs.\n\n- [mpeltonen/sbt-idea](https://github.com/mpeltonen/sbt-idea)\n\nA simple-build-tool (sbt) plugin/processor for creating IntelliJ IDEA project files\n\n",
        "body": "<ul>\n<li>sbt を使ったプロジェクトを</li>\n<li>IntelliJ IDEA で書いて</li>\n<li>Conscript でインストールできるように公開する</li>\n<li>リポジトリには Github Pages を使う</li>\n</ul>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>ひな形を作成する\n      </h3><h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>giter8\n      </h4><p><a href=\"https://github.com/n8han/giter8\" title=\"\" target=\"_blank\">https://github.com/n8han/giter8</a></p>\n<p>github 上に公開されているテンプレートをもとにプロジェクトのひな形を作るツール。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ g8 n8han/conscript\n</pre></div></div>\n<ul>\n<li>Conscript を使ったアプリケーション用のひな形が生成される</li>\n<li>アプリケーション名、組織名等を対話形式で入力する</li>\n<li>組織名は、ドメインを持っていない場合は github の url を使うのが一般的らしい (e.g. com.github.ackintosh)</li>\n</ul>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>生成されるひな形\n      </h4><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>.\n├── build.sbt\n├── project\n│   └── plugins.sbt\n└── src\n    └── main\n        ├── conscript\n        │   └── app\n        │       └── launchconfig\n        └── scala\n            └── App.scala\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>intelliJ IDEA用のプロジェクトファイルを作成\n      </h3><p>sbt を使ったプロジェクトを intelliJ IDEA にインポートするために、<a href=\"https://github.com/mpeltonen/sbt-idea\" title=\"\" target=\"_blank\">mpeltonen/sbt-idea</a> を使う。</p>\n\n<ul>\n<li><code>./project/plugins.sbt</code> に追記</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">./project/plugins.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">addSbtPlugin</span><span class=\"o\">(</span><span class=\"s\">&quot;com.github.mpeltonen&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;sbt-idea&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.6.0&quot;</span><span class=\"o\">)</span>\n</pre></div></div>\n<ul>\n<li>プロジェクトファイルを作成</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sbt gen-idea\n</pre></div></div>\n<ul>\n<li>[File] -&gt; [Import Project...] でインポートする</li>\n</ul>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>実装・テストする\n      </h3>\n<ul>\n<li><code>src/main/scala/App.scala</code></li>\n</ul>\n<p>クラス名等を変えた場合は <code>src/main/conscript/app/launchconfig</code> の name と、ディレクトリ名(app)も変更する。</p>\n\n<ul>\n<li>sbt を対話モードで起動してコンパイル等を行う</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ stb\n&gt; \n</pre></div></div>\n<ul>\n<li>コンパイル</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; compile\n[success] Total time: 0 s, completed 2014/09/11 23:15:34\n</pre></div></div>\n<ul>\n<li>実行</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; run\n[info] Running com.github.ackintosh.App\n</pre></div></div>\n<ul>\n<li>テストコードは <code>src/test/scala/</code> に書く</li>\n<li>テスト実行</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; test\n[info] Compiling 1 Scala source to /Users/Ack/Develop/scala/[アプリケーション名]/target/scala-2.11/test-classes...\n[info] AppTest:\n[info] Run completed in 511 milliseconds.\n...\n[info] All tests passed.\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>リポジトリに Github Pages を使う\n      </h3><h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>Github Pagesを作る\n      </h4>\n<ul>\n<li>リポジトリの [Settings] -&gt; [Github Pages] で作れる</li>\n<li>表示確認</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>http://[ユーザ名].github.io/[リポジトリ名]/\n</pre></div></div><h4>\n        <span id=\"4-4\" class=\"fragment\"></span>\n        <a href=\"#4-4\"><i class=\"fa fa-link\"></i></a>ビルド設定\n      </h4>\n<ul>\n<li>ビルドしたファイルの出力先を設定する</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ git checkout gh-pages\n$ pwd\n[Github Pages を作成したディレクトリ]\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">publishTo</span> <span class=\"o\">:=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s\">&quot;アプリケーション名&quot;</span><span class=\"o\">,</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s\">&quot;Github Pages を作成したディレクトリ&quot;</span><span class=\"o\">))(</span><span class=\"nc\">Patterns</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">mavenStyleBasePattern</span><span class=\"o\">)))</span>\n</pre></div></div><h4>\n        <span id=\"4-5\" class=\"fragment\"></span>\n        <a href=\"#4-5\"><i class=\"fa fa-link\"></i></a>ビルド\n      </h4><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sbt publish\n</pre></div></div>\n<ul>\n<li>publishTo で指定したディレクトリに下記のように出力される</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>.\n└── com\n   └── github\n       └── [Githubユーザー名]\n           └── [アプリケーション名]_2.11\n               └── 0.1.0\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-javadoc.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0-sources.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.jar\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.md5\n                   ├── [アプリケーション名]_2.11-0.1.0.jar.sha1\n                   ├── [アプリケーション名]_2.11-0.1.0.pom\n                   ├── [アプリケーション名]_2.11-0.1.0.pom.md5\n                   └── [アプリケーション名]_2.11-0.1.0.pom.sha1\n</pre></div></div><h4>\n        <span id=\"4-6\" class=\"fragment\"></span>\n        <a href=\"#4-6\"><i class=\"fa fa-link\"></i></a>Github Pages に公開\n      </h4>\n<ul>\n<li>push するだけ</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ git add .\n$ git commit -m &quot;release 0.1.0&quot;\n$ git push origin gh-pages\n</pre></div></div><h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>Conscript用設定\n      </h3><div class=\"code-frame\" data-lang=\"src/main/conscript/[アプリケーション名]/launchconfig\"><div class=\"highlight\"><pre>[repositories]\n  gh-pages:http://ackintosh.github.io/[Github Pages を作成したリポジトリ名]/\n</pre></div></div><p>Github に push しておく。</p>\n<p>これで Github Pages にアップしたアプリケーションを Conscript を使ってインストールできるようになった。</p>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>インストール確認\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ cs [Githubユーザー名]/[アプリケーション名]\nConscripted [Githubユーザー名]/[アプリケーション名] to /Users/xxx/bin/[アプリケーション名]\n</pre></div></div><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>Link\n      </h3>\n<ul>\n<li><a href=\"https://gist.github.com/kmizu/1876800\" title=\"\" target=\"_blank\">Scala 開発環境構築手順 - Gists - Github</a></li>\n</ul>\n<p>Scala環境構築</p>\n\n<ul>\n<li><a href=\"https://github.com/n8han/giter8\" title=\"\" target=\"_blank\">n8han/giter8</a></li>\n</ul>\n<p>a command line tool to apply templates defined on github</p>\n\n<ul>\n<li><a href=\"https://github.com/n8han/conscript\" title=\"\" target=\"_blank\">n8han/conscript</a></li>\n</ul>\n<p>This is a tool for installing and updating Scala software programs.</p>\n\n<ul>\n<li><a href=\"https://github.com/mpeltonen/sbt-idea\" title=\"\" target=\"_blank\">mpeltonen/sbt-idea</a></li>\n</ul>\n<p>A simple-build-tool (sbt) plugin/processor for creating IntelliJ IDEA project files</p>\n",
        "stock_users": [
            "_marony",
            "kasumani",
            "mmizutani",
            "Reds",
            "MasahiroSakoda",
            "kawachi",
            "poad1010"
        ]
    },
    {
        "id": 132322,
        "uuid": "a2b607cdfedd21974687",
        "user": {
            "id": 12647,
            "url_name": "takezoux2@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/5e1313c5d1166060f2e2ca677b4e40da?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "[Scala]implicit parameterを使ったDI",
        "created_at": "2014-09-12 15:35:35 +0900",
        "updated_at": "2014-09-12 15:35:35 +0900",
        "created_at_in_words": "11日",
        "updated_at_in_words": "11日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "DI",
                "url_name": "di",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/takezoux2@github/items/a2b607cdfedd21974687",
        "created_at_as_seconds": 1410503735,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "ScalaでDIを行う方法はいろいろありますが、最近お気に入りのDIのやりかたの紹介です。\n\nimplicit defと、implicit parameterを組み合わせて必要なコンポーネントの受け渡しをコンパイラーに任せてしまいます。\n\n利点\n\n* Scalaの標準機能のみで簡単に実装できてライブラリ不要\n* 全てコードで記述できるので、XML地獄や新しいDSLを覚える必要がない\n* 使いたいコンポーネントをコンストラクタに追加するだけで使えて楽\n\n欠点\n\n* コンストラクターDIしか出来ない\n\n## 手順\n\n1. インジェクションしたいコンポーネントをimplicit defで列挙したクラス(トレイト)を作る\n1. コンポーネントを使うクラスで、使いたいコンポーネントをimplicit parameterで定義\n1. コンポーネントを使うクラスを生成する際にコンポーネントを列挙したクラスのフィールドをimportする\n\nのが、実装の大まかな流れになります。\n\n## サンプルコード\n\nでは、早速サンプルコードを。\n\n### 基本部分\n\n\n```scala:Repositories.scala\ntrait Repositories{\n  // DIしたいコンポーネントをimplicit defで列挙\n  implicit def userRepo : UserRepository\n  implicit def mailService : MailService\n}\n```\n\n```scala:UserRepository.scala\n\n// DIで渡したいコンポーネントの定義\ntrait UserRepository{\n  def getUser(id : Long) : Option[UserDAO]\n}\n\ncase class UserDAO(id : Long){\n  //...implements\n}\n```\n\n```scala:UserFacade.scala\n\n// 使用したいコンポーネントを、コンストラクタのimplicit parameterに指定する\nclass UserFacade()(implicit userRepo : UserRepository){\n\n  def changeNickname(id : Long,nickname : String) : Optino[UserDAO]= {\n    userRepo.getUser(id).map(_.setAndSaveNickname(nickname))\n  }\n} \n\n\n```\n\n```scala:Factory.scala\n\nclass Factory(repos : Repositories){\n  \n  // コンポーネントを列挙したクラスのフィールドをimportしてやる\n  import repos._\n\n  lazy val userFacade = new UserFacade() // 勝手に必要なコンポーネントが渡される\n}\n\n\n```\n\n### 使い方\n\n```scala:Production.scala\nobject RepositoriesForProduction extends Repositories{\n  // lazy valにしておくと、不要なコンポーネントが初期化されない\n  lazy val userRepo = new TrueImplementedUserRepository()\n  lazy val mailService = new TrueImplmentedMailService()\n}\nval factory = new Factory(RepositoriesForProduction )\nval userFacade = factory.userFacade\nuserFacade.changeNickname(1,\"クドリャフカ\")\n```\n\n\n```scala:Test.scala\n\nobject RepositoriesForTest extends Repositories{\n  // テスト用の場合は、mock化したコンポーネント\n  lazy val userRepo = mock[UserRepository]\n  lazy val mailService = mock[MailService]\n}\n// 初期化の方法は変わらず\nval factory = new Factory(RepositoriesForTest)\nval userFacade = factory.userFacade\nuserFacade.changeNickname(1,\"クドリャフカ\")\n```\n\n\nといった感じになります。\n\n## 補足\n\nあと、先ほど利点で挙げた「使いたいコンポーネントをコンストラクタに書くだけでいい」という事を補足しておきます。\n例えば、「パスワードリセットして通知メールを送る」機能を追加するとします。\nその場合、UserFacade.scalaだけを次のように修正します。\n\n```scala:UserFacade.scala\n\n// メール機能を使いたいのでMailServiceを追加\nclass UserFacade()(implicit userRepo : UserRepository,mailService : MailService){\n\n  def changeNickname(id : Long,nickname : String) : Optino[UserDAO]= {\n    userRepo.getUser(id).map(_.setAndSaveNickname(nickname))\n  }\n  \n  def resetPassword() = {\n    userRepo.getUser(id).foreach( user => {\n      val newPassword = user.resetPassword() // resetPassword()は実装済みとする\n      emailService.sendTo(user,\"パスワードリセット\",s\"新しいパスワードは${newPassword}です\")\n    })\n  }\n} \n\n\n```\n\nこれだけで初期化部分の修正なしに、UserFacadeでEmailServiceを使えるようになります。\n",
        "body": "<p>ScalaでDIを行う方法はいろいろありますが、最近お気に入りのDIのやりかたの紹介です。</p>\n<p>implicit defと、implicit parameterを組み合わせて必要なコンポーネントの受け渡しをコンパイラーに任せてしまいます。</p>\n<p>利点</p>\n\n<ul>\n<li>Scalaの標準機能のみで簡単に実装できてライブラリ不要</li>\n<li>全てコードで記述できるので、XML地獄や新しいDSLを覚える必要がない</li>\n<li>使いたいコンポーネントをコンストラクタに追加するだけで使えて楽</li>\n</ul>\n<p>欠点</p>\n\n<ul>\n<li>コンストラクターDIしか出来ない</li>\n</ul>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>手順\n      </h2>\n<ol>\n<li>インジェクションしたいコンポーネントをimplicit defで列挙したクラス(トレイト)を作る</li>\n<li>コンポーネントを使うクラスで、使いたいコンポーネントをimplicit parameterで定義</li>\n<li>コンポーネントを使うクラスを生成する際にコンポーネントを列挙したクラスのフィールドをimportする</li>\n</ol>\n<p>のが、実装の大まかな流れになります。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>サンプルコード\n      </h2><p>では、早速サンプルコードを。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>基本部分\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Repositories.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Repositories</span><span class=\"o\">{</span>\n  <span class=\"c1\">// DIしたいコンポーネントをimplicit defで列挙</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">userRepo</span> <span class=\"k\">:</span> <span class=\"kt\">UserRepository</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">def</span> <span class=\"n\">mailService</span> <span class=\"k\">:</span> <span class=\"kt\">MailService</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserRepository.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">// DIで渡したいコンポーネントの定義</span>\n<span class=\"k\">trait</span> <span class=\"nc\">UserRepository</span><span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">UserDAO</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">UserDAO</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">){</span>\n  <span class=\"c1\">//...implements</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserFacade.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">// 使用したいコンポーネントを、コンストラクタのimplicit parameterに指定する</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserFacade</span><span class=\"o\">()(</span><span class=\"k\">implicit</span> <span class=\"n\">userRepo</span> <span class=\"k\">:</span> <span class=\"kt\">UserRepository</span><span class=\"o\">){</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span><span class=\"n\">nickname</span> <span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Optino</span><span class=\"o\">[</span><span class=\"kt\">UserDAO</span><span class=\"o\">]</span><span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">userRepo</span><span class=\"o\">.</span><span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">setAndSaveNickname</span><span class=\"o\">(</span><span class=\"n\">nickname</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> \n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Factory.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Factory</span><span class=\"o\">(</span><span class=\"n\">repos</span> <span class=\"k\">:</span> <span class=\"kt\">Repositories</span><span class=\"o\">){</span>\n\n  <span class=\"c1\">// コンポーネントを列挙したクラスのフィールドをimportしてやる</span>\n  <span class=\"k\">import</span> <span class=\"nn\">repos._</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">userFacade</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">UserFacade</span><span class=\"o\">()</span> <span class=\"c1\">// 勝手に必要なコンポーネントが渡される</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>使い方\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Production.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">RepositoriesForProduction</span> <span class=\"k\">extends</span> <span class=\"nc\">Repositories</span><span class=\"o\">{</span>\n  <span class=\"c1\">// lazy valにしておくと、不要なコンポーネントが初期化されない</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">userRepo</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">TrueImplementedUserRepository</span><span class=\"o\">()</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">mailService</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">TrueImplmentedMailService</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n<span class=\"k\">val</span> <span class=\"n\">factory</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Factory</span><span class=\"o\">(</span><span class=\"nc\">RepositoriesForProduction</span> <span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">userFacade</span> <span class=\"k\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">userFacade</span>\n<span class=\"n\">userFacade</span><span class=\"o\">.</span><span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s\">&quot;クドリャフカ&quot;</span><span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Test.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">RepositoriesForTest</span> <span class=\"k\">extends</span> <span class=\"nc\">Repositories</span><span class=\"o\">{</span>\n  <span class=\"c1\">// テスト用の場合は、mock化したコンポーネント</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">userRepo</span> <span class=\"k\">=</span> <span class=\"n\">mock</span><span class=\"o\">[</span><span class=\"kt\">UserRepository</span><span class=\"o\">]</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">mailService</span> <span class=\"k\">=</span> <span class=\"n\">mock</span><span class=\"o\">[</span><span class=\"kt\">MailService</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// 初期化の方法は変わらず</span>\n<span class=\"k\">val</span> <span class=\"n\">factory</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Factory</span><span class=\"o\">(</span><span class=\"nc\">RepositoriesForTest</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">userFacade</span> <span class=\"k\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">userFacade</span>\n<span class=\"n\">userFacade</span><span class=\"o\">.</span><span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s\">&quot;クドリャフカ&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>といった感じになります。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>補足\n      </h2><p>あと、先ほど利点で挙げた「使いたいコンポーネントをコンストラクタに書くだけでいい」という事を補足しておきます。<br>\n例えば、「パスワードリセットして通知メールを送る」機能を追加するとします。<br>\nその場合、UserFacade.scalaだけを次のように修正します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserFacade.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">// メール機能を使いたいのでMailServiceを追加</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserFacade</span><span class=\"o\">()(</span><span class=\"k\">implicit</span> <span class=\"n\">userRepo</span> <span class=\"k\">:</span> <span class=\"kt\">UserRepository</span><span class=\"o\">,</span><span class=\"n\">mailService</span> <span class=\"k\">:</span> <span class=\"kt\">MailService</span><span class=\"o\">){</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">changeNickname</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span><span class=\"n\">nickname</span> <span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Optino</span><span class=\"o\">[</span><span class=\"kt\">UserDAO</span><span class=\"o\">]</span><span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">userRepo</span><span class=\"o\">.</span><span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">setAndSaveNickname</span><span class=\"o\">(</span><span class=\"n\">nickname</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">resetPassword</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">userRepo</span><span class=\"o\">.</span><span class=\"n\">getUser</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">foreach</span><span class=\"o\">(</span> <span class=\"n\">user</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">newPassword</span> <span class=\"k\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">resetPassword</span><span class=\"o\">()</span> <span class=\"c1\">// resetPassword()は実装済みとする</span>\n      <span class=\"n\">emailService</span><span class=\"o\">.</span><span class=\"n\">sendTo</span><span class=\"o\">(</span><span class=\"n\">user</span><span class=\"o\">,</span><span class=\"s\">&quot;パスワードリセット&quot;</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"s\">&quot;新しいパスワードは${newPassword}です&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">})</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> \n</pre></div></div><p>これだけで初期化部分の修正なしに、UserFacadeでEmailServiceを使えるようになります。</p>\n",
        "stock_users": [
            "MAKOTO_MOBY",
            "kasumani",
            "mtoyoshi",
            "Reds",
            "kawachi"
        ]
    },
    {
        "id": 131948,
        "uuid": "8a89b2ef345ef7d1c0d9",
        "user": {
            "id": 46605,
            "url_name": "sasarkyz",
            "profile_image_url": "https://pbs.twimg.com/profile_images/484722223865810944/9i2hbgk-_normal.jpeg"
        },
        "title": "scala 事始め",
        "created_at": "2014-09-12 00:53:46 +0900",
        "updated_at": "2014-09-12 00:54:23 +0900",
        "created_at_in_words": "12日",
        "updated_at_in_words": "12日",
        "tags": [
            {
                "name": "Mac",
                "url_name": "mac",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0cbda729ead4559760ec64ae744a5aef937e0b08/medium.jpg?1403645170",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 0,
        "url": "http://qiita.com/sasarkyz/items/8a89b2ef345ef7d1c0d9",
        "created_at_as_seconds": 1410450826,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n# はじめに\n最近 java をいじっていたので scala を触ってみようと思います。\n全然わからないです。やってみようかなって思ってたけど手を出してない方。一緒にはじめましょう！\n\n# インストール\n何はともあれインストールしないと使えません。\nbrew で入れられました\n\n```bash\n$ brew install scala\n==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/scala-2.11.2.mavericks.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring scala-2.11.2.mavericks.bottle.tar.gz\n==> Caveats\nTo use with IntelliJ, set the Scala home to:\n  /usr/local/opt/scala/idea\n\nBash completion has been installed to:\n  /usr/local/etc/bash_completion.d\n==> Summary\n🍺  /usr/local/Cellar/scala/2.11.2: 46 files, 29M\n```\n\nビール。。。？\n\nとりあえずわからないけどコマンド叩いてみるとインタプリタモードになった。\n\n```bash\n$ scala\nWelcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_60).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala>\n```\n\n# Hello World\nへろーわーるどくらいやってみたいよね。\njava と文法似てるッて聞いたので多分どうにかなるんじゃないかとふんでる\n\n```bash\nscala> System.out.println(\"Hello, World\");\nHello, World\n```\n\nよかった。\n\nでもこれ以上わからないので、ここからはコップ本読み進めていきます。\n\n# ファイルから実行\n```hello.scala\nprintln(\"Hello World\")\n```\n\njava と違って長ったらしく import 書かなくていいんですね。\nコンパイル？遅い印象があります。どうなんだろう。僕のマシンが非力なだけかな\n\n```bash\n$ scala hello.scala\nHello World\n```\n\n# おわりに\nこれ以上やってもただの入門書のコピペになりそうなのでこのへんで。\njava に比べて割りと親切な印象を受けました。もうちょっと読み進めていきたいです。\nこれからもちょくちょく scala ネタ投稿していきたいと思います。\n\n\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>最近 java をいじっていたので scala を触ってみようと思います。<br>\n全然わからないです。やってみようかなって思ってたけど手を出してない方。一緒にはじめましょう！</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>インストール\n      </h1><p>何はともあれインストールしないと使えません。<br>\nbrew で入れられました</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>brew install <span class=\"nv\">scala</span>\n<span class=\"o\">==</span>&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/scala-2.11.2.mavericks.bottle.tar.gz\n<span class=\"c\">######################################################################## 100.0%</span>\n<span class=\"o\">==</span>&gt; Pouring scala-2.11.2.mavericks.bottle.tar.gz\n<span class=\"o\">==</span>&gt; Caveats\nTo use with IntelliJ, <span class=\"nb\">set </span>the Scala home to:\n  /usr/local/opt/scala/idea\n\nBash completion has been installed to:\n  /usr/local/etc/bash_completion.d\n<span class=\"o\">==</span>&gt; Summary\n🍺  /usr/local/Cellar/scala/2.11.2: <span class=\"m\">46</span> files, 29M\n</pre></div></div><p>ビール。。。？</p>\n<p>とりあえずわからないけどコマンド叩いてみるとインタプリタモードになった。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>scala\nWelcome to Scala version 2.11.2 <span class=\"o\">(</span>Java HotSpot<span class=\"o\">(</span>TM<span class=\"o\">)</span> 64-Bit Server VM, Java 1.7.0_60<span class=\"o\">)</span>.\nType in expressions to have them evaluated.\nType :help <span class=\"k\">for</span> more information.\n\nscala&gt;\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Hello World\n      </h1><p>へろーわーるどくらいやってみたいよね。<br>\njava と文法似てるッて聞いたので多分どうにかなるんじゃないかとふんでる</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>scala&gt; System.out.println<span class=\"o\">(</span><span class=\"s2\">&quot;Hello, World&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\nHello, World\n</pre></div></div><p>よかった。</p>\n<p>でもこれ以上わからないので、ここからはコップ本読み進めていきます。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>ファイルから実行\n      </h1><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">hello.scala</span></div><div class=\"highlight\"><pre><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello World&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>java と違って長ったらしく import 書かなくていいんですね。<br>\nコンパイル？遅い印象があります。どうなんだろう。僕のマシンが非力なだけかな</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>scala hello.scala\nHello World\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>おわりに\n      </h1><p>これ以上やってもただの入門書のコピペになりそうなのでこのへんで。<br>\njava に比べて割りと親切な印象を受けました。もうちょっと読み進めていきたいです。<br>\nこれからもちょくちょく scala ネタ投稿していきたいと思います。</p>\n",
        "stock_users": [
            "seiya1311"
        ]
    },
    {
        "id": 131926,
        "uuid": "0a9c474a952acfbdabfc",
        "user": {
            "id": 34165,
            "url_name": "takudo",
            "profile_image_url": "https://pbs.twimg.com/profile_images/433549008900870144/3o-jGLrB_normal.jpeg"
        },
        "title": "【Android】Android with Scala 事始め【Scala】",
        "created_at": "2014-09-12 00:06:02 +0900",
        "updated_at": "2014-09-12 00:13:01 +0900",
        "created_at_in_words": "12日",
        "updated_at_in_words": "12日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Android",
                "url_name": "android",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0062451c92bb932b6bb257a40a35eee709b5597c/medium.jpg?1403644757",
                "versions": []
            },
            {
                "name": "IntelliJ",
                "url_name": "intellij",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/86ce6198a1ef4a3e5be6bf29893bff9bbda3fa4e/medium.jpg?1367911208",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/takudo/items/0a9c474a952acfbdabfc",
        "created_at_as_seconds": 1410447962,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n__2014/09/11時点__\n\nタイトル通り。\n今ならずいぶん簡単にできますよ～ということをアピールします。\nなお私、JavaでのAndroid開発はやったことはありません...。\n\n__※注意__\n__利用している[pfn/android-sdk-plugin](https://github.com/pfn/android-sdk-plugin)はバージョンアップが激しいです。情報がすぐに古くなる可能性が有ります。__\n\n__この手法のメリットは、下記です__\n\n* Scalaで書ける（Better Java, OOPxFP）\n* sbtによるビルド管理（パッケージの追加など、比較的楽）\n\n\n#検証環境\n\n* MacOSX 10.9.4\n* IntelliJ IDEA 14 EAP(Scalaプラグインインストール済み)\n* GenyMotion(エミュレータ）\n\n#事前準備\n\n* android sdk インストール\n* sbtインストール\n\n#プロジェクトの作成\n\n* 基本、[ココ](https://github.com/pfn/android-sdk-plugin#usage)の手順に沿って行くだけですが、一応順番に。\n\n##ひな形ファイルの用意\n\nsbtプロジェクトを配置するディレクトリつくって、その配下にsbtプラグインの記述をします。\n\n\n```shell\n$ mkdir [path/to/project]\n$ mkdir [path/to/project]/project\n$ cd [path/to/project]\n$ vi project/plugins.sbt\n```\n\n```plugins.sbt\naddSbtPlugin(\"com.hanhuy.sbt\" % \"android-sdk-plugin\" % \"1.3.5\")\n\nresolvers += Resolver.sbtPluginRepo(\"snapshots\")\n\naddSbtPlugin(\"com.hanhuy.sbt\" % \"sbt-idea\" % \"1.7.0-SNAPSHOT\")\n```\n\n↑IntelliJ用のプラグインも入れてます\n\n\n##コマンドでプロジェクトのひな形作成\n\nsbtコマンドと拡張コマンドで、プロジェクトのひな形を作ります\n\n```shell\n\n$ cd [path/to/project]\n$ sbt\n#~~~~~sbtコンソールが起動していろいろ入る\n> gen-android android-19 com.takudo.hogehoge takudotest\n\n```\ngen-androidの引数は\n\n* APIレベル\n* パッケージ名\n* 名称\n\nの順で↑の例のように渡す。\n\n\n\n__※この後 [error] java.lang.NoClassDefFoundError: sbt/Plugins が発生、sbtのバージョンを0.13.5に変更することでエラーが出なくなる__\n\n```project/build.properties\nsbt.version=0.13.5\n```\n\n##IntelliJ用設定ファイルを作る\n\n```\n$ sbt\n> gen-idea\n\n```\n\nIntelliJで開いてみる\n\nFile > Openからプロジェクトのディレクトリを選択する\n\n![IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/bfdbcf8e-6214-21c7-8584-6d3fe3d57e5b.jpeg \"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\")\n\n\n##エミュレータで動かしてみる\n\n### sbt でビルド\n\nsbtコンソールでデバッグ用パッケージを作成します。\n\n```\n> ~android:package-debug\n```\n（頭の~でファイルの変更を監視してコンパイルかけてくれるようになります）\n\n### IntelliJ　SDK設定\n\nIntelliJのSDK設定ができていないはずなので、選択します\n\nFile　>　ProjectStructure\n\n![Project_Structure.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/97ff3edc-f4cc-db52-9c42-3a1bd9a0cf07.jpeg \"Project_Structure.jpg\")\n\n![Project_Structure.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/a51b45e0-68da-16e0-ee08-bb7d525af1f7.jpeg \"Project_Structure.jpg\")\n\n![Project_Structure.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/a8efc9af-76a6-9078-130a-df9b25dd7582.jpeg \"Project_Structure.jpg\")\n\n### IntelliJデバッグ設定\n\nIntelliJのデバッグのEditConfigurationsで、\n下記のようにデバッグ設定を作ります。\n\n![Run_Debug_Configurations.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/7611144a-afcf-213c-fa00-6ec7171015f9.jpeg \"Run_Debug_Configurations.jpg\")\n\n### デバッグ実行\n\n虫のアイコンをクリックするとデバイス選択画面が出るので、GenyMotionで動かしているエミュレータを選択します。\n\n![Choose_Device.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/86e0c7d3-5006-9791-40b7-0b9c4bc20115.jpeg \"Choose_Device.jpg\")\n\nおー動いた！\n\n![Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/34327bde-f276-515c-a71d-6b88203926e8.jpeg \"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\")\n\nブレイクポイントでも止まります。\n\n![IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/74509241-4465-de14-d44f-09fef15a3981.jpeg \"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\")\n\nでもまだこれJavaのソースなんで、Scalaで書きます。\n\n#Scalaでソースコード書いてみる\n\nとりあえずデフォルトで出来上がるJavaのMainActivityをそっくりScalaに移植します。\n\nsrc/main配下に、\nsrc/main/scala/[パッケージ]/MainActivity.scala\nを作りましょう。\n\n（Javaのソースコードをコピーして、scalaのファイルに貼り付けると面白いので試してみてください）\n\nscalaのコードはこんなかんじだと思います。\n\n```scala:src/main/scala/[パッケージ]/MainActivity.scala\n\npackage [パッケージ]\n\nimport android.app.Activity\nimport android.os.Bundle\n\nclass MainActivity extends Activity {\n  /** Called when the activity is first created. */\n  override def onCreate(savedInstanceState: Bundle) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.main)\n  }\n}\n\n```\n\nで、忘れずにjavaのファイルを消しておきましょう\nsrc/main/java/[パッケージ]/MainActivity.java\n\nでは虫アイコンからデバッグ開始！\n\n![Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/1204ec09-cffa-11a3-4a38-4ef56f8daf55.jpeg \"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\")\n\nブレークポイントでも止まります。\n\n![IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/34165/0b577360-d5ee-6de9-aa98-801816721e2d.jpeg \"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\")\n\n以上です。\n\n---\n\nAndroid始めたばかりというのもありますが、Scalaっぽいimmutableな書き方がしづらい場面が多々ある気がしています。\n今後進めていく上で、Scalaでの開発上の良いプラクティスがあれば共有したいなと思っています。\n\n",
        "body": "<p><strong>2014/09/11時点</strong></p>\n<p>タイトル通り。<br>\n今ならずいぶん簡単にできますよ～ということをアピールします。<br>\nなお私、JavaでのAndroid開発はやったことはありません...。</p>\n<p><strong>※注意</strong><br>\n<strong>利用している<a href=\"https://github.com/pfn/android-sdk-plugin\" title=\"\" target=\"_blank\">pfn/android-sdk-plugin</a>はバージョンアップが激しいです。情報がすぐに古くなる可能性が有ります。</strong></p>\n<p><strong>この手法のメリットは、下記です</strong></p>\n\n<ul>\n<li>Scalaで書ける（Better Java, OOPxFP）</li>\n<li>sbtによるビルド管理（パッケージの追加など、比較的楽）</li>\n</ul>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>検証環境\n      </h1>\n<ul>\n<li>MacOSX 10.9.4</li>\n<li>IntelliJ IDEA 14 EAP(Scalaプラグインインストール済み)</li>\n<li>GenyMotion(エミュレータ）</li>\n</ul>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>事前準備\n      </h1>\n<ul>\n<li>android sdk インストール</li>\n<li>sbtインストール</li>\n</ul>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>プロジェクトの作成\n      </h1>\n<ul>\n<li>基本、<a href=\"https://github.com/pfn/android-sdk-plugin#usage\" title=\"\" target=\"_blank\">ココ</a>の手順に沿って行くだけですが、一応順番に。</li>\n</ul>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>ひな形ファイルの用意\n      </h2><p>sbtプロジェクトを配置するディレクトリつくって、その配下にsbtプラグインの記述をします。</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>$ mkdir [path/to/project]\n$ mkdir [path/to/project]/project\n$ cd [path/to/project]\n$ vi project/plugins.sbt\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">plugins.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">addSbtPlugin</span><span class=\"o\">(</span><span class=\"s\">&quot;com.hanhuy.sbt&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;android-sdk-plugin&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.3.5&quot;</span><span class=\"o\">)</span>\n\n<span class=\"n\">resolvers</span> <span class=\"o\">+=</span> <span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">sbtPluginRepo</span><span class=\"o\">(</span><span class=\"s\">&quot;snapshots&quot;</span><span class=\"o\">)</span>\n\n<span class=\"n\">addSbtPlugin</span><span class=\"o\">(</span><span class=\"s\">&quot;com.hanhuy.sbt&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;sbt-idea&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.7.0-SNAPSHOT&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>↑IntelliJ用のプラグインも入れてます</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>コマンドでプロジェクトのひな形作成\n      </h2><p>sbtコマンドと拡張コマンドで、プロジェクトのひな形を作ります</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>$ cd [path/to/project]\n$ sbt\n#~~~~~sbtコンソールが起動していろいろ入る\n&gt; gen-android android-19 com.takudo.hogehoge takudotest\n</pre></div></div><p>gen-androidの引数は</p>\n\n<ul>\n<li>APIレベル</li>\n<li>パッケージ名</li>\n<li>名称</li>\n</ul>\n<p>の順で↑の例のように渡す。</p>\n<p><strong>※この後 [error] java.lang.NoClassDefFoundError: sbt/Plugins が発生、sbtのバージョンを0.13.5に変更することでエラーが出なくなる</strong></p>\n<div class=\"code-frame\" data-lang=\"ini\"><div class=\"code-lang\"><span class=\"bold\">project/build.properties</span></div><div class=\"highlight\"><pre><span class=\"na\">sbt.version</span><span class=\"o\">=</span><span class=\"s\">0.13.5</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>IntelliJ用設定ファイルを作る\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sbt\n&gt; gen-idea\n</pre></div></div><p>IntelliJで開いてみる</p>\n<p>File &gt; Openからプロジェクトのディレクトリを選択する</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/bfdbcf8e-6214-21c7-8584-6d3fe3d57e5b.jpeg\" title=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\" alt=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\"></img></p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>エミュレータで動かしてみる\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>sbt でビルド\n      </h3><p>sbtコンソールでデバッグ用パッケージを作成します。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; ~android:package-debug\n</pre></div></div><p>（頭の~でファイルの変更を監視してコンパイルかけてくれるようになります）</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>IntelliJ　SDK設定\n      </h3><p>IntelliJのSDK設定ができていないはずなので、選択します</p>\n<p>File　&gt;　ProjectStructure</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/97ff3edc-f4cc-db52-9c42-3a1bd9a0cf07.jpeg\" title=\"Project_Structure.jpg\" alt=\"Project_Structure.jpg\"></img></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/a51b45e0-68da-16e0-ee08-bb7d525af1f7.jpeg\" title=\"Project_Structure.jpg\" alt=\"Project_Structure.jpg\"></img></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/a8efc9af-76a6-9078-130a-df9b25dd7582.jpeg\" title=\"Project_Structure.jpg\" alt=\"Project_Structure.jpg\"></img></p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>IntelliJデバッグ設定\n      </h3><p>IntelliJのデバッグのEditConfigurationsで、<br>\n下記のようにデバッグ設定を作ります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/7611144a-afcf-213c-fa00-6ec7171015f9.jpeg\" title=\"Run_Debug_Configurations.jpg\" alt=\"Run_Debug_Configurations.jpg\"></img></p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>デバッグ実行\n      </h3><p>虫のアイコンをクリックするとデバイス選択画面が出るので、GenyMotionで動かしているエミュレータを選択します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/86e0c7d3-5006-9791-40b7-0b9c4bc20115.jpeg\" title=\"Choose_Device.jpg\" alt=\"Choose_Device.jpg\"></img></p>\n<p>おー動いた！</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/34327bde-f276-515c-a71d-6b88203926e8.jpeg\" title=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\" alt=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\"></img></p>\n<p>ブレイクポイントでも止まります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/74509241-4465-de14-d44f-09fef15a3981.jpeg\" title=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\" alt=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\"></img></p>\n<p>でもまだこれJavaのソースなんで、Scalaで書きます。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>Scalaでソースコード書いてみる\n      </h1><p>とりあえずデフォルトで出来上がるJavaのMainActivityをそっくりScalaに移植します。</p>\n<p>src/main配下に、<br>\nsrc/main/scala/[パッケージ]/MainActivity.scala<br>\nを作りましょう。</p>\n<p>（Javaのソースコードをコピーして、scalaのファイルに貼り付けると面白いので試してみてください）</p>\n<p>scalaのコードはこんなかんじだと思います。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">src/main/scala/[パッケージ]/MainActivity.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"err\">[</span><span class=\"nn\">パッケ</span><span class=\"err\">ー</span><span class=\"n\">ジ</span><span class=\"err\">]</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">android.app.Activity</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.os.Bundle</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"k\">extends</span> <span class=\"nc\">Activity</span> <span class=\"o\">{</span>\n  <span class=\"cm\">/** Called when the activity is first created. */</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"k\">:</span> <span class=\"kt\">Bundle</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"n\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">)</span>\n    <span class=\"n\">setContentView</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>で、忘れずにjavaのファイルを消しておきましょう<br>\nsrc/main/java/[パッケージ]/MainActivity.java</p>\n<p>では虫アイコンからデバッグ開始！</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/1204ec09-cffa-11a3-4a38-4ef56f8daf55.jpeg\" title=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\" alt=\"Genymotion_for_personal_use_-_Google_Nexus_7_-_4_4_2_-_API_19_-_800x1280__800x1280__213dpi__-_192_168_57_100.jpg\"></img></p>\n<p>ブレークポイントでも止まります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/34165/0b577360-d5ee-6de9-aa98-801816721e2d.jpeg\" title=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\" alt=\"IntelliJ_IDEA__Cassiopeia__IU-138_1980_1.jpg\"></img></p>\n<p>以上です。</p>\n\n<hr>\n<p>Android始めたばかりというのもありますが、Scalaっぽいimmutableな書き方がしづらい場面が多々ある気がしています。<br>\n今後進めていく上で、Scalaでの開発上の良いプラクティスがあれば共有したいなと思っています。</p>\n",
        "stock_users": [
            "tomoya0x00",
            "amyu_san",
            "soraiyu",
            "oret"
        ]
    },
    {
        "id": 131022,
        "uuid": "9545255ca326fe0c967b",
        "user": {
            "id": 16900,
            "url_name": "mikamix",
            "profile_image_url": "https://secure.gravatar.com/avatar/16faa4cd93ddd347e77b0be9e36791ed"
        },
        "title": "Slickで共通のクエリを定義する方法",
        "created_at": "2014-09-11 00:17:29 +0900",
        "updated_at": "2014-09-11 00:17:29 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "13日",
        "tags": [
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/mikamix/items/9545255ca326fe0c967b",
        "created_at_as_seconds": 1410362249,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 概要\n\nSlickで特定、もしくは複数のテーブルにおける共通のクエリを定義する方法です。\n\nクラスにマップせず、できるだけ`Query`の状態で引き回すことでFRMとしての特性を最大限引き出すことが可能になります。\n\n公式に上がっている[プレゼン資料](http://slick.typesafe.com/talks/2013-12-03_Scala-eXchange/2013-12-03_Patterns-for-Slick-database-applications-Scala-eXchange.pdf)を参考にしましたので、より詳しく知りたい方はこちらもお読み下さい。\n\n## 解説\n\n### 複数のテーブルに共通のクエリを用意する\n\n例えば全てのテーブルに`id`を定義し、`table.filter(_.id === id)`といった形でアクセスしたい場合、まずは以下の様な`trait`を用意します。\n\n```scala:WithId.scala\n\ntrait WithId {\n\n  def id = column[Int](\"id\", O.PrimaryKey)\n}\n\n```\n\nそして`Table`クラスを作成する際にこの`WithId`をミックスインします。\n\n```scala:Coffee.scala\n\nclass Coffees(tag: Tag) extends Table[Coffee](tag, \"coffees\") with WithId {\n\n  def name = column[String](\"coffee_name\")\n\n  def * = (id, name) <> (Coffee.tuppled, Coffee.unapply)\n}\n\n```\n\nさらに、以下の様な`implicit class`を定義してやることで、全てのテーブルクラスに対して`findById`でアクセスできるようになります。\n\n```scala:QueryExtensions.scala\n\nimplicit class QueryExtensions[T <: WithId, E, _](val q: Query[T, E, _]) {\n\n  def findById(id: column[Int]) = q.filter(_.id === id)\n}\n\n```\n\n### 特定のテーブルに固有のクエリを用意する\n\n例えば、`Coffees`テーブルを`coffee_name`の値でフィルターしたい場合は、以下の様にします。\n\n```scala:CoffeesExtensions.scala\n\nimplicit class CoffeesExtensions(val q: Query[Coffees, Coffee, _]) {\n\n  def findByName(name: column[String]) = q.filter(_.name === name)\n}\n\n```\n\nこれで、`Coffees`のテーブルに`findByName`でアクセスできるようになります。\n\n### どうやって利用するか\n\nサンプルなどにあるCakeパターンを利用するのもいいですし、以下の用に`trait`を用意して使いたい場所でミックスインすることもできます。\n\n```CoffeesComponent.scala\n\ntrait CoffeesComponent {\n\n  val coffees = TableQuery[Coffees]\n\n  implicit class CoffeesExtensions...\n}\n\n```\n\nまた、これらの`Query`はそれぞれ利用先でチェーンしたり、他のテーブルと`join`することもできます。\nさらには、`join`そのものも他の`Query`を引数に取るメソッドを先ほどの`QueryExtension`で定義することで共通化することができます。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h2><p>Slickで特定、もしくは複数のテーブルにおける共通のクエリを定義する方法です。</p>\n<p>クラスにマップせず、できるだけ<code>Query</code>の状態で引き回すことでFRMとしての特性を最大限引き出すことが可能になります。</p>\n<p>公式に上がっている<a href=\"http://slick.typesafe.com/talks/2013-12-03_Scala-eXchange/2013-12-03_Patterns-for-Slick-database-applications-Scala-eXchange.pdf\" title=\"\" target=\"_blank\">プレゼン資料</a>を参考にしましたので、より詳しく知りたい方はこちらもお読み下さい。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>解説\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>複数のテーブルに共通のクエリを用意する\n      </h3><p>例えば全てのテーブルに<code>id</code>を定義し、<code>table.filter(_.id === id)</code>といった形でアクセスしたい場合、まずは以下の様な<code>trait</code>を用意します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">WithId.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">WithId</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">id</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>そして<code>Table</code>クラスを作成する際にこの<code>WithId</code>をミックスインします。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Coffee.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Coffees</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Coffee</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;coffees&quot;</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"nc\">WithId</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>さらに、以下の様な<code>implicit class</code>を定義してやることで、全てのテーブルクラスに対して<code>findById</code>でアクセスできるようになります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">QueryExtensions.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">QueryExtensions</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">WithId</span>, <span class=\"kt\">E</span>, <span class=\"k\">_</span><span class=\"o\">](</span><span class=\"k\">val</span> <span class=\"n\">q</span><span class=\"k\">:</span> <span class=\"kt\">Query</span><span class=\"o\">[</span><span class=\"kt\">T</span>, <span class=\"kt\">E</span>, <span class=\"k\">_</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">findById</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">column</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>特定のテーブルに固有のクエリを用意する\n      </h3><p>例えば、<code>Coffees</code>テーブルを<code>coffee_name</code>の値でフィルターしたい場合は、以下の様にします。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">CoffeesExtensions.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeesExtensions</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">q</span><span class=\"k\">:</span> <span class=\"kt\">Query</span><span class=\"o\">[</span><span class=\"kt\">Coffees</span>, <span class=\"kt\">Coffee</span>, <span class=\"k\">_</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">findByName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">===</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>これで、<code>Coffees</code>のテーブルに<code>findByName</code>でアクセスできるようになります。</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>どうやって利用するか\n      </h3><p>サンプルなどにあるCakeパターンを利用するのもいいですし、以下の用に<code>trait</code>を用意して使いたい場所でミックスインすることもできます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">CoffeesComponent.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">CoffeesComponent</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">coffees</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">Coffees</span><span class=\"o\">]</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeesExtensions</span><span class=\"o\">...</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>また、これらの<code>Query</code>はそれぞれ利用先でチェーンしたり、他のテーブルと<code>join</code>することもできます。<br>\nさらには、<code>join</code>そのものも他の<code>Query</code>を引数に取るメソッドを先ほどの<code>QueryExtension</code>で定義することで共通化することができます。</p>\n",
        "stock_users": [
            "gutio",
            "kasumani",
            "Reds",
            "takumakei@github"
        ]
    },
    {
        "id": 130959,
        "uuid": "4b07f1e762a458241edb",
        "user": {
            "id": 16900,
            "url_name": "mikamix",
            "profile_image_url": "https://secure.gravatar.com/avatar/16faa4cd93ddd347e77b0be9e36791ed"
        },
        "title": "Slickで自分で定義したcase classにマップする方法",
        "created_at": "2014-09-10 22:33:02 +0900",
        "updated_at": "2014-09-11 00:20:05 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "13日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/mikamix/items/4b07f1e762a458241edb",
        "created_at_as_seconds": 1410355982,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 概要\nSlickで特定のカラム型を自分で定義したクラスにマッピングする方法です。\n\n## 解説\n\n### カラムとクラスを一対一でマップする\n\n単一のカラムであれば、以下の様に`MappedTo`を使うことで通常のカラム型と一対一で紐づけることができます。\n\n```scala:Coffee.scala\n\ncase class CoffeeId(value: Int) extends MappedTo[Int]\n\ncase class Coffee(coffeeId: CoffeeId, coffeeName: String)\n\nclass Coffees(tag: Tag) extends Table[Coffee](tag, \"coffees\") {\n\n  def coffeeId = column[CoffeeId](\"coffee_id\", O.PrimaryKey)\n\n  def coffeeName = column[String](\"coffee_name\")\n\n  def * = (coffeeId, coffeeName) <> (Coffee.tuppled, Coffee.unapply)\n}\n\n```\n\n### 複数のカラムを一つのクラスにマップする\n\n複数のカラムを一つのクラスにマップする場合は、以下の様に`<>`を使って`*`の場合と同様に定義します。\n\n```scala:Coffee2.scala\n\ncase class CoffeeId(value: Int) extends MappedTo[Int]\n\ncase class CoffeeName(japanese: String, english: String)\n\ncase class Coffee(coffeeId: CoffeeId, coffeeName: CoffeeName)\n\nclass Coffees(tag: Tag) extends Table[Coffee](tag, \"coffees\") {\n\n  def coffeeId = column[CoffeeId](\"coffee_id\", O.PrimaryKey)\n\n  def japaneseName = column[String](\"japanese_name\")\n\n  def englishName = column[String](\"english_name\")\n\n  def coffeeName = (japaneseName, englishName) <> (CoffeeName.tuppled, CoffeeName.unapply)\n\n  def * = (coffeeId, coffeeName) <> (Coffee.tuppled, Coffee.unapply)\n}\n```\n\n### 自分で変換処理を書きたい場合\n\n自分で変換処理を書きたい場合は、以下の様に`MappedColumnType`を使用することでエンコード、デコードの処理を記述できます。\n\n```\nimplicit val dateTimeColumnType = MappedColumnType.base[org.joda.time.DateTime, java.sql.Timestamp](\n  { dt => new java.sql.Timestamp(dt.getMillis) },\n  { ts => new org.joda.time.DateTime(ts) }\n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h2><p>Slickで特定のカラム型を自分で定義したクラスにマッピングする方法です。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>解説\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>カラムとクラスを一対一でマップする\n      </h3><p>単一のカラムであれば、以下の様に<code>MappedTo</code>を使うことで通常のカラム型と一対一で紐づけることができます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Coffee.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeeId</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">MappedTo</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Coffee</span><span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"k\">:</span> <span class=\"kt\">CoffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Coffees</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Coffee</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;coffees&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeId</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">CoffeeId</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeName</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>複数のカラムを一つのクラスにマップする\n      </h3><p>複数のカラムを一つのクラスにマップする場合は、以下の様に<code>&lt;&gt;</code>を使って<code>*</code>の場合と同様に定義します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Coffee2.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeeId</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">MappedTo</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CoffeeName</span><span class=\"o\">(</span><span class=\"n\">japanese</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">english</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Coffee</span><span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"k\">:</span> <span class=\"kt\">CoffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"k\">:</span> <span class=\"kt\">CoffeeName</span><span class=\"o\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Coffees</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Coffee</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;coffees&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeId</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">CoffeeId</span><span class=\"o\">](</span><span class=\"s\">&quot;coffee_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">japaneseName</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;japanese_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">englishName</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;english_name&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">coffeeName</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">japaneseName</span><span class=\"o\">,</span> <span class=\"n\">englishName</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">CoffeeName</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">CoffeeName</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">coffeeId</span><span class=\"o\">,</span> <span class=\"n\">coffeeName</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">tuppled</span><span class=\"o\">,</span> <span class=\"nc\">Coffee</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>自分で変換処理を書きたい場合\n      </h3><p>自分で変換処理を書きたい場合は、以下の様に<code>MappedColumnType</code>を使用することでエンコード、デコードの処理を記述できます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>implicit val dateTimeColumnType = MappedColumnType.base[org.joda.time.DateTime, java.sql.Timestamp](\n  { dt =&gt; new java.sql.Timestamp(dt.getMillis) },\n  { ts =&gt; new org.joda.time.DateTime(ts) }\n)\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "takumakei@github",
            "Reds"
        ]
    },
    {
        "id": 130452,
        "uuid": "4a0a2342a57849653f38",
        "user": {
            "id": 5441,
            "url_name": "kawachi",
            "profile_image_url": "https://secure.gravatar.com/avatar/35ea8f83cd8d191f834c69a5481613e9?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "Playframework の Lang でつらいところ",
        "created_at": "2014-09-10 14:36:49 +0900",
        "updated_at": "2014-09-10 15:16:41 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "13日",
        "tags": [
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 5,
        "url": "http://qiita.com/kawachi/items/4a0a2342a57849653f38",
        "created_at_as_seconds": 1410327409,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 基本的な使い方\n\nPlayframework で国際化するときには `play.api.i18n.Messages()` を使う。\n\nhttps://www.playframework.com/documentation/2.3.x/ScalaI18N\n\n````\nval title = Messages(\"home.title\")\n````\n\nでもって `conf/messages`, `conf/messages.ja` などに次のように書いておくと翻訳される。\n\n````\nhome.title=ホーム\n````\n\n`Messages(\"home.title\")` は [`play.api.i18n.Messages`](https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.i18n.Messages$) の `apply()` メソッドを呼び出している。`apply()` メソッドは `play.api.i18n.Lang` 型 (以下 `Lang`)の implicit 引数を取る。\n\n````\ndef apply(key: String, args: Any*)(implicit lang: Lang): String\n````\n\n`Messages.apply()` はテンプレートの中で使われることが多い。\n公式ドキュメントでは twirl テンプレートに implicit で Lang を渡すように Note が書かれている。\n\n````\n@* テンプレートの引数宣言。implicit で Lang を渡す *@\n@()(implicit lang: Lang)\n\n<h1>@Messages(\"home.title\")</h1>\n````\n\nテンプレート以外の場合でも同じように implicit で渡すことができる。\n\n````\n  // Scala コード中で implicit として渡す\n  def title(implicit l: Lang) = Messages(\"home.title\")\n````\n\nコントローラメソッドを Action で書くときは implicit な `play.api.mvc.Request` を取るようにして使う。\n\n\n````\n  def index = Action { implicit request =>\n    Ok(views.html.index())\n  }\n````\n\n## 問題\n\n`Lang` implicit を渡し忘れてもコンパイルエラーにならない。\n\n`Lang` companion object に implicit が定義されている。引数で渡し忘れるとそちらが使われる。\n\nなお companion object の実装は、JVMが動作している環境のデフォルト言語となる。リクエストごとに言語を切り替えたいことが多いため、companion object の実装が使われると残念な思いをすることが多い。\n\n### よくある例1. テンプレートの引数で宣言し忘れる\n\n````\n@* (implicit lang: Lang) を付け忘れ *@\n@()\n\n<h1>@Messages(\"home.title\")</h1>\n````\n\n### よくある例2. 関数の引数で宣言し忘れる\n\n````\n  // (implicit l: Lang) を付け忘れ\n  def title = Messages(\"home.title\")\n````\n\n### よくある例3. implicit request を付け忘れる\n\n`Request` から `Lang` へは `play.api.mvc.Controller#request2lang()` の implicit 変換がなされるが、`Request` がなければ `Lang` へも変換されない。\n\n````\n  // implicit request => を付け忘れ\n  def index = Action {\n    Ok(views.html.index())\n  }\n````\n\n### よくはないけどはまった例\n\nわかったよ。implicit で引き回すから忘れるんだろう。普通の引数にすればいいじゃないか。\n\n````\n  // Play 2.2 では companion object の Lang が使われてしまう\n  def index = Action { implicit request =>\n    // 暗黙的なものを取り出して、\n    val lang = implicitly[Lang]\n    // 以下 lang を明示的に渡して回る\n    ...\n  }\n````\n\nPlay 2.2 では `Request` から `Lang` に変換する implicit def の名前が lang で、local 変数によって implicit が効かなくなる模様。（Scala のバグ？)\nlang 以外の変数名(例えば `_lang`)を使えば期待したとおり動作する。\n\nPlay 2.3 では request2lang という名前に置き換わった。 `val request2lang = ...` とすれば同じような問題が発生しそう。\n\nhttps://github.com/playframework/playframework/issues/2605\nhttps://gist.github.com/tkawachi/8e4987441f775786d1d8\n\n## 解決法\n\n<del>だれか良い解決法をください。</del>\nコメント欄に素敵な解決策が。\n\n## メモ\n\nIntelliJ で Cmd+Shift+p を押すと、カーソルがある場所で使われている implicit がどこで定義されているかを参照することができる。便利。知らなかった。\n \n![Screen Shot 2014-09-10 at 14.17.35.png](https://qiita-image-store.s3.amazonaws.com/0/5441/a7c8de78-d4a9-5ab6-6bf6-086150c0d7b2.png \"Screen Shot 2014-09-10 at 14.17.35.png\")\n\nhttp://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>基本的な使い方\n      </h2><p>Playframework で国際化するときには <code>play.api.i18n.Messages()</code> を使う。</p>\n<p><a href=\"https://www.playframework.com/documentation/2.3.x/ScalaI18N\" title=\"https://www.playframework.com/documentation/2.3.x/ScalaI18N\" target=\"_blank\">https://www.playframework.com/documentation/2.3.x/ScalaI18N</a></p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>val title = Messages(&quot;home.title&quot;)\n</pre></div></div><p>でもって <code>conf/messages</code>, <code>conf/messages.ja</code> などに次のように書いておくと翻訳される。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>home.title=ホーム\n</pre></div></div><p><code>Messages(&quot;home.title&quot;)</code> は <a href=\"https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.i18n.Messages$\" title=\"\" target=\"_blank\"><code>play.api.i18n.Messages</code></a> の <code>apply()</code> メソッドを呼び出している。<code>apply()</code> メソッドは <code>play.api.i18n.Lang</code> 型 (以下 <code>Lang</code>)の implicit 引数を取る。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>def apply(key: String, args: Any*)(implicit lang: Lang): String\n</pre></div></div><p><code>Messages.apply()</code> はテンプレートの中で使われることが多い。<br>\n公式ドキュメントでは twirl テンプレートに implicit で Lang を渡すように Note が書かれている。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>@* テンプレートの引数宣言。implicit で Lang を渡す *@\n@()(implicit lang: Lang)\n\n&lt;h1&gt;@Messages(&quot;home.title&quot;)&lt;/h1&gt;\n</pre></div></div><p>テンプレート以外の場合でも同じように implicit で渡すことができる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // Scala コード中で implicit として渡す\n  def title(implicit l: Lang) = Messages(&quot;home.title&quot;)\n</pre></div></div><p>コントローラメソッドを Action で書くときは implicit な <code>play.api.mvc.Request</code> を取るようにして使う。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  def index = Action { implicit request =&gt;\n    Ok(views.html.index())\n  }\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>問題\n      </h2><p><code>Lang</code> implicit を渡し忘れてもコンパイルエラーにならない。</p>\n<p><code>Lang</code> companion object に implicit が定義されている。引数で渡し忘れるとそちらが使われる。</p>\n<p>なお companion object の実装は、JVMが動作している環境のデフォルト言語となる。リクエストごとに言語を切り替えたいことが多いため、companion object の実装が使われると残念な思いをすることが多い。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>よくある例1. テンプレートの引数で宣言し忘れる\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>@* (implicit lang: Lang) を付け忘れ *@\n@()\n\n&lt;h1&gt;@Messages(&quot;home.title&quot;)&lt;/h1&gt;\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>よくある例2. 関数の引数で宣言し忘れる\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // (implicit l: Lang) を付け忘れ\n  def title = Messages(&quot;home.title&quot;)\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>よくある例3. implicit request を付け忘れる\n      </h3><p><code>Request</code> から <code>Lang</code> へは <code>play.api.mvc.Controller#request2lang()</code> の implicit 変換がなされるが、<code>Request</code> がなければ <code>Lang</code> へも変換されない。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // implicit request =&gt; を付け忘れ\n  def index = Action {\n    Ok(views.html.index())\n  }\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>よくはないけどはまった例\n      </h3><p>わかったよ。implicit で引き回すから忘れるんだろう。普通の引数にすればいいじゃないか。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>  // Play 2.2 では companion object の Lang が使われてしまう\n  def index = Action { implicit request =&gt;\n    // 暗黙的なものを取り出して、\n    val lang = implicitly[Lang]\n    // 以下 lang を明示的に渡して回る\n    ...\n  }\n</pre></div></div><p>Play 2.2 では <code>Request</code> から <code>Lang</code> に変換する implicit def の名前が lang で、local 変数によって implicit が効かなくなる模様。（Scala のバグ？)<br>\nlang 以外の変数名(例えば <code>_lang</code>)を使えば期待したとおり動作する。</p>\n<p>Play 2.3 では request2lang という名前に置き換わった。 <code>val request2lang = ...</code> とすれば同じような問題が発生しそう。</p>\n<p><a href=\"https://github.com/playframework/playframework/issues/2605\" title=\"https://github.com/playframework/playframework/issues/2605\" target=\"_blank\">https://github.com/playframework/playframework/issues/2605</a><br>\n<a href=\"https://gist.github.com/tkawachi/8e4987441f775786d1d8\" title=\"https://gist.github.com/tkawachi/8e4987441f775786d1d8\" target=\"_blank\">https://gist.github.com/tkawachi/8e4987441f775786d1d8</a></p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>解決法\n      </h2><del>だれか良い解決法をください。</del>\n<p>コメント欄に素敵な解決策が。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>メモ\n      </h2><p>IntelliJ で Cmd+Shift+p を押すと、カーソルがある場所で使われている implicit がどこで定義されているかを参照することができる。便利。知らなかった。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/5441/a7c8de78-d4a9-5ab6-6bf6-086150c0d7b2.png\" title=\"Screen Shot 2014-09-10 at 14.17.35.png\" alt=\"Screen Shot 2014-09-10 at 14.17.35.png\"></img></p>\n<p><a href=\"http://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions\" title=\"http://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions\" target=\"_blank\">http://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Implicit+Conversions</a></p>\n",
        "stock_users": [
            "kasumani",
            "garbagetown",
            "Reds",
            "takumakei@github"
        ]
    },
    {
        "id": 130325,
        "uuid": "f969b461b5521e8a2329",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "traitの動的mix-in時の自分型(self-type)使用有無によるコードの違い",
        "created_at": "2014-09-10 12:09:00 +0900",
        "updated_at": "2014-09-11 15:33:04 +0900",
        "created_at_in_words": "13日",
        "updated_at_in_words": "12日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/f969b461b5521e8a2329",
        "created_at_as_seconds": 1410318540,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "## はじめに\n処理コンテキストに応じて、クラスの振る舞いを変更したいとする。\nこんな時はインスタンス生成と同時にtraitをmix-inして無名サブクラスを作る作戦が取れる。\nなおこの時、trait側でベースとなるクラスのメンバ変数やメソッドにアクセスする際に自分型を使う場合と使わない場合でコード量や宣言内容が変わってくるため簡単にまとめたいと思う。\n\n## コード\n\n### mix-inするtraitの宣言\nトレイトBの方がmix-in先を固定していないためより抽象的といえるが、一方でここでの用途はFooの振る舞いを変更するためのtraitなのだ、というように使用が限定的に決まっているのなら不必要な抽象と言える。\nそこでトレイトAのように自分型を使って参照をもってしまえばmix-in先のメンバ変数に容易にアクセスできるため、より簡潔に書くことができるようになる。\n\n```scala\ntrait A { self: Foo =>\n  override def compute = self.str * (self.num * 2)\n}\n\ntrait B {\n  val str: String\n  val num: Int\n\n  def compute = str * (num * 3)\n}\n```\n\n### ベースクラスとコンパニオンオブジェクト\nBをmix-inするとcomputeメソッドはFooにもBにも宣言されていることからコンパイルエラーとなる。以下のようにどちらのcomputeを使うのかを明示的に宣言してやる必要がある。\n一方、Aは既にA側のcomputeをoverrideすると宣言していることからnew時に明示的に宣言してやる必要はない。\n\n```scala\nclass Foo(val str: String, val num: Int) {\n  def compute = str * num\n}\n\nobject Foo {\n  def apply(str: String, num: Int)(implicit mode: Mode = ModeNormal) = mode match {\n    case ModeA => new Foo(str, num) with A\n    case ModeB => new Foo(str, num) with B {\n      override def compute = super[B].compute\n    }\n    case _ => new Foo(str, num)\n  }\n}\n```\n\n### Main部\n\n```scala\nobject Main extends App {\n  implicit val mode = ModeB\n  val foo = Foo(\"*\", 2)\n  println(foo.compute)  // ******\n}\n```\n\n### Mode部\n\n```scala\ntrait Mode\nobject ModeA extends Mode\nobject ModeB extends Mode\nobject ModeNormal extends Mode\n```\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h2><p>処理コンテキストに応じて、クラスの振る舞いを変更したいとする。<br>\nこんな時はインスタンス生成と同時にtraitをmix-inして無名サブクラスを作る作戦が取れる。<br>\nなおこの時、trait側でベースとなるクラスのメンバ変数やメソッドにアクセスする際に自分型を使う場合と使わない場合でコード量や宣言内容が変わってくるため簡単にまとめたいと思う。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>コード\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>mix-inするtraitの宣言\n      </h3><p>トレイトBの方がmix-in先を固定していないためより抽象的といえるが、一方でここでの用途はFooの振る舞いを変更するためのtraitなのだ、というように使用が限定的に決まっているのなら不必要な抽象と言える。<br>\nそこでトレイトAのように自分型を使って参照をもってしまえばmix-in先のメンバ変数に容易にアクセスできるため、より簡潔に書くことができるようになる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">A</span> <span class=\"o\">{</span> <span class=\"n\">self</span><span class=\"k\">:</span> <span class=\"kt\">Foo</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">str</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">B</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n  <span class=\"k\">val</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"n\">str</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>ベースクラスとコンパニオンオブジェクト\n      </h3><p>Bをmix-inするとcomputeメソッドはFooにもBにも宣言されていることからコンパイルエラーとなる。以下のようにどちらのcomputeを使うのかを明示的に宣言してやる必要がある。<br>\n一方、Aは既にA側のcomputeをoverrideすると宣言していることからnew時に明示的に宣言してやる必要はない。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"k\">val</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"n\">str</span> <span class=\"o\">*</span> <span class=\"n\">num</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Foo</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">mode</span><span class=\"k\">:</span> <span class=\"kt\">Mode</span> <span class=\"o\">=</span> <span class=\"nc\">ModeNormal</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">mode</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">ModeA</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">A</span>\n    <span class=\"k\">case</span> <span class=\"nc\">ModeB</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">B</span> <span class=\"o\">{</span>\n      <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">compute</span> <span class=\"k\">=</span> <span class=\"k\">super</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">].</span><span class=\"n\">compute</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>Main部\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">mode</span> <span class=\"k\">=</span> <span class=\"nc\">ModeB</span>\n  <span class=\"k\">val</span> <span class=\"n\">foo</span> <span class=\"k\">=</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"s\">&quot;*&quot;</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"o\">)</span>  <span class=\"c1\">// ******</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>Mode部\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Mode</span>\n<span class=\"k\">object</span> <span class=\"nc\">ModeA</span> <span class=\"k\">extends</span> <span class=\"nc\">Mode</span>\n<span class=\"k\">object</span> <span class=\"nc\">ModeB</span> <span class=\"k\">extends</span> <span class=\"nc\">Mode</span>\n<span class=\"k\">object</span> <span class=\"nc\">ModeNormal</span> <span class=\"k\">extends</span> <span class=\"nc\">Mode</span>\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 129699,
        "uuid": "0554832846fef96ef3d6",
        "user": {
            "id": 37648,
            "url_name": "nmatsui",
            "profile_image_url": "https://gravatar.com/avatar/8d6b48de5a510d9eb81968651d7cec53?d=https%3A%2F%2Fidenticons.github.com%2Ff645b5d6491634697f002f5404c0979b.png&r=x"
        },
        "title": "Twitter -&gt; (Kinesis | Kafka) -&gt; Storm -&gt; Redis",
        "created_at": "2014-09-09 18:34:54 +0900",
        "updated_at": "2014-09-09 18:34:54 +0900",
        "created_at_in_words": "14日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.10"
                ]
            },
            {
                "name": "Twitter4J",
                "url_name": "twitter4j",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "4.0.2"
                ]
            },
            {
                "name": "Kafka",
                "url_name": "kafka",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "0.8.1.1"
                ]
            },
            {
                "name": "KinesisClient",
                "url_name": "kinesisclient",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "1.1.0"
                ]
            },
            {
                "name": "storm",
                "url_name": "storm",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2a372d3b69e80a8ed05b12b7c3d20dcb757b43a5/medium.jpg?1408468361",
                "versions": [
                    "0.9.2"
                ]
            }
        ],
        "stock_count": 10,
        "comment_count": 0,
        "url": "http://qiita.com/nmatsui/items/0554832846fef96ef3d6",
        "created_at_as_seconds": 1410255294,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# AWS Kinesis、Apache Kafka、Apache Stormを連携させるサンプルプログラム\n\n以下のようなサンプルプログラムを作りました。\n\nTwitter Streaming API\n　-> **Producer**　-> (AWS Kinesis | Apache Kafka)　-> Apache Storm[**WordCounter**]\n　　-> Redis\n\n![TweetStreamWordCounter.png](https://qiita-image-store.s3.amazonaws.com/0/37648/066921d3-ea4d-f264-947d-5a8df2cd82cc.png)\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/38740780?startSlide=18\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/nbykmatsui/20140905-aws-nightinithdlt2/18\" title=\"20140905 AWS Night in ITHD LT2\" target=\"_blank\">20140905 AWS Night in ITHD LT2</a> </strong> from <strong><a href=\"//www.slideshare.net/nbykmatsui\" target=\"_blank\">Nobuyuki Matsui</a></strong> </div>\n\n## Vagrant\n\n環境構築用のVagrantfile、Berksfile、各種Cookbook\n\nhttps://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant\n\n### 検証した環境\n\n* HostOS\n - MacOS X(10.7)\n - Oracle VM VirtualBox(4.3.14)\n - Berkshelf(3.1.3)\n - Vagrant(1.6.3)\n - vagrant-omnibus(1.4.1)\n - vagrant-vbguest(0.10.0)\n\n### インストール\n\n1. VirtualBox、Vagrant、Berkshelfをインストール\n2. `git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant.git`\n3. `berks vendor cookbooks`\n4. `vagrant up --provision`\n\nこれにより、下記２つのVMが立ち上がり、`/etc/hosts`が設定されます。\n\n* VM 1: Apache Zookeeper & Apache Kafka用\n - Ubuntu Server(14.04.1 LTS)\n - Oracle JDK(1.8.0_20)\n - Apache Zookeeper(3.3.3) [Apache Kafka install packageに内包されたバージョン]\n - Apache Kafka(0.8.1.1)\n\n* VM 2: Apache Storm & Redis用\n - Ubuntu Server(14.04.1 LTS)\n - Oracle JDK(1.8.0_20)\n - SBT(0.13.5)\n - Apache Storm(0.9.2-incubating)\n\n## WordCounter\n\nApache Storm用の単語出現頻度をカウントするプログラム\n\nhttps://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter\n\n1. AWS Kinesis用のSpout or Apache Kafka用のSpoutを用いてTweetを取得\n1. 下記３つのBoltを用いて単語の出現頻度をカウント\n 1. KinesisとKafkaのデータ構造差異を吸収\n 2. kuromojiを用いて形態素解析\n 3. 単語数のカウント\n1. 出現数をスコアとして単語をRedisのソート済みセット型に登録\n\n### インストール\n\n1. VM 2上で`git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter.git`\n2. `src/main/resources/*.properties.template`を`src/main/resources/*.properties`にリネーム\n3. `AwsCredentials.properties`にAWSのAPI情報をセット\n * もしプロキシ配下で動作させる場合、`kinesis.properties`にプロキシ情報をセット\n1. `sbt compile`\n * Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる\n1. `sbt assembly`\n\n### 依存ライブラリ\n\n* Java\n - Oracle JDK(1.8.0_20)\n - Scala(2.10.4)\n - SBT(0.13.5)\n* Library\n - Apache Storm(0.9.2-incubating)\n - KafkaSpout(0.9.2-incubating)\n - KinesisSpout\n - Kuromoji(0.7.7)\n - Redis Client(2.12)\n\nKinesisSpoutは、[awslabsのkinesis-storm-spout](https://github.com/awslabs/kinesis-storm-spout)にbuild.sbtを追加し、バグフィックスしたもの（ https://github.com/nmatsui/kinesis-storm-spout ）を利用\n\n## Producer\n\nTwitter Streaming APIから取得したTweetをAWS KinesisもしくはApache Kafkaへ連続的に投入するプログラム\n\nhttps://github.com/nmatsui/twitter-kinesis-kafka-storm_producer\n\n1. Twitter Streaming APIから指定したFilterQueryを用いてTweetを連続的に取得\n2. AWS KinesisもしくはApache Kafkaへ投入\n\n### インストール\n\n1. VM 2上で`git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer.git`\n2. `src/main/resources/*.properties.template`を`src/main/resources/*.properties`にリネーム\n3. `AwsCredentials.properties`にAWSのAPI情報をセット\n * もしプロキシ配下で動作させる場合、`kinesis.properties`と`twitter.properties`にプロキシ情報をセット\n1. `sbt compile`\n * Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる\n1. `sbt assembly`\n\n### 依存ライブラリ\n\n* Java\n - Oracle JDK(1.8.0_20)\n - Scala(2.10.4)\n - SBT(0.13.5)\n* Library\n - Twitter4J(4.0.2)\n - Apache Kafka Library(0.8.1.1)\n - Amazon Kinesis Client Library(1.1.0)\n\n## 利用方法\n\n### AWS Kinesis準備\n\n1. AWS Kinesisに\"tweets\"という名前のStreamを作成\n * 現在のバージョンではUS EAST(N.Virginia)のKinesisにのみ対応\n\n### Apache Kafka準備\n\n1. VM 1にログイン\n1. Apache Zookeeper起動\n2. Apache Kafka起動\n3. Apache Kafkaへ\"tweets\"という名前のtopicを作成\n\nZookeeperやKafkaの起動手順等は、[公式サイトのQuickStart](http://kafka.apache.org/documentation.html#quickstart)を参照\n\n### Redis起動確認\n\n1. `redis-cli -h redis --raw`でRedisに接続できることを確認\n\n### Apache StromのTopology起動\n\n1. `java -jar target/scala-2.10/wordcounter.jar (TEST|KAFKA|KINESIS)`\n * TEST: AWS KinesisやApache Kafkaに接続せず、ランダムな文章をBoltに流すSpoutに接続\n * KAFKA: KafkaSpoutに接続\n * KINESIS: KinesisSpoutに接続\n\n### Producer起動\n\n1. `java -jar target/scala-2.10/tweetstreamer.jar (TEST|KAFKA|KINESIS) query_words...`\n * TEST: AWS KinesisやApache Kafkaに接続せずTwitter Streaming APIから取得したTweetをログ出力するのみ\n * KAFKA: Apache KafkaにTweetをputする\n * KINESIS: AWS KinesisにTweetをputする\n3. `query_words`は、Twitter Streaming APIの\"statuses/filter\"エンドポイントに渡されるフィルタワード\n * 空白区切りで複数の単語を指定可能\n * 指定した単語のいづれかが含まれるTweetが抽出される\n\n正しく環境構築できていれば、取得したTweetがログ出力され、Redisに登録される\n\n### Redis確認\n\n1. `redis-cli -h redis --raw`でRedisに接続\n2. Redis-CLI上で`zrange words 0 -1 withscores`を実行すると、出現頻度の昇順で単語が表示される\n\nRedisの結果をクリアする場合、Redis-CLI上で`del words`を実行\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>AWS Kinesis、Apache Kafka、Apache Stormを連携させるサンプルプログラム\n      </h1><p>以下のようなサンプルプログラムを作りました。</p>\n<p>Twitter Streaming API<br>\n　-&gt; <strong>Producer</strong>　-&gt; (AWS Kinesis | Apache Kafka)　-&gt; Apache Storm[<strong>WordCounter</strong>]<br>\n　　-&gt; Redis</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/37648/066921d3-ea4d-f264-947d-5a8df2cd82cc.png\" title=\"\" alt=\"TweetStreamWordCounter.png\"></img></p>\n<p>  <div> <strong> <a href=\"//www.slideshare.net/nbykmatsui/20140905-aws-nightinithdlt2/18\" title=\"20140905 AWS Night in ITHD LT2\">20140905 AWS Night in ITHD LT2</a> </strong> from <strong><a href=\"//www.slideshare.net/nbykmatsui\">Nobuyuki Matsui</a></strong> </div></p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Vagrant\n      </h2><p>環境構築用のVagrantfile、Berksfile、各種Cookbook</p>\n<p><a href=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant\" title=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant\" target=\"_blank\">https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant</a></p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>検証した環境\n      </h3>\n<ul>\n<li>HostOS\n\n<ul>\n<li>MacOS X(10.7)</li>\n<li>Oracle VM VirtualBox(4.3.14)</li>\n<li>Berkshelf(3.1.3)</li>\n<li>Vagrant(1.6.3)</li>\n<li>vagrant-omnibus(1.4.1)</li>\n<li>vagrant-vbguest(0.10.0)</li>\n</ul></li>\n</ul>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>インストール\n      </h3>\n<ol>\n<li>VirtualBox、Vagrant、Berkshelfをインストール</li>\n<li><code>git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_vagrant.git</code></li>\n<li><code>berks vendor cookbooks</code></li>\n<li><code>vagrant up --provision</code></li>\n</ol>\n<p>これにより、下記２つのVMが立ち上がり、<code>/etc/hosts</code>が設定されます。</p>\n\n<ul>\n<li><p>VM 1: Apache Zookeeper &amp; Apache Kafka用</p>\n\n<ul>\n<li>Ubuntu Server(14.04.1 LTS)</li>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>Apache Zookeeper(3.3.3) [Apache Kafka install packageに内包されたバージョン]</li>\n<li>Apache Kafka(0.8.1.1)</li>\n</ul></li>\n<li><p>VM 2: Apache Storm &amp; Redis用</p>\n\n<ul>\n<li>Ubuntu Server(14.04.1 LTS)</li>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>SBT(0.13.5)</li>\n<li>Apache Storm(0.9.2-incubating)</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>WordCounter\n      </h2><p>Apache Storm用の単語出現頻度をカウントするプログラム</p>\n<p><a href=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter\" title=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter\" target=\"_blank\">https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter</a></p>\n\n<ol>\n<li>AWS Kinesis用のSpout or Apache Kafka用のSpoutを用いてTweetを取得</li>\n<li>下記３つのBoltを用いて単語の出現頻度をカウント\n\n<ol>\n<li>KinesisとKafkaのデータ構造差異を吸収</li>\n<li>kuromojiを用いて形態素解析</li>\n<li>単語数のカウント</li>\n</ol></li>\n<li>出現数をスコアとして単語をRedisのソート済みセット型に登録</li>\n</ol>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>インストール\n      </h3>\n<ol>\n<li>VM 2上で<code>git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_wordcounter.git</code></li>\n<li><code>src/main/resources/*.properties.template</code>を<code>src/main/resources/*.properties</code>にリネーム</li>\n<li><code>AwsCredentials.properties</code>にAWSのAPI情報をセット\n\n<ul>\n<li>もしプロキシ配下で動作させる場合、<code>kinesis.properties</code>にプロキシ情報をセット</li>\n</ul></li>\n<li><code>sbt compile</code>\n\n<ul>\n<li>Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる</li>\n</ul></li>\n<li><code>sbt assembly</code></li>\n</ol>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>依存ライブラリ\n      </h3>\n<ul>\n<li>Java\n\n<ul>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>Scala(2.10.4)</li>\n<li>SBT(0.13.5)</li>\n</ul></li>\n<li>Library\n\n<ul>\n<li>Apache Storm(0.9.2-incubating)</li>\n<li>KafkaSpout(0.9.2-incubating)</li>\n<li>KinesisSpout</li>\n<li>Kuromoji(0.7.7)</li>\n<li>Redis Client(2.12)</li>\n</ul></li>\n</ul>\n<p>KinesisSpoutは、<a href=\"https://github.com/awslabs/kinesis-storm-spout\" title=\"\" target=\"_blank\">awslabsのkinesis-storm-spout</a>にbuild.sbtを追加し、バグフィックスしたもの（ <a href=\"https://github.com/nmatsui/kinesis-storm-spout\" title=\"https://github.com/nmatsui/kinesis-storm-spout\" target=\"_blank\">https://github.com/nmatsui/kinesis-storm-spout</a> ）を利用</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Producer\n      </h2><p>Twitter Streaming APIから取得したTweetをAWS KinesisもしくはApache Kafkaへ連続的に投入するプログラム</p>\n<p><a href=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer\" title=\"https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer\" target=\"_blank\">https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer</a></p>\n\n<ol>\n<li>Twitter Streaming APIから指定したFilterQueryを用いてTweetを連続的に取得</li>\n<li>AWS KinesisもしくはApache Kafkaへ投入</li>\n</ol>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>インストール\n      </h3>\n<ol>\n<li>VM 2上で<code>git clone https://github.com/nmatsui/twitter-kinesis-kafka-storm_producer.git</code></li>\n<li><code>src/main/resources/*.properties.template</code>を<code>src/main/resources/*.properties</code>にリネーム</li>\n<li><code>AwsCredentials.properties</code>にAWSのAPI情報をセット\n\n<ul>\n<li>もしプロキシ配下で動作させる場合、<code>kinesis.properties</code>と<code>twitter.properties</code>にプロキシ情報をセット</li>\n</ul></li>\n<li><code>sbt compile</code>\n\n<ul>\n<li>Scala本体や各種依存ライブラリを取得するため、初回はかなり時間がかかる</li>\n</ul></li>\n<li><code>sbt assembly</code></li>\n</ol>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>依存ライブラリ\n      </h3>\n<ul>\n<li>Java\n\n<ul>\n<li>Oracle JDK(1.8.0_20)</li>\n<li>Scala(2.10.4)</li>\n<li>SBT(0.13.5)</li>\n</ul></li>\n<li>Library\n\n<ul>\n<li>Twitter4J(4.0.2)</li>\n<li>Apache Kafka Library(0.8.1.1)</li>\n<li>Amazon Kinesis Client Library(1.1.0)</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>利用方法\n      </h2><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>AWS Kinesis準備\n      </h3>\n<ol>\n<li>AWS Kinesisに&quot;tweets&quot;という名前のStreamを作成\n\n<ul>\n<li>現在のバージョンではUS EAST(N.Virginia)のKinesisにのみ対応</li>\n</ul></li>\n</ol>\n<h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>Apache Kafka準備\n      </h3>\n<ol>\n<li>VM 1にログイン</li>\n<li>Apache Zookeeper起動</li>\n<li>Apache Kafka起動</li>\n<li>Apache Kafkaへ&quot;tweets&quot;という名前のtopicを作成</li>\n</ol>\n<p>ZookeeperやKafkaの起動手順等は、<a href=\"http://kafka.apache.org/documentation.html#quickstart\" title=\"\" target=\"_blank\">公式サイトのQuickStart</a>を参照</p>\n<h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>Redis起動確認\n      </h3>\n<ol>\n<li><code>redis-cli -h redis --raw</code>でRedisに接続できることを確認</li>\n</ol>\n<h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>Apache StromのTopology起動\n      </h3>\n<ol>\n<li><code>java -jar target/scala-2.10/wordcounter.jar (TEST|KAFKA|KINESIS)</code>\n\n<ul>\n<li>TEST: AWS KinesisやApache Kafkaに接続せず、ランダムな文章をBoltに流すSpoutに接続</li>\n<li>KAFKA: KafkaSpoutに接続</li>\n<li>KINESIS: KinesisSpoutに接続</li>\n</ul></li>\n</ol>\n<h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>Producer起動\n      </h3>\n<ol>\n<li><code>java -jar target/scala-2.10/tweetstreamer.jar (TEST|KAFKA|KINESIS) query_words...</code>\n\n<ul>\n<li>TEST: AWS KinesisやApache Kafkaに接続せずTwitter Streaming APIから取得したTweetをログ出力するのみ</li>\n<li>KAFKA: Apache KafkaにTweetをputする</li>\n<li>KINESIS: AWS KinesisにTweetをputする</li>\n</ul></li>\n<li><code>query_words</code>は、Twitter Streaming APIの&quot;statuses/filter&quot;エンドポイントに渡されるフィルタワード\n\n<ul>\n<li>空白区切りで複数の単語を指定可能</li>\n<li>指定した単語のいづれかが含まれるTweetが抽出される</li>\n</ul></li>\n</ol>\n<p>正しく環境構築できていれば、取得したTweetがログ出力され、Redisに登録される</p>\n<h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>Redis確認\n      </h3>\n<ol>\n<li><code>redis-cli -h redis --raw</code>でRedisに接続</li>\n<li>Redis-CLI上で<code>zrange words 0 -1 withscores</code>を実行すると、出現頻度の昇順で単語が表示される</li>\n</ol>\n<p>Redisの結果をクリアする場合、Redis-CLI上で<code>del words</code>を実行</p>\n",
        "stock_users": [
            "wkodate",
            "seiiichi_o",
            "mikamix",
            "morozumi_h",
            "laqiiz",
            "inokappa",
            "suzryo",
            "Reds",
            "poad1010",
            "JunSuzukiJapan@github"
        ]
    },
    {
        "id": 129554,
        "uuid": "d84793e285b4602c77c8",
        "user": {
            "id": 1054,
            "url_name": "a_yasui",
            "profile_image_url": "https://pbs.twimg.com/profile_images/3670878724/3c31fab5c27d24fbbb0fded007052c9a_normal.jpeg"
        },
        "title": "Docker で PlayFramework2 の環境を作るメモ書き",
        "created_at": "2014-09-09 16:11:53 +0900",
        "updated_at": "2014-09-09 16:11:53 +0900",
        "created_at_in_words": "14日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "docker",
                "url_name": "docker",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5dd175e323bc9dac09e906b515d54316d527890f/medium.jpg?1379804192",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/a_yasui/items/d84793e285b4602c77c8",
        "created_at_as_seconds": 1410246713,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\nDockerでPlayFrameworkが動くと聞いて試して見たメモ\n\n\n## Dockerfile\n\nhttps://registry.hub.docker.com/u/adamalex/play-docker-ci/\n\nこれを利用\n\n最終的には Typesafe Activator が動くっぽい。\n\n```shell\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker init\n2014/09/09 15:35:42 Creating VM boot2docker-vm...\n2014/09/09 15:35:42 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)\n2014/09/09 15:35:42 Setting NIC #1 to use NAT network...\n2014/09/09 15:35:43 Port forwarding [ssh] tcp://127.0.0.1:2022 --> :22\n2014/09/09 15:35:43 Port forwarding [docker] tcp://127.0.0.1:2375 --> :2375\n2014/09/09 15:35:43 Setting NIC #2 to use host-only network \"vboxnet1\"...\n2014/09/09 15:35:43 Setting VM storage...\n2014/09/09 15:35:52 Done. Type `boot2docker up` to start the VM.\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker up\n2014/09/09 15:35:58 Waiting for VM to be started...\n............\n2014/09/09 15:36:34 Started.\n2014/09/09 15:36:34 To connect the Docker client to the Docker daemon, please set:\n2014/09/09 15:36:34     export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:36-09/09/14] $ export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:37-09/09/14] $ docker build --tag='myplayapp' .\nSending build context to Docker daemon 4.096 kB\nSending build context to Docker daemon\nStep 0 : FROM        ubuntu:14.04\nPulling repository ubuntu\n826544226fdc: Download complete\n511136ea3c5a: Download complete\nb3553b91f79f: Download complete\nca63a3899a99: Download complete\nff01d67c9471: Download complete\n7428bd008763: Download complete\nc7c7108e0ad8: Download complete\n...<中略>\n ---> 024e10e08e02\nRemoving intermediate container ad2584cc710d\nStep 7 : ADD         app /root/app\n2014/09/09 15:44:28 app: no such file or directory\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:44-09/09/14] $\n```\n\n\nPlay のプロジェクト内で `docker build` をする気配だったので、ちょっとやり直し。\n\n```shell\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ ls\n./\t\t../\t\tDockerfile\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ play new fakeit\n       _\n _ __ | | __ _ _  _\n| '_ \\| |/ _' | || |\n|  __/|_|\\____|\\__ /\n|_|            |__/\n\nplay 2.2.3 built with Scala 2.10.3 (running Java 1.6.0_65), http://www.playframework.com\n\nThe new application will be created in /Users/yasui/Documents/develop/docker-play/fakeit\n\nWhat is the application name? [fakeit]\n>\n\nWhich template do you want to use for this new application?\n\n  1             - Create a simple Scala application\n  2             - Create a simple Java application\n\n> 1\nOK, application fakeit is created.\n\nHave fun!\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ mv Dockerfile fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ cd fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ ls\n./\t\t../\t\t.gitignore\tDockerfile\tREADME\t\tapp/\t\tbuild.sbt\tconf/\t\tproject/\tpublic/\t\ttest/\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ docker build --tag='myplayapp' .\n<中略>\nRemoving intermediate container 5b91b72a03f8\nStep 18 : EXPOSE      9000\n ---> Running in ce520b393fe9\n ---> 3c85624c2101\nRemoving intermediate container ce520b393fe9\nSuccessfully built 3c85624c2101\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:54-09/09/14] $\n\n```\n\n\nビルドできたので、起動させる\n\n```shell\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][16:04-09/09/14] $ docker run -i -t -p 9000:9000 myplayapp\nPlay server process ID is 9\n[info] play - Application started (Prod)\n[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n```\n\nまぁ、こんな感じ。\n\nファイル更新するたびにdockerを再起動する必要があるとか、まだここら辺の対処がわかんないけど、こんな感じで動く。\n\n",
        "body": "<p>DockerでPlayFrameworkが動くと聞いて試して見たメモ</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Dockerfile\n      </h2><p><a href=\"https://registry.hub.docker.com/u/adamalex/play-docker-ci/\" title=\"https://registry.hub.docker.com/u/adamalex/play-docker-ci/\" target=\"_blank\">https://registry.hub.docker.com/u/adamalex/play-docker-ci/</a></p>\n<p>これを利用</p>\n<p>最終的には Typesafe Activator が動くっぽい。</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker init\n2014/09/09 15:35:42 Creating VM boot2docker-vm...\n2014/09/09 15:35:42 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)\n2014/09/09 15:35:42 Setting NIC #1 to use NAT network...\n2014/09/09 15:35:43 Port forwarding [ssh] tcp://127.0.0.1:2022 --&gt; :22\n2014/09/09 15:35:43 Port forwarding [docker] tcp://127.0.0.1:2375 --&gt; :2375\n2014/09/09 15:35:43 Setting NIC #2 to use host-only network &quot;vboxnet1&quot;...\n2014/09/09 15:35:43 Setting VM storage...\n2014/09/09 15:35:52 Done. Type `boot2docker up` to start the VM.\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:35-09/09/14] $ boot2docker up\n2014/09/09 15:35:58 Waiting for VM to be started...\n............\n2014/09/09 15:36:34 Started.\n2014/09/09 15:36:34 To connect the Docker client to the Docker daemon, please set:\n2014/09/09 15:36:34     export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:36-09/09/14] $ export DOCKER_HOST=tcp://192.168.59.103:2375\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:37-09/09/14] $ docker build --tag=&#39;myplayapp&#39; .\nSending build context to Docker daemon 4.096 kB\nSending build context to Docker daemon\nStep 0 : FROM        ubuntu:14.04\nPulling repository ubuntu\n826544226fdc: Download complete\n511136ea3c5a: Download complete\nb3553b91f79f: Download complete\nca63a3899a99: Download complete\nff01d67c9471: Download complete\n7428bd008763: Download complete\nc7c7108e0ad8: Download complete\n...&lt;中略&gt;\n ---&gt; 024e10e08e02\nRemoving intermediate container ad2584cc710d\nStep 7 : ADD         app /root/app\n2014/09/09 15:44:28 app: no such file or directory\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:44-09/09/14] $\n</pre></div></div><p>Play のプロジェクト内で <code>docker build</code> をする気配だったので、ちょっとやり直し。</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ ls\n./      ../     Dockerfile\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:45-09/09/14] $ play new fakeit\n       _\n _ __ | | __ _ _  _\n| &#39;_ \\| |/ _&#39; | || |\n|  __/|_|\\____|\\__ /\n|_|            |__/\n\nplay 2.2.3 built with Scala 2.10.3 (running Java 1.6.0_65), http://www.playframework.com\n\nThe new application will be created in /Users/yasui/Documents/develop/docker-play/fakeit\n\nWhat is the application name? [fakeit]\n&gt;\n\nWhich template do you want to use for this new application?\n\n  1             - Create a simple Scala application\n  2             - Create a simple Java application\n\n&gt; 1\nOK, application fakeit is created.\n\nHave fun!\n\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ mv Dockerfile fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play][15:46-09/09/14] $ cd fakeit\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ ls\n./      ../     .gitignore  Dockerfile  README      app/        build.sbt   conf/       project/    public/     test/\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:46-09/09/14] $ docker build --tag=&#39;myplayapp&#39; .\n&lt;中略&gt;\nRemoving intermediate container 5b91b72a03f8\nStep 18 : EXPOSE      9000\n ---&gt; Running in ce520b393fe9\n ---&gt; 3c85624c2101\nRemoving intermediate container ce520b393fe9\nSuccessfully built 3c85624c2101\n[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][15:54-09/09/14] $\n</pre></div></div><p>ビルドできたので、起動させる</p>\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre>[yasui@Yasui-MBA2: ~/Documents/develop/docker-play/fakeit][16:04-09/09/14] $ docker run -i -t -p 9000:9000 myplayapp\nPlay server process ID is 9\n[info] play - Application started (Prod)\n[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n</pre></div></div><p>まぁ、こんな感じ。</p>\n<p>ファイル更新するたびにdockerを再起動する必要があるとか、まだここら辺の対処がわかんないけど、こんな感じで動く。</p>\n",
        "stock_users": [
            "Reds",
            "uni"
        ]
    },
    {
        "id": 129056,
        "uuid": "35a19fe11bdaf4f2431f",
        "user": {
            "id": 8437,
            "url_name": "ozw_sei",
            "profile_image_url": "https://pbs.twimg.com/profile_images/416733123821314048/-PInIT51_normal.jpeg"
        },
        "title": "Odersky教授",
        "created_at": "2014-09-08 20:41:48 +0900",
        "updated_at": "2014-09-09 09:31:39 +0900",
        "created_at_in_words": "15日",
        "updated_at_in_words": "15日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/ozw_sei/items/35a19fe11bdaf4f2431f",
        "created_at_as_seconds": 1410176508,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "- Functional Programming Principles in Scala\n\t- https://www.coursera.org/course/progfun\n\n- scala-evolutions\n\t- http://www.slideshare.net/Odersky/scala-evolution\n\n- scala-simple-parts\n\t- https://www.youtube.com/watch?v=ecekSCX3B4Q\n\n- scala-with-style\n\t- https://www.youtube.com/watch?v=kkTFx3-duc8\n\n- working hard to keep it simple\n\t- https://www.youtube.com/watch?v=3jg1AheF4n0\n\n- Simple is not easy\n\t- http://eed3si9n.com/ja/simplicity-matters\nPlayの監視ツール\nhttp://kamon.io/\n\nJVMモニタリングは必須\n- full-gcでアラート\nhttp://yuuki.hatenablog.com/entry/2014/04/08/074507\n\nPlayモニタリング\n\n以前はTomCat\n\nAkkaのチューニング\n- デフォルトだとThreadが24個しか立たない\n\nPlay akka configuration\n- understand play thread pools\n\n\n\n- sbt\n\t- とりあえず読むべき\n\t\t- http://www.scala-sbt.org/0.13/tutorial/ja/index.html\n\n\n\n\n\nhttps://github.com/cb372/scalamatsuri-my-first-macro\n\n\n\n\n\nSpark-sqlのトレーニングビデオ\nhttp://spark-summit.org/2014/training\n\nGraphはDatabricsのサービス\n\n\n\n\n\n\n\n",
        "body": "<ul>\n<li><p>Functional Programming Principles in Scala</p>\n\n<ul>\n<li><a href=\"https://www.coursera.org/course/progfun\" title=\"https://www.coursera.org/course/progfun\" target=\"_blank\">https://www.coursera.org/course/progfun</a></li>\n</ul></li>\n<li><p>scala-evolutions</p>\n\n<ul>\n<li><a href=\"http://www.slideshare.net/Odersky/scala-evolution\" title=\"http://www.slideshare.net/Odersky/scala-evolution\" target=\"_blank\">http://www.slideshare.net/Odersky/scala-evolution</a></li>\n</ul></li>\n<li><p>scala-simple-parts</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ecekSCX3B4Q\" title=\"https://www.youtube.com/watch?v=ecekSCX3B4Q\" target=\"_blank\">https://www.youtube.com/watch?v=ecekSCX3B4Q</a></li>\n</ul></li>\n<li><p>scala-with-style</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=kkTFx3-duc8\" title=\"https://www.youtube.com/watch?v=kkTFx3-duc8\" target=\"_blank\">https://www.youtube.com/watch?v=kkTFx3-duc8</a></li>\n</ul></li>\n<li><p>working hard to keep it simple</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=3jg1AheF4n0\" title=\"https://www.youtube.com/watch?v=3jg1AheF4n0\" target=\"_blank\">https://www.youtube.com/watch?v=3jg1AheF4n0</a></li>\n</ul></li>\n<li><p>Simple is not easy</p>\n\n<ul>\n<li><a href=\"http://eed3si9n.com/ja/simplicity-matters\" title=\"http://eed3si9n.com/ja/simplicity-matters\" target=\"_blank\">http://eed3si9n.com/ja/simplicity-matters</a>\nPlayの監視ツール\n<a href=\"http://kamon.io/\" title=\"http://kamon.io/\" target=\"_blank\">http://kamon.io/</a></li>\n</ul></li>\n</ul>\n<p>JVMモニタリングは必須<br>\n- full-gcでアラート<br>\n<a href=\"http://yuuki.hatenablog.com/entry/2014/04/08/074507\" title=\"http://yuuki.hatenablog.com/entry/2014/04/08/074507\" target=\"_blank\">http://yuuki.hatenablog.com/entry/2014/04/08/074507</a></p>\n<p>Playモニタリング</p>\n<p>以前はTomCat</p>\n<p>Akkaのチューニング<br>\n- デフォルトだとThreadが24個しか立たない</p>\n<p>Play akka configuration<br>\n- understand play thread pools</p>\n\n<ul>\n<li>sbt\n\n<ul>\n<li>とりあえず読むべき\n\n<ul>\n<li><a href=\"http://www.scala-sbt.org/0.13/tutorial/ja/index.html\" title=\"http://www.scala-sbt.org/0.13/tutorial/ja/index.html\" target=\"_blank\">http://www.scala-sbt.org/0.13/tutorial/ja/index.html</a></li>\n</ul></li>\n</ul></li>\n</ul>\n<p><a href=\"https://github.com/cb372/scalamatsuri-my-first-macro\" title=\"https://github.com/cb372/scalamatsuri-my-first-macro\" target=\"_blank\">https://github.com/cb372/scalamatsuri-my-first-macro</a></p>\n<p>Spark-sqlのトレーニングビデオ<br>\n<a href=\"http://spark-summit.org/2014/training\" title=\"http://spark-summit.org/2014/training\" target=\"_blank\">http://spark-summit.org/2014/training</a></p>\n<p>GraphはDatabricsのサービス</p>\n",
        "stock_users": [
            "kumazo@github",
            "nanjakkun",
            "poad1010",
            "Reds",
            "kasumani",
            "sbjib"
        ]
    },
    {
        "id": 129052,
        "uuid": "41c1ba6aedb4e1908966",
        "user": {
            "id": 8437,
            "url_name": "ozw_sei",
            "profile_image_url": "https://pbs.twimg.com/profile_images/416733123821314048/-PInIT51_normal.jpeg"
        },
        "title": "Scala",
        "created_at": "2014-09-08 20:40:35 +0900",
        "updated_at": "2014-09-08 20:40:35 +0900",
        "created_at_in_words": "15日",
        "updated_at_in_words": "15日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 9,
        "comment_count": 0,
        "url": "http://qiita.com/ozw_sei/items/41c1ba6aedb4e1908966",
        "created_at_as_seconds": 1410176435,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "http://eed3si9n.com/ja/simplicity-matters\n##Scalaの議論場になっているところ\n- scala is too acedemic\n- scala has sold out to indeusrry\n- scala types are too hard\n- scala types are not sict enough\n- scala is everything and the kitchen sink\n- Scalaは何でも入れすぎ\n\n##Scalaのコンセプト\n- Scalable\n\t- meaning Scalable\n\t\t- Growable\n\t\t\t- Growing language\n\t\t\t- https://www.youtube.com/watch?v=_ahvzDzKdB0\n\t\t- 言語設計の視点での成長できる言語\n\t\t- スケーラブル\n\t\t\t- ひとつは成長、もうひとつは小さなところでも大きなところでも使えるところ\n\t\t- 言語は抽象化に徹して、ライブラリで高度な機能を実現する。\n\t\t\t- sbt, scalaz, akka, slick, specsなど\n\t\n##Growable = Good?\n- The lisp curse\n\t- DSLは諸刃の剣である\n\t- growableはlispでもそうだが、何でも自分でやるとなると、コミュニティの分断化が起きる\n\t- 所謂「Lispの呪い」バベルの塔\n\n##Growth\n- 大きな問題にも使えて小さなものにも活用可能だ\n\n- 関数型？オブジェクト指向？\n\t- お互いで嫌い合っているところがある\n\n- お互いを組み合わせた新しい名前が必要「モジューラー」はどうだろうか。\n\n- 単純な部品を組み合わせる\n\n- should we back to modula-2?\n\t- modular programing\n\n- 似た構造だが、ハードウェアに近すぎた\n- ジョンフォンノイマン（Fortranの作者）はチューリング翔を受賞したが、受賞時にはもうオワコンを言っていた\n- メモリを一つ一つ読み込まなければならない問題をvon-neumann bottleneckと呼んだ\n\nSimple != Easy\n\n\n\n3. グループ\n- なんでもグループ化したり、入れ子にでくう\n- 性的スコープが基本\n古典的な手続き型言語だとループになんでも書く傾向にあるがScalaだと関数を高級関数に渡す\n名前をつけるのも大事\n一行ごとに意味のある名前を定義する（テストに出る）\n同じロジックに一行ごとに意味のある名前をつけてみた\n\n4. 再帰\n\t- あとで読む人のことを考えるということ\n\t- 極力コレクションやflatMapでやる\n\t- flatMapで煩雑になる時は再帰を考える\n\t- パターンマッチと再帰は相性が良い\n\t- boxingならばパフォーマンスも関係ない\n\t- 高級感数にはペナルティがある.\n\t\t- だからカリカリ早くしたいときは再帰が良い\n\t\t- 再帰は任意の回数繰り返せるし、ほぼすべての場合loopより便利\n\n5. 抽象化\n\t- だがしかし、ボイラープレート多め\n\t- 関数は抽象的な式\n\t- 値でも名前があってもなくても良い\n\t\n6. 集約\n\t- pythonは名前を付ける必要があるけど、それがいい事のほうが良い\n\t- コレクションはデータの集約\n\t- Sparkのように巨大なコレクションでも同じ考え方を使ってる\n\t- TransformはCRUDのかわり\n\t- 基本的に色々再利用しているので同じ演算には同じ名前を使用しているはず\n\t- Scalaコレクションユーザの多くはうまく言っていると言っているが・・・　\n\t- 型が嘘であることもある\n\n7. 可変性\n- 可変であることはモジューラに反してはいないか？\n- それでも使うべき時がある\n\t- caching : lazy val memoized functions, intermed name, LRLCache \n\t- persisting: once a value is stable, store it in an object\n\t- copy on write\n\t- fresh value\n\t- typer state\n\n##関数型の特徴にキャッシュがある\n- 所謂メモ化\n- ここでは可変コレクションが便利\n\t- lazy valはあるけれど使い道はかなり限られる\n- persisting 永続化\n\t- Mapになんでも入れすぎるとメモリリークする\n\t\n\n##なぜモナドを使わないのか?\n- モナドにも制限がある\n- 継承関係を検査kするisSubTypeの具体例\n\n```example.scala\nif(isSubType(t1, t2) && usSybType(t2, t3)) result\n\n// Monado\nfor{\n\tc1 -> isSubType(t1, t2) \n\tc2 -> isSubType(t2, t3)\n\tif c1 && c2\n} yield result\n```\n\n- ifのかわりにfor式で結果を引き出す必要がある。\n- どっちのほうがいい？場合によよるけど。\n\t- 関数型原理派に反するけど私は上のifでいいと思ってる\n\n##型付けの話\n- Clojure\n\t- syntax\n- Scala\n\t- arguments\n- Haskell\n\t- effects\n- Idris\n\t- values\n- Conq\n\t- correctness\n",
        "body": "<p><a href=\"http://eed3si9n.com/ja/simplicity-matters\" title=\"http://eed3si9n.com/ja/simplicity-matters\" target=\"_blank\">http://eed3si9n.com/ja/simplicity-matters</a></p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Scalaの議論場になっているところ\n      </h2>\n<ul>\n<li>scala is too acedemic</li>\n<li>scala has sold out to indeusrry</li>\n<li>scala types are too hard</li>\n<li>scala types are not sict enough</li>\n<li>scala is everything and the kitchen sink</li>\n<li>Scalaは何でも入れすぎ</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Scalaのコンセプト\n      </h2>\n<ul>\n<li>Scalable\n\n<ul>\n<li>meaning Scalable\n\n<ul>\n<li>Growable\n\n<ul>\n<li>Growing language</li>\n<li><a href=\"https://www.youtube.com/watch?v=_ahvzDzKdB0\" title=\"https://www.youtube.com/watch?v=_ahvzDzKdB0\" target=\"_blank\">https://www.youtube.com/watch?v=_ahvzDzKdB0</a></li>\n</ul></li>\n<li>言語設計の視点での成長できる言語</li>\n<li>スケーラブル\n\n<ul>\n<li>ひとつは成長、もうひとつは小さなところでも大きなところでも使えるところ</li>\n</ul></li>\n<li>言語は抽象化に徹して、ライブラリで高度な機能を実現する。\n\n<ul>\n<li>sbt, scalaz, akka, slick, specsなど</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Growable = Good?\n      </h2>\n<ul>\n<li>The lisp curse\n\n<ul>\n<li>DSLは諸刃の剣である</li>\n<li>growableはlispでもそうだが、何でも自分でやるとなると、コミュニティの分断化が起きる</li>\n<li>所謂「Lispの呪い」バベルの塔</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>Growth\n      </h2>\n<ul>\n<li><p>大きな問題にも使えて小さなものにも活用可能だ</p></li>\n<li><p>関数型？オブジェクト指向？</p>\n\n<ul>\n<li>お互いで嫌い合っているところがある</li>\n</ul></li>\n<li><p>お互いを組み合わせた新しい名前が必要「モジューラー」はどうだろうか。</p></li>\n<li><p>単純な部品を組み合わせる</p></li>\n<li><p>should we back to modula-2?</p>\n\n<ul>\n<li>modular programing</li>\n</ul></li>\n<li><p>似た構造だが、ハードウェアに近すぎた</p></li>\n<li><p>ジョンフォンノイマン（Fortranの作者）はチューリング翔を受賞したが、受賞時にはもうオワコンを言っていた</p></li>\n<li><p>メモリを一つ一つ読み込まなければならない問題をvon-neumann bottleneckと呼んだ</p></li>\n</ul>\n<p>Simple != Easy</p>\n\n<ol>\n<li>グループ</li>\n<li>なんでもグループ化したり、入れ子にでくう</li>\n<li><p>性的スコープが基本<br>\n古典的な手続き型言語だとループになんでも書く傾向にあるがScalaだと関数を高級関数に渡す<br>\n名前をつけるのも大事<br>\n一行ごとに意味のある名前を定義する（テストに出る）<br>\n同じロジックに一行ごとに意味のある名前をつけてみた</p></li>\n<li><p>再帰</p>\n\n<ul>\n<li>あとで読む人のことを考えるということ</li>\n<li>極力コレクションやflatMapでやる</li>\n<li>flatMapで煩雑になる時は再帰を考える</li>\n<li>パターンマッチと再帰は相性が良い</li>\n<li>boxingならばパフォーマンスも関係ない</li>\n<li>高級感数にはペナルティがある.\n\n<ul>\n<li>だからカリカリ早くしたいときは再帰が良い</li>\n<li>再帰は任意の回数繰り返せるし、ほぼすべての場合loopより便利</li>\n</ul></li>\n</ul></li>\n<li><p>抽象化</p>\n\n<ul>\n<li>だがしかし、ボイラープレート多め</li>\n<li>関数は抽象的な式</li>\n<li>値でも名前があってもなくても良い</li>\n</ul></li>\n<li><p>集約</p>\n\n<ul>\n<li>pythonは名前を付ける必要があるけど、それがいい事のほうが良い</li>\n<li>コレクションはデータの集約</li>\n<li>Sparkのように巨大なコレクションでも同じ考え方を使ってる</li>\n<li>TransformはCRUDのかわり</li>\n<li>基本的に色々再利用しているので同じ演算には同じ名前を使用しているはず</li>\n<li>Scalaコレクションユーザの多くはうまく言っていると言っているが・・・　</li>\n<li>型が嘘であることもある</li>\n</ul></li>\n<li><p>可変性</p></li>\n<li><p>可変であることはモジューラに反してはいないか？</p></li>\n<li><p>それでも使うべき時がある</p>\n\n<ul>\n<li>caching : lazy val memoized functions, intermed name, LRLCache </li>\n<li>persisting: once a value is stable, store it in an object</li>\n<li>copy on write</li>\n<li>fresh value</li>\n<li>typer state</li>\n</ul></li>\n</ol>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>関数型の特徴にキャッシュがある\n      </h2>\n<ul>\n<li>所謂メモ化</li>\n<li>ここでは可変コレクションが便利\n\n<ul>\n<li>lazy valはあるけれど使い道はかなり限られる</li>\n</ul></li>\n<li>persisting 永続化\n\n<ul>\n<li>Mapになんでも入れすぎるとメモリリークする</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>なぜモナドを使わないのか?\n      </h2>\n<ul>\n<li>モナドにも制限がある</li>\n<li>継承関係を検査kするisSubTypeの具体例</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">example.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isSubType</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">usSybType</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">t3</span><span class=\"o\">))</span> <span class=\"n\">result</span>\n\n<span class=\"c1\">// Monado</span>\n<span class=\"k\">for</span><span class=\"o\">{</span>\n    <span class=\"n\">c1</span> <span class=\"o\">-&gt;</span> <span class=\"n\">isSubType</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">)</span> \n    <span class=\"n\">c2</span> <span class=\"o\">-&gt;</span> <span class=\"n\">isSubType</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">c1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c2</span>\n<span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"n\">result</span>\n</pre></div></div>\n<ul>\n<li>ifのかわりにfor式で結果を引き出す必要がある。</li>\n<li>どっちのほうがいい？場合によよるけど。\n\n<ul>\n<li>関数型原理派に反するけど私は上のifでいいと思ってる</li>\n</ul></li>\n</ul>\n<h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>型付けの話\n      </h2>\n<ul>\n<li>Clojure\n\n<ul>\n<li>syntax</li>\n</ul></li>\n<li>Scala\n\n<ul>\n<li>arguments</li>\n</ul></li>\n<li>Haskell\n\n<ul>\n<li>effects</li>\n</ul></li>\n<li>Idris\n\n<ul>\n<li>values</li>\n</ul></li>\n<li>Conq\n\n<ul>\n<li>correctness</li>\n</ul></li>\n</ul>\n",
        "stock_users": [
            "takehiro_t59",
            "kumazo@github",
            "tos-miyake",
            "Hugo62044083",
            "poad1010",
            "Reds",
            "kasumani",
            "sbjib",
            "KatsuoBushiFPGA"
        ]
    },
    {
        "id": 128446,
        "uuid": "1c28f0b21dbd4d06262b",
        "user": {
            "id": 47014,
            "url_name": "rubyu",
            "profile_image_url": "https://pbs.twimg.com/profile_images/585391487/qBqPu0mK.20061024094725_normal.jpg"
        },
        "title": "sys.processで複数のProcessBuilderを接続した場合にブロッキングが発生する問題（2.12.0-M1で解決予定）",
        "created_at": "2014-09-08 08:09:57 +0900",
        "updated_at": "2014-09-09 12:43:07 +0900",
        "created_at_in_words": "16日",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/rubyu/items/1c28f0b21dbd4d06262b",
        "created_at_as_seconds": 1410131397,
        "tweet": true,
        "gist_url": "https://gist.github.com/9b1a82bfe0ddcc2df6e5",
        "private": false,
        "raw_body": "外部のコマンドを連続で叩く用途に`sys.process`を使っていて気づいたのですが、ProcessBuilderを繋げて使用する場合に、例えば以下のような状況で、内部でブロックしてしまって応答がなくなることがあります。（[[SI-8768] scala.sys.process.PipedProcesses.runAndExitValue() may block and never return value - Scala](https://issues.scala-lang.org/browse/SI-8768)）\n\n```scala\nimport sys.process._\n\ndef input = new ByteArrayInputStream(\"input\".getBytes)\n// wcコマンドにinputという文字列を標準入力から渡す x 100回\nfor (i <- 0 until 100)\n  \"wc\" #< input !!\n```\n\nソースを調べると、`ProcessImpl.scala`の`PipedProcesses`中で、`SyncVar`を介した値のやり取りで、タイミングによってブロッキングが発生する感じです。（以下のコード中で、`first`と`second`が正常に接続されず、かつ`second`が標準入力のデータを前提としている場合にブロックする）\n\n```scala\n  private[process] class PipedProcesses(a: ProcessBuilder, b: ProcessBuilder, defaultIO: ProcessIO, toError: Boolean) extends CompoundProcess {\n    protected[this] override def runAndExitValue() = {\n      val currentSource = new SyncVar[Option[InputStream]]\n      val pipeOut       = new PipedOutputStream\n      val source        = new PipeSource(currentSource, pipeOut, a.toString)\n      source.start()\n\n      val pipeIn      = new PipedInputStream(pipeOut)\n      val currentSink = new SyncVar[Option[OutputStream]]\n      val sink        = new PipeSink(pipeIn, currentSink, b.toString)\n      sink.start()\n\n      def handleOutOrError(fromOutput: InputStream) = currentSource put Some(fromOutput)\n\n      val firstIO =\n        if (toError)\n          defaultIO.withError(handleOutOrError)\n        else\n          defaultIO.withOutput(handleOutOrError)\n      // この処理より\n      val secondIO = defaultIO.withInput(toInput => currentSink put Some(toInput))\n      val second = b.run(secondIO)\n      val first = a.run(firstIO)\n      try {\n        runInterruptible {\n          val exit1 = first.exitValue()\n          currentSource put None\n          // こっちのが早いタイミングで実行されると、プロセスが正常に接続されない\n          currentSink put None\n          val exit2 = second.exitValue()\n          // Since file redirection (e.g. #>) is implemented as a piped process,\n          // we ignore its exit value so cmd #> file doesn't always return 0.\n          if (b.hasExitValue) exit2 else exit1\n        } {\n          first.destroy()\n          second.destroy()\n        }\n      }\n      finally {\n        BasicIO close pipeIn\n        BasicIO close pipeOut\n      }\n    }\n  }\n```\n\nまた、このクラスではリソースリーク（[[SI-7350] scala.sys.process.ProcessImpl.PipedProcess.destroy() does not clean up pipe threads - Scala](https://issues.scala-lang.org/browse/SI-7350)）なども発生することがあります。\n\nちょっとアレなので使用を避けるべきかちょっと考えたのですが、結局修正して使うことにしました。送ったパッチは[マージされた](https://github.com/scala/scala/pull/3920)ので、Scala 2.12.0-M1で恐らく修正が反映されるはずです。僕ぐらいのショボい英語力でもpull requestを送ってやりとりするのに問題ない（ほんとか？）ことがわかったのは収穫でした。\n\nそれほどレアなユースケースではないと思うんですが、「このDSLカッケーっしょー？」って`sys.process`の記事を見かけるわりに、誰も気がついていないということはもしかして、みんな実際には`sys.process`を使ってない…？\n",
        "body": "<p>外部のコマンドを連続で叩く用途に<code>sys.process</code>を使っていて気づいたのですが、ProcessBuilderを繋げて使用する場合に、例えば以下のような状況で、内部でブロックしてしまって応答がなくなることがあります。（<a href=\"https://issues.scala-lang.org/browse/SI-8768\" title=\"\" target=\"_blank\">[SI-8768] scala.sys.process.PipedProcesses.runAndExitValue() may block and never return value - Scala</a>）</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">sys.process._</span>\n\n<span class=\"k\">def</span> <span class=\"n\">input</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ByteArrayInputStream</span><span class=\"o\">(</span><span class=\"s\">&quot;input&quot;</span><span class=\"o\">.</span><span class=\"n\">getBytes</span><span class=\"o\">)</span>\n<span class=\"c1\">// wcコマンドにinputという文字列を標準入力から渡す x 100回</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"k\">&lt;-</span> <span class=\"mi\">0</span> <span class=\"n\">until</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n  <span class=\"s\">&quot;wc&quot;</span> <span class=\"o\">#&lt;</span> <span class=\"n\">input</span> <span class=\"o\">!!</span>\n</pre></div></div><p>ソースを調べると、<code>ProcessImpl.scala</code>の<code>PipedProcesses</code>中で、<code>SyncVar</code>を介した値のやり取りで、タイミングによってブロッキングが発生する感じです。（以下のコード中で、<code>first</code>と<code>second</code>が正常に接続されず、かつ<code>second</code>が標準入力のデータを前提としている場合にブロックする）</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">private</span><span class=\"o\">[</span><span class=\"kt\">process</span><span class=\"o\">]</span> <span class=\"k\">class</span> <span class=\"nc\">PipedProcesses</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">ProcessBuilder</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">ProcessBuilder</span><span class=\"o\">,</span> <span class=\"n\">defaultIO</span><span class=\"k\">:</span> <span class=\"kt\">ProcessIO</span><span class=\"o\">,</span> <span class=\"n\">toError</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">CompoundProcess</span> <span class=\"o\">{</span>\n    <span class=\"k\">protected</span><span class=\"o\">[</span><span class=\"kt\">this</span><span class=\"o\">]</span> <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">runAndExitValue</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">currentSource</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SyncVar</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">InputStream</span><span class=\"o\">]]</span>\n      <span class=\"k\">val</span> <span class=\"n\">pipeOut</span>       <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipedOutputStream</span>\n      <span class=\"k\">val</span> <span class=\"n\">source</span>        <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipeSource</span><span class=\"o\">(</span><span class=\"n\">currentSource</span><span class=\"o\">,</span> <span class=\"n\">pipeOut</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n      <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"o\">()</span>\n\n      <span class=\"k\">val</span> <span class=\"n\">pipeIn</span>      <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipedInputStream</span><span class=\"o\">(</span><span class=\"n\">pipeOut</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">currentSink</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SyncVar</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">OutputStream</span><span class=\"o\">]]</span>\n      <span class=\"k\">val</span> <span class=\"n\">sink</span>        <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PipeSink</span><span class=\"o\">(</span><span class=\"n\">pipeIn</span><span class=\"o\">,</span> <span class=\"n\">currentSink</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n      <span class=\"n\">sink</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"o\">()</span>\n\n      <span class=\"k\">def</span> <span class=\"n\">handleOutOrError</span><span class=\"o\">(</span><span class=\"n\">fromOutput</span><span class=\"k\">:</span> <span class=\"kt\">InputStream</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">currentSource</span> <span class=\"n\">put</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">fromOutput</span><span class=\"o\">)</span>\n\n      <span class=\"k\">val</span> <span class=\"n\">firstIO</span> <span class=\"k\">=</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toError</span><span class=\"o\">)</span>\n          <span class=\"n\">defaultIO</span><span class=\"o\">.</span><span class=\"n\">withError</span><span class=\"o\">(</span><span class=\"n\">handleOutOrError</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">defaultIO</span><span class=\"o\">.</span><span class=\"n\">withOutput</span><span class=\"o\">(</span><span class=\"n\">handleOutOrError</span><span class=\"o\">)</span>\n      <span class=\"c1\">// この処理より</span>\n      <span class=\"k\">val</span> <span class=\"n\">secondIO</span> <span class=\"k\">=</span> <span class=\"n\">defaultIO</span><span class=\"o\">.</span><span class=\"n\">withInput</span><span class=\"o\">(</span><span class=\"n\">toInput</span> <span class=\"k\">=&gt;</span> <span class=\"n\">currentSink</span> <span class=\"n\">put</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">toInput</span><span class=\"o\">))</span>\n      <span class=\"k\">val</span> <span class=\"n\">second</span> <span class=\"k\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">secondIO</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">first</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">firstIO</span><span class=\"o\">)</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">runInterruptible</span> <span class=\"o\">{</span>\n          <span class=\"k\">val</span> <span class=\"n\">exit1</span> <span class=\"k\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">exitValue</span><span class=\"o\">()</span>\n          <span class=\"n\">currentSource</span> <span class=\"n\">put</span> <span class=\"nc\">None</span>\n          <span class=\"c1\">// こっちのが早いタイミングで実行されると、プロセスが正常に接続されない</span>\n          <span class=\"n\">currentSink</span> <span class=\"n\">put</span> <span class=\"nc\">None</span>\n          <span class=\"k\">val</span> <span class=\"n\">exit2</span> <span class=\"k\">=</span> <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"n\">exitValue</span><span class=\"o\">()</span>\n          <span class=\"c1\">// Since file redirection (e.g. #&gt;) is implemented as a piped process,</span>\n          <span class=\"c1\">// we ignore its exit value so cmd #&gt; file doesn&#39;t always return 0.</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">hasExitValue</span><span class=\"o\">)</span> <span class=\"n\">exit2</span> <span class=\"k\">else</span> <span class=\"n\">exit1</span>\n        <span class=\"o\">}</span> <span class=\"o\">{</span>\n          <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"o\">()</span>\n          <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">finally</span> <span class=\"o\">{</span>\n        <span class=\"nc\">BasicIO</span> <span class=\"n\">close</span> <span class=\"n\">pipeIn</span>\n        <span class=\"nc\">BasicIO</span> <span class=\"n\">close</span> <span class=\"n\">pipeOut</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p>また、このクラスではリソースリーク（<a href=\"https://issues.scala-lang.org/browse/SI-7350\" title=\"\" target=\"_blank\">[SI-7350] scala.sys.process.ProcessImpl.PipedProcess.destroy() does not clean up pipe threads - Scala</a>）なども発生することがあります。</p>\n<p>ちょっとアレなので使用を避けるべきかちょっと考えたのですが、結局修正して使うことにしました。送ったパッチは<a href=\"https://github.com/scala/scala/pull/3920\" title=\"\" target=\"_blank\">マージされた</a>ので、Scala 2.12.0-M1で恐らく修正が反映されるはずです。僕ぐらいのショボい英語力でもpull requestを送ってやりとりするのに問題ない（ほんとか？）ことがわかったのは収穫でした。</p>\n<p>それほどレアなユースケースではないと思うんですが、「このDSLカッケーっしょー？」って<code>sys.process</code>の記事を見かけるわりに、誰も気がついていないということはもしかして、みんな実際には<code>sys.process</code>を使ってない…？</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 127269,
        "uuid": "32fa2433e566b2bb5557",
        "user": {
            "id": 19408,
            "url_name": "_shimada",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1407436362/avatar_normal.jpg"
        },
        "title": "play-scala 2.3.4にScalikeJDBC 2.1.1を組み合わせようとしてハマったこと。",
        "created_at": "2014-09-05 12:43:39 +0900",
        "updated_at": "2014-09-05 12:45:39 +0900",
        "created_at_in_words": "18日",
        "updated_at_in_words": "18日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": [
                    "2.3.4"
                ]
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/_shimada/items/32fa2433e566b2bb5557",
        "created_at_as_seconds": 1409888619,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 1. play.pluginsは自分で作る\n\n`activator new` したプロジェクトには `conf/play.plugins` というファイルがないので、自分で作って書き込む必要がある。\n書き込む内容は[CookBook](https://github.com/scalikejdbc/scalikejdbc-cookbook/blob/master/ja/10_play.md)に書いてある。\n\n\n## 2. Build.scalaはbuild.sbtに読み替える\n\nCookBookには Build.scala を編集しろとあるが、build.sbt しかない。そして中を見ても見慣れた\n`\"hogehoge\" %% \"hoge\" % \"x.x.x\"`\nといったライブラリを登録する記述が見当たらない。しかしよく見ると…\n\n```build.sbt\nlibraryDependencies ++= Seq(\n  jdbc,\n  anorm,\n  cache,\n  ws\n)\n```\n\nおそらくjdbc, anormなどが定義済みの変数だかになっているだけなので、その中に\n`\"org.scalikejdbc\" %% \"scalikejdbc\" % \"2.1.1\"`\nを追加すれば登録できる。\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>1. play.pluginsは自分で作る\n      </h2><p><code>activator new</code> したプロジェクトには <code>conf/play.plugins</code> というファイルがないので、自分で作って書き込む必要がある。<br>\n書き込む内容は<a href=\"https://github.com/scalikejdbc/scalikejdbc-cookbook/blob/master/ja/10_play.md\" title=\"\" target=\"_blank\">CookBook</a>に書いてある。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>2. Build.scalaはbuild.sbtに読み替える\n      </h2><p>CookBookには Build.scala を編集しろとあるが、build.sbt しかない。そして中を見ても見慣れた<br>\n<code>&quot;hogehoge&quot; %% &quot;hoge&quot; % &quot;x.x.x&quot;</code><br>\nといったライブラリを登録する記述が見当たらない。しかしよく見ると…</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"n\">jdbc</span><span class=\"o\">,</span>\n  <span class=\"n\">anorm</span><span class=\"o\">,</span>\n  <span class=\"n\">cache</span><span class=\"o\">,</span>\n  <span class=\"n\">ws</span>\n<span class=\"o\">)</span>\n</pre></div></div><p>おそらくjdbc, anormなどが定義済みの変数だかになっているだけなので、その中に<br>\n<code>&quot;org.scalikejdbc&quot; %% &quot;scalikejdbc&quot; % &quot;2.1.1&quot;</code><br>\nを追加すれば登録できる。</p>\n",
        "stock_users": [
            "kasumani",
            "nilfigo"
        ]
    },
    {
        "id": 125651,
        "uuid": "ff5cc81664a2545b85d1",
        "user": {
            "id": 13148,
            "url_name": "bells17",
            "profile_image_url": "https://avatars.githubusercontent.com/u/2158863?"
        },
        "title": "Scala + PlayFramework(主にmacで)",
        "created_at": "2014-09-04 01:47:02 +0900",
        "updated_at": "2014-09-04 01:47:02 +0900",
        "created_at_in_words": "20日",
        "updated_at_in_words": "20日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/bells17/items/ff5cc81664a2545b85d1",
        "created_at_as_seconds": 1409762822,
        "tweet": false,
        "gist_url": "https://gist.github.com/ac91f7b3d64742e4e34b",
        "private": false,
        "raw_body": "\n\n## 環境構築\n\n### Scala\n\nhttp://qiita.com/shoma2da/items/b131c53ffa958c9386f7\n\nこれでScalaが動くところまで試せる\n\n### Play Framework\n\nhttp://seratch.hatenablog.jp/entry/20120410/1334074688\nhttp://seratch.hatenablog.jp/entry/20120118/1326888522\n\nmacなら\n\n```\nbrew install play\n```\n\nしたあとにプロジェクトを作りたいディレクトリで\n\n```\nplay new [プロジェクト名]\n\nWhat is the application name? \n> [プロジェクト名]\n\n```\n\nで行ける\n\n\n### エディタ\nIntelliJ IDEA\nhttp://www.jetbrains.com/idea/\n\n有償版もあるがJava Scalaで無料で利用できるCommunity Editionがあるのでこれがおすすめ\n\nIntelliJ IDEA + Scala + Play Framwork環境構築\nhttp://d.hatena.ne.jp/absj31/20130119/1358590311\nhttp://www.playframework-ja.org/documentation/2.1.5/IDE\n\n\nここに書いてあることをやればローカルでのplayの起動+IntelliJ IDEAを使用したデバッグまでの環境構築が完了\n\n\n一応コマンドをまとめると\nIntelliJ IDEAでPlayを利用するためのJavaのパッケージ？を/path/to/project/.idea/に生成するコマンドは\n\n```\nplay\n\n[プロジェクト名] $ idea with-sources=yes\n```\n\nを行う\n\n\n\nIntelliJ IDEAのデバッグコンソールを利用できるようにするにはIntelliJ IDEAで\n>\nRun/Debug Configurations の設定ダイアログを開き、Run -> Edit Configurations をクリックします\nRemote 設定を追加し、Remote を選択します\n以下の内容を設定します。\n名前を設定する\nTransport: Socket を設定する\nDebugger mode: Attach を設定する\nHost: localhost を設定する\nPort: 9999 を設定する\nインポートしたモジュールを選択する\nApply をクリックし、ダイアログをクローズします\n\nを設定してから\n\n```\nplay debug\n\n[プロジェクト名] $ run\n```\n\nでplayを起動してからIntelliJ IDEAでブレークポイントを設定して\nhttp://localhost:9000\nを開くとブラウザでページ読み込みが完了しないで設定した部分のブレークポイントでページが止まる\n\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>環境構築\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>Scala\n      </h3><p><a href=\"http://qiita.com/shoma2da/items/b131c53ffa958c9386f7\" title=\"http://qiita.com/shoma2da/items/b131c53ffa958c9386f7\">http://qiita.com/shoma2da/items/b131c53ffa958c9386f7</a></p>\n<p>これでScalaが動くところまで試せる</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>Play Framework\n      </h3><p><a href=\"http://seratch.hatenablog.jp/entry/20120410/1334074688\" title=\"http://seratch.hatenablog.jp/entry/20120410/1334074688\" target=\"_blank\">http://seratch.hatenablog.jp/entry/20120410/1334074688</a><br>\n<a href=\"http://seratch.hatenablog.jp/entry/20120118/1326888522\" title=\"http://seratch.hatenablog.jp/entry/20120118/1326888522\" target=\"_blank\">http://seratch.hatenablog.jp/entry/20120118/1326888522</a></p>\n<p>macなら</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>brew install play\n</pre></div></div><p>したあとにプロジェクトを作りたいディレクトリで</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>play new [プロジェクト名]\n\nWhat is the application name? \n&gt; [プロジェクト名]\n</pre></div></div><p>で行ける</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>エディタ\n      </h3><p>IntelliJ IDEA<br>\n<a href=\"http://www.jetbrains.com/idea/\" title=\"http://www.jetbrains.com/idea/\" target=\"_blank\">http://www.jetbrains.com/idea/</a></p>\n<p>有償版もあるがJava Scalaで無料で利用できるCommunity Editionがあるのでこれがおすすめ</p>\n<p>IntelliJ IDEA + Scala + Play Framwork環境構築<br>\n<a href=\"http://d.hatena.ne.jp/absj31/20130119/1358590311\" title=\"http://d.hatena.ne.jp/absj31/20130119/1358590311\" target=\"_blank\">http://d.hatena.ne.jp/absj31/20130119/1358590311</a><br>\n<a href=\"http://www.playframework-ja.org/documentation/2.1.5/IDE\" title=\"http://www.playframework-ja.org/documentation/2.1.5/IDE\" target=\"_blank\">http://www.playframework-ja.org/documentation/2.1.5/IDE</a></p>\n<p>ここに書いてあることをやればローカルでのplayの起動+IntelliJ IDEAを使用したデバッグまでの環境構築が完了</p>\n<p>一応コマンドをまとめると<br>\nIntelliJ IDEAでPlayを利用するためのJavaのパッケージ？を/path/to/project/.idea/に生成するコマンドは</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>play\n\n[プロジェクト名] $ idea with-sources=yes\n</pre></div></div><p>を行う</p>\n<p>IntelliJ IDEAのデバッグコンソールを利用できるようにするにはIntelliJ IDEAで</p>\n\n<blockquote>\n<p>Run/Debug Configurations の設定ダイアログを開き、Run -&gt; Edit Configurations をクリックします<br>\nRemote 設定を追加し、Remote を選択します<br>\n以下の内容を設定します。<br>\n名前を設定する<br>\nTransport: Socket を設定する<br>\nDebugger mode: Attach を設定する<br>\nHost: localhost を設定する<br>\nPort: 9999 を設定する<br>\nインポートしたモジュールを選択する<br>\nApply をクリックし、ダイアログをクローズします</p>\n</blockquote>\n<p>を設定してから</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>play debug\n\n[プロジェクト名] $ run\n</pre></div></div><p>でplayを起動してからIntelliJ IDEAでブレークポイントを設定して<br>\n<a href=\"http://localhost:9000\" title=\"http://localhost:9000\" target=\"_blank\">http://localhost:9000</a><br>\nを開くとブラウザでページ読み込みが完了しないで設定した部分のブレークポイントでページが止まる</p>\n",
        "stock_users": [
            "kasumani",
            "nakanaide",
            "Ray701",
            "tetsuzin",
            "Reds"
        ]
    },
    {
        "id": 121842,
        "uuid": "76f9da5489a5d905eea5",
        "user": {
            "id": 8437,
            "url_name": "ozw_sei",
            "profile_image_url": "https://pbs.twimg.com/profile_images/416733123821314048/-PInIT51_normal.jpeg"
        },
        "title": "Slick2.0に適当なWeb向けラッパーをつくってみた",
        "created_at": "2014-08-31 20:54:31 +0900",
        "updated_at": "2014-08-31 23:01:23 +0900",
        "created_at_in_words": "23日",
        "updated_at_in_words": "23日",
        "tags": [
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            },
            {
                "name": "Play2",
                "url_name": "play2",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f8d7c0088c04def66debcfcc9915914dc2c11df/medium.jpg?1364840479",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/ozw_sei/items/76f9da5489a5d905eea5",
        "created_at_as_seconds": 1409486071,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n##環境\n- Scala2.11\n- Play2.3\n- Slick2.1\n\n##要件\n- エンティティ・テーブル定義でcreated, updated, del_flgなど全てのテーブルの共通のカラムをいちいち入力するのがだるい。\n- findByIdやcreate, insertをテーブルごとに定義するのだるい\n\nつまり、Slickは純粋にSQL操作をScalaのコレクションっぽく操作できるAPIとして設計されてるけど、Webアプリケーション開発でそのまま使うは使えないなぁと\n\n##コード\n```TableBase.scala\n\ntrait TableBase[T <: EntityBase]{ self: Table[T] =>\n  def id: Column[Option[Long]] = column[Option[Long]](\"id\", O.PrimaryKey, O.AutoInc)\n  def created = column[Option[Timestamp]](\"created\", O.NotNull)\n  def updated = column[Option[Timestamp]](\"updated\", O.NotNull)\n}\n\n```\n\n```DaoBase.scala\ntrait DAOBase[E <: EntityBase, T <: Table[E]{def id:Column[Option[Long]]}]{\n  protected def query : TableQuery[T]\n\n\n  def findById(id:Long)(implicit session:Session) : Option[E] = {\n    query.filter(_.id === id).firstOption\n  }\n\n  def create(entity:E)(implicit session:Session){\n    query.insert(entity)\n  }\n\n  def remove(entity:E)(implicit session:Session) {\n    remove(entity.id.get)\n  }\n\n  def remove(id:Long)(implicit session:Session) {\n    query.filter(_.id === id).delete\n  }\n\n  def update(entity:E)(implicit session:Session) {\n    query.filter(_.id === entity.id).update(entity)\n  }\n}\n```\n\n\n```EntityBase.scala\n\ntrait EntityBase {\n  val id:Option[Long]\n  val created: Timestamp = new Timestamp(System.currentTimeMillis)\n  val updated: Timestamp = new Timestamp(System.currentTimeMillis)\n}\n```\n\n##使い方\n\n```Human.scala\n\n//エンティティ定義\ncase class Human(id: Option[Long], name: String) extends EntityBase\n\n// DAO定義\nobject Humans extends DAOBase[Human, HumansTable]{\n  override def query = TableQuery[HumansTable]\n  //ここに固有のデータ抽出処理はここに書く\n}\n\n// テーブル定義\nclass HumansTable(tag: Tag) extends Table[Human](tag, \"humans\") with TableBase[Human]{\n  def name = column[String](\"name\", O.NotNull)\n  def * = (id, name) <> (Human.tupled, Human.unapply)\n}\n\n```\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>環境\n      </h2>\n<ul>\n<li>Scala2.11</li>\n<li>Play2.3</li>\n<li>Slick2.1</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>要件\n      </h2>\n<ul>\n<li>エンティティ・テーブル定義でcreated, updated, del_flgなど全てのテーブルの共通のカラムをいちいち入力するのがだるい。</li>\n<li>findByIdやcreate, insertをテーブルごとに定義するのだるい</li>\n</ul>\n<p>つまり、Slickは純粋にSQL操作をScalaのコレクションっぽく操作できるAPIとして設計されてるけど、Webアプリケーション開発でそのまま使うは使えないなぁと</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>コード\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">TableBase.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">TableBase</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">EntityBase</span><span class=\"o\">]{</span> <span class=\"n\">self</span><span class=\"k\">:</span> <span class=\"kt\">Table</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span>\n  <span class=\"k\">def</span> <span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">created</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Timestamp</span><span class=\"o\">]](</span><span class=\"s\">&quot;created&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">updated</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Timestamp</span><span class=\"o\">]](</span><span class=\"s\">&quot;updated&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">DaoBase.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">DAOBase</span><span class=\"o\">[</span><span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">EntityBase</span>, <span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Table</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]{</span><span class=\"kt\">def</span> <span class=\"kt\">id:Column</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]]}]{</span>\n  <span class=\"k\">protected</span> <span class=\"k\">def</span> <span class=\"n\">query</span> <span class=\"k\">:</span> <span class=\"kt\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n\n\n  <span class=\"k\">def</span> <span class=\"n\">findById</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span><span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">firstOption</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"k\">:</span><span class=\"kt\">E</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">){</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"k\">:</span><span class=\"kt\">E</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span><span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">delete</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"k\">:</span><span class=\"kt\">E</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">session</span><span class=\"k\">:</span><span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">===</span> <span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">).</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">entity</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">EntityBase.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">EntityBase</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">id</span><span class=\"k\">:</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">]</span>\n  <span class=\"k\">val</span> <span class=\"n\">created</span><span class=\"k\">:</span> <span class=\"kt\">Timestamp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Timestamp</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">currentTimeMillis</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">updated</span><span class=\"k\">:</span> <span class=\"kt\">Timestamp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Timestamp</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">currentTimeMillis</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>使い方\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Human.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">//エンティティ定義</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Human</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">],</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">EntityBase</span>\n\n<span class=\"c1\">// DAO定義</span>\n<span class=\"k\">object</span> <span class=\"nc\">Humans</span> <span class=\"k\">extends</span> <span class=\"nc\">DAOBase</span><span class=\"o\">[</span><span class=\"kt\">Human</span>, <span class=\"kt\">HumansTable</span><span class=\"o\">]{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">query</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">HumansTable</span><span class=\"o\">]</span>\n  <span class=\"c1\">//ここに固有のデータ抽出処理はここに書く</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// テーブル定義</span>\n<span class=\"k\">class</span> <span class=\"nc\">HumansTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Human</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;humans&quot;</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"nc\">TableBase</span><span class=\"o\">[</span><span class=\"kt\">Human</span><span class=\"o\">]{</span>\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Human</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Human</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "gutio",
            "morozumi_h",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 121502,
        "uuid": "e40f04a74840608fe62d",
        "user": {
            "id": 20698,
            "url_name": "shrkw",
            "profile_image_url": "https://secure.gravatar.com/avatar/b333ca927c03d107c01641f3716ea744?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "Scalaのパーザコンビネータでアクセスログをパースしてみる",
        "created_at": "2014-08-30 07:43:15 +0900",
        "updated_at": "2014-08-30 07:43:15 +0900",
        "created_at_in_words": "25日",
        "updated_at_in_words": "25日",
        "tags": [
            {
                "name": "Parser",
                "url_name": "parser",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/shrkw/items/e40f04a74840608fe62d",
        "created_at_as_seconds": 1409352195,
        "tweet": false,
        "gist_url": "https://gist.github.com/5e39c59cf0391783fd55",
        "private": false,
        "raw_body": "\nCloudFlareのログのパースをする必要があったので、[seratchさんのブログ](http://seratch.hatenablog.jp/entry/2013/02/09/103917)をみながら、Parser Combinatorで書いてみた。\n\nなんとなく`javap`を見てみたけど、このコードだとParserがログの行数分、インスタンスが作成されてしまうようにみえるけど、これでいいのかな。\n\nあと、ログ全体のなかの、以下のBoldで表示したカラムだけが欲しかったんだけど、\n\n> **www.cloudflare.com** **1.1.1.1** 1383426540 \"GET / HTTP/1.1\" 200 **11022** \"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0)\" \"CLEAN.HUMAN 1383426470.808 off\" **\"http://blog.cloudflare.com/\"**\n\n`~`やら`~>`やらをいい感じに1行で書く方法がわからなかったので分割して書いたけど、どう書くのが驚き最小なんだろう。\n\n\n```Scala\npackage com.example.service\n\nimport scala.io.Source\nimport scala.util.parsing.combinator.RegexParsers\n\nobject CloudFlareLogParserService {\n\n  def resolve: Unit = {\n    val accessLog =\n      \"\"\"\n        |www.cloudflare.com 1.1.1.1 1383426540 \"GET / HTTP/1.1\" 200 11022 \"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0)\" \"CLEAN.HUMAN 1383426470.808 off\" \"http://blog.cloudflare.com/\"\n        |www.cloudflare.com 1.1.1.1 1383426540 \"GET / HTTP/1.1\" 200 11022 \"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0)\" \"CLEAN.HUMAN 1383426470.808 off\" \"http://blog.cloudflare.com/\"\n      \"\"\".stripMargin\n\n    accessLog.split('\\n').foreach {\n      case line if line.trim.length != 0 => {\n        try {\n          println(CloudFlareLogParser.parseLine(line))\n        } catch {\n          case e: IllegalArgumentException => println(e)\n        }\n      }\n      case _ =>\n    }\n  }\n\n  case class CloudFlareAccessLog(host: String, ipAddress: String, size: Int, referrer: String)\n\n  object CloudFlareLogParser extends RegexParsers {\n    def lines = repsep(line, nl)\n\n    def line = host ~ ipAddress ~ p2 ~ p3 ^^ { case host ~ ipAddress ~ size ~ referrer => CloudFlareAccessLog(host, ipAddress, size.toInt, referrer)}\n\n    def nl = opt('\\r') <~ '\\n'\n\n    def p2 = logWindow ~> request ~> statusCode ~> size\n\n    def p3 = userAgent ~> cloudFlareInfo ~> referrer\n\n    def host = \"\"\"[\\w.]+\"\"\".r\n\n    def ipAddress = \"\"\"[\\d.]+\"\"\".r\n\n    def logWindow = \"\"\"\\d+\"\"\".r\n\n    def request = \"\\\"\" ~> \"[^\\\"]*\".r <~ \"\\\"\"\n\n    def statusCode = \"\"\"\\d{3}\"\"\".r\n\n    def size = \"\"\"\\d+\"\"\".r\n\n    def userAgent = \"\\\"\" ~> \"[^\\\"]*\".r <~ \"\\\"\"\n\n    def cloudFlareInfo = \"\\\"\" ~> \"[\\\\w. ]*\".r <~ \"\\\"\"\n\n    def referrer = \"\\\"\" ~> \"[^\\\"]*\".r <~ \"\\\"\"\n\n    def parseLines(input: String): List[CloudFlareAccessLog] = parseAll(lines, input).getOrElse {\n      throw new IllegalArgumentException(\"Failed to parse: \" + input)\n    }\n\n    def parseLine(input: String): CloudFlareAccessLog = parseLines(input).head\n  }\n\n}\n```\n",
        "body": "<p>CloudFlareのログのパースをする必要があったので、<a href=\"http://seratch.hatenablog.jp/entry/2013/02/09/103917\" title=\"\" target=\"_blank\">seratchさんのブログ</a>をみながら、Parser Combinatorで書いてみた。</p>\n<p>なんとなく<code>javap</code>を見てみたけど、このコードだとParserがログの行数分、インスタンスが作成されてしまうようにみえるけど、これでいいのかな。</p>\n<p>あと、ログ全体のなかの、以下のBoldで表示したカラムだけが欲しかったんだけど、</p>\n\n<blockquote>\n<p><strong><a href=\"http://www.cloudflare.com\" title=\"\" target=\"_blank\">www.cloudflare.com</a></strong> <strong>1.1.1.1</strong> 1383426540 &quot;GET / HTTP/1.1&quot; 200 <strong>11022</strong> &quot;Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0)&quot; &quot;CLEAN.HUMAN 1383426470.808 off&quot; <strong>&quot;<a href=\"http://blog.cloudflare.com/\" title=\"http://blog.cloudflare.com/\" target=\"_blank\">http://blog.cloudflare.com/</a>&quot;</strong></p>\n</blockquote>\n<p><code>~</code>やら<code>~&gt;</code>やらをいい感じに1行で書く方法がわからなかったので分割して書いたけど、どう書くのが驚き最小なんだろう。</p>\n<div class=\"code-frame\" data-lang=\"Scala\"><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">com.example.service</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">scala.io.Source</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.util.parsing.combinator.RegexParsers</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">CloudFlareLogParserService</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">resolve</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">accessLog</span> <span class=\"k\">=</span>\n      <span class=\"s\">&quot;&quot;&quot;</span>\n<span class=\"s\">        |www.cloudflare.com 1.1.1.1 1383426540 &quot;GET / HTTP/1.1&quot; 200 11022 &quot;Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0)&quot; &quot;CLEAN.HUMAN 1383426470.808 off&quot; &quot;http://blog.cloudflare.com/&quot;</span>\n<span class=\"s\">        |www.cloudflare.com 1.1.1.1 1383426540 &quot;GET / HTTP/1.1&quot; 200 11022 &quot;Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0)&quot; &quot;CLEAN.HUMAN 1383426470.808 off&quot; &quot;http://blog.cloudflare.com/&quot;</span>\n<span class=\"s\">      &quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">stripMargin</span>\n\n    <span class=\"n\">accessLog</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"sc\">&#39;\\n&#39;</span><span class=\"o\">).</span><span class=\"n\">foreach</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"n\">line</span> <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n          <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">CloudFlareLogParser</span><span class=\"o\">.</span><span class=\"n\">parseLine</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">))</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">{</span>\n          <span class=\"k\">case</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">IllegalArgumentException</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">CloudFlareAccessLog</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">ipAddress</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">size</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">referrer</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n  <span class=\"k\">object</span> <span class=\"nc\">CloudFlareLogParser</span> <span class=\"k\">extends</span> <span class=\"nc\">RegexParsers</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">lines</span> <span class=\"k\">=</span> <span class=\"n\">repsep</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"n\">nl</span><span class=\"o\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">line</span> <span class=\"k\">=</span> <span class=\"n\">host</span> <span class=\"o\">~</span> <span class=\"n\">ipAddress</span> <span class=\"o\">~</span> <span class=\"n\">p2</span> <span class=\"o\">~</span> <span class=\"n\">p3</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">host</span> <span class=\"o\">~</span> <span class=\"n\">ipAddress</span> <span class=\"o\">~</span> <span class=\"n\">size</span> <span class=\"o\">~</span> <span class=\"n\">referrer</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">CloudFlareAccessLog</span><span class=\"o\">(</span><span class=\"n\">host</span><span class=\"o\">,</span> <span class=\"n\">ipAddress</span><span class=\"o\">,</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">,</span> <span class=\"n\">referrer</span><span class=\"o\">)}</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">nl</span> <span class=\"k\">=</span> <span class=\"n\">opt</span><span class=\"o\">(</span><span class=\"sc\">&#39;\\r&#39;</span><span class=\"o\">)</span> <span class=\"o\">&lt;~</span> <span class=\"sc\">&#39;\\n&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">p2</span> <span class=\"k\">=</span> <span class=\"n\">logWindow</span> <span class=\"o\">~&gt;</span> <span class=\"n\">request</span> <span class=\"o\">~&gt;</span> <span class=\"n\">statusCode</span> <span class=\"o\">~&gt;</span> <span class=\"n\">size</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">p3</span> <span class=\"k\">=</span> <span class=\"n\">userAgent</span> <span class=\"o\">~&gt;</span> <span class=\"n\">cloudFlareInfo</span> <span class=\"o\">~&gt;</span> <span class=\"n\">referrer</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">host</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;[\\w.]+&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">ipAddress</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;[\\d.]+&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">logWindow</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;\\d+&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">request</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\&quot;&quot;</span> <span class=\"o\">~&gt;</span> <span class=\"s\">&quot;[^\\&quot;]*&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">&lt;~</span> <span class=\"s\">&quot;\\&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">statusCode</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;\\d{3}&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">size</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;\\d+&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">userAgent</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\&quot;&quot;</span> <span class=\"o\">~&gt;</span> <span class=\"s\">&quot;[^\\&quot;]*&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">&lt;~</span> <span class=\"s\">&quot;\\&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">cloudFlareInfo</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\&quot;&quot;</span> <span class=\"o\">~&gt;</span> <span class=\"s\">&quot;[\\\\w. ]*&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">&lt;~</span> <span class=\"s\">&quot;\\&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">referrer</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\&quot;&quot;</span> <span class=\"o\">~&gt;</span> <span class=\"s\">&quot;[^\\&quot;]*&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">&lt;~</span> <span class=\"s\">&quot;\\&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">parseLines</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">CloudFlareAccessLog</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">parseAll</span><span class=\"o\">(</span><span class=\"n\">lines</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">).</span><span class=\"n\">getOrElse</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">IllegalArgumentException</span><span class=\"o\">(</span><span class=\"s\">&quot;Failed to parse: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">parseLine</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">CloudFlareAccessLog</span> <span class=\"o\">=</span> <span class=\"n\">parseLines</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">).</span><span class=\"n\">head</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "KatsuoBushiFPGA",
            "morozumi_h",
            "Reds",
            "hoxo_m",
            "kasumani"
        ]
    },
    {
        "id": 119414,
        "uuid": "3d98dd7e266932feab21",
        "user": {
            "id": 20698,
            "url_name": "shrkw",
            "profile_image_url": "https://secure.gravatar.com/avatar/b333ca927c03d107c01641f3716ea744?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "MaxMindが提供しているGeoLite2をScalaから利用してみる",
        "created_at": "2014-08-28 05:43:49 +0900",
        "updated_at": "2014-08-29 00:02:54 +0900",
        "created_at_in_words": "27日",
        "updated_at_in_words": "26日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "geoip",
                "url_name": "geoip",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 0,
        "url": "http://qiita.com/shrkw/items/3d98dd7e266932feab21",
        "created_at_as_seconds": 1409172229,
        "tweet": false,
        "gist_url": "https://gist.github.com/465455224fcbfc92d8d0",
        "private": false,
        "raw_body": "\nhttp://dev.maxmind.com/geoip/geoip2/downloadable/\n\nGeoLite2のライセンスはCC BY-SA 3.0。\n\nJava向けのライブラリを使う。\nhttps://github.com/maxmind/GeoIP2-java\n\nScala向けの薄いラッパーの https://github.com/Sanoma-CDA/maxmind-geoip2-scala というのも見つけたけど、これくらいならJava APIを叩いてもいいかなと思った。\n\n```scala\nimport java.io.File\nimport java.net.InetAddress\nimport com.maxmind.geoip2.DatabaseReader.Builder\nimport com.maxmind.geoip2.exception.AddressNotFoundException\n\nobject GeoipSample {\n  def main(args: Array[String]): Unit ={\n    val database = new File(\"/tmp/GeoLite2-Country.mmdb\")\n    // This creates the DatabaseReader object, which should be reused across lookups.\n    val reader = new Builder(database).build()\n\n    val ipAddresses = Seq(\"128.101.101.101\", \"192.168.100.1\", \"183.79.135.206\", \"212.58.244.18\")\n    ipAddresses foreach { ip =>\n      try {\n        println(reader.country(InetAddress.getByName(ip)))\n      } catch {\n        case e: AddressNotFoundException => println(e)\n      }\n    }\n  }\n}\n```\n\n`AddressNotFoundException`をキャッチしないといけない。\n実行結果は以下。\n\n> Country [getContinent()=North America, getCountry()=United States, getRegisteredCountry()=United States, getRepresentedCountry()=, getTraits()=Traits [ipAddress=128.101.101.101, anonymousProxy=false, satelliteProvider=false, ]]\ncom.maxmind.geoip2.exception.AddressNotFoundException: The address 192.168.100.1 is not in the database.\nCountry [getContinent()=Asia, getCountry()=Japan, getRegisteredCountry()=Japan, getRepresentedCountry()=, getTraits()=Traits [ipAddress=183.79.135.206, anonymousProxy=false, satelliteProvider=false, ]]\nCountry [getContinent()=Europe, getCountry()=United Kingdom, getRegisteredCountry()=United Kingdom, getRepresentedCountry()=, getTraits()=Traits [ipAddress=212.58.244.18, anonymousProxy=false, satelliteProvider=false, ]]\n\nGeoLiteはLegacyになったので、GeoLite2を使おう。\n",
        "body": "<p><a href=\"http://dev.maxmind.com/geoip/geoip2/downloadable/\" title=\"http://dev.maxmind.com/geoip/geoip2/downloadable/\" target=\"_blank\">http://dev.maxmind.com/geoip/geoip2/downloadable/</a></p>\n<p>GeoLite2のライセンスはCC BY-SA 3.0。</p>\n<p>Java向けのライブラリを使う。<br>\n<a href=\"https://github.com/maxmind/GeoIP2-java\" title=\"https://github.com/maxmind/GeoIP2-java\" target=\"_blank\">https://github.com/maxmind/GeoIP2-java</a></p>\n<p>Scala向けの薄いラッパーの <a href=\"https://github.com/Sanoma-CDA/maxmind-geoip2-scala\" title=\"https://github.com/Sanoma-CDA/maxmind-geoip2-scala\" target=\"_blank\">https://github.com/Sanoma-CDA/maxmind-geoip2-scala</a> というのも見つけたけど、これくらいならJava APIを叩いてもいいかなと思った。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.io.File</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.net.InetAddress</span>\n<span class=\"k\">import</span> <span class=\"nn\">com.maxmind.geoip2.DatabaseReader.Builder</span>\n<span class=\"k\">import</span> <span class=\"nn\">com.maxmind.geoip2.exception.AddressNotFoundException</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">GeoipSample</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">={</span>\n    <span class=\"k\">val</span> <span class=\"n\">database</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"s\">&quot;/tmp/GeoLite2-Country.mmdb&quot;</span><span class=\"o\">)</span>\n    <span class=\"c1\">// This creates the DatabaseReader object, which should be reused across lookups.</span>\n    <span class=\"k\">val</span> <span class=\"n\">reader</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Builder</span><span class=\"o\">(</span><span class=\"n\">database</span><span class=\"o\">).</span><span class=\"n\">build</span><span class=\"o\">()</span>\n\n    <span class=\"k\">val</span> <span class=\"n\">ipAddresses</span> <span class=\"k\">=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span><span class=\"s\">&quot;128.101.101.101&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;192.168.100.1&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;183.79.135.206&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;212.58.244.18&quot;</span><span class=\"o\">)</span>\n    <span class=\"n\">ipAddresses</span> <span class=\"n\">foreach</span> <span class=\"o\">{</span> <span class=\"n\">ip</span> <span class=\"k\">=&gt;</span>\n      <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">country</span><span class=\"o\">(</span><span class=\"nc\">InetAddress</span><span class=\"o\">.</span><span class=\"n\">getByName</span><span class=\"o\">(</span><span class=\"n\">ip</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">AddressNotFoundException</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p><code>AddressNotFoundException</code>をキャッチしないといけない。<br>\n実行結果は以下。</p>\n\n<blockquote>\n<p>Country [getContinent()=North America, getCountry()=United States, getRegisteredCountry()=United States, getRepresentedCountry()=, getTraits()=Traits [ipAddress=128.101.101.101, anonymousProxy=false, satelliteProvider=false, ]]<br>\ncom.maxmind.geoip2.exception.AddressNotFoundException: The address 192.168.100.1 is not in the database.<br>\nCountry [getContinent()=Asia, getCountry()=Japan, getRegisteredCountry()=Japan, getRepresentedCountry()=, getTraits()=Traits [ipAddress=183.79.135.206, anonymousProxy=false, satelliteProvider=false, ]]<br>\nCountry [getContinent()=Europe, getCountry()=United Kingdom, getRegisteredCountry()=United Kingdom, getRepresentedCountry()=, getTraits()=Traits [ipAddress=212.58.244.18, anonymousProxy=false, satelliteProvider=false, ]]</p>\n</blockquote>\n<p>GeoLiteはLegacyになったので、GeoLite2を使おう。</p>\n",
        "stock_users": [
            "Reds"
        ]
    },
    {
        "id": 117951,
        "uuid": "e73876c31e19e05aa0f3",
        "user": {
            "id": 2570,
            "url_name": "hoxo_m",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1084405786/hoxo_m2_normal.png"
        },
        "title": "Selenium でファイルのダウンロード",
        "created_at": "2014-08-26 17:50:00 +0900",
        "updated_at": "2014-08-27 10:33:50 +0900",
        "created_at_in_words": "28日",
        "updated_at_in_words": "27日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Selenium",
                "url_name": "selenium",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/92e1ece1d42fcd42e69dfcd3fa980d0d6f7bd7f1/medium.jpg?1403564935",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/hoxo_m/items/e73876c31e19e05aa0f3",
        "created_at_as_seconds": 1409043000,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "自動的に指定したフォルダにファイルをダウンロードするように設定する。\n\nPhantomJS ではできそうにないので Firefox Driver で。\n\n```scala\n// プロファイルを設定してドライバを作る\nprivate def createDriver(outputDirPath: String): FirefoxDriver = {\n  val profile = new FirefoxProfile()\n  profile.setPreference(\"browser.download.folderList\", 2)\n  profile.setPreference(\"browser.download.dir\", outputDirPath)\n  profile.setPreference(\"browser.download.useDownloadDir\", true)\n  profile.setPreference(\"browser.helperApps.neverAsk.saveToDisk\", \"application/octet-stream\")\n  new FirefoxDriver(profile)\n}\n\n// ダウンロード待ち(waitSecondsごとにダウンロードが完了したかチェック)\nprivate def waitDownloading(waitSeconds: Int, outputDirPath: String, downloadFileName: String): Unit = {\n  val downloadFilePath = Paths.get(outputDirPath, downloadFileName)\n  while (!downloadFilePath.toFile.exists || Files.size(downloadFilePath) == 0) {\n    (1 to waitSeconds).foreach { _ =>\n      Thread.sleep(1 * 1000)\n      print(\".\")\n    }\n    println()\n  }\n}\n```\n",
        "body": "<p>自動的に指定したフォルダにファイルをダウンロードするように設定する。</p>\n<p>PhantomJS ではできそうにないので Firefox Driver で。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"c1\">// プロファイルを設定してドライバを作る</span>\n<span class=\"k\">private</span> <span class=\"k\">def</span> <span class=\"n\">createDriver</span><span class=\"o\">(</span><span class=\"n\">outputDirPath</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">FirefoxDriver</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">profile</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FirefoxProfile</span><span class=\"o\">()</span>\n  <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">setPreference</span><span class=\"o\">(</span><span class=\"s\">&quot;browser.download.folderList&quot;</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">setPreference</span><span class=\"o\">(</span><span class=\"s\">&quot;browser.download.dir&quot;</span><span class=\"o\">,</span> <span class=\"n\">outputDirPath</span><span class=\"o\">)</span>\n  <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">setPreference</span><span class=\"o\">(</span><span class=\"s\">&quot;browser.download.useDownloadDir&quot;</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">)</span>\n  <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">setPreference</span><span class=\"o\">(</span><span class=\"s\">&quot;browser.helperApps.neverAsk.saveToDisk&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;application/octet-stream&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">new</span> <span class=\"nc\">FirefoxDriver</span><span class=\"o\">(</span><span class=\"n\">profile</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// ダウンロード待ち(waitSecondsごとにダウンロードが完了したかチェック)</span>\n<span class=\"k\">private</span> <span class=\"k\">def</span> <span class=\"n\">waitDownloading</span><span class=\"o\">(</span><span class=\"n\">waitSeconds</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">outputDirPath</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">downloadFileName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">downloadFilePath</span> <span class=\"k\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">outputDirPath</span><span class=\"o\">,</span> <span class=\"n\">downloadFileName</span><span class=\"o\">)</span>\n  <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">downloadFilePath</span><span class=\"o\">.</span><span class=\"n\">toFile</span><span class=\"o\">.</span><span class=\"n\">exists</span> <span class=\"o\">||</span> <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">(</span><span class=\"n\">downloadFilePath</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">waitSeconds</span><span class=\"o\">).</span><span class=\"n\">foreach</span> <span class=\"o\">{</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span>\n      <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"o\">)</span>\n      <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">println</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "ClubRefuse",
            "Reds",
            "reoring",
            "suin"
        ]
    },
    {
        "id": 117419,
        "uuid": "e3f2583f90d9adc039b3",
        "user": {
            "id": 5978,
            "url_name": "edvakf@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/003f59d1b2e3b864c744f8eb21f68e82?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "Play Framework でキャッシュするクラスのlazy valはキャッシュする段階で評価される",
        "created_at": "2014-08-26 00:08:42 +0900",
        "updated_at": "2014-08-26 00:41:27 +0900",
        "created_at_in_words": "29日",
        "updated_at_in_words": "29日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/edvakf@github/items/e3f2583f90d9adc039b3",
        "created_at_as_seconds": 1408979322,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nPlay Framework 2.3.2 です。\n\n```scala\nimport org.joda.time._\n\ncase class Timer(endTime: DateTime) {\n  lazy val secondsLeft = Seconds.secondsBetween(new DateTime(), endTime).getSeconds\n}\n```\n\nこういうコードがありました。\n\nとあるリクエストで\n\n```scala\nval timer = Timer(new DateTime().plusMinutes(5))\nCache.set(\"timer\", timer)\n```\n\nとやって、別のリクエストで\n\n```scala\nCache.getAs[Timer](\"timer\").map { timer =>\n  Logger.debug(timer.secondsLeft.toString)\n}\n```\n\nとやります。\n\nリクエストするたびに数字が減ってくれるかと思いきや、数字はずっと同じままです。\n\n`lazy val`を`def`に変えたら期待通りの挙動になりました。\n",
        "body": "<p>Play Framework 2.3.2 です。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.joda.time._</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Timer</span><span class=\"o\">(</span><span class=\"n\">endTime</span><span class=\"k\">:</span> <span class=\"kt\">DateTime</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">secondsLeft</span> <span class=\"k\">=</span> <span class=\"nc\">Seconds</span><span class=\"o\">.</span><span class=\"n\">secondsBetween</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DateTime</span><span class=\"o\">(),</span> <span class=\"n\">endTime</span><span class=\"o\">).</span><span class=\"n\">getSeconds</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>こういうコードがありました。</p>\n<p>とあるリクエストで</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">timer</span> <span class=\"k\">=</span> <span class=\"nc\">Timer</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DateTime</span><span class=\"o\">().</span><span class=\"n\">plusMinutes</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span>\n<span class=\"nc\">Cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"o\">(</span><span class=\"s\">&quot;timer&quot;</span><span class=\"o\">,</span> <span class=\"n\">timer</span><span class=\"o\">)</span>\n</pre></div></div><p>とやって、別のリクエストで</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"nc\">Cache</span><span class=\"o\">.</span><span class=\"n\">getAs</span><span class=\"o\">[</span><span class=\"kt\">Timer</span><span class=\"o\">](</span><span class=\"s\">&quot;timer&quot;</span><span class=\"o\">).</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">timer</span> <span class=\"k\">=&gt;</span>\n  <span class=\"nc\">Logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"o\">(</span><span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">secondsLeft</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>とやります。</p>\n<p>リクエストするたびに数字が減ってくれるかと思いきや、数字はずっと同じままです。</p>\n<p><code>lazy val</code>を<code>def</code>に変えたら期待通りの挙動になりました。</p>\n",
        "stock_users": [
            "kasumani",
            "Reds",
            "nilfigo"
        ]
    },
    {
        "id": 116412,
        "uuid": "ddaaa4c931de41c7c1ea",
        "user": {
            "id": 4126,
            "url_name": "iwag@github",
            "profile_image_url": "https://avatars.githubusercontent.com/u/1522583"
        },
        "title": "Scala, Ruby, underscore.js でコレクションメソッドの対応表",
        "created_at": "2014-08-23 23:38:20 +0900",
        "updated_at": "2014-08-23 23:38:20 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Ruby",
                "url_name": "ruby",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/9de6a11d330f5694820082438f88ccf4a1b289b2/medium.jpg?1364837630",
                "versions": []
            },
            {
                "name": "Underscore.js",
                "url_name": "underscore.js",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/30e86e7f86cef8d900268822dfa1f71de6254e22/medium.jpg?1387512273",
                "versions": []
            }
        ],
        "stock_count": 8,
        "comment_count": 2,
        "url": "http://qiita.com/iwag@github/items/ddaaa4c931de41c7c1ea",
        "created_at_as_seconds": 1408804700,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "自分用。\n違うくね？とか漏れてるとかあったらプルリクエストください！\n\n| Scala 2.10    | Ruby 2.1   |underscore.js|\n|:--------------|:-----------|:------------|\n| List(1,2,3)   | [1,2,3]    |             |\n| l(0)          | l[0], at   |             |\n| combination   |            |             |\n| collect       |            |             |\n| count         | count      | countBy     |\n| contains      | include?,member? | contains, include    |\n| diff          |            |             |\n| drop          | drop       |             |\n| dropRight     |            |             |\n| dropWhile     | drop_while |             |\n| exists        | any?       | any,some    |\n| endWith       |            |             |\n| filter        | select     | find,filter |\n| filterNot     | reject     | reject      |\n| find          | find       |             |\n| flatten       | flatten    | flatten     |\n| flatMap       |            |             |\n| foldLeft      | inject     |             |\n| foldRight     |            |             |\n| forAll        | all?       | all,every   |\n| foreach       | each       |             |\n| groupBy       | group_by   | groupBy     |\n| grouped       |            |             |\n| head          | first      | first       |\n| headOption    |            |             |\n| init          |            |             |\n| indexOf       | index      | indexOf     |\n| indexWhere    |            |             |\n| isEmpty       | empty?     |             |\n| last          | last       | last        |\n| lastOption    |            |             |\n| intersect     | &          | intersect   |\n| map           | collect,map| map         |\n| max           | max        | max         |\n| maxBy         | max_by     |             |\n| min           | min        | min         |\n| minBy         | min_by     |             |\n| nonEmpty      |            |             |\n| par           |            |             |\n| partition     | partition  | partition   |\n| product       |            |             |\n| reduceLeft    | reduce     |   reduce    |\n| reduceRight   |            | reduceRight |\n| reverse       |            |             |\n| scan          |            |             |\n| size          | size,lenght|             |\n| slice         | slice      |             |\n| sortWith      |            |             |\n| span          |            |             |\n| splitAt       |            |             |\n| sum           |            |             |\n| tail          | tail       | tail,rest   |\n| take          | take       |             |\n| takeWhile     | take_while |             |\n| union         |            | union       |\n| unzip         |            |             |\n| view          |            |             |\n| zip           | zip        | zip         |\n| zipWithIndex  |            |             |\n|               | none?      |             |\n|               | each_with_index |        |\n|               | each_index |             |\n|               | one?       |             |\n|               | minmax     |             |\n|               | grep       |             |\n|               | delete     |             |\n|               | delete_at  |             |\n|               | shuffle    | shuffle     |\n|               | permutation|             |\n|               | fill       |             |\n|               |            | where      |\n|               |            | invoke     |\n|               |            | pluck      |\n|               |            | sample     |\n|               |            | compact    |\n|               |            | difference |\n|               |            | uniq       |\n|               |            | object     |\n",
        "body": "<p>自分用。<br>\n違うくね？とか漏れてるとかあったらプルリクエストください！</p>\n\n<table><thead>\n<tr>\n<th style=\"text-align: left\">Scala 2.10</th>\n<th style=\"text-align: left\">Ruby 2.1</th>\n<th style=\"text-align: left\">underscore.js</th>\n</tr>\n</thead><tbody>\n<tr>\n<td style=\"text-align: left\">List(1,2,3)</td>\n<td style=\"text-align: left\">[1,2,3]</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">l(0)</td>\n<td style=\"text-align: left\">l[0], at</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">combination</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">collect</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">count</td>\n<td style=\"text-align: left\">count</td>\n<td style=\"text-align: left\">countBy</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">contains</td>\n<td style=\"text-align: left\">include?,member?</td>\n<td style=\"text-align: left\">contains, include</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">diff</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">drop</td>\n<td style=\"text-align: left\">drop</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">dropRight</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">dropWhile</td>\n<td style=\"text-align: left\">drop_while</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">exists</td>\n<td style=\"text-align: left\">any?</td>\n<td style=\"text-align: left\">any,some</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">endWith</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">filter</td>\n<td style=\"text-align: left\">select</td>\n<td style=\"text-align: left\">find,filter</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">filterNot</td>\n<td style=\"text-align: left\">reject</td>\n<td style=\"text-align: left\">reject</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">find</td>\n<td style=\"text-align: left\">find</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">flatten</td>\n<td style=\"text-align: left\">flatten</td>\n<td style=\"text-align: left\">flatten</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">flatMap</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">foldLeft</td>\n<td style=\"text-align: left\">inject</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">foldRight</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">forAll</td>\n<td style=\"text-align: left\">all?</td>\n<td style=\"text-align: left\">all,every</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">foreach</td>\n<td style=\"text-align: left\">each</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">groupBy</td>\n<td style=\"text-align: left\">group_by</td>\n<td style=\"text-align: left\">groupBy</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">grouped</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">head</td>\n<td style=\"text-align: left\">first</td>\n<td style=\"text-align: left\">first</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">headOption</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">init</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">indexOf</td>\n<td style=\"text-align: left\">index</td>\n<td style=\"text-align: left\">indexOf</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">indexWhere</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">isEmpty</td>\n<td style=\"text-align: left\">empty?</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">last</td>\n<td style=\"text-align: left\">last</td>\n<td style=\"text-align: left\">last</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">lastOption</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">intersect</td>\n<td style=\"text-align: left\">&amp;</td>\n<td style=\"text-align: left\">intersect</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">map</td>\n<td style=\"text-align: left\">collect,map</td>\n<td style=\"text-align: left\">map</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">max</td>\n<td style=\"text-align: left\">max</td>\n<td style=\"text-align: left\">max</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">maxBy</td>\n<td style=\"text-align: left\">max_by</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">min</td>\n<td style=\"text-align: left\">min</td>\n<td style=\"text-align: left\">min</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">minBy</td>\n<td style=\"text-align: left\">min_by</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">nonEmpty</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">par</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">partition</td>\n<td style=\"text-align: left\">partition</td>\n<td style=\"text-align: left\">partition</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">product</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">reduceLeft</td>\n<td style=\"text-align: left\">reduce</td>\n<td style=\"text-align: left\">reduce</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">reduceRight</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">reduceRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">reverse</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">scan</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">size</td>\n<td style=\"text-align: left\">size,lenght</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">slice</td>\n<td style=\"text-align: left\">slice</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">sortWith</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">span</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">splitAt</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">sum</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">tail</td>\n<td style=\"text-align: left\">tail</td>\n<td style=\"text-align: left\">tail,rest</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">take</td>\n<td style=\"text-align: left\">take</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">takeWhile</td>\n<td style=\"text-align: left\">take_while</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">union</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">union</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">unzip</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">view</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">zip</td>\n<td style=\"text-align: left\">zip</td>\n<td style=\"text-align: left\">zip</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">zipWithIndex</td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">none?</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">each_with_index</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">each_index</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">one?</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">minmax</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">grep</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">delete</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">delete_at</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">shuffle</td>\n<td style=\"text-align: left\">shuffle</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">permutation</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">fill</td>\n<td style=\"text-align: left\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">where</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">invoke</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">pluck</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">sample</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">compact</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">difference</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">uniq</td>\n</tr>\n<tr>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\"></td>\n<td style=\"text-align: left\">object</td>\n</tr>\n</tbody></table>\n",
        "stock_users": [
            "hiro_matsuno2",
            "yu01",
            "Ueno1969",
            "jawssame7",
            "ozw_sei",
            "khiraiwa",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 116250,
        "uuid": "13fa367971c5d2b471c7",
        "user": {
            "id": 36461,
            "url_name": "warotasan",
            "profile_image_url": "https://secure.gravatar.com/avatar/9677d5f8ab3e7a49c35788742f2658b0"
        },
        "title": "Play Framework 2.3 with CoffeeScript, Stylus on Heroku",
        "created_at": "2014-08-23 08:07:04 +0900",
        "updated_at": "2014-08-23 12:59:40 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": [
                    "2.3.3"
                ]
            },
            {
                "name": "Heroku",
                "url_name": "heroku",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/d77183eaf26189a59c14a189a23a004bb9bdecf4/medium.jpg?1364839078",
                "versions": []
            },
            {
                "name": "CoffeeScript",
                "url_name": "coffeescript",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e41b881d25c683db2ce913dba0d07b9695a55741/medium.jpg?1368788624",
                "versions": []
            },
            {
                "name": "stylus",
                "url_name": "stylus",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/warotasan/items/13fa367971c5d2b471c7",
        "created_at_as_seconds": 1408748824,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "最近、ふとScalaに手を出してみようと思い、とは言え自分はやろうと思っても何かアプリケーションの作成を目標がないと始まらないタイプなので、慣れているWebアプリケーションを作ろう！と思いました。\nこれもまた最近、やや個人的なプロジェクトで作り始めているWebアプリケーションがあり、それはRailsで開発する予定だったのですが、ScalaでもPlay FrameworkというRailsに似たようなMVCフレームワークがあったので、どうせならこれをScalaでやってみようということになりました。そのPlay Framework（2.3.3）で開発して、ある程度の段階でとりあえずHerokuにデプロイしようとするも、その時点で結構悩まされたので、今回はその辺に関してメモがてら書いてみます。\n\n# 最初に考えたこと ー Asset, Viewを何で実装するか？\nRailsではCoffee/Sass/Slimというのが自分としては定石でした。さて、Playでは何が使えるのでしょうか。\n\n## CoffeeScript\nPlay 2.3にも、sbt-webという括りのプラグイン類に\u0010sbt-coffeescriptというものがあり、Coffeeは難なく使えました。やったぜ。\nちなみに、今回Playでやってみて発見した事実があります。\nRailsでCoffee使う場合、変換されたソースはファイルごとに無名関数で括られてからのソース結合となります。個人的にはファイルごとに無名関数で括るのは特に必要ではなく（むしろ無いほうが嬉しい）、最終的に結合したものを無名関数で括ってほしいな〜と思っていました。\n何が言いたいかというと次のような状態になるので困るのです。\n\n```coffeescript\n# ファイルA\ndo ->\n  class A\n    method: ->\n      # do something\n\n# ファイルB\ndo ->\n  class B\n    method: ->\n      new A # => Aが参照できない・・・\n```\n\nなのでいちいちグローバル空間にひとつAppとか適当な名前でオブジェクトを作り、他のファイルからも参照されるようなものはAppのプロパティとして保存するようにしていました。でも非常にめんどくさい・・・\n\n```coffeescript\n# グローバルオブジェクトを作るためだけのファイル\ndo ->\n  window.App = {}\n\n# ファイルA\ndo ->\n  class App.A\n    method: ->\n      # do something\n\n# ファイルB\ndo ->\n  class App.B\n    method: ->\n      new App.A # => Aが参照できる！\n```\n\n一方、PlayはUglifyを使った\n\n```scala:build.sb\n// Coffeeのコンパイル時には無名関数で括らない\nCoffeeScriptKeys.bare := true\n\n// Uglifyでのminify, concat後に一番外側を無名関数で括る\nUglifyKeys.enclose := true\n\n// Uglifyでのconcat順などの設定\n//（Stack Overflowかなんかでこんなことができるってのを知りました）\nUglifyKeys.uglifyOps := { js =>\n  Seq((js.sortBy(_._2), \"javascripts/main.min.js\"))\n}\n```\n\n（っていうことはRails4でもUglifyを使えばできるんでしょうか？今度やってみよう・・・）\n\n## Stylus\nsbt-coffeescriptがあるんだからsbt-sassも！\nないのかよ！\nsbt-stylusしかない・・・stylusとか使ったことない・・・・・・\nとは言え、ないものはしょうがない、Stylus使おうということで、CSSプリプロセッサはStylusを採用しました。\nでも、使ってみるとこれめちゃくちゃ便利ですね。nibプラグイン導入するとかなり捗ります。ぶっちゃけStylusの方が好きかもしれない疑惑出てます。\n\nただ、問題がありまして、HerokuはありがたいことにPlayのデプロイに対応しているのですが、実はこのsbt-stylusがNodeの利用を前提としていまして、普通にデプロイするとNodeなんか使えないのでStylusのコンパイルでコケて、デプロイに失敗します。\nこの問題への対処がこの記事のメインです！play-sassなんてのもあって実はSassが使えたりしたんですが、僕はなんとしてでもStylusを使いたい病を患ってしまったのです！\n\nで、どうするかというとNodeアプリケーションと見せかけてデプロイして、Playを動かせばいいのでした。\nつまり\n\n1. 普通にPlayとして開発する\n2. PlayとしてのProcfileを作る\n3. package.json作る（HerokuがNodeアプリケーションと判断するため）\n4. デプロイする\n\nという流れです。ここにたどり着くまで紆余曲折ありましたが、見返すとすごくシンプルですね。\n記事のメインとか言いながら、さらっと終わりそうなんですが、次のようにpackage.json作ればいいだけです。\n\n```json:package.json\n{\n  ...（省略）...\n\n  \"scripts\": {\n    \"postinstall\": \"./activator clean compile stage\"\n  },\n  \"devDependencies\": {\n    \"stylus\": \"0.48.1\",\n    \"nib\": \"1.0.3\"\n  }\n}\n\n```\n\ndevDependenciesにより、Node上でStylusを動かせるようにします。nibを使わないなら、nibの指定はいりません。\nそして、デプロイ時にNodeアプリケーションとして認識されるため、これだけだとPlayのコンパイルなどが行われず、目的とするデプロイが完了しません。よって、postinstallの指定によりPlayのコンパイルなどを行います。clean/compile/stageというタスクは、Playを本来の状況でデプロイした時に動くタスクなので、これらをすべて走らせます。これらのタスクを実行するのは、Play 2.3からはactivatorというヤツなので、そいつに対して実行してます。\n\nPlayとしてデプロイしてNodeは動かないのに、NodeアプリケーションとしてデプロイしてPlayは動くのかよ！っていう話なのかもしれないですが、あくまでPlayはJVM上で動いていて、「俺はスクリプト言語じゃないんだぜ！」みたいなノリなので動くのではないでしょうか。すみません、その辺全然分かってないので適当に言ってますが、`heroku run bash`上で`node`は実行できなくても`java`とか`javac`とか`gcc`とかが動いたあたり、スクリプト言語じゃなければ大体コンパイルもできて動くんじゃないかと予想してます。スクリプト言語だとしたら、適切な環境としてデプロイしないと実行できる環境に整わないんじゃないかという予想でございます。\n\n## Twirl\nSlimの代替案は見つかりませんでした。すみません、諦めてデフォルトのTwirl使ってます。\n[このへん](https://gist.github.com/geetchandratre/5705523)でJadeが使えそうな雰囲気が醸し出されてますが、うまくいかずにテンプレートエンジンについてはスッと諦めてしまいました。\n\n# Play Frameworkを使ってみて思ったこと\nRailsすごい\n",
        "body": "<p>最近、ふとScalaに手を出してみようと思い、とは言え自分はやろうと思っても何かアプリケーションの作成を目標がないと始まらないタイプなので、慣れているWebアプリケーションを作ろう！と思いました。<br>\nこれもまた最近、やや個人的なプロジェクトで作り始めているWebアプリケーションがあり、それはRailsで開発する予定だったのですが、ScalaでもPlay FrameworkというRailsに似たようなMVCフレームワークがあったので、どうせならこれをScalaでやってみようということになりました。そのPlay Framework（2.3.3）で開発して、ある程度の段階でとりあえずHerokuにデプロイしようとするも、その時点で結構悩まされたので、今回はその辺に関してメモがてら書いてみます。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>最初に考えたこと ー Asset, Viewを何で実装するか？\n      </h1><p>RailsではCoffee/Sass/Slimというのが自分としては定石でした。さて、Playでは何が使えるのでしょうか。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>CoffeeScript\n      </h2><p>Play 2.3にも、sbt-webという括りのプラグイン類に\u0010sbt-coffeescriptというものがあり、Coffeeは難なく使えました。やったぜ。<br>\nちなみに、今回Playでやってみて発見した事実があります。<br>\nRailsでCoffee使う場合、変換されたソースはファイルごとに無名関数で括られてからのソース結合となります。個人的にはファイルごとに無名関数で括るのは特に必要ではなく（むしろ無いほうが嬉しい）、最終的に結合したものを無名関数で括ってほしいな〜と思っていました。<br>\n何が言いたいかというと次のような状態になるので困るのです。</p>\n<div class=\"code-frame\" data-lang=\"coffeescript\"><div class=\"highlight\"><pre><span class=\"c1\"># ファイルA</span>\n<span class=\"nx\">do</span> <span class=\"nf\">-&gt;</span>\n  <span class=\"k\">class</span> <span class=\"nx\">A</span>\n    <span class=\"nv\">method: </span><span class=\"nf\">-&gt;</span>\n      <span class=\"c1\"># do something</span>\n\n<span class=\"c1\"># ファイルB</span>\n<span class=\"nx\">do</span> <span class=\"nf\">-&gt;</span>\n  <span class=\"k\">class</span> <span class=\"nx\">B</span>\n    <span class=\"nv\">method: </span><span class=\"nf\">-&gt;</span>\n      <span class=\"k\">new</span> <span class=\"nx\">A</span> <span class=\"c1\"># =&gt; Aが参照できない・・・</span>\n</pre></div></div><p>なのでいちいちグローバル空間にひとつAppとか適当な名前でオブジェクトを作り、他のファイルからも参照されるようなものはAppのプロパティとして保存するようにしていました。でも非常にめんどくさい・・・</p>\n<div class=\"code-frame\" data-lang=\"coffeescript\"><div class=\"highlight\"><pre><span class=\"c1\"># グローバルオブジェクトを作るためだけのファイル</span>\n<span class=\"nx\">do</span> <span class=\"nf\">-&gt;</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nv\">App = </span><span class=\"p\">{}</span>\n\n<span class=\"c1\"># ファイルA</span>\n<span class=\"nx\">do</span> <span class=\"nf\">-&gt;</span>\n  <span class=\"k\">class</span> <span class=\"nx\">App</span><span class=\"p\">.</span><span class=\"nx\">A</span>\n    <span class=\"nv\">method: </span><span class=\"nf\">-&gt;</span>\n      <span class=\"c1\"># do something</span>\n\n<span class=\"c1\"># ファイルB</span>\n<span class=\"nx\">do</span> <span class=\"nf\">-&gt;</span>\n  <span class=\"k\">class</span> <span class=\"nx\">App</span><span class=\"p\">.</span><span class=\"nx\">B</span>\n    <span class=\"nv\">method: </span><span class=\"nf\">-&gt;</span>\n      <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">.</span><span class=\"nx\">A</span> <span class=\"c1\"># =&gt; Aが参照できる！</span>\n</pre></div></div><p>一方、PlayはUglifyを使った</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sb</span></div><div class=\"highlight\"><pre><span class=\"c1\">// Coffeeのコンパイル時には無名関数で括らない</span>\n<span class=\"nc\">CoffeeScriptKeys</span><span class=\"o\">.</span><span class=\"n\">bare</span> <span class=\"o\">:=</span> <span class=\"kc\">true</span>\n\n<span class=\"c1\">// Uglifyでのminify, concat後に一番外側を無名関数で括る</span>\n<span class=\"nc\">UglifyKeys</span><span class=\"o\">.</span><span class=\"n\">enclose</span> <span class=\"o\">:=</span> <span class=\"kc\">true</span>\n\n<span class=\"c1\">// Uglifyでのconcat順などの設定</span>\n<span class=\"c1\">//（Stack Overflowかなんかでこんなことができるってのを知りました）</span>\n<span class=\"nc\">UglifyKeys</span><span class=\"o\">.</span><span class=\"n\">uglifyOps</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"k\">=&gt;</span>\n  <span class=\"nc\">Seq</span><span class=\"o\">((</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">sortBy</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">),</span> <span class=\"s\">&quot;javascripts/main.min.js&quot;</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>（っていうことはRails4でもUglifyを使えばできるんでしょうか？今度やってみよう・・・）</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Stylus\n      </h2><p>sbt-coffeescriptがあるんだからsbt-sassも！<br>\nないのかよ！<br>\nsbt-stylusしかない・・・stylusとか使ったことない・・・・・・<br>\nとは言え、ないものはしょうがない、Stylus使おうということで、CSSプリプロセッサはStylusを採用しました。<br>\nでも、使ってみるとこれめちゃくちゃ便利ですね。nibプラグイン導入するとかなり捗ります。ぶっちゃけStylusの方が好きかもしれない疑惑出てます。</p>\n<p>ただ、問題がありまして、HerokuはありがたいことにPlayのデプロイに対応しているのですが、実はこのsbt-stylusがNodeの利用を前提としていまして、普通にデプロイするとNodeなんか使えないのでStylusのコンパイルでコケて、デプロイに失敗します。<br>\nこの問題への対処がこの記事のメインです！play-sassなんてのもあって実はSassが使えたりしたんですが、僕はなんとしてでもStylusを使いたい病を患ってしまったのです！</p>\n<p>で、どうするかというとNodeアプリケーションと見せかけてデプロイして、Playを動かせばいいのでした。<br>\nつまり</p>\n\n<ol>\n<li>普通にPlayとして開発する</li>\n<li>PlayとしてのProcfileを作る</li>\n<li>package.json作る（HerokuがNodeアプリケーションと判断するため）</li>\n<li>デプロイする</li>\n</ol>\n<p>という流れです。ここにたどり着くまで紆余曲折ありましたが、見返すとすごくシンプルですね。<br>\n記事のメインとか言いながら、さらっと終わりそうなんですが、次のようにpackage.json作ればいいだけです。</p>\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"code-lang\"><span class=\"bold\">package.json</span></div><div class=\"highlight\"><pre><span class=\"p\">{</span>\n  <span class=\"err\">...（省略）...</span>\n\n  <span class=\"nt\">&quot;scripts&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;postinstall&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;./activator clean compile stage&quot;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">&quot;devDependencies&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;stylus&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0.48.1&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;nib&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1.0.3&quot;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div><p>devDependenciesにより、Node上でStylusを動かせるようにします。nibを使わないなら、nibの指定はいりません。<br>\nそして、デプロイ時にNodeアプリケーションとして認識されるため、これだけだとPlayのコンパイルなどが行われず、目的とするデプロイが完了しません。よって、postinstallの指定によりPlayのコンパイルなどを行います。clean/compile/stageというタスクは、Playを本来の状況でデプロイした時に動くタスクなので、これらをすべて走らせます。これらのタスクを実行するのは、Play 2.3からはactivatorというヤツなので、そいつに対して実行してます。</p>\n<p>PlayとしてデプロイしてNodeは動かないのに、NodeアプリケーションとしてデプロイしてPlayは動くのかよ！っていう話なのかもしれないですが、あくまでPlayはJVM上で動いていて、「俺はスクリプト言語じゃないんだぜ！」みたいなノリなので動くのではないでしょうか。すみません、その辺全然分かってないので適当に言ってますが、<code>heroku run bash</code>上で<code>node</code>は実行できなくても<code>java</code>とか<code>javac</code>とか<code>gcc</code>とかが動いたあたり、スクリプト言語じゃなければ大体コンパイルもできて動くんじゃないかと予想してます。スクリプト言語だとしたら、適切な環境としてデプロイしないと実行できる環境に整わないんじゃないかという予想でございます。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Twirl\n      </h2><p>Slimの代替案は見つかりませんでした。すみません、諦めてデフォルトのTwirl使ってます。<br>\n<a href=\"https://gist.github.com/geetchandratre/5705523\" title=\"\" target=\"_blank\">このへん</a>でJadeが使えそうな雰囲気が醸し出されてますが、うまくいかずにテンプレートエンジンについてはスッと諦めてしまいました。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>Play Frameworkを使ってみて思ったこと\n      </h1><p>Railsすごい</p>\n",
        "stock_users": [
            "Reds",
            "_marony",
            "kasumani",
            "rynkjm",
            "yukimunet",
            "HirofumiYashima"
        ]
    },
    {
        "id": 115362,
        "uuid": "dddf1276167f942d1bb6",
        "user": {
            "id": 7006,
            "url_name": "ikuo",
            "profile_image_url": "https://secure.gravatar.com/avatar/677edc2865dfa942f29b721d2c20123b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "ScalaでAndroid開発 - Docker編",
        "created_at": "2014-08-21 23:50:20 +0900",
        "updated_at": "2014-08-23 10:41:51 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Android",
                "url_name": "android",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0062451c92bb932b6bb257a40a35eee709b5597c/medium.jpg?1403644757",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "docker",
                "url_name": "docker",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5dd175e323bc9dac09e906b515d54316d527890f/medium.jpg?1379804192",
                "versions": []
            },
            {
                "name": "android-sdk-plugin",
                "url_name": "android-sdk-plugin",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "sbt",
                "url_name": "sbt",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 15,
        "comment_count": 0,
        "url": "http://qiita.com/ikuo/items/dddf1276167f942d1bb6",
        "created_at_as_seconds": 1408632620,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "AndroidやScala/sbtも日進月歩なので、変化追い易くなればと思い Docker で開発環境を作ってみた。\n\n今回はDockerの勉強を兼ねて Ubuntu 14.04 ベースで Android SDK + sbt のイメージを作ったので、これを使ってScalaでのAndroid開発の環境を準備した。Dockerとの役割分担の方針として：\n\n1. sbtでのビルドやAndroidデバイスの定型操作などCUI操作はDockerのコンテナ上でやる\n2. 実機USB接続やエミュレータ実行、IDE起動はオーバーヘッドの少ないホスト機でやる\n3. 両者の通信は、adbサーバの5037番ポートをDockerコンテナからホスト機にSSHフォワードして行う\n \nことにした。\n\n## (1) Dockerのセットアップ\nホスト機にMacを使っているので [boot2docker](https://github.com/boot2docker/boot2docker) を入れる。\n[この記事](http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/)などを参考にした。\n\n```shell-session\n$ brew install boot2docker\n$ boot2docker init\n$ boot2docker up\n```\n\n## (2) Dockerイメージの動作確認\n下のコマンドで、Android SDK + sbt + sshd が入ったイメージ ( [ikuo/android-sbt](https://registry.hub.docker.com/u/ikuo/android-sbt/) ) からコンテナが起動する。初回はイメージのダウンロードで小一時間かかる。\n\n```shell-session\n$ docker run -it --rm -p 7022:22 ikuo/android-sbt:0.2 \"`cat ~/.ssh/id_rsa.pub`\"\n```\n\n最後の引数にある `id_rsa.pub` は、コンテナにssh接続する時に使う鍵ファイル。\n動作確認なので `--rm` をつけて終了時にコンテナを消すようにしてある。\n`-p 7022:22` でコンテナの22番ポートにホスト機(boot2dockerの場合はboot2docker-vm)の7022番をフォワードする。\n\nboot2dockerの場合はさらに[この記事](http://qiita.com/ikuyamada/items/3f12de859a87d51fdd79) などを参考に、ホスト機の7022番をboot2docer-vmの7022番にフォワードさせておく：\n\n```shell-session\n# Macでoot2docker 使っている場合の追加手順\n$ VBoxManage controlvm \"boot2docker-vm\" natpf1 \"ssh to android-sbt,tcp,127.0.0.1,7022,,7022\"\n```\n\nコンテナが起動したらホスト機からコンテナに下のようにSSH接続して、adbサーバが使う5037番をホスト機にフォワードしておく。adbのclient/server構成やポート番号などは[こちら](http://developer.android.com/tools/help/adb.html)を参考にした。\n\n```shell-session\n$ ssh ubuntu@localhost -p 7022 -R 5037:localhost:5037 -Nv\n```\n\nホスト機で、 `adb start-server` してから適当なエミュレータ起動や実機接続をしておくと、コンテナ上のadbコマンドからホスト機のAndroidデバイスが見えるようになる。\n\n```shell-session\nubuntu@xxxxxxxxxx:~$ adb devices\nList of devices attached\n999673041154999 device\n```\n\n※ ホスト機でadbサーバが起動していない場合は `error: protocol fault (no status)` のような表示になる。\n\n## (3) android-sdk-plugin でのビルド\n\n最近自分はsbtでのAndroidプロジェクトのビルドに[android-sdk-plugin](https://github.com/pfn/android-sdk-plugin)を使っているので、先のDockerのイメージも android-sdk-plugin に必なものだけを含めた。sbt-android plugin との違いは[こちら](http://taisukeoe.github.io/blog/2014/03/13/pfn-android-sdk-plugin/)にあったりする。\n\n今回は既に android-sdk-plugin ベースのプロジェクトが手元にあったので、git cloneした後に下のように android update project を実行して Android SDK のパスを設定した。\n\n```shell-session\nubuntu@...:~/work/myproject$ android update project -p . -t android-19\nubuntu@...:~/work/myproject$ git checkout proguard-project.txt\n```\n※ proguardの設定が上書きされたのでgitでリセット(2行目)\n\nその後sbtでapkをビルドして`run`すると、ホスト機上のエミュレータや実機端末でアプリが無事に起動した。\n\n```shell-session\nubuntu@...:~/work/myproject$ sbt android:package\nubuntu@...:~/work/myproject$ sbt run\n```\n\n動作確認に使ったアプリは[こちら](https://github.com/ikuo/garaponoid)。\n\n## (4) IDEでのファイル編集\nレイアウトファイルなどはホスト機の IDE (IntelliJ IDEA) でレンダリング確認しながら編集したいので、[こちらの手順](https://github.com/boot2docker/boot2docker#folder-sharing)を参考にファイル共有をセットアップした。\n\n```shell-session\n$ docker run -itd -v /data --name my-data busybox /bin/sh\n$ docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data\n$ boot2docker ip\n    192.168.59.103\n```\n\n上のコマンドは svendowideit/samba というイメージをもとに `my-data` という名前でファイル共有用のコンテナを起動するもの。my-dataコンテナは間違って消してしまわないように`-itd`オプションをつけてシェルをバックグラウンドで起動してある。\n\n\\\\192.168.59.103\\data に共有フォルダができるので、MacならここにFinderで「サーバに接続」すると /Volumes/data にCLIでファイルを読み書きできるようになる。ここにコンテナからアクセスするには起動時に`--volumes-from my-data`をつけて /data を読み書きする。\n\nということで(2)のコンテナ起動にこのオプションをつけると、android-sbtのコンテナ起動コマンドは下のようになった：\n\n```shell-session\n$ docker run -it --rm -p 7022:22 --volumes-from my-data ikuo/android-sbt:0.2 \"`cat ~/.ssh/id_rsa.pub`\"\nubuntu@...:~$ sudo chown -R ubuntu /data\n```\n\n後は /data 以下にプロジェクトファイルをgit cloneするなりして編集＆ビルドすればOK。\n",
        "body": "<p>AndroidやScala/sbtも日進月歩なので、変化追い易くなればと思い Docker で開発環境を作ってみた。</p>\n<p>今回はDockerの勉強を兼ねて Ubuntu 14.04 ベースで Android SDK + sbt のイメージを作ったので、これを使ってScalaでのAndroid開発の環境を準備した。Dockerとの役割分担の方針として：</p>\n\n<ol>\n<li>sbtでのビルドやAndroidデバイスの定型操作などCUI操作はDockerのコンテナ上でやる</li>\n<li>実機USB接続やエミュレータ実行、IDE起動はオーバーヘッドの少ないホスト機でやる</li>\n<li>両者の通信は、adbサーバの5037番ポートをDockerコンテナからホスト機にSSHフォワードして行う</li>\n</ol>\n<p>ことにした。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>(1) Dockerのセットアップ\n      </h2><p>ホスト機にMacを使っているので <a href=\"https://github.com/boot2docker/boot2docker\" title=\"\" target=\"_blank\">boot2docker</a> を入れる。<br>\n<a href=\"http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/\" title=\"\" target=\"_blank\">この記事</a>などを参考にした。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"go\">$ brew install boot2docker</span>\n<span class=\"go\">$ boot2docker init</span>\n<span class=\"go\">$ boot2docker up</span>\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>(2) Dockerイメージの動作確認\n      </h2><p>下のコマンドで、Android SDK + sbt + sshd が入ったイメージ ( <a href=\"https://registry.hub.docker.com/u/ikuo/android-sbt/\" title=\"\" target=\"_blank\">ikuo/android-sbt</a> ) からコンテナが起動する。初回はイメージのダウンロードで小一時間かかる。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"go\">$ docker run -it --rm -p 7022:22 ikuo/android-sbt:0.2 &quot;`cat ~/.ssh/id_rsa.pub`&quot;</span>\n</pre></div></div><p>最後の引数にある <code>id_rsa.pub</code> は、コンテナにssh接続する時に使う鍵ファイル。<br>\n動作確認なので <code>--rm</code> をつけて終了時にコンテナを消すようにしてある。<br>\n<code>-p 7022:22</code> でコンテナの22番ポートにホスト機(boot2dockerの場合はboot2docker-vm)の7022番をフォワードする。</p>\n<p>boot2dockerの場合はさらに<a href=\"http://qiita.com/ikuyamada/items/3f12de859a87d51fdd79\" title=\"\">この記事</a> などを参考に、ホスト機の7022番をboot2docer-vmの7022番にフォワードさせておく：</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"go\"># Macでoot2docker 使っている場合の追加手順</span>\n<span class=\"go\">$ VBoxManage controlvm &quot;boot2docker-vm&quot; natpf1 &quot;ssh to android-sbt,tcp,127.0.0.1,7022,,7022&quot;</span>\n</pre></div></div><p>コンテナが起動したらホスト機からコンテナに下のようにSSH接続して、adbサーバが使う5037番をホスト機にフォワードしておく。adbのclient/server構成やポート番号などは<a href=\"http://developer.android.com/tools/help/adb.html\" title=\"\" target=\"_blank\">こちら</a>を参考にした。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"go\">$ ssh ubuntu@localhost -p 7022 -R 5037:localhost:5037 -Nv</span>\n</pre></div></div><p>ホスト機で、 <code>adb start-server</code> してから適当なエミュレータ起動や実機接続をしておくと、コンテナ上のadbコマンドからホスト機のAndroidデバイスが見えるようになる。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">ubuntu@xxxxxxxxxx:~$</span> adb devices\n<span class=\"go\">List of devices attached</span>\n<span class=\"go\">999673041154999 device</span>\n</pre></div></div><p>※ ホスト機でadbサーバが起動していない場合は <code>error: protocol fault (no status)</code> のような表示になる。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>(3) android-sdk-plugin でのビルド\n      </h2><p>最近自分はsbtでのAndroidプロジェクトのビルドに<a href=\"https://github.com/pfn/android-sdk-plugin\" title=\"\" target=\"_blank\">android-sdk-plugin</a>を使っているので、先のDockerのイメージも android-sdk-plugin に必なものだけを含めた。sbt-android plugin との違いは<a href=\"http://taisukeoe.github.io/blog/2014/03/13/pfn-android-sdk-plugin/\" title=\"\" target=\"_blank\">こちら</a>にあったりする。</p>\n<p>今回は既に android-sdk-plugin ベースのプロジェクトが手元にあったので、git cloneした後に下のように android update project を実行して Android SDK のパスを設定した。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">ubuntu@...:~/work/myproject$</span> android update project -p . -t android-19\n<span class=\"gp\">ubuntu@...:~/work/myproject$</span> git checkout proguard-project.txt\n</pre></div></div><p>※ proguardの設定が上書きされたのでgitでリセット(2行目)</p>\n<p>その後sbtでapkをビルドして<code>run</code>すると、ホスト機上のエミュレータや実機端末でアプリが無事に起動した。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">ubuntu@...:~/work/myproject$</span> sbt android:package\n<span class=\"gp\">ubuntu@...:~/work/myproject$</span> sbt run\n</pre></div></div><p>動作確認に使ったアプリは<a href=\"https://github.com/ikuo/garaponoid\" title=\"\" target=\"_blank\">こちら</a>。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>(4) IDEでのファイル編集\n      </h2><p>レイアウトファイルなどはホスト機の IDE (IntelliJ IDEA) でレンダリング確認しながら編集したいので、<a href=\"https://github.com/boot2docker/boot2docker#folder-sharing\" title=\"\" target=\"_blank\">こちらの手順</a>を参考にファイル共有をセットアップした。</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"go\">$ docker run -itd -v /data --name my-data busybox /bin/sh</span>\n<span class=\"go\">$ docker run --rm -v /usr/local/bin/docker:/docker -v /var/run/docker.sock:/docker.sock svendowideit/samba my-data</span>\n<span class=\"go\">$ boot2docker ip</span>\n<span class=\"go\">    192.168.59.103</span>\n</pre></div></div><p>上のコマンドは svendowideit/samba というイメージをもとに <code>my-data</code> という名前でファイル共有用のコンテナを起動するもの。my-dataコンテナは間違って消してしまわないように<code>-itd</code>オプションをつけてシェルをバックグラウンドで起動してある。</p>\n<p>\\192.168.59.103\\data に共有フォルダができるので、MacならここにFinderで「サーバに接続」すると /Volumes/data にCLIでファイルを読み書きできるようになる。ここにコンテナからアクセスするには起動時に<code>--volumes-from my-data</code>をつけて /data を読み書きする。</p>\n<p>ということで(2)のコンテナ起動にこのオプションをつけると、android-sbtのコンテナ起動コマンドは下のようになった：</p>\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"go\">$ docker run -it --rm -p 7022:22 --volumes-from my-data ikuo/android-sbt:0.2 &quot;`cat ~/.ssh/id_rsa.pub`&quot;</span>\n<span class=\"gp\">ubuntu@...:~$</span> sudo chown -R ubuntu /data\n</pre></div></div><p>後は /data 以下にプロジェクトファイルをgit cloneするなりして編集＆ビルドすればOK。</p>\n",
        "stock_users": [
            "mapyo",
            "hajimet@github",
            "rerofumi",
            "tos-miyake",
            "kumazo@github",
            "yacchin1205",
            "koki_cheese",
            "nagakenjs",
            "futo4",
            "kasumani",
            "Reds",
            "nabezokodaikon",
            "koba7010",
            "m_pDorobou",
            "ksoichiro"
        ]
    },
    {
        "id": 112825,
        "uuid": "f40f31540e7d636f5d58",
        "user": {
            "id": 7565,
            "url_name": "reoring",
            "profile_image_url": "https://secure.gravatar.com/avatar/3735457720e670a400e445ae0f419ac1?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "超やっつけでネットワーク経由でなんかのメッセージを送る",
        "created_at": "2014-08-19 00:41:18 +0900",
        "updated_at": "2014-08-19 00:54:11 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/reoring/items/f40f31540e7d636f5d58",
        "created_at_as_seconds": 1408376478,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n[PHPのこの記事](http://qiita.com/ngyuki/items/9bf1cb6d57022d01d4ac)のパクりです。\n\nncでリッスンします。\n\n```\nnc -lk 9999\n```\n\nメッセージを送ります。\n\n```scala\nimport java.net.{ServerSocket, Socket}\nimport java.io._\n\nobject main {\n  def main(args : Array[String]) : Unit = {\n    trace(\"hello\")\n  }\n\n  def trace(message: String):Unit = {\n    scala.util.control.Exception.ignoring(classOf[Throwable]) {\n      val connection = new Socket(\"localhost\", 9999)\n      val outStream  = connection.getOutputStream\n      val out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outStream)))\n      val inStream = new InputStreamReader(connection.getInputStream)\n      val in = new BufferedReader(inStream)\n      out.println(message)\n      out.flush()\n    }\n  }\n}\n```\n\nおくってみます。\n\n```\nscala hello.scala\n```\n\nとどきます。\n\n```\nnc -lk 9999\nhello\n```\n\nもしかしたら便利なときがあるかもしれない。\n",
        "body": "<p><a href=\"http://qiita.com/ngyuki/items/9bf1cb6d57022d01d4ac\" title=\"\">PHPのこの記事</a>のパクりです。</p>\n<p>ncでリッスンします。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>nc -lk 9999\n</pre></div></div><p>メッセージを送ります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.net.</span><span class=\"o\">{</span><span class=\"nc\">ServerSocket</span><span class=\"o\">,</span> <span class=\"nc\">Socket</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.io._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">main</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"n\">message</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span><span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">control</span><span class=\"o\">.</span><span class=\"nc\">Exception</span><span class=\"o\">.</span><span class=\"n\">ignoring</span><span class=\"o\">(</span><span class=\"n\">classOf</span><span class=\"o\">[</span><span class=\"kt\">Throwable</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">connection</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Socket</span><span class=\"o\">(</span><span class=\"s\">&quot;localhost&quot;</span><span class=\"o\">,</span> <span class=\"mi\">9999</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">outStream</span>  <span class=\"k\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">getOutputStream</span>\n      <span class=\"k\">val</span> <span class=\"n\">out</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintWriter</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">BufferedWriter</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">OutputStreamWriter</span><span class=\"o\">(</span><span class=\"n\">outStream</span><span class=\"o\">)))</span>\n      <span class=\"k\">val</span> <span class=\"n\">inStream</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InputStreamReader</span><span class=\"o\">(</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">getInputStream</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">in</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BufferedReader</span><span class=\"o\">(</span><span class=\"n\">inStream</span><span class=\"o\">)</span>\n      <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">)</span>\n      <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>おくってみます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>scala hello.scala\n</pre></div></div><p>とどきます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>nc -lk 9999\nhello\n</pre></div></div><p>もしかしたら便利なときがあるかもしれない。</p>\n",
        "stock_users": [
            "techno-tanoC",
            "kasumani",
            "dododo",
            "suin",
            "Reds"
        ]
    },
    {
        "id": 112551,
        "uuid": "2a8f4263a96cb11c46db",
        "user": {
            "id": 18700,
            "url_name": "544",
            "profile_image_url": "https://secure.gravatar.com/avatar/6a15473b33ef974ab005f61d52354907?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "Scalaで手っ取り早くHelloWorld",
        "created_at": "2014-08-18 18:48:08 +0900",
        "updated_at": "2014-08-18 18:48:08 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/544/items/2a8f4263a96cb11c46db",
        "created_at_as_seconds": 1408355288,
        "tweet": false,
        "gist_url": "https://gist.github.com/2ef5473828e0f61d3c6a",
        "private": false,
        "raw_body": "\nClassとか作るのめんどい場合、Appトレイトを継承したシングルトンobjectを使えばよい\n\n```HelloWorldApp.scala\nobject HelloWorldApp extends App {\n  val name:String = if (args.length > 0) args(0) else \"World\";\n  println (\"Hello %s\".format(name))\n}\n\nHelloWorldApp.main(args)\n```\n\n行末でmainを呼ばないと`scala`コマンドに食わせた時に実行してくれない。\n\n実行してみる。\n\n```\n[masato] $ scala HelloWorldApp.scala Hoge\nHello Hoge\n```\n",
        "body": "<p>Classとか作るのめんどい場合、Appトレイトを継承したシングルトンobjectを使えばよい</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">HelloWorldApp.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">HelloWorldApp</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">name</span><span class=\"k\">:</span><span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">args</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"s\">&quot;World&quot;</span><span class=\"o\">;</span>\n  <span class=\"n\">println</span> <span class=\"o\">(</span><span class=\"s\">&quot;Hello %s&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">HelloWorldApp</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span>\n</pre></div></div><p>行末でmainを呼ばないと<code>scala</code>コマンドに食わせた時に実行してくれない。</p>\n<p>実行してみる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>[masato] $ scala HelloWorldApp.scala Hoge\nHello Hoge\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "poad1010",
            "Reds"
        ]
    },
    {
        "id": 110203,
        "uuid": "67fdbf8293edc0200444",
        "user": {
            "id": 14950,
            "url_name": "mather314",
            "profile_image_url": "https://secure.gravatar.com/avatar/3204f6241aaca4a1082bfe1202e60d69"
        },
        "title": "Scalaで型消去を回避する",
        "created_at": "2014-08-13 16:31:33 +0900",
        "updated_at": "2014-08-13 16:31:33 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/mather314/items/67fdbf8293edc0200444",
        "created_at_as_seconds": 1407915093,
        "tweet": true,
        "gist_url": "https://gist.github.com/6e51cc681807f2ed52fa",
        "private": false,
        "raw_body": "\n詳しいことはこちらを参照 => [型タグとマニフェスト](http://docs.scala-lang.org/ja/overviews/reflection/typetags-manifests.html)\n\nクラスや関数で実行時に指定される抽象型の情報は、Javaの型消去により判定できなくなってしまう。\n\n例えば以下のScalaコードでは、型`T`の情報はコンパイル時に消えている。\n\n```scala\nclass A\nclass B extends A\nclass C extends A\n\ndef isType[T <: A](a: A) = a.isInstanceOf[T]\n// <console>:9: warning: abstract type T is unchecked since it is eliminated by erasure\n//        def isType[T <: A](a: A) = a.isInstanceOf[T]\n//                                                 ^\n// isType: [T <: A](a: A)Boolean\n```\n\n型消去により意図しない挙動になる可能性があることは、コンパイル時の警告でチェックできる。\n\n実際に動作させてみても、型の検出はできない。\n\n```\nscala> isType[A](new A)\nres11: Boolean = true\n\nscala> isType[C](new B)\nres12: Boolean = true  // 本当は (new B).isInstanceOf[C] => false\n```\n\n## ClassTagで型情報を保持する\n\nScalaの場合、暗黙のパラメータで型の情報を保持することができる。\n\n```scala\ndef isType[T <: A](a: A)(implicit e: scala.reflect.ClassTag[T]) = e.runtimeClass.isInstance(a)\n//=> isType: [T <: A](a: A)(implicit e: scala.reflect.ClassTag[T])Boolean\n```\n\n処理中に`e.runtimeClass`を使って具体的な `Class[T]` を取得し、リフレクションで型チェックを行っている。\n\n```scala\nscala> isType[C](new B)\nres13: Boolean = false\n```\n\n## context boundを使う\n\n型パラメータ自体に context bound というシンタックスシュガーが用意されている。\n\n```scala\nimport scala.reflect.ClassTag\n\ndef isType[T <: A : ClassTag](a: A) = implicitly[ClassTag[T]].runtimeClass.isInstance(a)\n```\n\n定義している内容としては暗黙のパラメータと同じだが、引数の名前が無く、代わりに暗黙の値を `implicitly` で取得する事ができる。\n\n## パターンマッチに使う\n\n`implicitly` を使って型情報を取得しなくても、パターンマッチで型チェックをすると自動的に処理してくれるようだ。\n\n```scala\nimport scala.reflect.ClassTag\n\ndef isType[T <: A : ClassTag](a: A) = a match {\n  case t: T => true\n  case _ => false\n}\n```\n\n個人的にはこれがシンプルで好み。\n",
        "body": "<p>詳しいことはこちらを参照 =&gt; <a href=\"http://docs.scala-lang.org/ja/overviews/reflection/typetags-manifests.html\" title=\"\" target=\"_blank\">型タグとマニフェスト</a></p>\n<p>クラスや関数で実行時に指定される抽象型の情報は、Javaの型消去により判定できなくなってしまう。</p>\n<p>例えば以下のScalaコードでは、型<code>T</code>の情報はコンパイル時に消えている。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">A</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span> <span class=\"k\">extends</span> <span class=\"n\">A</span>\n<span class=\"k\">class</span> <span class=\"nc\">C</span> <span class=\"k\">extends</span> <span class=\"n\">A</span>\n\n<span class=\"k\">def</span> <span class=\"n\">isType</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">isInstanceOf</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n<span class=\"c1\">// &lt;console&gt;:9: warning: abstract type T is unchecked since it is eliminated by erasure</span>\n<span class=\"c1\">//        def isType[T &lt;: A](a: A) = a.isInstanceOf[T]</span>\n<span class=\"c1\">//                                                 ^</span>\n<span class=\"c1\">// isType: [T &lt;: A](a: A)Boolean</span>\n</pre></div></div><p>型消去により意図しない挙動になる可能性があることは、コンパイル時の警告でチェックできる。</p>\n<p>実際に動作させてみても、型の検出はできない。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>scala&gt; isType[A](new A)\nres11: Boolean = true\n\nscala&gt; isType[C](new B)\nres12: Boolean = true  // 本当は (new B).isInstanceOf[C] =&gt; false\n</pre></div></div><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>ClassTagで型情報を保持する\n      </h2><p>Scalaの場合、暗黙のパラメータで型の情報を保持することができる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">isType</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">scala.reflect.ClassTag</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">runtimeClass</span><span class=\"o\">.</span><span class=\"n\">isInstance</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"c1\">//=&gt; isType: [T &lt;: A](a: A)(implicit e: scala.reflect.ClassTag[T])Boolean</span>\n</pre></div></div><p>処理中に<code>e.runtimeClass</code>を使って具体的な <code>Class[T]</code> を取得し、リフレクションで型チェックを行っている。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">isType</span><span class=\"o\">[</span><span class=\"kt\">C</span><span class=\"o\">](</span><span class=\"k\">new</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"n\">res13</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>context boundを使う\n      </h2><p>型パラメータ自体に context bound というシンタックスシュガーが用意されている。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.reflect.ClassTag</span>\n\n<span class=\"k\">def</span> <span class=\"n\">isType</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span> <span class=\"kt\">:</span> <span class=\"kt\">ClassTag</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">implicitly</span><span class=\"o\">[</span><span class=\"kt\">ClassTag</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]].</span><span class=\"n\">runtimeClass</span><span class=\"o\">.</span><span class=\"n\">isInstance</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div></div><p>定義している内容としては暗黙のパラメータと同じだが、引数の名前が無く、代わりに暗黙の値を <code>implicitly</code> で取得する事ができる。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>パターンマッチに使う\n      </h2><p><code>implicitly</code> を使って型情報を取得しなくても、パターンマッチで型チェックをすると自動的に処理してくれるようだ。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.reflect.ClassTag</span>\n\n<span class=\"k\">def</span> <span class=\"n\">isType</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span> <span class=\"kt\">:</span> <span class=\"kt\">ClassTag</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">a</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">T</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>個人的にはこれがシンプルで好み。</p>\n",
        "stock_users": [
            "mikamix",
            "nabezokodaikon",
            "amayaw9",
            "kasumani",
            "hisazumi",
            "Reds"
        ]
    },
    {
        "id": 109874,
        "uuid": "6b85f387de66e39b964b",
        "user": {
            "id": 5321,
            "url_name": "nojima",
            "profile_image_url": "https://secure.gravatar.com/avatar/66b94608924d43104d25cdb5ff7d96e2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "なぜ implicit conversion を定義するのに import scala.language.implicitConversions が必要なのか",
        "created_at": "2014-08-12 23:53:45 +0900",
        "updated_at": "2014-08-12 23:54:51 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/nojima/items/6b85f387de66e39b964b",
        "created_at_as_seconds": 1407855225,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "implicit conversion を使ったらこんな warning が出たので、理由を調べた。\n\n```txt\n[warn] .../Main.scala:8: implicit conversion method toMyRichString should be enabled\n[warn] by making the implicit value scala.language.implicitConversions visible.\n[warn] This can be achieved by adding the import clause 'import scala.language.implicitConversions'\n[warn] or by setting the compiler option -language:implicitConversions.\n[warn] See the Scala docs for value scala.language.implicitConversions for a discussion\n[warn] why the feature should be explicitly enabled.\n```\n\nググったところ、SIP-18 に理由が書いてあった。\n\nhttps://docs.google.com/document/d/1nlkvpoIRkx7at1qJEZafJwthZ3GeIklTFhqmXMvTX9Q\n\n- implicit conversion の過剰な使用は多くの落とし穴を作ることになる。\n- implicit conversion はとても強力だし、その効果が理解しやすいので、過剰に使われやすい。\n- implicit parameter を使ったほうが implicit conversion を使うよりも多くの場面で良い設計になる。\n\nということで、「使い過ぎないように」というわりと普通な理由だった。\n3番目の implicit parameter を使ったほうが良いっていうのはどういうことだろう…。\n",
        "body": "<p>implicit conversion を使ったらこんな warning が出たので、理由を調べた。</p>\n<div class=\"code-frame\" data-lang=\"txt\"><div class=\"highlight\"><pre>[warn] .../Main.scala:8: implicit conversion method toMyRichString should be enabled\n[warn] by making the implicit value scala.language.implicitConversions visible.\n[warn] This can be achieved by adding the import clause &#39;import scala.language.implicitConversions&#39;\n[warn] or by setting the compiler option -language:implicitConversions.\n[warn] See the Scala docs for value scala.language.implicitConversions for a discussion\n[warn] why the feature should be explicitly enabled.\n</pre></div></div><p>ググったところ、SIP-18 に理由が書いてあった。</p>\n<p><a href=\"https://docs.google.com/document/d/1nlkvpoIRkx7at1qJEZafJwthZ3GeIklTFhqmXMvTX9Q\" title=\"https://docs.google.com/document/d/1nlkvpoIRkx7at1qJEZafJwthZ3GeIklTFhqmXMvTX9Q\" target=\"_blank\">https://docs.google.com/document/d/1nlkvpoIRkx7at1qJEZafJwthZ3GeIklTFhqmXMvTX9Q</a></p>\n\n<ul>\n<li>implicit conversion の過剰な使用は多くの落とし穴を作ることになる。</li>\n<li>implicit conversion はとても強力だし、その効果が理解しやすいので、過剰に使われやすい。</li>\n<li>implicit parameter を使ったほうが implicit conversion を使うよりも多くの場面で良い設計になる。</li>\n</ul>\n<p>ということで、「使い過ぎないように」というわりと普通な理由だった。<br>\n3番目の implicit parameter を使ったほうが良いっていうのはどういうことだろう…。</p>\n",
        "stock_users": [
            "KatsuoBushiFPGA",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 109426,
        "uuid": "b7a25b7e7924f614c930",
        "user": {
            "id": 2570,
            "url_name": "hoxo_m",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1084405786/hoxo_m2_normal.png"
        },
        "title": "Scala で PhantomJS を使う",
        "created_at": "2014-08-12 13:24:39 +0900",
        "updated_at": "2014-08-13 12:48:37 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Selenium",
                "url_name": "selenium",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/92e1ece1d42fcd42e69dfcd3fa980d0d6f7bd7f1/medium.jpg?1403564935",
                "versions": []
            },
            {
                "name": "PhantomJS",
                "url_name": "phantomjs",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e473522a5bf6b21a849b0e5f0ec3c0ad443ffabc/medium.jpg?1385145287",
                "versions": []
            }
        ],
        "stock_count": 7,
        "comment_count": 0,
        "url": "http://qiita.com/hoxo_m/items/b7a25b7e7924f614c930",
        "created_at_as_seconds": 1407817479,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "<del>Selenium と</del> PhantomJS ドライバーを入れるだけ。\n\n```:build.sbt\nname := \"HogeHoge\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.10.3\"\n\nlibraryDependencies += (\"com.github.detro.ghostdriver\" % \"phantomjsdriver\" % \"1.1.0\").\n\t\t\t\t\t\texclude(\"org.seleniumhq.selenium\", \"jetty-repacked\")\n```\n\nあとは FirefoxDriver と同じように扱える。\n\n```scala:main.scala\ndef main(args: Array[String]) {\n    implicit val driver = new PhantomJSDriver()\n\n    driver.get(\"http://google.com\")\n    val file = driver.getScreenshotAs(OutputType.FILE)\n    Files.copy(Paths.get(file.toURI), Paths.get(file.getName))\n\n    driver.quit()\n}\n```\n\n結果\n\n![screenshot1875077328556248451.png](https://qiita-image-store.s3.amazonaws.com/0/2570/43f0416b-cad2-f4f3-67a3-92c540e998d3.png)\n\nちょうかんたん！\n",
        "body": "<p><del>Selenium と</del> PhantomJS ドライバーを入れるだけ。</p>\n<div class=\"code-frame\" data-lang=\"\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"vg\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">&quot;HogeHoge&quot;</span>\n\n<span class=\"vg\">version</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">&quot;0.1&quot;</span>\n\n<span class=\"vg\">scalaVersion</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">&quot;2.10.3&quot;</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">&quot;com.github.detro.ghostdriver&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;phantomjsdriver&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;1.1.0&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"w\">                        </span><span class=\"vg\">exclude</span><span class=\"p\">(</span><span class=\"s2\">&quot;org.seleniumhq.selenium&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;jetty-repacked&quot;</span><span class=\"p\">)</span>\n</pre></div></div><p>あとは FirefoxDriver と同じように扱える。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">main.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n    <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">driver</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PhantomJSDriver</span><span class=\"o\">()</span>\n\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"s\">&quot;http://google.com&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">file</span> <span class=\"k\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">getScreenshotAs</span><span class=\"o\">(</span><span class=\"nc\">OutputType</span><span class=\"o\">.</span><span class=\"nc\">FILE</span><span class=\"o\">)</span>\n    <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">toURI</span><span class=\"o\">),</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">getName</span><span class=\"o\">))</span>\n\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>結果</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/2570/43f0416b-cad2-f4f3-67a3-92c540e998d3.png\" title=\"\" alt=\"screenshot1875077328556248451.png\"></img></p>\n<p>ちょうかんたん！</p>\n",
        "stock_users": [
            "hiraiva@github",
            "q1701",
            "jawssame7",
            "kasumani",
            "kumazo@github",
            "Reds",
            "akmiyoshi"
        ]
    },
    {
        "id": 109358,
        "uuid": "550973a07ff6b11569ca",
        "user": {
            "id": 37576,
            "url_name": "astrsk_saki",
            "profile_image_url": "https://secure.gravatar.com/avatar/ea72ce374ac1d39eb6ea1e4aeb2417da"
        },
        "title": "macのEclipse(Luna)でScalaの環境を作ってみた。",
        "created_at": "2014-08-12 11:28:28 +0900",
        "updated_at": "2014-08-12 11:41:44 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.2"
                ]
            },
            {
                "name": "Scala-IDE",
                "url_name": "scala-ide",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "nightly"
                ]
            },
            {
                "name": "Eclipse",
                "url_name": "eclipse",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/ccf32cbcb30733164a0ea2331e24dacf1c2a3cf1/medium.jpg?1398264070",
                "versions": [
                    "luna"
                ]
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/astrsk_saki/items/550973a07ff6b11569ca",
        "created_at_as_seconds": 1407810508,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "###Java6の環境がいらないなら、\nhttp://blog.irgaly.net/2014/03/23/uninstall-apple-java6/\nを参考に削除。\n\n##JDKのダウンロード\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\njdk-8u11-macosx-x64.dmg       217,918,294バイト\n\n##Eclipseのダウンロード\nhttp://www.eclipse.org/downloads/\neclipse-jee-luna-R-macosx-cocoa-x86_64.tar\nを解凍してアプリケーションフォルダーに移動\n\n##Scalaのダウンロード\nhttp://www.scala-lang.org/download/\nscala-2.11.2.tarを解凍して適当なフォルダーに移動\n\n##環境変数を設定（.bash_profile）\nexport SCALA_HOME=/path/to/scala\nexport PATH=$PATH:$SCALA_HOME/bin\n\n\n##EclipseにScala IDE for Eclipseをインストール\nHelp→Install New Software...\naddで\nhttp://download.scala-ide.org/nightly-scala-ide-luna-211x\nを追加\n\n出てきたものすべてをインストール\n\nEclipseを再起動\n\nもしかしたら、EclipseのJREとかの設定が必要かも。\n\n\n##HelloWorld\n\nScalaプロジェクトを作成して\nsrcにScalaObjectでファイル作成\n\n```scala:Main.scala\nobject Main {\n  def main(args: Array[String]) = {\n    println(\"Hello World\")\n  }\n}\n```\n\nコンソールに出力されればOK。\n",
        "body": "<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>Java6の環境がいらないなら、\n      </h3><p><a href=\"http://blog.irgaly.net/2014/03/23/uninstall-apple-java6/\" title=\"http://blog.irgaly.net/2014/03/23/uninstall-apple-java6/\" target=\"_blank\">http://blog.irgaly.net/2014/03/23/uninstall-apple-java6/</a><br>\nを参考に削除。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>JDKのダウンロード\n      </h2><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" title=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>\njdk-8u11-macosx-x64.dmg       217,918,294バイト</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Eclipseのダウンロード\n      </h2><p><a href=\"http://www.eclipse.org/downloads/\" title=\"http://www.eclipse.org/downloads/\" target=\"_blank\">http://www.eclipse.org/downloads/</a><br>\neclipse-jee-luna-R-macosx-cocoa-x86_64.tar<br>\nを解凍してアプリケーションフォルダーに移動</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Scalaのダウンロード\n      </h2><p><a href=\"http://www.scala-lang.org/download/\" title=\"http://www.scala-lang.org/download/\" target=\"_blank\">http://www.scala-lang.org/download/</a><br>\nscala-2.11.2.tarを解凍して適当なフォルダーに移動</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>環境変数を設定（.bash_profile）\n      </h2><p>export SCALA_HOME=/path/to/scala<br>\nexport PATH=$PATH:$SCALA_HOME/bin</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>EclipseにScala IDE for Eclipseをインストール\n      </h2><p>Help→Install New Software...<br>\naddで<br>\n<a href=\"http://download.scala-ide.org/nightly-scala-ide-luna-211x\" title=\"http://download.scala-ide.org/nightly-scala-ide-luna-211x\" target=\"_blank\">http://download.scala-ide.org/nightly-scala-ide-luna-211x</a><br>\nを追加</p>\n<p>出てきたものすべてをインストール</p>\n<p>Eclipseを再起動</p>\n<p>もしかしたら、EclipseのJREとかの設定が必要かも。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>HelloWorld\n      </h2><p>Scalaプロジェクトを作成して<br>\nsrcにScalaObjectでファイル作成</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Main.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello World&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>コンソールに出力されればOK。</p>\n",
        "stock_users": [
            "schigy",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 109231,
        "uuid": "85e61f8d26404b623f29",
        "user": {
            "id": 7196,
            "url_name": "jwhaco",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1868575677/503393_normal.png"
        },
        "title": "Scala で trait のファクトリを生成してくれるマクロ",
        "created_at": "2014-08-12 03:11:58 +0900",
        "updated_at": "2014-08-13 01:05:01 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.2"
                ]
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/jwhaco/items/85e61f8d26404b623f29",
        "created_at_as_seconds": 1407780718,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "を書きました。\n\n##たとえば\n\nこんな trait があるときに\n\n```scala\ntrait Sample{\n  def value1: Int\n  def value2: String\n  def value3: List[String]\n}\n```\n\nこんなふうに書けるようになります\n\n```scala\ndef Sample = Factory[Sample]\nval x = Sample(\n  value1 = 123,\n  value2 = \"hello\",\n  value3 = List(\"abc\")\n)\nx.value2//hello\n```\n\n##継承していても\n\nこんな trait に対して\n\n```scala\ntrait SubSample extends Sample with SampleTrait{\n  def value4: Double\n}\ntrait SampleTrait {\n  def value5: Int\n}\n```\n\n同じように書けます\n\n```scala\ndef SubSample = Factory[SubSample]\nval x = SubSample(\n  value1 = 345,\n  value2 = \"world\",\n  value3 = List(\"def\"),\n  value4 = 1.23,\n  value5 = 567\n)\nx.value5//567\n```\n\nベンリですね\n\n##やってること\n\n[github : Salad.scala](https://github.com/x7c1/Salad/blob/master/src/main/scala/x7c1/salad/Salad.scala)\n\n```scala\nimport scala.language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject Salad {\n  def Factory[A]: Any = macro SaladImpl.factory[A]\n}\nobject SaladImpl {\n  def factory[A: c.WeakTypeTag](c: Context) = {\n    import c.universe._\n\n    val klass = weakTypeOf[A]\n    val pairs = for {\n      member <- klass.members if member.isMethod && member.isAbstract\n      method = member.asMethod\n    } yield {\n      method.name -> method.info.finalResultType\n    }\n    val inner = {\n      val tuples = pairs.zipWithIndex.map{ case ((term, _), index) =>\n        term -> TermName(\"$x\" + index)\n      }\n      val values = tuples.map{ case (term, tmp) =>\n        q\"val $tmp = $term\"\n      }\n      val methods = tuples.map{ case (term, tmp) =>\n        q\"def $term = $tmp\"\n      }\n      q\"{ ..$values; new $klass { ..$methods } }\"\n    }\n    val parameters = pairs.map{ case (term, resultType) =>\n      q\"$term:$resultType\"\n    }\n    q\"new { def apply(..$parameters) = $inner }\"\n  }\n}\n```\n\n##だめなところ\n\n* 多相に対応してない\n    * `trait Sample[A]` みたいなのが無理\n        * だれか教えてください\n* まだ whitebox macro はしばらく experimental 扱い\n    * [Blackbox and whitebox macros](http://docs.scala-lang.org/overviews/macros/blackbox-whitebox.html)\n        * 仕様が変わって将来つかえなくなる可能性アリ\n* Intellij さんも真っ赤\n    * 引数名の補完効かない\n\nｶﾅｼｽ\n\n##参考\n\n* [Def Macros](http://docs.scala-lang.org/overviews/macros/overview.html)\n* [Quasiquotes](http://docs.scala-lang.org/overviews/quasiquotes/intro.html)\n",
        "body": "<p>を書きました。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>たとえば\n      </h2><p>こんな trait があるときに</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Sample</span><span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">value1</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>\n  <span class=\"k\">def</span> <span class=\"n\">value2</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n  <span class=\"k\">def</span> <span class=\"n\">value3</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>こんなふうに書けるようになります</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nc\">Sample</span> <span class=\"k\">=</span> <span class=\"nc\">Factory</span><span class=\"o\">[</span><span class=\"kt\">Sample</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"nc\">Sample</span><span class=\"o\">(</span>\n  <span class=\"n\">value1</span> <span class=\"k\">=</span> <span class=\"mi\">123</span><span class=\"o\">,</span>\n  <span class=\"n\">value2</span> <span class=\"k\">=</span> <span class=\"s\">&quot;hello&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">value3</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"s\">&quot;abc&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value2</span><span class=\"c1\">//hello</span>\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>継承していても\n      </h2><p>こんな trait に対して</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">SubSample</span> <span class=\"k\">extends</span> <span class=\"nc\">Sample</span> <span class=\"k\">with</span> <span class=\"nc\">SampleTrait</span><span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">value4</span><span class=\"k\">:</span> <span class=\"kt\">Double</span>\n<span class=\"o\">}</span>\n<span class=\"k\">trait</span> <span class=\"nc\">SampleTrait</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">value5</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>同じように書けます</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nc\">SubSample</span> <span class=\"k\">=</span> <span class=\"nc\">Factory</span><span class=\"o\">[</span><span class=\"kt\">SubSample</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"nc\">SubSample</span><span class=\"o\">(</span>\n  <span class=\"n\">value1</span> <span class=\"k\">=</span> <span class=\"mi\">345</span><span class=\"o\">,</span>\n  <span class=\"n\">value2</span> <span class=\"k\">=</span> <span class=\"s\">&quot;world&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">value3</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"s\">&quot;def&quot;</span><span class=\"o\">),</span>\n  <span class=\"n\">value4</span> <span class=\"k\">=</span> <span class=\"mf\">1.23</span><span class=\"o\">,</span>\n  <span class=\"n\">value5</span> <span class=\"k\">=</span> <span class=\"mi\">567</span>\n<span class=\"o\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value5</span><span class=\"c1\">//567</span>\n</pre></div></div><p>ベンリですね</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>やってること\n      </h2><p><a href=\"https://github.com/x7c1/Salad/blob/master/src/main/scala/x7c1/salad/Salad.scala\" title=\"\" target=\"_blank\">github : Salad.scala</a></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.language.experimental.macros</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.reflect.macros.whitebox.Context</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Salad</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nc\">Factory</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span><span class=\"k\">:</span> <span class=\"kt\">Any</span> <span class=\"o\">=</span> <span class=\"n\">macro</span> <span class=\"nc\">SaladImpl</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"k\">object</span> <span class=\"nc\">SaladImpl</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">factory</span><span class=\"o\">[</span><span class=\"kt\">A:</span> <span class=\"kt\">c.WeakTypeTag</span><span class=\"o\">](</span><span class=\"n\">c</span><span class=\"k\">:</span> <span class=\"kt\">Context</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">import</span> <span class=\"nn\">c.universe._</span>\n\n    <span class=\"k\">val</span> <span class=\"n\">klass</span> <span class=\"k\">=</span> <span class=\"n\">weakTypeOf</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n    <span class=\"k\">val</span> <span class=\"n\">pairs</span> <span class=\"k\">=</span> <span class=\"k\">for</span> <span class=\"o\">{</span>\n      <span class=\"n\">member</span> <span class=\"k\">&lt;-</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">members</span> <span class=\"k\">if</span> <span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">isMethod</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">isAbstract</span>\n      <span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">asMethod</span>\n    <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">{</span>\n      <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">-&gt;</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">finalResultType</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">val</span> <span class=\"n\">inner</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">tuples</span> <span class=\"k\">=</span> <span class=\"n\">pairs</span><span class=\"o\">.</span><span class=\"n\">zipWithIndex</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"o\">((</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">),</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">term</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">TermName</span><span class=\"o\">(</span><span class=\"s\">&quot;$x&quot;</span> <span class=\"o\">+</span> <span class=\"n\">index</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">val</span> <span class=\"n\">values</span> <span class=\"k\">=</span> <span class=\"n\">tuples</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">q</span><span class=\"s\">&quot;val $tmp = $term&quot;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">val</span> <span class=\"n\">methods</span> <span class=\"k\">=</span> <span class=\"n\">tuples</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">tmp</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">q</span><span class=\"s\">&quot;def $term = $tmp&quot;</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">q</span><span class=\"s\">&quot;{ ..$values; new $klass { ..$methods } }&quot;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">val</span> <span class=\"n\">parameters</span> <span class=\"k\">=</span> <span class=\"n\">pairs</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">resultType</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">q</span><span class=\"s\">&quot;$term:$resultType&quot;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">q</span><span class=\"s\">&quot;new { def apply(..$parameters) = $inner }&quot;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>だめなところ\n      </h2>\n<ul>\n<li>多相に対応してない\n\n<ul>\n<li><code>trait Sample[A]</code> みたいなのが無理\n\n<ul>\n<li>だれか教えてください</li>\n</ul></li>\n</ul></li>\n<li>まだ whitebox macro はしばらく experimental 扱い\n\n<ul>\n<li><a href=\"http://docs.scala-lang.org/overviews/macros/blackbox-whitebox.html\" title=\"\" target=\"_blank\">Blackbox and whitebox macros</a>\n\n<ul>\n<li>仕様が変わって将来つかえなくなる可能性アリ</li>\n</ul></li>\n</ul></li>\n<li>Intellij さんも真っ赤\n\n<ul>\n<li>引数名の補完効かない</li>\n</ul></li>\n</ul>\n<p>ｶﾅｼｽ</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>参考\n      </h2>\n<ul>\n<li><a href=\"http://docs.scala-lang.org/overviews/macros/overview.html\" title=\"\" target=\"_blank\">Def Macros</a></li>\n<li><a href=\"http://docs.scala-lang.org/overviews/quasiquotes/intro.html\" title=\"\" target=\"_blank\">Quasiquotes</a></li>\n</ul>\n",
        "stock_users": [
            "kasumani",
            "Reds",
            "yodatomato"
        ]
    },
    {
        "id": 108335,
        "uuid": "a82c24e0d0522d01ad49",
        "user": {
            "id": 3985,
            "url_name": "futoase",
            "profile_image_url": "https://secure.gravatar.com/avatar/492da7e022786a647bf0a1efb28db3f8?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "【個人メモ】SprayベースのS4テンプレートを試す - Scala -",
        "created_at": "2014-08-10 16:11:56 +0900",
        "updated_at": "2014-08-10 16:11:56 +0900",
        "created_at_in_words": "約1ヶ月",
        "updated_at_in_words": "約1ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11"
                ]
            },
            {
                "name": "spray",
                "url_name": "spray",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Akka",
                "url_name": "akka",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/futoase/items/a82c24e0d0522d01ad49",
        "created_at_as_seconds": 1407654716,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# Scalaを学びたい\n\nScala、学びたいなあ、どうせ来年になったら必要な気がしまくるし(大規模になったRoR製サービスの分割、扱いの代替とか)...と思い、\n[Spray](http://spray.io/)というものを知った。けどテンプレートエンジンが使われてるテンプレートがほしい、と思って探したら[S4](https://github.com/jacobus/s4)というものを見つけた。\n\n# Sprayテンプレート\n\nSprayを使ってアプリを書くために\nテンプレートがgithubリポジトリにあがってて、\nそのサンプルを元にアプリケーションを書けるようになっている。\n\nたとえば、これ。\n\n[spray-template](https://github.com/spray/spray-template)\n\n# でも物足りないから、S4を使いたい...\n\nspray-templateでも良いのだけど、\nテンプレートエンジンが無い、のとDBOもない。\n揃ってるテンプレート無いのかなと思って探して、\n[S4(Spray Slick Starter Stack)テンプレート](https://github.com/jacobus/s4)を見つけた。\n\n# 試しに使ってみる\n\nMac OS X上で試しに使っていく。\n\n## 事前に必要なアプリ、ソフトウェア\n\n- homebrew\n- sbt\n- scala\n- postgresql\n\n以上。\n\n## sbt, scalaのインストール\n\n```\n> brew install scala\n> brew install sbt\n```\n\n## postresqlのインストール・セットアップ\n\nS4テンプレートではpostgresqlを利用しているので、\nセットアップを行う。とりあえず動かしたいので。\n\n```\n> brew install postgresql\n```\n\n### postgresqlサーバの立ち上げ\n\n```\n> postgres -D /usr/local/var/postgre\n```\n\n### databaseの作成\n\n```\n> createdb s4\n```\n\n### ユーザーの作成\n\n- パスワードはs4とする\n\n```\n> createuser s4 -P\n```\n\n### 接続確認\n\n```\n> psql -U s4\n```\n\n### アプリ側の準備\n\n作成したDBに接続するため、\nDBConfig.scalaの内容を変更する\n\n```scala:DBConfig.scala\ntrait ProductionDB extends DBConfig {\n  val m = new Model(\"PostgreSQL\", new DAL(PostgresDriver),\n    Database.forURL(\"jdbc:postgresql://localhost/s4\",\n                           driver=\"org.postgresql.Driver\",\n                           user=\"s4\",\n                           password=\"s4\"))\n  m.createDB\n}\n```\n\n# s4テンプレートアプリの立ち上げ\n\ns4のRootディレクトリで\nsbtコマンドを実行し、runコマンドを実行する。\n\n```\n> git clone git@github.com:jacobus/s4.git\n> cd ~/s4\n> sbt\n> run\n```\n\n# サンプル動作テスト\n\n## 画像アップロードを試す\n\ncurlコマンドで適当な画像をs4テンプレートアプリに対して\nPOSTする。\n\n```\n> curl -i -F \"imageupload=@yuruyuri.jpg\" http://127.0.0.1:8080/upload\n```\n\nすると、s4テンプレートのRootディレクトリにtest.pngファイルが作成される。\n\n## personを追加する\n\nPersonを追加するテストをする。\n...といってもcurlで叩くだけだけど。\n\n```\ncurl --user bob:123 -X POST -H 'Content-Type: application/json' http://localhost:8080/person -d '{\"fname\": \"hoge\", \"lname\": \"fuga\"}'\n```\n\nBasic認証のユーザ名、パスワードは\n[ここ](https://github.com/jacobus/s4/blob/master/src/main/scala/s4/rest/S4Service.scala#L51)に書かれてる。\n\n## personを取得する\n\n先ほど追加したpersonを取得してみる。\n\n```\n> curl http://localhost:8080/persons\n[{\n  \"fname\": \"hoge\",\n  \"lname\": \"fuga\",\n  \"id\": 1\n}]\n```\n\n# Playframeworkのがいいのかもしれないが...\n\n興味を持ったものなので、触っていく。\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>Scalaを学びたい\n      </h1><p>Scala、学びたいなあ、どうせ来年になったら必要な気がしまくるし(大規模になったRoR製サービスの分割、扱いの代替とか)...と思い、<br>\n<a href=\"http://spray.io/\" title=\"\" target=\"_blank\">Spray</a>というものを知った。けどテンプレートエンジンが使われてるテンプレートがほしい、と思って探したら<a href=\"https://github.com/jacobus/s4\" title=\"\" target=\"_blank\">S4</a>というものを見つけた。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>Sprayテンプレート\n      </h1><p>Sprayを使ってアプリを書くために<br>\nテンプレートがgithubリポジトリにあがってて、<br>\nそのサンプルを元にアプリケーションを書けるようになっている。</p>\n<p>たとえば、これ。</p>\n<p><a href=\"https://github.com/spray/spray-template\" title=\"\" target=\"_blank\">spray-template</a></p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>でも物足りないから、S4を使いたい...\n      </h1><p>spray-templateでも良いのだけど、<br>\nテンプレートエンジンが無い、のとDBOもない。<br>\n揃ってるテンプレート無いのかなと思って探して、<br>\n<a href=\"https://github.com/jacobus/s4\" title=\"\" target=\"_blank\">S4(Spray Slick Starter Stack)テンプレート</a>を見つけた。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>試しに使ってみる\n      </h1><p>Mac OS X上で試しに使っていく。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>事前に必要なアプリ、ソフトウェア\n      </h2>\n<ul>\n<li>homebrew</li>\n<li>sbt</li>\n<li>scala</li>\n<li>postgresql</li>\n</ul>\n<p>以上。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>sbt, scalaのインストール\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; brew install scala\n&gt; brew install sbt\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>postresqlのインストール・セットアップ\n      </h2><p>S4テンプレートではpostgresqlを利用しているので、<br>\nセットアップを行う。とりあえず動かしたいので。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; brew install postgresql\n</pre></div></div><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>postgresqlサーバの立ち上げ\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; postgres -D /usr/local/var/postgre\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>databaseの作成\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; createdb s4\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>ユーザーの作成\n      </h3>\n<ul>\n<li>パスワードはs4とする</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; createuser s4 -P\n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>接続確認\n      </h3><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; psql -U s4\n</pre></div></div><h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>アプリ側の準備\n      </h3><p>作成したDBに接続するため、<br>\nDBConfig.scalaの内容を変更する</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">DBConfig.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">ProductionDB</span> <span class=\"k\">extends</span> <span class=\"nc\">DBConfig</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">m</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Model</span><span class=\"o\">(</span><span class=\"s\">&quot;PostgreSQL&quot;</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">DAL</span><span class=\"o\">(</span><span class=\"nc\">PostgresDriver</span><span class=\"o\">),</span>\n    <span class=\"nc\">Database</span><span class=\"o\">.</span><span class=\"n\">forURL</span><span class=\"o\">(</span><span class=\"s\">&quot;jdbc:postgresql://localhost/s4&quot;</span><span class=\"o\">,</span>\n                           <span class=\"n\">driver</span><span class=\"o\">=</span><span class=\"s\">&quot;org.postgresql.Driver&quot;</span><span class=\"o\">,</span>\n                           <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s\">&quot;s4&quot;</span><span class=\"o\">,</span>\n                           <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s\">&quot;s4&quot;</span><span class=\"o\">))</span>\n  <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">createDB</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>s4テンプレートアプリの立ち上げ\n      </h1><p>s4のRootディレクトリで<br>\nsbtコマンドを実行し、runコマンドを実行する。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; git clone git@github.com:jacobus/s4.git\n&gt; cd ~/s4\n&gt; sbt\n&gt; run\n</pre></div></div><h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>サンプル動作テスト\n      </h1><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>画像アップロードを試す\n      </h2><p>curlコマンドで適当な画像をs4テンプレートアプリに対して<br>\nPOSTする。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; curl -i -F &quot;imageupload=@yuruyuri.jpg&quot; http://127.0.0.1:8080/upload\n</pre></div></div><p>すると、s4テンプレートのRootディレクトリにtest.pngファイルが作成される。</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>personを追加する\n      </h2><p>Personを追加するテストをする。<br>\n...といってもcurlで叩くだけだけど。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>curl --user bob:123 -X POST -H &#39;Content-Type: application/json&#39; http://localhost:8080/person -d &#39;{&quot;fname&quot;: &quot;hoge&quot;, &quot;lname&quot;: &quot;fuga&quot;}&#39;\n</pre></div></div><p>Basic認証のユーザ名、パスワードは<br>\n<a href=\"https://github.com/jacobus/s4/blob/master/src/main/scala/s4/rest/S4Service.scala#L51\" title=\"\" target=\"_blank\">ここ</a>に書かれてる。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>personを取得する\n      </h2><p>先ほど追加したpersonを取得してみる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&gt; curl http://localhost:8080/persons\n[{\n  &quot;fname&quot;: &quot;hoge&quot;,\n  &quot;lname&quot;: &quot;fuga&quot;,\n  &quot;id&quot;: 1\n}]\n</pre></div></div><h1>\n        <span id=\"1-7\" class=\"fragment\"></span>\n        <a href=\"#1-7\"><i class=\"fa fa-link\"></i></a>Playframeworkのがいいのかもしれないが...\n      </h1><p>興味を持ったものなので、触っていく。</p>\n",
        "stock_users": [
            "chck",
            "satoshihirose",
            "lamblamp",
            "maestro",
            "Reds",
            "kasumani"
        ]
    },
    {
        "id": 107629,
        "uuid": "ac9b0f91bf919e788a31",
        "user": {
            "id": 2570,
            "url_name": "hoxo_m",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1084405786/hoxo_m2_normal.png"
        },
        "title": "Selenium と Apache POI を同時に使うのに苦労したからメモっておく",
        "created_at": "2014-08-08 19:04:13 +0900",
        "updated_at": "2014-08-08 19:32:28 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Selenium",
                "url_name": "selenium",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/92e1ece1d42fcd42e69dfcd3fa980d0d6f7bd7f1/medium.jpg?1403564935",
                "versions": []
            },
            {
                "name": "POI",
                "url_name": "poi",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/hoxo_m/items/ac9b0f91bf919e788a31",
        "created_at_as_seconds": 1407492253,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "```:build.sbt\nname := \"HogeHoge\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.10.3\"\n\nlibraryDependencies += \"org.seleniumhq.selenium\" % \"selenium-java\" % \"2.42.2\"\n\nlibraryDependencies += \"com.typesafe\" % \"scalalogging-slf4j_2.10\" % \"1.1.0\"\n\nlibraryDependencies += \"org.slf4j\" % \"slf4j-api\" % \"1.7.7\"\n\nlibraryDependencies += \"ch.qos.logback\" % \"logback-classic\" % \"1.1.2\"\n\nlibraryDependencies += (\"org.apache.poi\" % \"poi-ooxml\" % \"3.10-FINAL\").\n\t\t\t\t\t\texclude(\"stax\", \"stax-api\").\n\t\t\t\t\t\texclude(\"org.apache.xmlbeans\", \"xmlbeans\")\n\t\t\t\t\t\t\nlibraryDependencies += (\"org.apache.xmlbeans\" % \"xmlbeans\" % \"2.6.0\").\n\t\t\t\t\t\texclude(\"stax\", \"stax-api\")\n```\n\nこれでようやく sbt-assembly が通るようになった。\n",
        "body": "<div class=\"code-frame\" data-lang=\"\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"vg\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">&quot;HogeHoge&quot;</span>\n\n<span class=\"vg\">version</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">&quot;0.1&quot;</span>\n\n<span class=\"vg\">scalaVersion</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">&quot;2.10.3&quot;</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"s2\">&quot;org.seleniumhq.selenium&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;selenium-java&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;2.42.2&quot;</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"s2\">&quot;com.typesafe&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;scalalogging-slf4j_2.10&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;1.1.0&quot;</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"s2\">&quot;org.slf4j&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;slf4j-api&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;1.7.7&quot;</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"s2\">&quot;ch.qos.logback&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;logback-classic&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;1.1.2&quot;</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">&quot;org.apache.poi&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;poi-ooxml&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;3.10-FINAL&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"w\">                        </span><span class=\"vg\">exclude</span><span class=\"p\">(</span><span class=\"s2\">&quot;stax&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;stax-api&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"w\">                        </span><span class=\"vg\">exclude</span><span class=\"p\">(</span><span class=\"s2\">&quot;org.apache.xmlbeans&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;xmlbeans&quot;</span><span class=\"p\">)</span>\n\n<span class=\"vg\">libraryDependencies</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">&quot;org.apache.xmlbeans&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;xmlbeans&quot;</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"s2\">&quot;2.6.0&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"w\">                        </span><span class=\"vg\">exclude</span><span class=\"p\">(</span><span class=\"s2\">&quot;stax&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;stax-api&quot;</span><span class=\"p\">)</span>\n</pre></div></div><p>これでようやく sbt-assembly が通るようになった。</p>\n",
        "stock_users": [
            "kasumani",
            "selious",
            "rentalname@github",
            "poad1010",
            "Reds"
        ]
    },
    {
        "id": 105928,
        "uuid": "178c6a274055d0139415",
        "user": {
            "id": 44745,
            "url_name": "kukita",
            "profile_image_url": "https://pbs.twimg.com/profile_images/2822189342/8f4f7c67338f639a021767c95a15ca4a_normal.png"
        },
        "title": "【#Play】続・Play Framework 2.3 (Scala) を使った Web システム開発入門 #Play_ja #Scala #rpscala",
        "created_at": "2014-08-06 18:07:54 +0900",
        "updated_at": "2014-08-07 19:20:18 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            },
            {
                "name": "Play2",
                "url_name": "play2",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f8d7c0088c04def66debcfcc9915914dc2c11df/medium.jpg?1364840479",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            }
        ],
        "stock_count": 10,
        "comment_count": 0,
        "url": "http://qiita.com/kukita/items/178c6a274055d0139415",
        "created_at_as_seconds": 1407316074,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "Play Framework 2.3.x と Scala を使った Web システム開発について勉強した際の内容を自分用のメモとしてまとめました。\n\nこの記事は、[【#Play】Play Framework 2.3 (Scala) を使った Web システム開発入門](http://qiita.com/kukita/items/6326f1439abec013a479) の続きです。\n\n「顧客情報の登録/検索/更新/削除」、「商品情報の登録/検索/更新/削除」、そして、「受注登録」を行うための簡単な 受注管理システムを作成することを目指します。\n\n## 3: 「商品情報管理」機能の実装\n\n前回までの部分で 「顧客情報管理」 機能の実装が完了しました。\n\n同じ要領で 「商品情報管理」 機能を実装していくとともに、Home ページが  「Hello World」 のままなのでこれを修正していきます。\n\n### 手順 3-1: ファイル `app/controllers/Application.scala` を編集します\n\n```scala:app/controllers/Application.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\nobject Application extends Controller {\n\n  def index = Action {\n    Ok(views.html.index())\n  }\n\n}\n\n```\n\n### 手順 3-2: ファイル `app/views/index.scala.html` を編集します\n\n```html:app/views/index.scala.html\n@main(title = \"受発注管理システム\") {\n \n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n      <ul class=\"nav nav-tabs nav-stacked\">\n        <li><h2>顧客情報管理</h2></a></li>\n        <li><a href=\"/customers/search\"><h2>顧客情報一覧（検索/更新/削除）</h2></a></li>\n        <li><a href=\"/customers/create\"><h2>顧客情報登録</h2></a></li>\n        <li><h2>商品情報管理</h2></a></li>\n        <li><a href=\"/items/search\"><h2>商品情報一覧（検索/更新/削除）</h2></a></li>\n        <li><a href=\"/items/create\"><h2>商品情報登録</h2></a></li>\n        <li><h2>受注管理</h2></a></li>\n        <li><a href=\"/orderings/search\"><h2>受注情報一覧（検索/削除）</h2></a></li>\n        <li><a href=\"/orderings/create\"><h2>受注登録</h2></a></li>\n      </ul>\n    </div>\n  </div>\n</div>\n}\n\n```\n\nホームページには、各画面へのリンクの一覧を表示することにします。\n\n### 手順 3-3: ファイル `app/views/header.scala.html` を編集します\n\n```html:app/views/header.scala.html\n<div class=\"navbar navbar-inverse navbar-static-top\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\" href=\"/\">受注管理システム</a>\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n    </div>\n    <div class=\"navbar-collapse collapse\">\n      <ul class=\"nav navbar-nav\" role=\"menu\">\n        <li class=\"dropdown\"><a class=\"dropdown-toggle\" data-toggle=\"dropdown\">顧客情報管理</a>\n          <ul class=\"dropdown-menu\">\n            <li><a role=\"menuitem\" href=\"/customers/search\">顧客情報一覧（検索/更新/削除）</a></li>\n            <li><a role=\"menuitem\" href=\"/customers/create\">顧客情報登録</a></li>\n          </ul>\n        </li>\n        <li class=\"dropdown\"><a class=\"dropdown-toggle\" data-toggle=\"dropdown\">商品情報管理</a>\n          <ul class=\"dropdown-menu\">\n            <li><a href=\"/items/search\">商品情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/items/create\">商品情報登録</a></li>\n          </ul>\n        </li>\n        <li class=\"dropdown\"><a class=\"dropdown-toggle\" data-toggle=\"dropdown\">受注管理</a>\n          <ul class=\"dropdown-menu\">\n            <li><a href=\"/orderings/search\">受注情報一覧（検索/削除）</a></li>\n            <li><a href=\"/orderings/create\">受注登録</a></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n\n```\n\nヘッダー部分のメニューに「商品情報管理」機能、「受注管理」機能を追加します。\n\n### 手順 3-4: ブラウザで、`http://localhost:9000/` にアクセスしホームページが表示されることを確かめます\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180215.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\nホームページが出来上がりました。続いて 「商品情報管理」 機能を実装していきます。\n\n### 手順 3-5: ファイル `conf/route` を編集します\n\n```scala:conf/route\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# Home page\nGET     /                           controllers.Application.index\n\n# Map static resources from the /public folder to the /assets URL path\nGET     /assets/*file               controllers.Assets.at(path=\"/public\", file)\n\n#\n# Customers Management\n#\n\n# Create customer infomation.\nGET     /customers/create           controllers.CustomerController.showCreateForm()\nPOST    /customers/create           controllers.CustomerController.create()\n\n# Search customer infomation.\nGET     /customers/search           controllers.CustomerController.search(word: String ?= \"\")\n\n# Update customer infomation.\nGET     /customers/:id/update       controllers.CustomerController.showUpdateForm(id: Long)\nPOST    /customers/:id/update       controllers.CustomerController.update(id: Long)\n\n# Remove customer infomation\nGET     /customers/:id/remove       controllers.CustomerController.remove(id: Long)\n\n#\n# Items Management\n#\n\n# Create item infomation.\nGET     /items/create               controllers.ItemController.showCreateForm()\nPOST    /items/create               controllers.ItemController.create()\n\n# Search item infomation.\nGET     /items/search               controllers.ItemController.search(word: String ?= \"\")\n\n# Update item infomation.\nGET     /items/:id/update           controllers.ItemController.showUpdateForm(id: Long)\nPOST    /items/:id/update           controllers.ItemController.update(id: Long)\n\n# Remove item infomation.\nGET     /items/:id/remove           controllers.ItemController.remove(id: Long)\n\n```\n\n### 手順 3-6: ファイル `app/models/Item.scala` を編集します\n\n```scala:app/models/Item.scala\npackage models\n\nimport play.api.db.slick.Config.driver.simple._\n\n/**\n * DTO の定義\n */\ncase class Item(ID: Long, name: String, price: Long, comment: String)\n\n/**\n * テーブルの定義\n */\nclass ItemTable(tag: Tag) extends Table[Item](tag, \"items\") {\n  def ID = column[Long](\"id\", O.PrimaryKey, O.AutoInc)\n  def name = column[String](\"name\", O.NotNull)\n  def price = column[Long](\"price\", O.NotNull)\n  def comment = column[String](\"comment\", O.NotNull)\n  def * = (ID, name, price, comment) <> (Item.tupled, Item.unapply)\n}\n\n/**\n * DAO の定義\n */\nobject ItemDAO {\n  lazy val itemQuery = TableQuery[ItemTable]\n  \n  /**\n   * キーワード検索\n   * @param word\n   */\n  def search(word: String)(implicit s: Session): List[Item] = {\n    itemQuery.filter(row => (row.name like \"%\"+word+\"%\") || (row.comment like \"%\"+word+\"%\")).list\n  }\n  \n  /**\n   * ID検索\n   * @param ID\n   */\n  def searchByID(ID: Long)(implicit s: Session): Item = {\n    itemQuery.filter(_.ID === ID).first\n  }\n  \n  /**\n   * 作成\n   * @param item\n   */\n  def create(item: Item)(implicit s: Session) {\n    itemQuery.insert(item)\n  }\n  \n  /**\n   * 更新\n   * @param item\n   */\n  def update(item: Item)(implicit s: Session) {\n    itemQuery.filter(_.ID === item.ID).update(item)\n  }\n  \n  /**\n   * 削除\n   * @param item\n   */\n  def remove(item: Item)(implicit s: Session) {\n    itemQuery.filter(_.ID === item.ID).delete\n  }\n}\n\n```\n\n\n### 手順 3-7: ファイル `app/controllers/ItemController.scala` を編集します\n\n```scala:app/controllers/ItemController.scala\npackage controllers\n\n/**\n * ① パッケージのインポート\n */\nimport play.api._\nimport play.api.mvc._\n\nimport play.api.data._\nimport play.api.data.Forms._\n\nimport play.api.db.slick._\nimport models._\n\n/**\n * ② コントローラーオブジェクトの定義\n */\nobject CustomerController extends Controller {\n\n  /**\n   * ③ HTTP フォームデータの定義\n   */\n  val customerForm = Form(\n    mapping(\n      \"ID\" -> longNumber,\n      \"name\" ->  nonEmptyText(maxLength = 140),\n      \"email\" ->  nonEmptyText(maxLength = 140),\n      \"tel\" ->  nonEmptyText(maxLength = 140),\n      \"address\" ->  nonEmptyText(maxLength = 140),\n      \"comment\" -> text(maxLength = 140)\n    )(Customer.apply)(Customer.unapply)\n  )\n  \n  /**\n   * ④ 顧客情報登録フォーム表示アクションメソッドの定義\n   */\n  def showCreateForm() = Action { request =>\n    Ok(views.html.customerCreateForm(customerForm))\n  }\n  \n  /**\n   * ⑤ 顧客情報登録アクションメソッドの定義\n   */\n  def create() = DBAction { implicit rs =>\n    customerForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.customerCreateForm(errors)),\n      customer => {\n        CustomerDAO.create(customer)\n        Redirect(routes.CustomerController.search())\n      }\n    )\n  }\n  \n  /**\n   * ⑥ 顧客情報検索アクションメソッドの定義\n   */\n  def search(word: String) = DBAction { implicit rs =>\n    Ok(views.html.customerSearch(word, CustomerDAO.search(word)))\n  }\n  \n  /**\n   * ⑦ 顧客情報更新フォーム表示アクションメソッドの定義\n   */\n  def showUpdateForm(ID: Long) = DBAction { implicit rs =>\n    Ok(views.html.customerUpdateForm(ID, customerForm.fill(CustomerDAO.searchByID(ID))))\n  }\n\n  /**\n   * ⑧ 顧客情報更新アクションメソッドの定義\n   */\n  def update(ID: Long) = DBAction { implicit rs =>\n    customerForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.customerUpdateForm(ID, errors)),\n      customer => {\n        CustomerDAO.update(customer)\n        Redirect(routes.CustomerController.search())\n      }\n    )\n  }\n\n  /**\n   * ⑨ 顧客情報削除アクションメソッドの定義\n   */\n  def remove(ID: Long) = DBAction { implicit rs =>\n    CustomerDAO.remove(CustomerDAO.searchByID(ID))\n    Redirect(routes.CustomerController.search())\n  }\n}\n\n```\n\n### 手順 3-8: ファイル `app/views/itemCreateForm.scala.html` を編集します\n\n```html:app/views/itemCreateForm.scala.html\n@(itemForm: Form[Item])\n\n@import helper._\n\n@main(title = \"受発注管理システム - 商品情報登録\") {\n\n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/items/search\">商品情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/items/create\">商品情報登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n      \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>商品情報登録</h1>\n        </div>\n        \n        <!-- フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          @form(routes.ItemController.create()) {\n            <fieldset>\n              <input type=\"hidden\" name=\"ID\" value=\"0\">\n              @inputText(itemForm(\"name\"), '_label -> \"商品名\", 'size -> 30)\n              @inputText(itemForm(\"price\"), '_label -> \"商品価格\", 'size -> 30)\n              @inputText(itemForm(\"comment\"), '_label -> \"備考\", 'size -> 30)\n            </fieldset>\n            <div class=\"actions\">\n              <input type=\"submit\" class=\"btn btn-primary\">\n              <a href=\"/items/search\" class=\"btn btn-danger\">キャンセル</a>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n </div>\n}\n\n```\n\n### 手順 3-9: ファイル `app/views/itemSearch.scala.html` を編集します\n\n```html:app/views/itemSearch.scala.html\n@(word: String, items: List[Item])\n\n@main(title = \"受発注管理システム - 商品情報一覧\") {\n \n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/items/search\">商品情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/items/create\">商品情報登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n        \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>商品情報一覧（検索/更新/削除）</h1> \n        </div>\n        \n        <!-- 検索フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n        @helper.form(action=routes.ItemController.search()) {\n          <input type=\"search\" name=\"word\" value=\"@word\">\n          <input type=\"submit\" value=\"キーワード検索\" class=\"byn btn-primary\">\n        }\n        </div>\n        \n        <!-- テーブル -->\n        <div class=\"table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <table class=\"table table-bordered table-striped \">\n            <thead>\n              <tr>\n                <th>商品番号</th>\n                <th>商品名</th>\n                <th>商品価格</th>\n                <th>備考</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            @items.map { item =>\n              <tr>\n                <td align=\"right\">@(\"%3d\".format(item.ID))</td>\n                <td>@item.name</td>\n                <td align=\"right\">@(\"%,d\".format(item.price))</td>\n                <td>@item.comment</td>\n                <td align=\"center\">\n                  <a href=\"/items/@item.ID/update\" class=\"btn btn-primary\">更新</a>\n                  <input type=\"button\" class=\"btn btn-danger\" value=\"削除\" onClick='if(confirm(\"本当に削除してよろしいですか？\")) {location.href=\"/items/@item.ID/remove\"}'>\n                </td>\n              </tr>\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n </div>\n}\n\n```\n\n### 手順 3-10: ファイル `app/views/itemSearch.scala.html` を編集します\n\n```html:app/views/itemSearch.scala.html\n@(ID: Long, itemForm: Form[Item])\n\n@import helper._\n\n@main(title = \"受発注管理システム - 商品情報更新\") {\n \n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/items/search\">商品情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/items/create\">商品情報登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n        \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>商品情報更新</h1> \n        </div>\n                \n        <!-- フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          @form(routes.ItemController.update(ID)) {\n            <fieldset>\n              <input type=\"hidden\" name=\"ID\" value=\"@ID\">\n              @inputText(itemForm(\"name\"), '_label -> \"商品名\", 'size -> 30)\n              @inputText(itemForm(\"price\"), '_label -> \"商品価格\", 'size -> 30)\n              @inputText(itemForm(\"comment\"), '_label -> \"備考\", 'size -> 30)\n            </fieldset>\n            <div class=\"actions\">\n              <input type=\"submit\" class=\"btn btn-primary\">\n              <a href=\"/items/search\" class=\"btn btn-danger\">キャンセル</a>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n </div>\n}\n\n```\n\n### 手順 3-11: ブラウザで、`http://localhost:9000/` にアクセスします\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180242.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\nモデル層に変更を加えたため、テーブルスキーマの変更（DROP TABLE → CREATE TABLE）が必要になります。\n\n### 手順 3-12: `Apply this script now!` ボタンをクリックします\n\n「商品情報管理」機能が実装できました。\n\n#### 商品情報登録\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180300.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n#### 商品情報一覧\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180325.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n#### 商品情報更新\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180342.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n## 4: Slick を使った \"外部キーの設定\" と \"テーブルの結合\"\n\n「受注管理」機能を実装していきます。\n\n「受注管理」機能では、`受注テーブル` 上に `顧客テーブル`、`商品テーブル` を参照するための ”外部キーの設定\" をしたり、情報を参照する際に \"テーブルの結合\" をしたりする必要があります。\n\nここでは、Slick を使って、これらをどう実装するかを中心に説明していきます。\n\n### 手順 4-1: ファイル `conf/route` を編集します\n\n```scala:conf/route\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# Home page\nGET     /                           controllers.Application.index\n\n# Map static resources from the /public folder to the /assets URL path\nGET     /assets/*file               controllers.Assets.at(path=\"/public\", file)\n\n#\n# Customers Management\n#\n\n# Create customer infomation.\nGET     /customers/create           controllers.CustomerController.showCreateForm()\nPOST    /customers/create           controllers.CustomerController.create()\n\n# Search customer infomation.\nGET     /customers/search           controllers.CustomerController.search(word: String ?= \"\")\n\n# Update customer infomation.\nGET     /customers/:id/update       controllers.CustomerController.showUpdateForm(id: Long)\nPOST    /customers/:id/update       controllers.CustomerController.update(id: Long)\n\n# Remove customer infomation\nGET     /customers/:id/remove       controllers.CustomerController.remove(id: Long)\n\n#\n# Items Management\n#\n\n# Create item infomation.\nGET     /items/create               controllers.ItemController.showCreateForm()\nPOST    /items/create               controllers.ItemController.create()\n\n# Search item infomation.\nGET     /items/search               controllers.ItemController.search(word: String ?= \"\")\n\n# Update item infomation.\nGET     /items/:id/update           controllers.ItemController.showUpdateForm(id: Long)\nPOST    /items/:id/update           controllers.ItemController.update(id: Long)\n\n# Remove item infomation.\nGET     /items/:id/remove           controllers.ItemController.remove(id: Long)\n\n#\n# Orderings Management\n#\n\n# Create ordering infomation.\nGET     /orderings/create           controllers.OrderingController.showCreateForm()\nPOST    /orderings/create           controllers.OrderingController.create()\n\n# Search ordering infomation.\nGET     /orderings/search           controllers.OrderingController.search(word: String ?= \"\")\n\n# Remove ordering infomation.\nGET     /orderings/:id/remove       controllers.OrderingController.remove(id: Long)\n\n```\n\n### 手順 4-2: ファイル `app/models/Ordering.scala` を作成します\n\n```scala:app/models/Ordering.scala\npackage models\n\n/**\n * Slick 関連のパッケージのインポート\n */\nimport play.api.db.slick.Config.driver.simple._\n\n/**\n * DTO の定義\n */\ncase class Ordering(ID: Long, createdAt: Long, customerID: Long, itemID: Long, itemCount: Long, comment: String)\n\n/**\n * テーブルの定義\n */\nclass OrderingTable(tag: Tag) extends Table[Ordering](tag, \"orderings\") {\n  def ID = column[Long](\"id\", O.PrimaryKey, O.AutoInc)\n  def createdAt = column[Long](\"created_at\", O.NotNull)\n  def customerID = column[Long](\"customer_id\", O.NotNull)\n  def itemID = column[Long](\"item_id\", O.NotNull )\n  def itemCount = column[Long](\"item_count\", O.NotNull)\n  def comment = column[String](\"commnet\", O.NotNull)\n  def * = (ID, createdAt, customerID, itemID, itemCount, comment) <> (Ordering.tupled, Ordering.unapply)\n  def customer = foreignKey(\"customer_id\", customerID, OrderingDAO.customerQuery)(_.ID)\n  def item = foreignKey(\"item_id\", itemID, OrderingDAO.itemQuery)(_.ID)\n}\n\n/**\n * DAO の定義\n */\nobject OrderingDAO {\n\n  /**\n   * scala.slick.lifted.TableQuery オブジェクトを 3 つ作成\n   */  \n  lazy val customerQuery = CustomerDAO.customerQuery\n  lazy val itemQuery = ItemDAO.itemQuery\n  lazy val orderingQuery = TableQuery[OrderingTable]\n\n  /**\n   * 3 つテーブルを結合した上でキーワード検索\n   * @param word\n   */\n  def search(word: String)(implicit s: Session): List[(Long, Long, Long, String, String, String, String, String, Long, String, Long, String, Long, String)] = {\n    val query = for {\n      ordering <- orderingQuery\n      customer <- customerQuery.filter(_.ID === ordering.customerID)\n      item <- itemQuery.filter(_.ID === ordering.itemID)\n    } yield (ordering.ID, ordering.createdAt, customer.ID, customer.name, customer.email, customer.tel, customer.address, customer.comment, item.ID, item.name, item.price, item.comment, ordering.itemCount, ordering.comment)\n    query.filter(row => ((row._4 like \"%\"+word+\"%\") || (row._5 like \"%\"+word+\"%\") || (row._6 like \"%\"+word+\"%\") || (row._7 like \"%\"+word+\"%\") || (row._8 like \"%\"+word+\"%\") || (row._10 like \"%\"+word+\"%\") || (row._12 like \"%\"+word+\"%\") || (row._14 like \"%\"+word+\"%\"))).list\n  }\n\n  /**\n   * ID検索\n   * @param ID\n   */\n  def searchByID(ID: Long)(implicit s: Session): Ordering = {\n    orderingQuery.filter(_.ID === ID).first\n  }\n\n  /**\n   * 作成\n   * @param ordering\n   */\n  def create(ordering: Ordering)(implicit s: Session) {\n    orderingQuery.insert(ordering)\n  }\n\n  /**\n   * 更新\n   * @param ordering\n   */\n  def update(ordering: Ordering)(implicit s: Session) {\n    orderingQuery.filter(_.ID === ordering.ID).update(ordering)\n  }\n\n  /**\n   * 削除\n   * @param ordering\n   */\n  def remove(ordering: Ordering)(implicit s: Session) {\n    orderingQuery.filter(_.ID === ordering.ID).delete\n  }\n}\n\n```\n\n基本的には、他のモデル層の実装と同じですので、特徴的な部分のみ説明していきます。\n\n#### ① テーブルの定義\n\n```scala\n/**\n * テーブルの定義\n */\nclass OrderingTable(tag: Tag) extends Table[Ordering](tag, \"orderings\") {\n  def ID = column[Long](\"id\", O.PrimaryKey, O.AutoInc)\n  def createdAt = column[Long](\"created_at\", O.NotNull)\n  def customerID = column[Long](\"customer_id\", O.NotNull)\n  def itemID = column[Long](\"item_id\", O.NotNull )\n  def itemCount = column[Long](\"item_count\", O.NotNull)\n  def comment = column[String](\"commnet\", O.NotNull)\n  def * = (ID, createdAt, customerID, itemID, itemCount, comment) <> (Ordering.tupled, Ordering.unapply)\n  def customer = foreignKey(\"customer_id\", customerID, OrderingDAO.customerQuery)(_.ID)\n  def item = foreignKey(\"item_id\", itemID, OrderingDAO.itemQuery)(_.ID)\n}\n```\n\n最後の 2 行で、外部キーの設定をしています。\n\n外部キー制約は Table オブジェクトの foreignKey 関数を用いて定義します。\n\n#### ② scala.slick.lifted.TableQuery オブジェクトを 3 つ作成\n\n```scala\n ：\n中略\n ：\n/**\n * DAO の定義\n */\nobject OrderingDAO {\n\n  /**\n   * scala.slick.lifted.TableQuery オブジェクトを 3 つ作成\n   */  \n  lazy val customerQuery = CustomerDAO.customerQuery\n  lazy val itemQuery = ItemDAO.itemQuery\n  lazy val orderingQuery = TableQuery[OrderingTable]\n ：\n中略\n ：\n```\n\nscala.slick.lifted.TableQuery オブジェクトを 3 つ作成しています。\n\nこうすることで、複数のテーブルにまたがったクエリーを生成することが可能になります。\n\n\n#### ③ 3 つテーブルを結合した上でキーワード検索\n\n```scala\n  /**\n   * 3 つテーブルを結合した上でキーワード検索\n   * @param word\n   */\n  def search(word: String)(implicit s: Session): List[(Long, Long, Long, String, String, String, String, String, Long, String, Long, String, Long, String)] = {\n    val query = for {\n      ordering <- orderingQuery\n      customer <- customerQuery.filter(_.ID === ordering.customerID)\n      item <- itemQuery.filter(_.ID === ordering.itemID)\n    } yield (ordering.ID, ordering.createdAt, customer.ID, customer.name, customer.email, customer.tel, customer.address, customer.comment, item.ID, item.name, item.price, item.comment, ordering.itemCount, ordering.comment)\n    query.filter(row => ((row._4 like \"%\"+word+\"%\") || (row._5 like \"%\"+word+\"%\") || (row._6 like \"%\"+word+\"%\") || (row._7 like \"%\"+word+\"%\") || (row._8 like \"%\"+word+\"%\") || (row._10 like \"%\"+word+\"%\") || (row._12 like \"%\"+word+\"%\") || (row._14 like \"%\"+word+\"%\"))).list\n  }\n ：\n中略\n ：\n```\n\nSlick では、Query に対し for 式を用いて flatMap 操作を行うことでテーブルの結合（Join）を行います。\n\n結合の際に if 文を用いてフィルタリングを行うことで、内部結合（Inner Join）とする事ができます。\n\nSlick における結合等の方法の詳細については、以下の公式ドキュメントを参照してください。\n\n[http://slick.typesafe.com/doc/2.0.0/gettingstarted.html](http://slick.typesafe.com/doc/2.0.0/gettingstarted.html)\n\n### 手順 4-3: ファイル `app/contrallers/OrderingController.scala` を作成します\n\n```scala:app/contrallers/OrderingController.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\nimport play.api.data._\nimport play.api.data.Forms._\n\nimport play.api.db.slick._\nimport models._\n\nobject OrderingController extends Controller {\n\n  /**\n   * 受注情報入力フォームの定義\n   */\n  val orderingForm = Form(\n    mapping(\n      \"ID\" -> longNumber,\n      \"createdAt\" -> longNumber,\n      \"customerID\" ->  longNumber,\n      \"itemID\" -> longNumber,\n      \"itemCount\" -> longNumber,\n      \"comment\" -> text(maxLength = 140)\n    )(Ordering.apply)(Ordering.unapply)\n  )\n\n  /**\n   * 受注登録フォーム表示アクションメソッドの定義\n   */\n  def showCreateForm() = Action { request =>\n    Ok(views.html.orderingCreateForm(orderingForm))\n  }\n\n  /**\n   * 受注登録アクションメソッドの定義\n   */\n  def create() = DBAction { implicit rs =>\n    orderingForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.orderingCreateForm(errors)),\n      ordering => {\n        OrderingDAO.create(ordering)\n        Redirect(routes.OrderingController.search())\n      }\n    )\n  }\n\n  /**\n   * 受注情報検索アクションメソッドの定義\n   */\n  def search(word: String) = DBAction { implicit rs =>\n    Ok(views.html.orderingSearch(word, OrderingDAO.search(word)))\n  }\n\n  /**\n   * 受注情報削除アクションメソッドの定義\n   */\n  def remove(ID: Long) = DBAction { implicit rs =>\n    OrderingDAO.remove(OrderingDAO.searchByID(ID))\n    Redirect(routes.OrderingController.search())\n  }\n}\n\n```\n\n### 手順 4-4: ファイル `app/views/orderingCreateForm.scala.html` を作成します\n\n```html:app/views/orderingCreateForm.scala.html\n@(orderingForm: Form[Ordering])\n\n@import helper._\n\n@main(title = \"受発注管理システム - 受注登録\") {\n\n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/orderings/search\">受注情報一覧（検索/削除）</a></li>\n            <li><a href=\"/orderings/create\">受注登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n      \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>受注登録</h1>\n        </div>\n        \n        <!-- フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          @form(routes.OrderingController.create()) {\n            <fieldset>\n              <input type=\"hidden\" name=\"ID\" value=\"0\">\n              <input type=\"hidden\" name=\"createdAt\" value=\"@System.currentTimeMillis()\">\n              @inputText(orderingForm(\"customerID\"), '_label -> \"顧客番号\", 'size -> 30)\n              @inputText(orderingForm(\"itemID\"), '_label -> \"商品番号\", 'size -> 30)\n              @select(\n                orderingForm(\"itemCount\"),\n                options(\n                  \"1\" -> \"1\",\n                  \"2\" -> \"2\",\n                  \"3\" -> \"3\",\n                  \"4\" -> \"4\",\n                  \"5\" -> \"5\",\n                  \"6\" -> \"6\",\n                  \"7\" -> \"7\",\n                  \"8\" -> \"8\",\n                  \"9\" -> \"9\",\n                  \"10\" -> \"10\",\n                  \"11\" -> \"11\",\n                  \"12\" -> \"12\",\n                  \"13\" -> \"13\",\n                  \"14\" -> \"14\",\n                  \"15\" -> \"15\",\n                  \"16\" -> \"16\",\n                  \"17\" -> \"17\",\n                  \"18\" -> \"18\",\n                  \"19\" -> \"19\",\n                  \"20\" -> \"20\"\n                ),\n                '_label -> \"商品個数\"\n              )\n              @inputText(orderingForm(\"comment\"), '_label -> \"備考\", 'size -> 30)\n            </fieldset>\n            <div class=\"actions\">\n              <input type=\"submit\" class=\"btn btn-primary\">\n              <a href=\"/orderings/search\" class=\"btn btn-danger\">キャンセル</a>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n </div>\n}\n\n```\n\n### 手順 4-5: ファイル `app/views/orderingSearch.scala.html` を作成します\n\n```html:app/views/orderingCreateForm.scala.html\n@(word: String, orderings: List[(Long, Long, Long, String, String, String, String, String, Long, String, Long, String, Long, String)])\n\n@import java.util.Date\n\n@main(title = \"受発注管理システム - 受注情報一覧\") {\n\n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n\n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/orderings/search\">受注情報一覧（検索/削除）</a></li>\n            <li><a href=\"/orderings/create\">受注登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n\n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>受注情報一覧（検索/削除）</h1> \n        </div>\n\n        <!-- 検索フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n        @helper.form(action=routes.OrderingController.search()) {\n          <input type=\"search\" name=\"word\" value=\"@word\">\n          <input type=\"submit\" value=\"キーワード検索\" class=\"byn btn-primary\">\n        }\n        </div>\n\n        <!-- テーブル -->\n        <div class=\"table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <table class=\"table table-bordered table-striped \">\n            <thead>\n              <tr>\n                <th>受注番号</th>\n                <th>受注日時</th>\n                <th>顧客氏名</th>\n                <th>メールアドレス</th>\n                <th>商品名</th>\n                <th>単価</th>\n                <th>個数</th>\n                <th>合計価格</th>\n                <th>備考</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            @orderings.map { ordering =>\n              <tr>\n                <td align=\"right\">@(\"%9d\".format(ordering._1))</td>\n                <td align=\"right\">@(\"%tY/%<tm/%<td %<tH:%<tM:%<tS\".format(new Date(ordering._2)))</td>\n                <td>@ordering._4</td>\n                <td>@ordering._5</td>\n                <td>@ordering._10</td>\n                <td align=\"right\">@(\"%,d\".format(ordering._11))</td>\n                <td align=\"right\">@(\"%,d\".format(ordering._13))</td>\n                <td align=\"right\">@(\"%,d\".format((ordering._11 * ordering._13)))</td>\n                <td>@ordering._14</td>\n                <td align=\"center\"><input type=\"button\" class=\"btn btn-danger\" value=\"削除\" onClick='if(confirm(\"本当に削除してよろしいですか？\")) {location.href=\"/orderings/@ordering._1/remove\"}'></td>\n              </tr>\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n </div>\n}\n\n```\n\n### 手順 4-6: ブラウザで、`http://localhost:9000/` にアクセスします\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180417.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n再びモデル層に変更を加えたため、テーブルスキーマの変更（DROP TABLE → CREATE TABLE）が必要になります。\n\n`CREATE TABLE` 文に加えて、外部キー制約を与えるための `ALTER TABLE` 文も生成されていることがわかります。\n\n### 手順 4-7: `Apply this script now!` ボタンをクリックします\n\n「受注管理システム」 の完成です。\n\n#### 受注登録\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180432.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n#### 受注情報一覧\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180448.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n---\n\n作成した 「受注管理システム」 のソースコードは以下に保存していますので参考にしてください。\n\n[https://github.com/kukita/play-scala-order-management-system](https://github.com/kukita/play-scala-order-management-system)\n\n以上\n",
        "body": "<p>Play Framework 2.3.x と Scala を使った Web システム開発について勉強した際の内容を自分用のメモとしてまとめました。</p>\n<p>この記事は、<a href=\"http://qiita.com/kukita/items/6326f1439abec013a479\" title=\"\">【#Play】Play Framework 2.3 (Scala) を使った Web システム開発入門</a> の続きです。</p>\n<p>「顧客情報の登録/検索/更新/削除」、「商品情報の登録/検索/更新/削除」、そして、「受注登録」を行うための簡単な 受注管理システムを作成することを目指します。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>3: 「商品情報管理」機能の実装\n      </h2><p>前回までの部分で 「顧客情報管理」 機能の実装が完了しました。</p>\n<p>同じ要領で 「商品情報管理」 機能を実装していくとともに、Home ページが  「Hello World」 のままなのでこれを修正していきます。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>手順 3-1: ファイル <code>app/controllers/Application.scala</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/controllers/Application.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controllers</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Application</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">index</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>手順 3-2: ファイル <code>app/views/index.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/index.scala.html</span></div><div class=\"highlight\"><pre>@main(title = &quot;受発注管理システム&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-tabs nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;h2&gt;</span>顧客情報管理<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span><span class=\"nt\">&gt;&lt;h2&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/create&quot;</span><span class=\"nt\">&gt;&lt;h2&gt;</span>顧客情報登録<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;h2&gt;</span>商品情報管理<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span><span class=\"nt\">&gt;&lt;h2&gt;</span>商品情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/create&quot;</span><span class=\"nt\">&gt;&lt;h2&gt;</span>商品情報登録<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;h2&gt;</span>受注管理<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/search&quot;</span><span class=\"nt\">&gt;&lt;h2&gt;</span>受注情報一覧（検索/削除）<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/create&quot;</span><span class=\"nt\">&gt;&lt;h2&gt;</span>受注登録<span class=\"nt\">&lt;/h2&gt;&lt;/a&gt;&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;/ul&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><p>ホームページには、各画面へのリンクの一覧を表示することにします。</p>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>手順 3-3: ファイル <code>app/views/header.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/header.scala.html</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar navbar-inverse navbar-static-top&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-header&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-brand&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/&quot;</span><span class=\"nt\">&gt;</span>受注管理システム<span class=\"nt\">&lt;/a&gt;</span>\n      <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-toggle&quot;</span> <span class=\"na\">data-toggle=</span><span class=\"s\">&quot;collapse&quot;</span> <span class=\"na\">data-target=</span><span class=\"s\">&quot;.navbar-collapse&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;sr-only&quot;</span><span class=\"nt\">&gt;</span>Toggle navigation<span class=\"nt\">&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;icon-bar&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;icon-bar&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;icon-bar&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n      <span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-collapse collapse&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav navbar-nav&quot;</span> <span class=\"na\">role=</span><span class=\"s\">&quot;menu&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-toggle&quot;</span> <span class=\"na\">data-toggle=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;</span>顧客情報管理<span class=\"nt\">&lt;/a&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-menu&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">role=</span><span class=\"s\">&quot;menuitem&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span><span class=\"nt\">&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">role=</span><span class=\"s\">&quot;menuitem&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/create&quot;</span><span class=\"nt\">&gt;</span>顧客情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-toggle&quot;</span> <span class=\"na\">data-toggle=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;</span>商品情報管理<span class=\"nt\">&lt;/a&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-menu&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span><span class=\"nt\">&gt;</span>商品情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/create&quot;</span><span class=\"nt\">&gt;</span>商品情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-toggle&quot;</span> <span class=\"na\">data-toggle=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;</span>受注管理<span class=\"nt\">&lt;/a&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-menu&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/search&quot;</span><span class=\"nt\">&gt;</span>受注情報一覧（検索/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/create&quot;</span><span class=\"nt\">&gt;</span>受注登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;/ul&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div></div><p>ヘッダー部分のメニューに「商品情報管理」機能、「受注管理」機能を追加します。</p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>手順 3-4: ブラウザで、<code>http://localhost:9000/</code> にアクセスしホームページが表示されることを確かめます\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180215.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>ホームページが出来上がりました。続いて 「商品情報管理」 機能を実装していきます。</p>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>手順 3-5: ファイル <code>conf/route</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">conf/route</span></div><div class=\"highlight\"><pre><span class=\"k\">#</span> <span class=\"nc\">Routes</span>\n<span class=\"k\">#</span> <span class=\"nc\">This</span> <span class=\"n\">file</span> <span class=\"n\">defines</span> <span class=\"n\">all</span> <span class=\"n\">application</span> <span class=\"n\">routes</span> <span class=\"o\">(</span><span class=\"nc\">Higher</span> <span class=\"n\">priority</span> <span class=\"n\">routes</span> <span class=\"n\">first</span><span class=\"o\">)</span>\n<span class=\"k\">#</span> <span class=\"o\">~~~~</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Home</span> <span class=\"n\">page</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span>                           <span class=\"n\">controllers</span><span class=\"o\">.</span><span class=\"nc\">Application</span><span class=\"o\">.</span><span class=\"n\">index</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Map</span> <span class=\"n\">static</span> <span class=\"n\">resources</span> <span class=\"n\">from</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">public</span> <span class=\"n\">folder</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">assets</span> <span class=\"nc\">URL</span> <span class=\"n\">path</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span><span class=\"n\">assets</span><span class=\"cm\">/*file               controllers.Assets.at(path=&quot;/public&quot;, file)</span>\n\n<span class=\"cm\">#</span>\n<span class=\"cm\"># Customers Management</span>\n<span class=\"cm\">#</span>\n\n<span class=\"cm\"># Create customer infomation.</span>\n<span class=\"cm\">GET     /customers/create           controllers.CustomerController.showCreateForm()</span>\n<span class=\"cm\">POST    /customers/create           controllers.CustomerController.create()</span>\n\n<span class=\"cm\"># Search customer infomation.</span>\n<span class=\"cm\">GET     /customers/search           controllers.CustomerController.search(word: String ?= &quot;&quot;)</span>\n\n<span class=\"cm\"># Update customer infomation.</span>\n<span class=\"cm\">GET     /customers/:id/update       controllers.CustomerController.showUpdateForm(id: Long)</span>\n<span class=\"cm\">POST    /customers/:id/update       controllers.CustomerController.update(id: Long)</span>\n\n<span class=\"cm\"># Remove customer infomation</span>\n<span class=\"cm\">GET     /customers/:id/remove       controllers.CustomerController.remove(id: Long)</span>\n\n<span class=\"cm\">#</span>\n<span class=\"cm\"># Items Management</span>\n<span class=\"cm\">#</span>\n\n<span class=\"cm\"># Create item infomation.</span>\n<span class=\"cm\">GET     /items/create               controllers.ItemController.showCreateForm()</span>\n<span class=\"cm\">POST    /items/create               controllers.ItemController.create()</span>\n\n<span class=\"cm\"># Search item infomation.</span>\n<span class=\"cm\">GET     /items/search               controllers.ItemController.search(word: String ?= &quot;&quot;)</span>\n\n<span class=\"cm\"># Update item infomation.</span>\n<span class=\"cm\">GET     /items/:id/update           controllers.ItemController.showUpdateForm(id: Long)</span>\n<span class=\"cm\">POST    /items/:id/update           controllers.ItemController.update(id: Long)</span>\n\n<span class=\"cm\"># Remove item infomation.</span>\n<span class=\"cm\">GET     /items/:id/remove           controllers.ItemController.remove(id: Long)</span>\n</pre></div></div><h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>手順 3-6: ファイル <code>app/models/Item.scala</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/models/Item.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">models</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick.Config.driver.simple._</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * DTO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">price</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * テーブルの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nc\">ItemTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Item</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;items&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nc\">ID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">price</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;price&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">comment</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;comment&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Item</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Item</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * DAO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">ItemDAO</span> <span class=\"o\">{</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">itemQuery</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">ItemTable</span><span class=\"o\">]</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * キーワード検索</span>\n<span class=\"cm\">   * @param word</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Item</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)).</span><span class=\"n\">list</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ID検索</span>\n<span class=\"cm\">   * @param ID</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Item</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">first</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 作成</span>\n<span class=\"cm\">   * @param item</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"k\">:</span> <span class=\"kt\">Item</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 更新</span>\n<span class=\"cm\">   * @param item</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"k\">:</span> <span class=\"kt\">Item</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 削除</span>\n<span class=\"cm\">   * @param item</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"k\">:</span> <span class=\"kt\">Item</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">delete</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>手順 3-7: ファイル <code>app/controllers/ItemController.scala</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/controllers/ItemController.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controllers</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ① パッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data.Forms._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick._</span>\n<span class=\"k\">import</span> <span class=\"nn\">models._</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ② コントローラーオブジェクトの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">CustomerController</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ③ HTTP フォームデータの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">val</span> <span class=\"n\">customerForm</span> <span class=\"k\">=</span> <span class=\"nc\">Form</span><span class=\"o\">(</span>\n    <span class=\"n\">mapping</span><span class=\"o\">(</span>\n      <span class=\"s\">&quot;ID&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;name&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;email&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;tel&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;address&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;comment&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">)</span>\n    <span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ④ 顧客情報登録フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showCreateForm</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">customerForm</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑤ 顧客情報登録アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">customer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑥ 顧客情報検索アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerSearch</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">)))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑦ 顧客情報更新フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">))))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑧ 顧客情報更新アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">customer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑨ 顧客情報削除アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">))</span>\n    <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>手順 3-8: ファイル <code>app/views/itemCreateForm.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/itemCreateForm.scala.html</span></div><div class=\"highlight\"><pre>@(itemForm: Form[Item])\n\n@import helper._\n\n@main(title = &quot;受発注管理システム - 商品情報登録&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span><span class=\"nt\">&gt;</span>商品情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/create&quot;</span><span class=\"nt\">&gt;</span>商品情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>商品情報登録<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          @form(routes.ItemController.create()) {\n            <span class=\"nt\">&lt;fieldset&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0&quot;</span><span class=\"nt\">&gt;</span>\n              @inputText(itemForm(&quot;name&quot;), &#39;_label -&gt; &quot;商品名&quot;, &#39;size -&gt; 30)\n              @inputText(itemForm(&quot;price&quot;), &#39;_label -&gt; &quot;商品価格&quot;, &#39;size -&gt; 30)\n              @inputText(itemForm(&quot;comment&quot;), &#39;_label -&gt; &quot;備考&quot;, &#39;size -&gt; 30)\n            <span class=\"nt\">&lt;/fieldset&gt;</span>\n            <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;actions&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span><span class=\"nt\">&gt;</span>キャンセル<span class=\"nt\">&lt;/a&gt;</span>\n            <span class=\"nt\">&lt;/div&gt;</span>\n          }\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>手順 3-9: ファイル <code>app/views/itemSearch.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/itemSearch.scala.html</span></div><div class=\"highlight\"><pre>@(word: String, items: List[Item])\n\n@main(title = &quot;受発注管理システム - 商品情報一覧&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span><span class=\"nt\">&gt;</span>商品情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/create&quot;</span><span class=\"nt\">&gt;</span>商品情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>商品情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/h1&gt;</span> \n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- 検索フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n        @helper.form(action=routes.ItemController.search()) {\n          <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;search&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;word&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@word&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;キーワード検索&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;byn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n        }\n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- テーブル --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;table</span> <span class=\"na\">class=</span><span class=\"s\">&quot;table table-bordered table-striped &quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;thead&gt;</span>\n              <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>商品番号<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>商品名<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>商品価格<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>備考<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;&lt;/th&gt;</span>\n              <span class=\"nt\">&lt;/tr&gt;</span>\n            <span class=\"nt\">&lt;/thead&gt;</span>\n            <span class=\"nt\">&lt;tbody&gt;</span>\n            @items.map { item =&gt;\n              <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%3d&quot;.format(item.ID))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@item.name<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%,d&quot;.format(item.price))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@item.comment<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;center&quot;</span><span class=\"nt\">&gt;</span>\n                  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/@item.ID/update&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>更新<span class=\"nt\">&lt;/a&gt;</span>\n                  <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;削除&quot;</span> <span class=\"na\">onClick=</span><span class=\"s\">&#39;if(confirm(&quot;本当に削除してよろしいですか？&quot;)) {location.href=&quot;/items/@item.ID/remove&quot;}&#39;</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;/td&gt;</span>\n              <span class=\"nt\">&lt;/tr&gt;</span>\n            }\n            <span class=\"nt\">&lt;/tbody&gt;</span>\n          <span class=\"nt\">&lt;/table&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>手順 3-10: ファイル <code>app/views/itemSearch.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/itemSearch.scala.html</span></div><div class=\"highlight\"><pre>@(ID: Long, itemForm: Form[Item])\n\n@import helper._\n\n@main(title = &quot;受発注管理システム - 商品情報更新&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span><span class=\"nt\">&gt;</span>商品情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/create&quot;</span><span class=\"nt\">&gt;</span>商品情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>商品情報更新<span class=\"nt\">&lt;/h1&gt;</span> \n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          @form(routes.ItemController.update(ID)) {\n            <span class=\"nt\">&lt;fieldset&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@ID&quot;</span><span class=\"nt\">&gt;</span>\n              @inputText(itemForm(&quot;name&quot;), &#39;_label -&gt; &quot;商品名&quot;, &#39;size -&gt; 30)\n              @inputText(itemForm(&quot;price&quot;), &#39;_label -&gt; &quot;商品価格&quot;, &#39;size -&gt; 30)\n              @inputText(itemForm(&quot;comment&quot;), &#39;_label -&gt; &quot;備考&quot;, &#39;size -&gt; 30)\n            <span class=\"nt\">&lt;/fieldset&gt;</span>\n            <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;actions&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/items/search&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span><span class=\"nt\">&gt;</span>キャンセル<span class=\"nt\">&lt;/a&gt;</span>\n            <span class=\"nt\">&lt;/div&gt;</span>\n          }\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>手順 3-11: ブラウザで、<code>http://localhost:9000/</code> にアクセスします\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180242.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>モデル層に変更を加えたため、テーブルスキーマの変更（DROP TABLE → CREATE TABLE）が必要になります。</p>\n<h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>手順 3-12: <code>Apply this script now!</code> ボタンをクリックします\n      </h3><p>「商品情報管理」機能が実装できました。</p>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>商品情報登録\n      </h4><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180300.png\" class=\"hatena-fotolife\"></span></p>\n\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>商品情報一覧\n      </h4><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180325.png\" class=\"hatena-fotolife\"></span></p>\n\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>商品情報更新\n      </h4><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180342.png\" class=\"hatena-fotolife\"></span></p>\n\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>4: Slick を使った &quot;外部キーの設定&quot; と &quot;テーブルの結合&quot;\n      </h2><p>「受注管理」機能を実装していきます。</p>\n<p>「受注管理」機能では、<code>受注テーブル</code> 上に <code>顧客テーブル</code>、<code>商品テーブル</code> を参照するための ”外部キーの設定&quot; をしたり、情報を参照する際に &quot;テーブルの結合&quot; をしたりする必要があります。</p>\n<p>ここでは、Slick を使って、これらをどう実装するかを中心に説明していきます。</p>\n<h3>\n        <span id=\"3-13\" class=\"fragment\"></span>\n        <a href=\"#3-13\"><i class=\"fa fa-link\"></i></a>手順 4-1: ファイル <code>conf/route</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">conf/route</span></div><div class=\"highlight\"><pre><span class=\"k\">#</span> <span class=\"nc\">Routes</span>\n<span class=\"k\">#</span> <span class=\"nc\">This</span> <span class=\"n\">file</span> <span class=\"n\">defines</span> <span class=\"n\">all</span> <span class=\"n\">application</span> <span class=\"n\">routes</span> <span class=\"o\">(</span><span class=\"nc\">Higher</span> <span class=\"n\">priority</span> <span class=\"n\">routes</span> <span class=\"n\">first</span><span class=\"o\">)</span>\n<span class=\"k\">#</span> <span class=\"o\">~~~~</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Home</span> <span class=\"n\">page</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span>                           <span class=\"n\">controllers</span><span class=\"o\">.</span><span class=\"nc\">Application</span><span class=\"o\">.</span><span class=\"n\">index</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Map</span> <span class=\"n\">static</span> <span class=\"n\">resources</span> <span class=\"n\">from</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">public</span> <span class=\"n\">folder</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">assets</span> <span class=\"nc\">URL</span> <span class=\"n\">path</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span><span class=\"n\">assets</span><span class=\"cm\">/*file               controllers.Assets.at(path=&quot;/public&quot;, file)</span>\n\n<span class=\"cm\">#</span>\n<span class=\"cm\"># Customers Management</span>\n<span class=\"cm\">#</span>\n\n<span class=\"cm\"># Create customer infomation.</span>\n<span class=\"cm\">GET     /customers/create           controllers.CustomerController.showCreateForm()</span>\n<span class=\"cm\">POST    /customers/create           controllers.CustomerController.create()</span>\n\n<span class=\"cm\"># Search customer infomation.</span>\n<span class=\"cm\">GET     /customers/search           controllers.CustomerController.search(word: String ?= &quot;&quot;)</span>\n\n<span class=\"cm\"># Update customer infomation.</span>\n<span class=\"cm\">GET     /customers/:id/update       controllers.CustomerController.showUpdateForm(id: Long)</span>\n<span class=\"cm\">POST    /customers/:id/update       controllers.CustomerController.update(id: Long)</span>\n\n<span class=\"cm\"># Remove customer infomation</span>\n<span class=\"cm\">GET     /customers/:id/remove       controllers.CustomerController.remove(id: Long)</span>\n\n<span class=\"cm\">#</span>\n<span class=\"cm\"># Items Management</span>\n<span class=\"cm\">#</span>\n\n<span class=\"cm\"># Create item infomation.</span>\n<span class=\"cm\">GET     /items/create               controllers.ItemController.showCreateForm()</span>\n<span class=\"cm\">POST    /items/create               controllers.ItemController.create()</span>\n\n<span class=\"cm\"># Search item infomation.</span>\n<span class=\"cm\">GET     /items/search               controllers.ItemController.search(word: String ?= &quot;&quot;)</span>\n\n<span class=\"cm\"># Update item infomation.</span>\n<span class=\"cm\">GET     /items/:id/update           controllers.ItemController.showUpdateForm(id: Long)</span>\n<span class=\"cm\">POST    /items/:id/update           controllers.ItemController.update(id: Long)</span>\n\n<span class=\"cm\"># Remove item infomation.</span>\n<span class=\"cm\">GET     /items/:id/remove           controllers.ItemController.remove(id: Long)</span>\n\n<span class=\"cm\">#</span>\n<span class=\"cm\"># Orderings Management</span>\n<span class=\"cm\">#</span>\n\n<span class=\"cm\"># Create ordering infomation.</span>\n<span class=\"cm\">GET     /orderings/create           controllers.OrderingController.showCreateForm()</span>\n<span class=\"cm\">POST    /orderings/create           controllers.OrderingController.create()</span>\n\n<span class=\"cm\"># Search ordering infomation.</span>\n<span class=\"cm\">GET     /orderings/search           controllers.OrderingController.search(word: String ?= &quot;&quot;)</span>\n\n<span class=\"cm\"># Remove ordering infomation.</span>\n<span class=\"cm\">GET     /orderings/:id/remove       controllers.OrderingController.remove(id: Long)</span>\n</pre></div></div><h3>\n        <span id=\"3-14\" class=\"fragment\"></span>\n        <a href=\"#3-14\"><i class=\"fa fa-link\"></i></a>手順 4-2: ファイル <code>app/models/Ordering.scala</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/models/Ordering.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">models</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * Slick 関連のパッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick.Config.driver.simple._</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * DTO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Ordering</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">customerID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">itemID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">itemCount</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * テーブルの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nc\">OrderingTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Ordering</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;orderings&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nc\">ID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">createdAt</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;created_at&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">customerID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;customer_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">itemID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;item_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span> <span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">itemCount</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;item_count&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">comment</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;commnet&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"n\">customerID</span><span class=\"o\">,</span> <span class=\"n\">itemID</span><span class=\"o\">,</span> <span class=\"n\">itemCount</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">customer</span> <span class=\"k\">=</span> <span class=\"n\">foreignKey</span><span class=\"o\">(</span><span class=\"s\">&quot;customer_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">customerID</span><span class=\"o\">,</span> <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">customerQuery</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">item</span> <span class=\"k\">=</span> <span class=\"n\">foreignKey</span><span class=\"o\">(</span><span class=\"s\">&quot;item_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">itemID</span><span class=\"o\">,</span> <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">itemQuery</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * DAO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">OrderingDAO</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * scala.slick.lifted.TableQuery オブジェクトを 3 つ作成</span>\n<span class=\"cm\">   */</span>  \n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">customerQuery</span> <span class=\"k\">=</span> <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">customerQuery</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">itemQuery</span> <span class=\"k\">=</span> <span class=\"nc\">ItemDAO</span><span class=\"o\">.</span><span class=\"n\">itemQuery</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">orderingQuery</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">OrderingTable</span><span class=\"o\">]</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 3 つテーブルを結合した上でキーワード検索</span>\n<span class=\"cm\">   * @param word</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[(</span><span class=\"kt\">Long</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span><span class=\"o\">)]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">query</span> <span class=\"k\">=</span> <span class=\"k\">for</span> <span class=\"o\">{</span>\n      <span class=\"n\">ordering</span> <span class=\"k\">&lt;-</span> <span class=\"n\">orderingQuery</span>\n      <span class=\"n\">customer</span> <span class=\"k\">&lt;-</span> <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">customerID</span><span class=\"o\">)</span>\n      <span class=\"n\">item</span> <span class=\"k\">&lt;-</span> <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">itemID</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">tel</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">,</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">itemCount</span><span class=\"o\">,</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">)</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_4</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_5</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_6</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_7</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_8</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_10</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_12</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_14</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">))).</span><span class=\"n\">list</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ID検索</span>\n<span class=\"cm\">   * @param ID</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">orderingQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">first</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 作成</span>\n<span class=\"cm\">   * @param ordering</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">orderingQuery</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 更新</span>\n<span class=\"cm\">   * @param ordering</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">orderingQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 削除</span>\n<span class=\"cm\">   * @param ordering</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"k\">:</span> <span class=\"kt\">Ordering</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">orderingQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">delete</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>基本的には、他のモデル層の実装と同じですので、特徴的な部分のみ説明していきます。</p>\n<h4>\n        <span id=\"4-4\" class=\"fragment\"></span>\n        <a href=\"#4-4\"><i class=\"fa fa-link\"></i></a>① テーブルの定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * テーブルの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nc\">OrderingTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Ordering</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;orderings&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nc\">ID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">createdAt</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;created_at&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">customerID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;customer_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">itemID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;item_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span> <span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">itemCount</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;item_count&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">comment</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;commnet&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"n\">customerID</span><span class=\"o\">,</span> <span class=\"n\">itemID</span><span class=\"o\">,</span> <span class=\"n\">itemCount</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">customer</span> <span class=\"k\">=</span> <span class=\"n\">foreignKey</span><span class=\"o\">(</span><span class=\"s\">&quot;customer_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">customerID</span><span class=\"o\">,</span> <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">customerQuery</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">item</span> <span class=\"k\">=</span> <span class=\"n\">foreignKey</span><span class=\"o\">(</span><span class=\"s\">&quot;item_id&quot;</span><span class=\"o\">,</span> <span class=\"n\">itemID</span><span class=\"o\">,</span> <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">itemQuery</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>最後の 2 行で、外部キーの設定をしています。</p>\n<p>外部キー制約は Table オブジェクトの foreignKey 関数を用いて定義します。</p>\n<h4>\n        <span id=\"4-5\" class=\"fragment\"></span>\n        <a href=\"#4-5\"><i class=\"fa fa-link\"></i></a>② scala.slick.lifted.TableQuery オブジェクトを 3 つ作成\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre> <span class=\"err\">：</span>\n<span class=\"n\">中略</span>\n <span class=\"err\">：</span>\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * DAO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">OrderingDAO</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * scala.slick.lifted.TableQuery オブジェクトを 3 つ作成</span>\n<span class=\"cm\">   */</span>  \n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">customerQuery</span> <span class=\"k\">=</span> <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">customerQuery</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">itemQuery</span> <span class=\"k\">=</span> <span class=\"nc\">ItemDAO</span><span class=\"o\">.</span><span class=\"n\">itemQuery</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">orderingQuery</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">OrderingTable</span><span class=\"o\">]</span>\n <span class=\"err\">：</span>\n<span class=\"n\">中略</span>\n <span class=\"err\">：</span>\n</pre></div></div><p>scala.slick.lifted.TableQuery オブジェクトを 3 つ作成しています。</p>\n<p>こうすることで、複数のテーブルにまたがったクエリーを生成することが可能になります。</p>\n<h4>\n        <span id=\"4-6\" class=\"fragment\"></span>\n        <a href=\"#4-6\"><i class=\"fa fa-link\"></i></a>③ 3 つテーブルを結合した上でキーワード検索\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 3 つテーブルを結合した上でキーワード検索</span>\n<span class=\"cm\">   * @param word</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[(</span><span class=\"kt\">Long</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Long</span>, <span class=\"kt\">String</span><span class=\"o\">)]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">query</span> <span class=\"k\">=</span> <span class=\"k\">for</span> <span class=\"o\">{</span>\n      <span class=\"n\">ordering</span> <span class=\"k\">&lt;-</span> <span class=\"n\">orderingQuery</span>\n      <span class=\"n\">customer</span> <span class=\"k\">&lt;-</span> <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">customerID</span><span class=\"o\">)</span>\n      <span class=\"n\">item</span> <span class=\"k\">&lt;-</span> <span class=\"n\">itemQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">itemID</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">tel</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">,</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">itemCount</span><span class=\"o\">,</span> <span class=\"n\">ordering</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">)</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_4</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_5</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_6</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_7</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_8</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_10</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_12</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">_14</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">))).</span><span class=\"n\">list</span>\n  <span class=\"o\">}</span>\n <span class=\"err\">：</span>\n<span class=\"n\">中略</span>\n <span class=\"err\">：</span>\n</pre></div></div><p>Slick では、Query に対し for 式を用いて flatMap 操作を行うことでテーブルの結合（Join）を行います。</p>\n<p>結合の際に if 文を用いてフィルタリングを行うことで、内部結合（Inner Join）とする事ができます。</p>\n<p>Slick における結合等の方法の詳細については、以下の公式ドキュメントを参照してください。</p>\n<p><a href=\"http://slick.typesafe.com/doc/2.0.0/gettingstarted.html\" title=\"\" target=\"_blank\">http://slick.typesafe.com/doc/2.0.0/gettingstarted.html</a></p>\n<h3>\n        <span id=\"3-15\" class=\"fragment\"></span>\n        <a href=\"#3-15\"><i class=\"fa fa-link\"></i></a>手順 4-3: ファイル <code>app/contrallers/OrderingController.scala</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/contrallers/OrderingController.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controllers</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data.Forms._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick._</span>\n<span class=\"k\">import</span> <span class=\"nn\">models._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">OrderingController</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 受注情報入力フォームの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">val</span> <span class=\"n\">orderingForm</span> <span class=\"k\">=</span> <span class=\"nc\">Form</span><span class=\"o\">(</span>\n    <span class=\"n\">mapping</span><span class=\"o\">(</span>\n      <span class=\"s\">&quot;ID&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;createdAt&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;customerID&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;itemID&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;itemCount&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;comment&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">)</span>\n    <span class=\"o\">)(</span><span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"o\">)(</span><span class=\"nc\">Ordering</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 受注登録フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showCreateForm</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">orderingCreateForm</span><span class=\"o\">(</span><span class=\"n\">orderingForm</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 受注登録アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">orderingForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">orderingCreateForm</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">ordering</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">ordering</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">OrderingController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 受注情報検索アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">orderingSearch</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">)))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 受注情報削除アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">OrderingDAO</span><span class=\"o\">.</span><span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">))</span>\n    <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">OrderingController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-16\" class=\"fragment\"></span>\n        <a href=\"#3-16\"><i class=\"fa fa-link\"></i></a>手順 4-4: ファイル <code>app/views/orderingCreateForm.scala.html</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/orderingCreateForm.scala.html</span></div><div class=\"highlight\"><pre>@(orderingForm: Form[Ordering])\n\n@import helper._\n\n@main(title = &quot;受発注管理システム - 受注登録&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/search&quot;</span><span class=\"nt\">&gt;</span>受注情報一覧（検索/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/create&quot;</span><span class=\"nt\">&gt;</span>受注登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>受注登録<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          @form(routes.OrderingController.create()) {\n            <span class=\"nt\">&lt;fieldset&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;createdAt&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@System.currentTimeMillis()&quot;</span><span class=\"nt\">&gt;</span>\n              @inputText(orderingForm(&quot;customerID&quot;), &#39;_label -&gt; &quot;顧客番号&quot;, &#39;size -&gt; 30)\n              @inputText(orderingForm(&quot;itemID&quot;), &#39;_label -&gt; &quot;商品番号&quot;, &#39;size -&gt; 30)\n              @select(\n                orderingForm(&quot;itemCount&quot;),\n                options(\n                  &quot;1&quot; -&gt; &quot;1&quot;,\n                  &quot;2&quot; -&gt; &quot;2&quot;,\n                  &quot;3&quot; -&gt; &quot;3&quot;,\n                  &quot;4&quot; -&gt; &quot;4&quot;,\n                  &quot;5&quot; -&gt; &quot;5&quot;,\n                  &quot;6&quot; -&gt; &quot;6&quot;,\n                  &quot;7&quot; -&gt; &quot;7&quot;,\n                  &quot;8&quot; -&gt; &quot;8&quot;,\n                  &quot;9&quot; -&gt; &quot;9&quot;,\n                  &quot;10&quot; -&gt; &quot;10&quot;,\n                  &quot;11&quot; -&gt; &quot;11&quot;,\n                  &quot;12&quot; -&gt; &quot;12&quot;,\n                  &quot;13&quot; -&gt; &quot;13&quot;,\n                  &quot;14&quot; -&gt; &quot;14&quot;,\n                  &quot;15&quot; -&gt; &quot;15&quot;,\n                  &quot;16&quot; -&gt; &quot;16&quot;,\n                  &quot;17&quot; -&gt; &quot;17&quot;,\n                  &quot;18&quot; -&gt; &quot;18&quot;,\n                  &quot;19&quot; -&gt; &quot;19&quot;,\n                  &quot;20&quot; -&gt; &quot;20&quot;\n                ),\n                &#39;_label -&gt; &quot;商品個数&quot;\n              )\n              @inputText(orderingForm(&quot;comment&quot;), &#39;_label -&gt; &quot;備考&quot;, &#39;size -&gt; 30)\n            <span class=\"nt\">&lt;/fieldset&gt;</span>\n            <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;actions&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/search&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span><span class=\"nt\">&gt;</span>キャンセル<span class=\"nt\">&lt;/a&gt;</span>\n            <span class=\"nt\">&lt;/div&gt;</span>\n          }\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-17\" class=\"fragment\"></span>\n        <a href=\"#3-17\"><i class=\"fa fa-link\"></i></a>手順 4-5: ファイル <code>app/views/orderingSearch.scala.html</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/orderingCreateForm.scala.html</span></div><div class=\"highlight\"><pre>@(word: String, orderings: List[(Long, Long, Long, String, String, String, String, String, Long, String, Long, String, Long, String)])\n\n@import java.util.Date\n\n@main(title = &quot;受発注管理システム - 受注情報一覧&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/search&quot;</span><span class=\"nt\">&gt;</span>受注情報一覧（検索/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/orderings/create&quot;</span><span class=\"nt\">&gt;</span>受注登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>受注情報一覧（検索/削除）<span class=\"nt\">&lt;/h1&gt;</span> \n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- 検索フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n        @helper.form(action=routes.OrderingController.search()) {\n          <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;search&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;word&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@word&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;キーワード検索&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;byn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n        }\n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- テーブル --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;table</span> <span class=\"na\">class=</span><span class=\"s\">&quot;table table-bordered table-striped &quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;thead&gt;</span>\n              <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>受注番号<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>受注日時<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>顧客氏名<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>メールアドレス<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>商品名<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>単価<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>個数<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>合計価格<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>備考<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;&lt;/th&gt;</span>\n              <span class=\"nt\">&lt;/tr&gt;</span>\n            <span class=\"nt\">&lt;/thead&gt;</span>\n            <span class=\"nt\">&lt;tbody&gt;</span>\n            @orderings.map { ordering =&gt;\n              <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%9d&quot;.format(ordering._1))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%tY/%<span class=\"nt\">&lt;tm</span><span class=\"err\">/%&lt;</span><span class=\"na\">td</span> <span class=\"err\">%&lt;</span><span class=\"na\">tH:</span><span class=\"err\">%&lt;</span><span class=\"na\">tM:</span><span class=\"err\">%&lt;</span><span class=\"na\">tS</span><span class=\"err\">&quot;.</span><span class=\"na\">format</span><span class=\"err\">(</span><span class=\"na\">new</span> <span class=\"na\">Date</span><span class=\"err\">(</span><span class=\"na\">ordering</span><span class=\"err\">.</span><span class=\"na\">_2</span><span class=\"err\">)))&lt;/</span><span class=\"na\">td</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@ordering._4<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@ordering._5<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@ordering._10<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%,d&quot;.format(ordering._11))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%,d&quot;.format(ordering._13))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%,d&quot;.format((ordering._11 * ordering._13)))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@ordering._14<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;center&quot;</span><span class=\"nt\">&gt;&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;削除&quot;</span> <span class=\"na\">onClick=</span><span class=\"s\">&#39;if(confirm(&quot;本当に削除してよろしいですか？&quot;)) {location.href=&quot;/orderings/@ordering._1/remove&quot;}&#39;</span><span class=\"nt\">&gt;&lt;/td&gt;</span>\n              <span class=\"nt\">&lt;/tr&gt;</span>\n            }\n            <span class=\"nt\">&lt;/tbody&gt;</span>\n          <span class=\"nt\">&lt;/table&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-18\" class=\"fragment\"></span>\n        <a href=\"#3-18\"><i class=\"fa fa-link\"></i></a>手順 4-6: ブラウザで、<code>http://localhost:9000/</code> にアクセスします\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180417.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>再びモデル層に変更を加えたため、テーブルスキーマの変更（DROP TABLE → CREATE TABLE）が必要になります。</p>\n<p><code>CREATE TABLE</code> 文に加えて、外部キー制約を与えるための <code>ALTER TABLE</code> 文も生成されていることがわかります。</p>\n<h3>\n        <span id=\"3-19\" class=\"fragment\"></span>\n        <a href=\"#3-19\"><i class=\"fa fa-link\"></i></a>手順 4-7: <code>Apply this script now!</code> ボタンをクリックします\n      </h3><p>「受注管理システム」 の完成です。</p>\n<h4>\n        <span id=\"4-7\" class=\"fragment\"></span>\n        <a href=\"#4-7\"><i class=\"fa fa-link\"></i></a>受注登録\n      </h4><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180432.png\" class=\"hatena-fotolife\"></span></p>\n\n<h4>\n        <span id=\"4-8\" class=\"fragment\"></span>\n        <a href=\"#4-8\"><i class=\"fa fa-link\"></i></a>受注情報一覧\n      </h4><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140806/20140806180448.png\" class=\"hatena-fotolife\"></span></p>\n\n\n<hr>\n<p>作成した 「受注管理システム」 のソースコードは以下に保存していますので参考にしてください。</p>\n<p><a href=\"https://github.com/kukita/play-scala-order-management-system\" title=\"\" target=\"_blank\">https://github.com/kukita/play-scala-order-management-system</a></p>\n<p>以上</p>\n",
        "stock_users": [
            "yotchang4s",
            "MasahiroSakoda",
            "uchiko",
            "takehironet",
            "nkhryo",
            "kasumani",
            "hayasshi",
            "kou_tana77",
            "ozw_sei",
            "yodatomato"
        ]
    },
    {
        "id": 105423,
        "uuid": "6326f1439abec013a479",
        "user": {
            "id": 44745,
            "url_name": "kukita",
            "profile_image_url": "https://pbs.twimg.com/profile_images/2822189342/8f4f7c67338f639a021767c95a15ca4a_normal.png"
        },
        "title": "【#Play】Play Framework 2.3 (Scala) を使った Web システム開発入門 #Play_ja #Scala #rpscala",
        "created_at": "2014-08-05 23:18:50 +0900",
        "updated_at": "2014-08-08 18:28:10 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Play",
                "url_name": "play",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fa2b451af29d0da4710110f38c881d3c30a63caf/medium.jpg?1364839880",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            },
            {
                "name": "Play2",
                "url_name": "play2",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f8d7c0088c04def66debcfcc9915914dc2c11df/medium.jpg?1364840479",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            }
        ],
        "stock_count": 34,
        "comment_count": 0,
        "url": "http://qiita.com/kukita/items/6326f1439abec013a479",
        "created_at_as_seconds": 1407248330,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "Play Framework 2.3.x と Scala を使った Web システム開発について勉強した際の内容を自分用のメモとしてまとめました。\n\n次に示すソフトウェアがインストール済みの環境で、「顧客情報の登録/検索/更新/削除」、「商品情報の登録/検索/更新/削除」、そして、「受注登録」を行うための簡単な 受注管理システムを作成することを目指します。\n\n|ソフトウェア名 |バージョン |入手元 |\n|-----------|---------|------|\n|OS         |Windows 7|-|\n|JDK        |8u11(jdk1.8.0_05) |http://www.oracle.com/|\n|Play       |2.3.2 |http://www.playframework.com/|\n|Eclipse    |4.3.2(Pleiades版) |http://mergedoc.sourceforge.jp/|\n|Scala IDE for Eclipse|-|http://download.scala-ide.org/sdk/helium/e38/scala211/stable/site|\n\n## 1: Play Framework 2.3.x で 「Hello World」\n\nまず、手始めに Play Framework 2.3.x (Scala) を使って 「Hello World」 を表示するだけの簡単な Web アプリケーションを作成します。\n\n### 手順 1-1: スタートメニューから \"Windows PowerShell\" を起動します。\n\n### 手順 1-2: PowerShell のコンソール画面で下記コマンドを入力し、`play-scala` という名前のテンプレートから新規プロジェクトを作成します\n\n```ps1\nPS> Set-Location \"$HOME\" ←任意のフォルダーで構いません。\nPS> & activator new \"order-management-system\" \"play-scala\"\n```\n\n### 手順 1-3:  PowerShell のコンソール画面で下記コマンドを入力し、 Eclipse のプロジェクトとして読み込み可能な形式に変換します\n\n```ps1\nPS> Set-Location \".\\order-management-system\"\nPS> & activator eclipse\n```\n\nPlay Framework は「Eclipse」の他にも、IDE として「Intellij IDEA」もサポートしています。「Intellij IDEA」で利用する場合は、`& activator idea` と入力します。\n\n### 手順 1-4: スタートメニューから \"Eclipse\" を起動します。\n\n### 手順 1-5: Eclipse のメニューから [ファイル(F)] → [インポート(I)...] を選択しクリックします\n\n### 手順 1-6: [一般] → [既存プロジェクトをワークスペースへ] を選択し、[次へ(N)>] ボタンをクリックします\n\n### 手順 1-7: \"ルート・ディレクトリーの選択(T):\" で作成したプロジェクトのフォルダーを選択し、[完了(F)] ボタンをクリックします\n\n### 手順 1-8: ファイル `conf/routes` を確認します\n\n```scala:conf/routes\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# Home page\nGET     /                           controllers.Application.index\n\n# Map static resources from the /public folder to the /assets URL path\nGET     /assets/*file               controllers.Assets.at(path=\"/public\", file)\n```\n\nホームページ（/）に GET リクエストがあった際に、`controllers` パッケージにある `Application` オブジェクトの `index` メソッドが実行されるという意味の構文が記述されていることを確かめます。\n\n### 手順 1-9: ファイル `app/controllers/Application.scala` を編集します\n\n```scala:app/controllers/Application.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\nobject Application extends Controller {\n\n  def index = Action {\n    Ok(\"Hello world\")\n  }\n\n}\n```\n\nPlay Framework では、HTTP リクエストを Action オブジェクトを使って処理します。\n\nここでは、HTTP リクエストがあった場合に、`ステータス 200 OK` のレスポンスと共に、\"Hello world\" 文字列を返す記述をしています。\n\n### 手順 1-10:  PowerShell のコンソール画面で下記コマンドを入力し、 作成したアプリケーションを起動します\n\n```ps1\nPS> & activator run\n```\n\n### 手順 1-11: ブラウザで、`http://localhost:9000/` にアクセスし、「Hello World」が表示されることを確かめます。\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230304.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n\n### 手順 1-12:  PowerShell のコンソール画面で Ctrl+D キーを入力し、 アプリケーションを停止します\n\nなお、 Play Framework 2 は、アプリケーションが起動したままの状態でソースコードを編集した場合でも、ブラウザからのアクセス時にコンパイルが自動的に行われます。\n\n## 2: Play Framework 2.3.x と Play-Slick を使った CRUD アプリケーションの作成\n\n続いて、Scala のためのデータベースラッパー「Slick」と Slick を Play Framework 2 で利用するためのプラグイン「Play-Slick」を使って、顧客情報の「登録（Create）」、「参照/検索（Reference）」、「更新（Update）」、「削除（Delete）」を行うための簡単な CRUD アプリケーションを作成します。\n\nPlay Framework 2.3.x では、Model 層の実装に Anorm を標準採用していますが、ここでは、次期バージョンから採用予定とされている Slick というライブラリを使用します。\n\n### 手順 2-1: \"build.sbt\" に Slick に関連するライブラリのリポジトリを追記します\n\n```scala:build.sbt\nname := \"\"\"order-management-system\"\"\"\n\nversion := \"1.0-SNAPSHOT\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala)\n\nscalaVersion := \"2.11.1\"\n\nlibraryDependencies ++= Seq(\n  jdbc,\n  anorm,\n  cache,\n  ws,\n  \"com.typesafe.slick\" %% \"slick\" % \"2.1.0\",    # 追記\n  \"org.slf4j\" % \"slf4j-nop\" % \"1.6.4\",          # 追記\n  \"com.typesafe.play\" %% \"play-slick\" % \"0.8.0\" # 追記\n)\n\n```\n\n### 手順 2-2: PowerShell のコンソール画面で下記コマンドを入力し、依存ライブラリをダウンロードします\n\n```ps1\nPS> & activator update\nPS> & activator eclipse\n```\n\n### 手順 2-3: ファイル \"conf/application.conf\" を編集します\n\n```ps1:conf/application.conf\n ：\n中略\n ：\n# Database configuration\n# ~~~~~\n# You can declare as many datasources as you want.\n# By convention, the default datasource is named `default`\n#\ndb.default.driver=org.h2.Driver\ndb.default.url=\"jdbc:h2:mem:oms;MODE=MYSQL;DB_CLOSE_DELAY=-1\"\ndb.default.user=sa\ndb.default.password=\"\"\nslick.default=\"models.*\"\n ：\n中略\n ：\n```\n\nH2 のインメモリ DB を使って、\"oms\" という名前のデータベースを作成/使用するための設定を行っています。\n\nまた、MySQL の動作を真似るために `MODE=MYSQL` パラメーター、インメモリ DB のリセットを防ぐために `DB_CLOSE_DELAY=-1` パラメーターを\"db.default.url\"の値に与えています。\n\n\n### 手順 2-4: ファイル `app/models/customer.scala` を作成しモデル層の実装をします\n\n```scala:app/models/customer.scala\npackage models\n\n/**\n * ① Slick 関連のパッケージのインポート\n */\nimport play.api.db.slick.Config.driver.simple._\n\n/**\n * ② DTO の定義\n */\ncase class Customer(ID: Long, name: String, email: String, tel: String, address: String, comment: String)\n\n/**\n * ③ テーブルスキーマの定義\n */\nclass CustomerTable(tag: Tag) extends Table[Customer](tag, \"customers\") {\n  def ID = column[Long](\"id\", O.PrimaryKey, O.AutoInc)\n  def name = column[String](\"name\", O.NotNull)\n  def email = column[String](\"email\", O.NotNull)\n  def tel = column[String](\"tel\", O.NotNull )\n  def address = column[String](\"address\", O.NotNull)\n  def comment = column[String](\"comment\", O.NotNull)\n  def * = (ID, name, email, tel, address, comment) <> (Customer.tupled, Customer.unapply)\n}\n\n/**\n * ④ DAO の定義\n */\nobject CustomerDAO {\n  lazy val customerQuery = TableQuery[CustomerTable]\n  \n  /**\n   * キーワード検索\n   * @param word\n   */\n  def search(word: String)(implicit s: Session): List[Customer] = {\n    customerQuery.filter(row => (row.name like \"%\"+word+\"%\") || (row.email like \"%\"+word+\"%\") || (row.tel like \"%\"+word+\"%\") || (row.address like \"%\"+word+\"%\") || (row.comment like \"%\"+word+\"%\")).list\n  }\n  \n  /**\n   * ID検索\n   * @param ID\n   */\n  def searchByID(ID: Long)(implicit s: Session): Customer = {\n    customerQuery.filter(_.ID === ID).first\n  }\n  \n  /**\n   * 作成\n   * @param customer\n   */\n  def create(customer: Customer)(implicit s: Session) {\n    customerQuery.insert(customer)\n  }\n  \n  /**\n   * 更新\n   * @param customer\n   */\n  def update(customer: Customer)(implicit s: Session) {\n    customerQuery.filter(_.ID === customer.ID).update(customer)\n  }\n  \n  /**\n   * 削除\n   * @param customer\n   */\n  def remove(customer: Customer)(implicit s: Session) {\n    customerQuery.filter(_.ID === customer.ID).delete\n  }\n}\n\n```\n\n#### ① Slick 関連のパッケージのインポート\n\n```scala\n/**\n * ① Slick 関連のパッケージのインポート\n */\nimport play.api.db.slick.Config.driver.simple._\n```\n\n\"play-slick\"のパッケージをインポートしています。\n\n先ほど記述した設定ファイルから自動的にドライバ関連のパッケージも読み込まれますので利用するDBMSの種類を指定する必要はありません。\n\n#### ② DTO の定義\n\n```scala\n/**\n * ② DTO の定義\n */\ncase class Customer(ID: Long, name: String, email: String, tel: String, address: String, comment: String)\n```\n\nData Transfer Object（DTO）のクラスを定義します。\n\nScala では、`case class` として定義することでコンストラクタや getter 等が自動的に定義されます。\n\n[参考]\n[Data Transfer Object - ウィキペディア](http://ja.wikipedia.org/wiki/Data_Transfer_Object)\n\n#### ③ テーブルスキーマの定義\n\n```scala\n/**\n * ③ テーブルスキーマの定義\n */\nclass CustomerTable(tag: Tag) extends Table[Customer](tag, \"customers\") {\n  def ID = column[Long](\"id\", O.PrimaryKey, O.AutoInc)\n  def name = column[String](\"name\", O.NotNull)\n  def email = column[String](\"email\", O.NotNull)\n  def tel = column[String](\"tel\", O.NotNull )\n  def address = column[String](\"address\", O.NotNull)\n  def comment = column[String](\"comment\", O.NotNull)\n  def * = (ID, name, email, tel, address, comment) <> (Customer.tupled, Customer.unapply)\n}\n```\n\nこの形式で記述することで、`CREATE TABLE` 文と `DROP TABLE` 文を自動的に生成します。\n\n#### ④ DAO の定義\n\n```scala\n\n/**\n * ④ DAO の定義\n */\nobject CustomerDAO {\n  lazy val customerQuery = TableQuery[CustomerTable]\n  \n  /**\n   * キーワード検索\n   * @param word\n   */\n  def search(word: String)(implicit s: Session): List[Customer] = {\n    customerQuery.filter(row => (row.name like \"%\"+word+\"%\") || (row.email like \"%\"+word+\"%\") || (row.tel like \"%\"+word+\"%\") || (row.address like \"%\"+word+\"%\") || (row.comment like \"%\"+word+\"%\")).list\n  }\n  \n  /**\n   * ID検索\n   * @param ID\n   */\n  def searchByID(ID: Long)(implicit s: Session): Customer = {\n    customerQuery.filter(_.ID === ID).first\n  }\n  \n  /**\n   * 作成\n   * @param customer\n   */\n  def create(customer: Customer)(implicit s: Session) {\n    customerQuery.insert(customer)\n  }\n  \n  /**\n   * 更新\n   * @param customer\n   */\n  def update(customer: Customer)(implicit s: Session) {\n    customerQuery.filter(_.ID === customer.ID).update(customer)\n  }\n  \n  /**\n   * 削除\n   * @param customer\n   */\n  def remove(customer: Customer)(implicit s: Session) {\n    customerQuery.filter(_.ID === customer.ID).delete\n  }\n}\n```\n\nData Access Object（DAO）を定義しています。\n\nScalaでは、`object` と定義することで簡単にシングルトン化されたオブジェクトを作成することができます。\n\nまた、メソッドしては、CRUD アプリケーションに必要な基本的なクエリーを 5 つ定義しています。\n\n[参考]\n[Data Access Object - ウィキペディア](http://ja.wikipedia.org/wiki/Data_Access_Object)\n\n### 手順 2-5:  PowerShell のコンソール画面で下記コマンドを入力し、 作成したアプリケーションを起動します\n\n```ps1\nPS> & activator run\n```\n\n### 手順 2-6: ブラウザで、`http://localhost:9000/` にアクセスし、「Database 'default' needs evolution!」と書かれた画面が表示されることを確かめます。\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140807/20140807110913.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\nここで、`Apply this script now!` ボタンをクリックすると自動生成された SQL 文が実行されます。\n\n### 手順 2-7: ファイル `conf/routes` を編集します\n\n```scala:conf/routes\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# Home page\nGET     /                           controllers.Application.index\n\n# Map static resources from the /public folder to the /assets URL path\nGET     /assets/*file               controllers.Assets.at(path=\"/public\", file)\n\n#\n# Customers Management\n#\n\n# Create customer infomation.\nGET     /customers/create           controllers.CustomerController.showCreateForm()\nPOST    /customers/create           controllers.CustomerController.create()\n\n# Search customer infomation.\nGET     /customers/search           controllers.CustomerController.search(word: String ?= \"\")\n\n# Update customer infomation.\nGET     /customers/:id/update       controllers.CustomerController.showUpdateForm(id: Long)\nPOST    /customers/:id/update       controllers.CustomerController.update(id: Long)\n\n# Remove customer infomation\nGET     /customers/:id/remove       controllers.CustomerController.remove(id: Long)\n\n```\n\n顧客情報を「作成」「検索」「更新」「削除」する画面をそれぞれ定義します。\n\nなお、余談ですが、このファイルはコメント等に日本語を使うとエラーになってしまうので注意が必要です。\n\n### 手順 2-8: ファイル `app/controllers/customerController.scala` を作成します\n\n```scala:app/controllers/customerController.scala\npackage controllers\n\n/**\n * ① パッケージのインポート\n */\nimport play.api._\nimport play.api.mvc._\n\nimport play.api.data._\nimport play.api.data.Forms._\n\nimport play.api.db.slick._\nimport models._\n\n\n/**\n * ② コントローラーオブジェクトの定義\n */\nobject CustomerController extends Controller {\n\n  /**\n   * ③ フォームの定義\n   */\n  val customerForm = Form(\n    mapping(\n      \"ID\" -> longNumber,\n      \"name\" ->  nonEmptyText(maxLength = 140),\n      \"email\" ->  nonEmptyText(maxLength = 140),\n      \"tel\" ->  nonEmptyText(maxLength = 140),\n      \"address\" ->  nonEmptyText(maxLength = 140),\n      \"comment\" -> text(maxLength = 140)\n    )(Customer.apply)(Customer.unapply)\n  )\n  \n  /**\n   * ④ 顧客情報登録フォーム表示アクションメソッドの定義\n   */\n  def showCreateForm() = Action { request =>\n    Ok(views.html.customerCreateForm(customerForm))\n  }\n  \n  /**\n   * ⑤ 顧客情報登録アクションメソッドの定義\n   */\n  def create() = DBAction { implicit rs =>\n    customerForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.customerCreateForm(errors)),\n      customer => {\n        CustomerDAO.create(customer)\n        Redirect(routes.CustomerController.search())\n      }\n    )\n  }\n  \n  /**\n   * ⑥ 顧客情報検索アクションメソッドの定義\n   */\n  def search(word: String) = TODO\n  \n  /**\n   * ⑦ 顧客情報更新フォーム表示アクションメソッドの定義\n   */\n  def showUpdateForm(ID: Long) = TODO\n\n  /**\n   * ⑧ 顧客情報更新アクションメソッドの定義\n   */\n  def update(ID: Long) = TODO\n\n  /**\n   * ⑨ 顧客情報削除アクションメソッドの定義\n   */\n  def remove(ID: Long) =TODO\n}\n\n```\n\n#### ① パッケージのインポート\n\n```scala\n/**\n * ① パッケージのインポート\n */\nimport play.api._\nimport play.api.mvc._\n\nimport play.api.data._\nimport play.api.data.Forms._\n\nimport play.api.db.slick._\nimport models._\n\n```\n\n最初の2行で、コントローラー層として利用するために必要なパッケージをインポートしています。\n\n次の2行は、Play Framework 2 に用意されているHTTP フォームデータの送信とバリデーションを行うヘルパーを利用するために必要なパッケージをインポートしています。\n\n最後の2行は、先ほど定義した DTO と DAO を利用するために、play-slick のパッケージとモデル層のパッケージをインポートしています。\n\n#### ② コントローラーオブジェクトの定義\n\n```scala\n/**\n * ② コントローラーオブジェクトの定義\n */\nobject CustomerController extends Controller {\n ：\n中略\n ：\n```\n\n続いてコントローラーオブジェクトの定義を行います。`Controller` クラスを継承する形で、先ほど `conf/routes` 内で定義した全てのコントローラーとメソッドを定義する必要があります。\n\n#### ③ HTTP フォームデータの定義\n\n```scala\n  /**\n   * ③ HTTP フォームデータの定義\n   */\n  val customerForm = Form(\n    mapping(\n      \"ID\" -> longNumber,\n      \"name\" ->  nonEmptyText(maxLength = 140),\n      \"email\" ->  nonEmptyText(maxLength = 140),\n      \"tel\" ->  nonEmptyText(maxLength = 140),\n      \"address\" ->  nonEmptyText(maxLength = 140),\n      \"comment\" -> text(maxLength = 140)\n    )(Customer.apply)(Customer.unapply)\n  )\n\n```\n\nPlay Framework 2 では、HTTP フォームデータの送信とバリデーションを行うヘルパーが用意されています。\n\nここでは、先ほど DTO として定義した `Customer` にラップするフォームを定義しています。\n\n詳細については、下記の公式ドキュメントを参照してください。\n\n[[http://www.playframework-ja.org/documentation/2.0.8/ScalaForms]](http://www.playframework-ja.org/documentation/2.0.8/ScalaForms)\n\n#### ④ 顧客情報登録フォーム表示アクションメソッドの定義\n\n```scala\n  /**\n   * ④ 顧客情報登録フォーム表示アクションメソッドの定義\n   */\n  def showCreateForm() = Action { request =>\n    Ok(views.html.customerCreateForm(customerForm))\n  }\n\n```\n\n`conf/routes` 内で定義した `showCreateForm()` メソッドの定義を行います。\n\nPlay Framework では、HTTP リクエストを `Action` オブジェクトを使って処理します。\n\nここでは、HTTP リクエストがあった場合に、`ステータス 200 OK` のレスポンスと共に、後ほど定義する View の結果を返すように定義します。\n\n詳細については、下記の公式ドキュメントを参照してください。\n\n[[http://www.playframework-ja.org/documentation/2.0.8/ScalaActions]](http://www.playframework-ja.org/documentation/2.0.8/ScalaActions)\n\n#### ⑤ 顧客情報登録アクションメソッドの定義\n\n```scala\n  /**\n   * ⑤ 顧客情報登録アクションメソッドの定義\n   */\n  def create() = DBAction { implicit rs =>\n    customerForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.customerCreateForm(errors)),\n      customer => {\n        CustomerDAO.create(customer)\n        Redirect(routes.CustomerController.search())\n      }\n    )\n  }\n```\n\n`conf/routes` 内で定義した `Create()` メソッドの定義を行います。\n\nplay-slick の `DBAction` オブジェクトを使うことで、DB とのセッションを自動的に生成することができます。\n\nここでは、`bindFromRequest.fold()` メソッドを使って、HTTP フォームデータの定義で行っているバリデーションのバインドエラー処理を行っています。\n\n#### ⑥ 顧客情報検索アクションメソッドの定義以降\n\n```scala\n  /**\n   * ⑥ 顧客情報検索アクションメソッドの定義\n   */\n  def search(word: String) = TODO\n ：\n中略\n ：\n```\n\n前述したように、`conf/routes` 内で定義した全てのメソッドについて定義する必要がありますが、ここでは TODO という空の `Action` オブジェクトの実装を利用します。\n\nこうすることで、Play Framework 標準の \"Not implemented yet\" ページを表示させることができます。\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230411.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n### 手順 2-9: Play Framework 2.3.x で Twitter Bootstrap 3 を利用するためにファイル `app/views/main.html.scala` を編集します\n\n\nTwitter Bootstrap 3 の公式ページを参考に記述します。\n\n[[http://getbootstrap.com/getting-started/]](http://getbootstrap.com/getting-started/)\n\n```html:app/views/main.html.scala`\n@(title: String)(content: Html)\n\n<!DOCTYPE html>\n<html lang=\"ja\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>@title</title>\n\n    <!-- Bootstrap -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css\">\n    \n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <section class=\"content\">@content</section>\n\n    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n    <!-- Include all compiled plugins (below), or include individual files as needed -->\n    <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\n  </body>\n</html>\n\n```\n\n### 手順 2-10: `app/views/header.scala.html` を作成します\n\n```html:app/views/header.scala.html\n<div class=\"navbar navbar-inverse navbar-static-top\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\" href=\"/\">受注管理システム</a>\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n    </div>\n    <div class=\"navbar-collapse collapse\">\n      <ul class=\"nav navbar-nav\" role=\"menu\">\n        <li class=\"dropdown\"><a class=\"dropdown-toggle\" data-toggle=\"dropdown\">顧客情報管理</a>\n          <ul class=\"dropdown-menu\">\n            <li><a role=\"menuitem\" href=\"/customers/search\">顧客情報一覧（検索/更新/削除）</a></li>\n            <li><a role=\"menuitem\" href=\"/customers/create\">顧客情報登録</a></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n```\n\n### 手順 2-11: `app/views/customerCreateForm.scala.html` を作成します\n\n```html:app/views/customerCreateForm.scala.html`\n@(customerForm: Form[Customer])\n\n@import helper._\n\n@main(title = \"受注管理システム - 顧客情報登録\") {\n\n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/customers/search\">顧客情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/customers/create\">顧客情報登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n      \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>顧客情報登録</h1>\n        </div>\n        \n        <!-- フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          @form(routes.CustomerController.create()) {\n            <fieldset>\n              <input type=\"hidden\" name=\"ID\" value=\"0\">\n              @inputText(customerForm(\"name\"), '_label -> \"顧客氏名\", 'size -> 30)\n              @inputText(customerForm(\"email\"), '_label -> \"メールアドレス\",'type -> \"email\", 'size -> 30)\n              @inputText(customerForm(\"tel\"), '_label -> \"電話番号\", 'size -> 30)\n              @inputText(customerForm(\"address\"), '_label -> \"住所\", 'size -> 30)\n              @inputText(customerForm(\"comment\"), '_label -> \"備考\", 'size -> 30)\n            </fieldset>\n            <div class=\"actions\">\n              <input type=\"submit\" class=\"btn btn-primary\">\n              <a href=\"/customers/search\" class=\"btn btn-danger\">キャンセル</a>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n </div>\n}\n\n```\nPlaey Framework 2 では、`Scala ベースのテンプレートエンジン`が用意されています。\n\nここでは、`CustomerCreateForm.html.scala` という名前のファイルを作成したので、先ほどコントローラー内で定義した `views.html.customerCreateForm()` が生成されます。\n\n詳細については、下記の公式ドキュメントを参考にしてください。\n\n[[http://www.playframework-ja.org/documentation/2.0.8/ScalaTemplates]](http://www.playframework-ja.org/documentation/2.0.8/ScalaTemplates)\n\nまた、フォームの作成部分には、Play Framework 2 の `フォームテンプレートヘルパー` 機能を利用しています。\n\n[[http://www.playframework-ja.org/documentation/2.0.8/ScalaFormHelpers]](http://www.playframework-ja.org/documentation/2.0.8/ScalaFormHelpers)\n\nポイントとしては、新規作成時点では、`ID（プライマリキー）` が未定なので、`input` タグの `hidden` タイプを使って値 `0` を渡しています。\n\n### 手順 2-12: ここで一度ブラウザから `http://localhost:9000/customers/create` にアクセスして動作を確認します\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230441.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\nフォームに何も入力しないで、 `送信` ボタンをクリックすると `This field is required` と表示されてバリデーションが働いていることが確認できます。\n\nまた、全ての必要項目に適当な値を入力して `送信` ボタンをクリックすると TODO 画面に遷移することが確認できます。（裏では DB にデータが挿入されています。）\n\nここまでの部分で、CRUD の 「C」の部分の実装ができたので、同様の流れで残りの部分を一気に実装してしまいます。\n\n### 手順 2-13: ファイル `app/controllers/CustomerController.scala` を編集します\n\n```scala:app/controllers/CustomerController.scala\npackage controllers\n\n/**\n * ① パッケージのインポート\n */\nimport play.api._\nimport play.api.mvc._\n\nimport play.api.data._\nimport play.api.data.Forms._\n\nimport play.api.db.slick._\nimport models._\n\n/**\n * ② コントローラーオブジェクトの定義\n */\nobject CustomerController extends Controller {\n\n  /**\n   * ③ HTTP フォームデータの定義\n   */\n  val customerForm = Form(\n    mapping(\n      \"ID\" -> longNumber,\n      \"name\" ->  nonEmptyText(maxLength = 140),\n      \"email\" ->  nonEmptyText(maxLength = 140),\n      \"tel\" ->  nonEmptyText(maxLength = 140),\n      \"address\" ->  nonEmptyText(maxLength = 140),\n      \"comment\" -> text(maxLength = 140)\n    )(Customer.apply)(Customer.unapply)\n  )\n  \n  /**\n   * ④ 顧客情報登録フォーム表示アクションメソッドの定義\n   */\n  def showCreateForm() = Action { request =>\n    Ok(views.html.customerCreateForm(customerForm))\n  }\n  \n  /**\n   * ⑤ 顧客情報登録アクションメソッドの定義\n   */\n  def create() = DBAction { implicit rs =>\n    customerForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.customerCreateForm(errors)),\n      customer => {\n        CustomerDAO.create(customer)\n        Redirect(routes.CustomerController.search())\n      }\n    )\n  }\n  \n  /**\n   * ⑥ 顧客情報検索アクションメソッドの定義\n   */\n  def search(word: String) = DBAction { implicit rs =>\n    Ok(views.html.customerSearch(word, CustomerDAO.search(word)))\n  }\n  \n  /**\n   * ⑦ 顧客情報更新フォーム表示アクションメソッドの定義\n   */\n  def showUpdateForm(ID: Long) = DBAction { implicit rs =>\n    Ok(views.html.customerUpdateForm(ID, customerForm.fill(CustomerDAO.searchByID(ID))))\n  }\n\n  /**\n   * ⑧ 顧客情報更新アクションメソッドの定義\n   */\n  def update(ID: Long) = DBAction { implicit rs =>\n    customerForm.bindFromRequest.fold(\n      errors => BadRequest(views.html.customerUpdateForm(ID, errors)),\n      customer => {\n        CustomerDAO.update(customer)\n        Redirect(routes.CustomerController.search())\n      }\n    )\n  }\n\n  /**\n   * ⑨ 顧客情報削除アクションメソッドの定義\n   */\n  def remove(ID: Long) = DBAction { implicit rs =>\n    CustomerDAO.remove(CustomerDAO.searchByID(ID))\n    Redirect(routes.CustomerController.search())\n  }\n}\n\n```\n\n### 手順 2-14: ファイル `app/views/CustomerSearch.scala.html` を編集します\n\n```html:app/views/CustomerSearch.scala.html\n@(word: String, customers: List[Customer])\n\n@main(title = \"受注管理システム - 顧客情報一覧（検索/更新/削除）\") {\n\n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/customers/search\">顧客情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/customers/create\">顧客情報登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n        \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>顧客情報一覧（検索/更新/削除）</h1> \n        </div>\n        \n        <!-- 検索フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n        @helper.form(action=routes.CustomerController.search()) {\n          <input type=\"search\" name=\"word\" value=\"@word\">\n          <input type=\"submit\" value=\"キーワード検索\" class=\"byn btn-primary\">\n        }\n        </div>\n        \n        <!-- テーブル -->\n        <div class=\"table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <table class=\"table table-bordered table-striped \">\n            <thead>\n              <tr>\n                <th>顧客番号</th>\n                <th>顧客氏名</th>\n                <th>メールアドレス</th>\n                <th>電話番号</th>\n                <th>住所</th>\n                <th>備考</th>\n                <th align=\"center\"></th>\n              </tr>\n            </thead>\n            <tbody>\n            @customers.map { customer =>\n              <tr>\n                <td align=\"right\">@(\"%9d\".format(customer.ID))</td>\n                <td>@customer.name</td>\n                <td>@customer.email</td>\n                <td>@customer.tel</td>\n                <td>@customer.address</td>\n                <td>@customer.comment</td>\n                <td align=\"center\">\n                  <a href=\"/customers/@customer.ID/update\" class=\"btn btn-primary\">更新</a>\n                  <input type=\"button\" class=\"btn btn-danger\" value=\"削除\" onClick='if(confirm(\"本当に削除してよろしいですか？\")) {location.href=\"/customers/@customer.ID/remove\"}'>\n                </td>\n              </tr>\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n </div>\n}\n```\n\n### 手順 2-15: ファイル `app/views/CustomerUpdate.scala.html` を編集します\n\n```html:app/views/CustomerUpdate.scala.html\n@(ID: Long, customerForm: Form[Customer])\n\n@import helper._\n\n@main(title = \"受注管理システム - 顧客情報更新\") {\n \n<!-- ヘッダー -->\n@header()\n\n<div class=\"row\">\n  <div class=\"container\">\n  \n    <!-- サイドメニュー -->\n    <div class=\"hidden-xs col-sm-3 col-md-3 col-lg-3\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"nav nav-pills nav-stacked\">\n            <li><a href=\"/customers/search\">顧客情報一覧（検索/更新/削除）</a></li>\n            <li><a href=\"/customers/create\">顧客情報登録</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <!-- コンテンツ -->\n    <div class=\"col-xs-12 col-sm-9 col-md-9 col-lg-9\">\n      <div class=\"row\">\n        \n        <!-- 見出し -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <h1>顧客情報更新</h1> \n        </div>\n                \n        <!-- フォーム -->\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          @form(routes.CustomerController.update(ID)) {\n            <fieldset>\n              <input type=\"hidden\" name=\"ID\" value=\"@ID\">\n              @inputText(customerForm(\"name\"), '_label -> \"顧客氏名\", 'size -> 30)\n              @inputText(customerForm(\"email\"), '_label -> \"メールアドレス\",'type -> \"email\", 'size -> 40)\n              @inputText(customerForm(\"tel\"), '_label -> \"電話番号\", 'size -> 30)\n              @inputText(customerForm(\"address\"), '_label -> \"住所\", 'size -> 30)\n              @inputText(customerForm(\"comment\"), '_label -> \"備考\", 'size -> 30)\n            </fieldset>\n            <div class=\"actions\">\n              <input type=\"submit\" class=\"btn btn-primary\">\n              <a href=\"/customers/search\" class=\"btn btn-danger\">キャンセル</a>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n </div>\n}\n```\n\n### 手順 2-16: ブラウザから `http://localhost:9000/customers/search` にアクセスします\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230507.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n先ほど登録したデータを参照することができます\n\n### 手順 2-17: `更新` ボタンをクリックします\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230529.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\nデータの更新が可能です。データを更新すると `顧客情報一覧` 画面に戻ります。\n\n### 手順 2-18: `顧客情報一覧` 画面に戻ります\n\n### 手順 2-19: `削除` ボタンをクリックします\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230550.png\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n\n確認画面が表示されるので `OK` ボタンをクリックするとデータが削除されます。\n\n---\n\nPlay Framework 2.3.x を使って簡単な CRUD システムを構築することができました。\n\n続いて、「商品管理」機能、「受注登録」機能の実装に移りたいところですが、長くなってしまったので、続きは以下に書きました。\n\n【#Play】続・Play Framework 2.3 (Scala) を使った Web システム開発入門\n[[http://qiita.com/kukita/items/178c6a274055d0139415]]\n(http://qiita.com/kukita/items/178c6a274055d0139415)\n\n以上\n",
        "body": "<p>Play Framework 2.3.x と Scala を使った Web システム開発について勉強した際の内容を自分用のメモとしてまとめました。</p>\n<p>次に示すソフトウェアがインストール済みの環境で、「顧客情報の登録/検索/更新/削除」、「商品情報の登録/検索/更新/削除」、そして、「受注登録」を行うための簡単な 受注管理システムを作成することを目指します。</p>\n\n<table><thead>\n<tr>\n<th>ソフトウェア名</th>\n<th>バージョン</th>\n<th>入手元</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>OS</td>\n<td>Windows 7</td>\n<td>-</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>8u11(jdk1.8.0_05)</td>\n<td><a href=\"http://www.oracle.com/\" title=\"http://www.oracle.com/\" target=\"_blank\">http://www.oracle.com/</a></td>\n</tr>\n<tr>\n<td>Play</td>\n<td>2.3.2</td>\n<td><a href=\"http://www.playframework.com/\" title=\"http://www.playframework.com/\" target=\"_blank\">http://www.playframework.com/</a></td>\n</tr>\n<tr>\n<td>Eclipse</td>\n<td>4.3.2(Pleiades版)</td>\n<td><a href=\"http://mergedoc.sourceforge.jp/\" title=\"http://mergedoc.sourceforge.jp/\" target=\"_blank\">http://mergedoc.sourceforge.jp/</a></td>\n</tr>\n<tr>\n<td>Scala IDE for Eclipse</td>\n<td>-</td>\n<td><a href=\"http://download.scala-ide.org/sdk/helium/e38/scala211/stable/site\" title=\"http://download.scala-ide.org/sdk/helium/e38/scala211/stable/site\" target=\"_blank\">http://download.scala-ide.org/sdk/helium/e38/scala211/stable/site</a></td>\n</tr>\n</tbody></table>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>1: Play Framework 2.3.x で 「Hello World」\n      </h2><p>まず、手始めに Play Framework 2.3.x (Scala) を使って 「Hello World」 を表示するだけの簡単な Web アプリケーションを作成します。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>手順 1-1: スタートメニューから &quot;Windows PowerShell&quot; を起動します。\n      </h3><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>手順 1-2: PowerShell のコンソール画面で下記コマンドを入力し、<code>play-scala</code> という名前のテンプレートから新規プロジェクトを作成します\n      </h3><div class=\"code-frame\" data-lang=\"ps1\"><div class=\"highlight\"><pre><span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"nb\">Set-Location</span> <span class=\"s2\">&quot;$HOME&quot;</span> <span class=\"err\">←任意のフォルダーで構いません。</span>\n<span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"p\">&amp;</span> <span class=\"n\">activator</span> <span class=\"n\">new</span> <span class=\"s2\">&quot;order-management-system&quot;</span> <span class=\"s2\">&quot;play-scala&quot;</span>\n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>手順 1-3:  PowerShell のコンソール画面で下記コマンドを入力し、 Eclipse のプロジェクトとして読み込み可能な形式に変換します\n      </h3><div class=\"code-frame\" data-lang=\"ps1\"><div class=\"highlight\"><pre><span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"nb\">Set-Location</span> <span class=\"s2\">&quot;.\\order-management-system&quot;</span>\n<span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"p\">&amp;</span> <span class=\"n\">activator</span> <span class=\"n\">eclipse</span>\n</pre></div></div><p>Play Framework は「Eclipse」の他にも、IDE として「Intellij IDEA」もサポートしています。「Intellij IDEA」で利用する場合は、<code>&amp; activator idea</code> と入力します。</p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>手順 1-4: スタートメニューから &quot;Eclipse&quot; を起動します。\n      </h3><h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>手順 1-5: Eclipse のメニューから [ファイル(F)] → [インポート(I)...] を選択しクリックします\n      </h3><h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>手順 1-6: [一般] → [既存プロジェクトをワークスペースへ] を選択し、[次へ(N)&gt;] ボタンをクリックします\n      </h3><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>手順 1-7: &quot;ルート・ディレクトリーの選択(T):&quot; で作成したプロジェクトのフォルダーを選択し、[完了(F)] ボタンをクリックします\n      </h3><h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>手順 1-8: ファイル <code>conf/routes</code> を確認します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">conf/routes</span></div><div class=\"highlight\"><pre><span class=\"k\">#</span> <span class=\"nc\">Routes</span>\n<span class=\"k\">#</span> <span class=\"nc\">This</span> <span class=\"n\">file</span> <span class=\"n\">defines</span> <span class=\"n\">all</span> <span class=\"n\">application</span> <span class=\"n\">routes</span> <span class=\"o\">(</span><span class=\"nc\">Higher</span> <span class=\"n\">priority</span> <span class=\"n\">routes</span> <span class=\"n\">first</span><span class=\"o\">)</span>\n<span class=\"k\">#</span> <span class=\"o\">~~~~</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Home</span> <span class=\"n\">page</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span>                           <span class=\"n\">controllers</span><span class=\"o\">.</span><span class=\"nc\">Application</span><span class=\"o\">.</span><span class=\"n\">index</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Map</span> <span class=\"n\">static</span> <span class=\"n\">resources</span> <span class=\"n\">from</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">public</span> <span class=\"n\">folder</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">assets</span> <span class=\"nc\">URL</span> <span class=\"n\">path</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span><span class=\"n\">assets</span><span class=\"cm\">/*file               controllers.Assets.at(path=&quot;/public&quot;, file)</span>\n</pre></div></div><p>ホームページ（/）に GET リクエストがあった際に、<code>controllers</code> パッケージにある <code>Application</code> オブジェクトの <code>index</code> メソッドが実行されるという意味の構文が記述されていることを確かめます。</p>\n<h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>手順 1-9: ファイル <code>app/controllers/Application.scala</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/controllers/Application.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controllers</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Application</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">index</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello world&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div></div><p>Play Framework では、HTTP リクエストを Action オブジェクトを使って処理します。</p>\n<p>ここでは、HTTP リクエストがあった場合に、<code>ステータス 200 OK</code> のレスポンスと共に、&quot;Hello world&quot; 文字列を返す記述をしています。</p>\n<h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>手順 1-10:  PowerShell のコンソール画面で下記コマンドを入力し、 作成したアプリケーションを起動します\n      </h3><div class=\"code-frame\" data-lang=\"ps1\"><div class=\"highlight\"><pre><span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"p\">&amp;</span> <span class=\"n\">activator</span> <span class=\"n\">run</span>\n</pre></div></div><h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>手順 1-11: ブラウザで、<code>http://localhost:9000/</code> にアクセスし、「Hello World」が表示されることを確かめます。\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230304.png\" class=\"hatena-fotolife\"></span></p>\n\n<h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>手順 1-12:  PowerShell のコンソール画面で Ctrl+D キーを入力し、 アプリケーションを停止します\n      </h3><p>なお、 Play Framework 2 は、アプリケーションが起動したままの状態でソースコードを編集した場合でも、ブラウザからのアクセス時にコンパイルが自動的に行われます。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>2: Play Framework 2.3.x と Play-Slick を使った CRUD アプリケーションの作成\n      </h2><p>続いて、Scala のためのデータベースラッパー「Slick」と Slick を Play Framework 2 で利用するためのプラグイン「Play-Slick」を使って、顧客情報の「登録（Create）」、「参照/検索（Reference）」、「更新（Update）」、「削除（Delete）」を行うための簡単な CRUD アプリケーションを作成します。</p>\n<p>Play Framework 2.3.x では、Model 層の実装に Anorm を標準採用していますが、ここでは、次期バージョンから採用予定とされている Slick というライブラリを使用します。</p>\n<h3>\n        <span id=\"3-13\" class=\"fragment\"></span>\n        <a href=\"#3-13\"><i class=\"fa fa-link\"></i></a>手順 2-1: &quot;build.sbt&quot; に Slick に関連するライブラリのリポジトリを追記します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;&quot;&quot;order-management-system&quot;&quot;&quot;</span>\n\n<span class=\"n\">version</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;1.0-SNAPSHOT&quot;</span>\n\n<span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">root</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">project</span> <span class=\"n\">in</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"o\">)).</span><span class=\"n\">enablePlugins</span><span class=\"o\">(</span><span class=\"nc\">PlayScala</span><span class=\"o\">)</span>\n\n<span class=\"n\">scalaVersion</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;2.11.1&quot;</span>\n\n<span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"n\">jdbc</span><span class=\"o\">,</span>\n  <span class=\"n\">anorm</span><span class=\"o\">,</span>\n  <span class=\"n\">cache</span><span class=\"o\">,</span>\n  <span class=\"n\">ws</span><span class=\"o\">,</span>\n  <span class=\"s\">&quot;com.typesafe.slick&quot;</span> <span class=\"o\">%%</span> <span class=\"s\">&quot;slick&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;2.1.0&quot;</span><span class=\"o\">,</span>    <span class=\"k\">#</span> <span class=\"n\">追記</span>\n  <span class=\"s\">&quot;org.slf4j&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;slf4j-nop&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.6.4&quot;</span><span class=\"o\">,</span>          <span class=\"k\">#</span> <span class=\"n\">追記</span>\n  <span class=\"s\">&quot;com.typesafe.play&quot;</span> <span class=\"o\">%%</span> <span class=\"s\">&quot;play-slick&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;0.8.0&quot;</span> <span class=\"k\">#</span> <span class=\"n\">追記</span>\n<span class=\"o\">)</span>\n</pre></div></div><h3>\n        <span id=\"3-14\" class=\"fragment\"></span>\n        <a href=\"#3-14\"><i class=\"fa fa-link\"></i></a>手順 2-2: PowerShell のコンソール画面で下記コマンドを入力し、依存ライブラリをダウンロードします\n      </h3><div class=\"code-frame\" data-lang=\"ps1\"><div class=\"highlight\"><pre><span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"p\">&amp;</span> <span class=\"n\">activator</span> <span class=\"n\">update</span>\n<span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"p\">&amp;</span> <span class=\"n\">activator</span> <span class=\"n\">eclipse</span>\n</pre></div></div><h3>\n        <span id=\"3-15\" class=\"fragment\"></span>\n        <a href=\"#3-15\"><i class=\"fa fa-link\"></i></a>手順 2-3: ファイル &quot;conf/application.conf&quot; を編集します\n      </h3><div class=\"code-frame\" data-lang=\"ps1\"><div class=\"code-lang\"><span class=\"bold\">conf/application.conf</span></div><div class=\"highlight\"><pre> <span class=\"err\">：</span>\n<span class=\"err\">中略</span>\n <span class=\"err\">：</span>\n<span class=\"c\"># Database configuration</span>\n<span class=\"c\"># ~~~~~</span>\n<span class=\"c\"># You can declare as many datasources as you want.</span>\n<span class=\"c\"># By convention, the default datasource is named `default`</span>\n<span class=\"c\">#</span>\n<span class=\"n\">db</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">.</span><span class=\"n\">driver</span><span class=\"p\">=</span><span class=\"n\">org</span><span class=\"p\">.</span><span class=\"n\">h2</span><span class=\"p\">.</span><span class=\"n\">Driver</span>\n<span class=\"n\">db</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">=</span><span class=\"s2\">&quot;jdbc:h2:mem:oms;MODE=MYSQL;DB_CLOSE_DELAY=-1&quot;</span>\n<span class=\"n\">db</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">.</span><span class=\"n\">user</span><span class=\"p\">=</span><span class=\"n\">sa</span>\n<span class=\"n\">db</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">.</span><span class=\"n\">password</span><span class=\"p\">=</span><span class=\"s2\">&quot;&quot;</span>\n<span class=\"n\">slick</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">=</span><span class=\"s2\">&quot;models.*&quot;</span>\n <span class=\"err\">：</span>\n<span class=\"err\">中略</span>\n <span class=\"err\">：</span>\n</pre></div></div><p>H2 のインメモリ DB を使って、&quot;oms&quot; という名前のデータベースを作成/使用するための設定を行っています。</p>\n<p>また、MySQL の動作を真似るために <code>MODE=MYSQL</code> パラメーター、インメモリ DB のリセットを防ぐために <code>DB_CLOSE_DELAY=-1</code> パラメーターを&quot;db.default.url&quot;の値に与えています。</p>\n<h3>\n        <span id=\"3-16\" class=\"fragment\"></span>\n        <a href=\"#3-16\"><i class=\"fa fa-link\"></i></a>手順 2-4: ファイル <code>app/models/customer.scala</code> を作成しモデル層の実装をします\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/models/customer.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">models</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ① Slick 関連のパッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick.Config.driver.simple._</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ② DTO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Customer</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">email</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">tel</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">address</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ③ テーブルスキーマの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomerTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Customer</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;customers&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nc\">ID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">email</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;email&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">tel</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;tel&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span> <span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">address</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;address&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">comment</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;comment&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">tel</span><span class=\"o\">,</span> <span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ④ DAO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">CustomerDAO</span> <span class=\"o\">{</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">customerQuery</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">CustomerTable</span><span class=\"o\">]</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * キーワード検索</span>\n<span class=\"cm\">   * @param word</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Customer</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">tel</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)).</span><span class=\"n\">list</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ID検索</span>\n<span class=\"cm\">   * @param ID</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">first</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 作成</span>\n<span class=\"cm\">   * @param customer</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 更新</span>\n<span class=\"cm\">   * @param customer</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 削除</span>\n<span class=\"cm\">   * @param customer</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">delete</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>① Slick 関連のパッケージのインポート\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * ① Slick 関連のパッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick.Config.driver.simple._</span>\n</pre></div></div><p>&quot;play-slick&quot;のパッケージをインポートしています。</p>\n<p>先ほど記述した設定ファイルから自動的にドライバ関連のパッケージも読み込まれますので利用するDBMSの種類を指定する必要はありません。</p>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>② DTO の定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * ② DTO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Customer</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">email</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">tel</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">address</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n</pre></div></div><p>Data Transfer Object（DTO）のクラスを定義します。</p>\n<p>Scala では、<code>case class</code> として定義することでコンストラクタや getter 等が自動的に定義されます。</p>\n<p>[参考]<br>\n<a href=\"http://ja.wikipedia.org/wiki/Data_Transfer_Object\" title=\"\" target=\"_blank\">Data Transfer Object - ウィキペディア</a></p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>③ テーブルスキーマの定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * ③ テーブルスキーマの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomerTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">Customer</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;customers&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nc\">ID</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Long</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">email</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;email&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">tel</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;tel&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span> <span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">address</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;address&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">comment</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;comment&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">NotNull</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">tel</span><span class=\"o\">,</span> <span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>この形式で記述することで、<code>CREATE TABLE</code> 文と <code>DROP TABLE</code> 文を自動的に生成します。</p>\n<h4>\n        <span id=\"4-4\" class=\"fragment\"></span>\n        <a href=\"#4-4\"><i class=\"fa fa-link\"></i></a>④ DAO の定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * ④ DAO の定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">CustomerDAO</span> <span class=\"o\">{</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">customerQuery</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">CustomerTable</span><span class=\"o\">]</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * キーワード検索</span>\n<span class=\"cm\">   * @param word</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Customer</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">tel</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"n\">like</span> <span class=\"s\">&quot;%&quot;</span><span class=\"o\">+</span><span class=\"n\">word</span><span class=\"o\">+</span><span class=\"s\">&quot;%&quot;</span><span class=\"o\">)).</span><span class=\"n\">list</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ID検索</span>\n<span class=\"cm\">   * @param ID</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">first</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 作成</span>\n<span class=\"cm\">   * @param customer</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 更新</span>\n<span class=\"cm\">   * @param customer</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * 削除</span>\n<span class=\"cm\">   * @param customer</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"k\">:</span> <span class=\"kt\">Customer</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Session</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">customerQuery</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"nc\">ID</span> <span class=\"o\">===</span> <span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"nc\">ID</span><span class=\"o\">).</span><span class=\"n\">delete</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>Data Access Object（DAO）を定義しています。</p>\n<p>Scalaでは、<code>object</code> と定義することで簡単にシングルトン化されたオブジェクトを作成することができます。</p>\n<p>また、メソッドしては、CRUD アプリケーションに必要な基本的なクエリーを 5 つ定義しています。</p>\n<p>[参考]<br>\n<a href=\"http://ja.wikipedia.org/wiki/Data_Access_Object\" title=\"\" target=\"_blank\">Data Access Object - ウィキペディア</a></p>\n<h3>\n        <span id=\"3-17\" class=\"fragment\"></span>\n        <a href=\"#3-17\"><i class=\"fa fa-link\"></i></a>手順 2-5:  PowerShell のコンソール画面で下記コマンドを入力し、 作成したアプリケーションを起動します\n      </h3><div class=\"code-frame\" data-lang=\"ps1\"><div class=\"highlight\"><pre><span class=\"n\">PS</span><span class=\"p\">&gt;</span> <span class=\"p\">&amp;</span> <span class=\"n\">activator</span> <span class=\"n\">run</span>\n</pre></div></div><h3>\n        <span id=\"3-18\" class=\"fragment\"></span>\n        <a href=\"#3-18\"><i class=\"fa fa-link\"></i></a>手順 2-6: ブラウザで、<code>http://localhost:9000/</code> にアクセスし、「Database &#39;default&#39; needs evolution!」と書かれた画面が表示されることを確かめます。\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140807/20140807110913.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>ここで、<code>Apply this script now!</code> ボタンをクリックすると自動生成された SQL 文が実行されます。</p>\n<h3>\n        <span id=\"3-19\" class=\"fragment\"></span>\n        <a href=\"#3-19\"><i class=\"fa fa-link\"></i></a>手順 2-7: ファイル <code>conf/routes</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">conf/routes</span></div><div class=\"highlight\"><pre><span class=\"k\">#</span> <span class=\"nc\">Routes</span>\n<span class=\"k\">#</span> <span class=\"nc\">This</span> <span class=\"n\">file</span> <span class=\"n\">defines</span> <span class=\"n\">all</span> <span class=\"n\">application</span> <span class=\"n\">routes</span> <span class=\"o\">(</span><span class=\"nc\">Higher</span> <span class=\"n\">priority</span> <span class=\"n\">routes</span> <span class=\"n\">first</span><span class=\"o\">)</span>\n<span class=\"k\">#</span> <span class=\"o\">~~~~</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Home</span> <span class=\"n\">page</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span>                           <span class=\"n\">controllers</span><span class=\"o\">.</span><span class=\"nc\">Application</span><span class=\"o\">.</span><span class=\"n\">index</span>\n\n<span class=\"k\">#</span> <span class=\"nc\">Map</span> <span class=\"n\">static</span> <span class=\"n\">resources</span> <span class=\"n\">from</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">public</span> <span class=\"n\">folder</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">assets</span> <span class=\"nc\">URL</span> <span class=\"n\">path</span>\n<span class=\"nc\">GET</span>     <span class=\"o\">/</span><span class=\"n\">assets</span><span class=\"cm\">/*file               controllers.Assets.at(path=&quot;/public&quot;, file)</span>\n\n<span class=\"cm\">#</span>\n<span class=\"cm\"># Customers Management</span>\n<span class=\"cm\">#</span>\n\n<span class=\"cm\"># Create customer infomation.</span>\n<span class=\"cm\">GET     /customers/create           controllers.CustomerController.showCreateForm()</span>\n<span class=\"cm\">POST    /customers/create           controllers.CustomerController.create()</span>\n\n<span class=\"cm\"># Search customer infomation.</span>\n<span class=\"cm\">GET     /customers/search           controllers.CustomerController.search(word: String ?= &quot;&quot;)</span>\n\n<span class=\"cm\"># Update customer infomation.</span>\n<span class=\"cm\">GET     /customers/:id/update       controllers.CustomerController.showUpdateForm(id: Long)</span>\n<span class=\"cm\">POST    /customers/:id/update       controllers.CustomerController.update(id: Long)</span>\n\n<span class=\"cm\"># Remove customer infomation</span>\n<span class=\"cm\">GET     /customers/:id/remove       controllers.CustomerController.remove(id: Long)</span>\n</pre></div></div><p>顧客情報を「作成」「検索」「更新」「削除」する画面をそれぞれ定義します。</p>\n<p>なお、余談ですが、このファイルはコメント等に日本語を使うとエラーになってしまうので注意が必要です。</p>\n<h3>\n        <span id=\"3-20\" class=\"fragment\"></span>\n        <a href=\"#3-20\"><i class=\"fa fa-link\"></i></a>手順 2-8: ファイル <code>app/controllers/customerController.scala</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/controllers/customerController.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controllers</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ① パッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data.Forms._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick._</span>\n<span class=\"k\">import</span> <span class=\"nn\">models._</span>\n\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ② コントローラーオブジェクトの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">CustomerController</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ③ フォームの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">val</span> <span class=\"n\">customerForm</span> <span class=\"k\">=</span> <span class=\"nc\">Form</span><span class=\"o\">(</span>\n    <span class=\"n\">mapping</span><span class=\"o\">(</span>\n      <span class=\"s\">&quot;ID&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;name&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;email&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;tel&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;address&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;comment&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">)</span>\n    <span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ④ 顧客情報登録フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showCreateForm</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">customerForm</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑤ 顧客情報登録アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">customer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑥ 顧客情報検索アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">TODO</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑦ 顧客情報更新フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">TODO</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑧ 顧客情報更新アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">TODO</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑨ 顧客情報削除アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span><span class=\"nc\">TODO</span>\n<span class=\"o\">}</span>\n</pre></div></div><h4>\n        <span id=\"4-5\" class=\"fragment\"></span>\n        <a href=\"#4-5\"><i class=\"fa fa-link\"></i></a>① パッケージのインポート\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * ① パッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data.Forms._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick._</span>\n<span class=\"k\">import</span> <span class=\"nn\">models._</span>\n</pre></div></div><p>最初の2行で、コントローラー層として利用するために必要なパッケージをインポートしています。</p>\n<p>次の2行は、Play Framework 2 に用意されているHTTP フォームデータの送信とバリデーションを行うヘルパーを利用するために必要なパッケージをインポートしています。</p>\n<p>最後の2行は、先ほど定義した DTO と DAO を利用するために、play-slick のパッケージとモデル層のパッケージをインポートしています。</p>\n<h4>\n        <span id=\"4-6\" class=\"fragment\"></span>\n        <a href=\"#4-6\"><i class=\"fa fa-link\"></i></a>② コントローラーオブジェクトの定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * ② コントローラーオブジェクトの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">CustomerController</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n <span class=\"err\">：</span>\n<span class=\"n\">中略</span>\n <span class=\"err\">：</span>\n</pre></div></div><p>続いてコントローラーオブジェクトの定義を行います。<code>Controller</code> クラスを継承する形で、先ほど <code>conf/routes</code> 内で定義した全てのコントローラーとメソッドを定義する必要があります。</p>\n<h4>\n        <span id=\"4-7\" class=\"fragment\"></span>\n        <a href=\"#4-7\"><i class=\"fa fa-link\"></i></a>③ HTTP フォームデータの定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ③ HTTP フォームデータの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">val</span> <span class=\"n\">customerForm</span> <span class=\"k\">=</span> <span class=\"nc\">Form</span><span class=\"o\">(</span>\n    <span class=\"n\">mapping</span><span class=\"o\">(</span>\n      <span class=\"s\">&quot;ID&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;name&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;email&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;tel&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;address&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;comment&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">)</span>\n    <span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n</pre></div></div><p>Play Framework 2 では、HTTP フォームデータの送信とバリデーションを行うヘルパーが用意されています。</p>\n<p>ここでは、先ほど DTO として定義した <code>Customer</code> にラップするフォームを定義しています。</p>\n<p>詳細については、下記の公式ドキュメントを参照してください。</p>\n<p><a href=\"http://www.playframework-ja.org/documentation/2.0.8/ScalaForms\" title=\"\" target=\"_blank\">[http://www.playframework-ja.org/documentation/2.0.8/ScalaForms]</a></p>\n<h4>\n        <span id=\"4-8\" class=\"fragment\"></span>\n        <a href=\"#4-8\"><i class=\"fa fa-link\"></i></a>④ 顧客情報登録フォーム表示アクションメソッドの定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ④ 顧客情報登録フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showCreateForm</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">customerForm</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p><code>conf/routes</code> 内で定義した <code>showCreateForm()</code> メソッドの定義を行います。</p>\n<p>Play Framework では、HTTP リクエストを <code>Action</code> オブジェクトを使って処理します。</p>\n<p>ここでは、HTTP リクエストがあった場合に、<code>ステータス 200 OK</code> のレスポンスと共に、後ほど定義する View の結果を返すように定義します。</p>\n<p>詳細については、下記の公式ドキュメントを参照してください。</p>\n<p><a href=\"http://www.playframework-ja.org/documentation/2.0.8/ScalaActions\" title=\"\" target=\"_blank\">[http://www.playframework-ja.org/documentation/2.0.8/ScalaActions]</a></p>\n<h4>\n        <span id=\"4-9\" class=\"fragment\"></span>\n        <a href=\"#4-9\"><i class=\"fa fa-link\"></i></a>⑤ 顧客情報登録アクションメソッドの定義\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑤ 顧客情報登録アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">customer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p><code>conf/routes</code> 内で定義した <code>Create()</code> メソッドの定義を行います。</p>\n<p>play-slick の <code>DBAction</code> オブジェクトを使うことで、DB とのセッションを自動的に生成することができます。</p>\n<p>ここでは、<code>bindFromRequest.fold()</code> メソッドを使って、HTTP フォームデータの定義で行っているバリデーションのバインドエラー処理を行っています。</p>\n<h4>\n        <span id=\"4-10\" class=\"fragment\"></span>\n        <a href=\"#4-10\"><i class=\"fa fa-link\"></i></a>⑥ 顧客情報検索アクションメソッドの定義以降\n      </h4><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑥ 顧客情報検索アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">TODO</span>\n <span class=\"err\">：</span>\n<span class=\"n\">中略</span>\n <span class=\"err\">：</span>\n</pre></div></div><p>前述したように、<code>conf/routes</code> 内で定義した全てのメソッドについて定義する必要がありますが、ここでは TODO という空の <code>Action</code> オブジェクトの実装を利用します。</p>\n<p>こうすることで、Play Framework 標準の &quot;Not implemented yet&quot; ページを表示させることができます。</p>\n<p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230411.png\" class=\"hatena-fotolife\"></span></p>\n\n<h3>\n        <span id=\"3-21\" class=\"fragment\"></span>\n        <a href=\"#3-21\"><i class=\"fa fa-link\"></i></a>手順 2-9: Play Framework 2.3.x で Twitter Bootstrap 3 を利用するためにファイル <code>app/views/main.html.scala</code> を編集します\n      </h3><p>Twitter Bootstrap 3 の公式ページを参考に記述します。</p>\n<p><a href=\"http://getbootstrap.com/getting-started/\" title=\"\" target=\"_blank\">[http://getbootstrap.com/getting-started/]</a></p>\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/main.html.scala`</span></div><div class=\"highlight\"><pre>@(title: String)(content: Html)\n\n<span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">&quot;ja&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">&quot;utf-8&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">&quot;X-UA-Compatible&quot;</span> <span class=\"na\">content=</span><span class=\"s\">&quot;IE=edge&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">&quot;viewport&quot;</span> <span class=\"na\">content=</span><span class=\"s\">&quot;width=device-width, initial-scale=1&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>@title<span class=\"nt\">&lt;/title&gt;</span>\n\n    <span class=\"c\">&lt;!-- Bootstrap --&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span>\n    <span class=\"c\">&lt;!-- WARNING: Respond.js doesn&#39;t work if you view the page via file:// --&gt;</span>\n    <span class=\"c\">&lt;!--[if lt IE 9]&gt;</span>\n<span class=\"c\">      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span>\n<span class=\"c\">      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span>\n<span class=\"c\">    &lt;![endif]--&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">&quot;content&quot;</span><span class=\"nt\">&gt;</span>@content<span class=\"nt\">&lt;/section&gt;</span>\n\n    <span class=\"c\">&lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n    <span class=\"c\">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre></div></div><h3>\n        <span id=\"3-22\" class=\"fragment\"></span>\n        <a href=\"#3-22\"><i class=\"fa fa-link\"></i></a>手順 2-10: <code>app/views/header.scala.html</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/header.scala.html</span></div><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar navbar-inverse navbar-static-top&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-header&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-brand&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/&quot;</span><span class=\"nt\">&gt;</span>受注管理システム<span class=\"nt\">&lt;/a&gt;</span>\n      <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-toggle&quot;</span> <span class=\"na\">data-toggle=</span><span class=\"s\">&quot;collapse&quot;</span> <span class=\"na\">data-target=</span><span class=\"s\">&quot;.navbar-collapse&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;sr-only&quot;</span><span class=\"nt\">&gt;</span>Toggle navigation<span class=\"nt\">&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;icon-bar&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;icon-bar&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&quot;icon-bar&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n      <span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;navbar-collapse collapse&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav navbar-nav&quot;</span> <span class=\"na\">role=</span><span class=\"s\">&quot;menu&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-toggle&quot;</span> <span class=\"na\">data-toggle=</span><span class=\"s\">&quot;dropdown&quot;</span><span class=\"nt\">&gt;</span>顧客情報管理<span class=\"nt\">&lt;/a&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;dropdown-menu&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">role=</span><span class=\"s\">&quot;menuitem&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span><span class=\"nt\">&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">role=</span><span class=\"s\">&quot;menuitem&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/create&quot;</span><span class=\"nt\">&gt;</span>顧客情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;/ul&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div></div><h3>\n        <span id=\"3-23\" class=\"fragment\"></span>\n        <a href=\"#3-23\"><i class=\"fa fa-link\"></i></a>手順 2-11: <code>app/views/customerCreateForm.scala.html</code> を作成します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/customerCreateForm.scala.html`</span></div><div class=\"highlight\"><pre>@(customerForm: Form[Customer])\n\n@import helper._\n\n@main(title = &quot;受注管理システム - 顧客情報登録&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span><span class=\"nt\">&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/create&quot;</span><span class=\"nt\">&gt;</span>顧客情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>顧客情報登録<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          @form(routes.CustomerController.create()) {\n            <span class=\"nt\">&lt;fieldset&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;0&quot;</span><span class=\"nt\">&gt;</span>\n              @inputText(customerForm(&quot;name&quot;), &#39;_label -&gt; &quot;顧客氏名&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;email&quot;), &#39;_label -&gt; &quot;メールアドレス&quot;,&#39;type -&gt; &quot;email&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;tel&quot;), &#39;_label -&gt; &quot;電話番号&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;address&quot;), &#39;_label -&gt; &quot;住所&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;comment&quot;), &#39;_label -&gt; &quot;備考&quot;, &#39;size -&gt; 30)\n            <span class=\"nt\">&lt;/fieldset&gt;</span>\n            <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;actions&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span><span class=\"nt\">&gt;</span>キャンセル<span class=\"nt\">&lt;/a&gt;</span>\n            <span class=\"nt\">&lt;/div&gt;</span>\n          }\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><p>Plaey Framework 2 では、<code>Scala ベースのテンプレートエンジン</code>が用意されています。</p>\n<p>ここでは、<code>CustomerCreateForm.html.scala</code> という名前のファイルを作成したので、先ほどコントローラー内で定義した <code>views.html.customerCreateForm()</code> が生成されます。</p>\n<p>詳細については、下記の公式ドキュメントを参考にしてください。</p>\n<p><a href=\"http://www.playframework-ja.org/documentation/2.0.8/ScalaTemplates\" title=\"\" target=\"_blank\">[http://www.playframework-ja.org/documentation/2.0.8/ScalaTemplates]</a></p>\n<p>また、フォームの作成部分には、Play Framework 2 の <code>フォームテンプレートヘルパー</code> 機能を利用しています。</p>\n<p><a href=\"http://www.playframework-ja.org/documentation/2.0.8/ScalaFormHelpers\" title=\"\" target=\"_blank\">[http://www.playframework-ja.org/documentation/2.0.8/ScalaFormHelpers]</a></p>\n<p>ポイントとしては、新規作成時点では、<code>ID（プライマリキー）</code> が未定なので、<code>input</code> タグの <code>hidden</code> タイプを使って値 <code>0</code> を渡しています。</p>\n<h3>\n        <span id=\"3-24\" class=\"fragment\"></span>\n        <a href=\"#3-24\"><i class=\"fa fa-link\"></i></a>手順 2-12: ここで一度ブラウザから <code>http://localhost:9000/customers/create</code> にアクセスして動作を確認します\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230441.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>フォームに何も入力しないで、 <code>送信</code> ボタンをクリックすると <code>This field is required</code> と表示されてバリデーションが働いていることが確認できます。</p>\n<p>また、全ての必要項目に適当な値を入力して <code>送信</code> ボタンをクリックすると TODO 画面に遷移することが確認できます。（裏では DB にデータが挿入されています。）</p>\n<p>ここまでの部分で、CRUD の 「C」の部分の実装ができたので、同様の流れで残りの部分を一気に実装してしまいます。</p>\n<h3>\n        <span id=\"3-25\" class=\"fragment\"></span>\n        <a href=\"#3-25\"><i class=\"fa fa-link\"></i></a>手順 2-13: ファイル <code>app/controllers/CustomerController.scala</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">app/controllers/CustomerController.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">controllers</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ① パッケージのインポート</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.mvc._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data._</span>\n<span class=\"k\">import</span> <span class=\"nn\">play.api.data.Forms._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">play.api.db.slick._</span>\n<span class=\"k\">import</span> <span class=\"nn\">models._</span>\n\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * ② コントローラーオブジェクトの定義</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">object</span> <span class=\"nc\">CustomerController</span> <span class=\"k\">extends</span> <span class=\"nc\">Controller</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ③ HTTP フォームデータの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">val</span> <span class=\"n\">customerForm</span> <span class=\"k\">=</span> <span class=\"nc\">Form</span><span class=\"o\">(</span>\n    <span class=\"n\">mapping</span><span class=\"o\">(</span>\n      <span class=\"s\">&quot;ID&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">longNumber</span><span class=\"o\">,</span>\n      <span class=\"s\">&quot;name&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;email&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;tel&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;address&quot;</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">nonEmptyText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">),</span>\n      <span class=\"s\">&quot;comment&quot;</span> <span class=\"o\">-&gt;</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">maxLength</span> <span class=\"k\">=</span> <span class=\"mi\">140</span><span class=\"o\">)</span>\n    <span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"o\">)(</span><span class=\"nc\">Customer</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ④ 顧客情報登録フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showCreateForm</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">customerForm</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑤ 顧客情報登録アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">create</span><span class=\"o\">()</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerCreateForm</span><span class=\"o\">(</span><span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">customer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑥ 顧客情報検索アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerSearch</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">)))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑦ 顧客情報更新フォーム表示アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">showUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">))))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑧ 顧客情報更新アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">update</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">customerForm</span><span class=\"o\">.</span><span class=\"n\">bindFromRequest</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span>\n      <span class=\"n\">errors</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BadRequest</span><span class=\"o\">(</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">customerUpdateForm</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">,</span> <span class=\"n\">errors</span><span class=\"o\">)),</span>\n      <span class=\"n\">customer</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"o\">(</span><span class=\"n\">customer</span><span class=\"o\">)</span>\n        <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/**</span>\n<span class=\"cm\">   * ⑨ 顧客情報削除アクションメソッドの定義</span>\n<span class=\"cm\">   */</span>\n  <span class=\"k\">def</span> <span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"k\">:</span> <span class=\"kt\">Long</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">DBAction</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">rs</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"o\">(</span><span class=\"nc\">CustomerDAO</span><span class=\"o\">.</span><span class=\"n\">searchByID</span><span class=\"o\">(</span><span class=\"nc\">ID</span><span class=\"o\">))</span>\n    <span class=\"nc\">Redirect</span><span class=\"o\">(</span><span class=\"n\">routes</span><span class=\"o\">.</span><span class=\"nc\">CustomerController</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-26\" class=\"fragment\"></span>\n        <a href=\"#3-26\"><i class=\"fa fa-link\"></i></a>手順 2-14: ファイル <code>app/views/CustomerSearch.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/CustomerSearch.scala.html</span></div><div class=\"highlight\"><pre>@(word: String, customers: List[Customer])\n\n@main(title = &quot;受注管理システム - 顧客情報一覧（検索/更新/削除）&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span><span class=\"nt\">&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/create&quot;</span><span class=\"nt\">&gt;</span>顧客情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/h1&gt;</span> \n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- 検索フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n        @helper.form(action=routes.CustomerController.search()) {\n          <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;search&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;word&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@word&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;キーワード検索&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;byn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n        }\n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- テーブル --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;table-responsive col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;table</span> <span class=\"na\">class=</span><span class=\"s\">&quot;table table-bordered table-striped &quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;thead&gt;</span>\n              <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>顧客番号<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>顧客氏名<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>メールアドレス<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>電話番号<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>住所<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th&gt;</span>備考<span class=\"nt\">&lt;/th&gt;</span>\n                <span class=\"nt\">&lt;th</span> <span class=\"na\">align=</span><span class=\"s\">&quot;center&quot;</span><span class=\"nt\">&gt;&lt;/th&gt;</span>\n              <span class=\"nt\">&lt;/tr&gt;</span>\n            <span class=\"nt\">&lt;/thead&gt;</span>\n            <span class=\"nt\">&lt;tbody&gt;</span>\n            @customers.map { customer =&gt;\n              <span class=\"nt\">&lt;tr&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;right&quot;</span><span class=\"nt\">&gt;</span>@(&quot;%9d&quot;.format(customer.ID))<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@customer.name<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@customer.email<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@customer.tel<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@customer.address<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td&gt;</span>@customer.comment<span class=\"nt\">&lt;/td&gt;</span>\n                <span class=\"nt\">&lt;td</span> <span class=\"na\">align=</span><span class=\"s\">&quot;center&quot;</span><span class=\"nt\">&gt;</span>\n                  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/@customer.ID/update&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>更新<span class=\"nt\">&lt;/a&gt;</span>\n                  <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;button&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;削除&quot;</span> <span class=\"na\">onClick=</span><span class=\"s\">&#39;if(confirm(&quot;本当に削除してよろしいですか？&quot;)) {location.href=&quot;/customers/@customer.ID/remove&quot;}&#39;</span><span class=\"nt\">&gt;</span>\n                <span class=\"nt\">&lt;/td&gt;</span>\n              <span class=\"nt\">&lt;/tr&gt;</span>\n            }\n            <span class=\"nt\">&lt;/tbody&gt;</span>\n          <span class=\"nt\">&lt;/table&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-27\" class=\"fragment\"></span>\n        <a href=\"#3-27\"><i class=\"fa fa-link\"></i></a>手順 2-15: ファイル <code>app/views/CustomerUpdate.scala.html</code> を編集します\n      </h3><div class=\"code-frame\" data-lang=\"html\"><div class=\"code-lang\"><span class=\"bold\">app/views/CustomerUpdate.scala.html</span></div><div class=\"highlight\"><pre>@(ID: Long, customerForm: Form[Customer])\n\n@import helper._\n\n@main(title = &quot;受注管理システム - 顧客情報更新&quot;) {\n\n<span class=\"c\">&lt;!-- ヘッダー --&gt;</span>\n@header()\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;container&quot;</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"c\">&lt;!-- サイドメニュー --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;hidden-xs col-sm-3 col-md-3 col-lg-3&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">&quot;nav nav-pills nav-stacked&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span><span class=\"nt\">&gt;</span>顧客情報一覧（検索/更新/削除）<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n            <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/create&quot;</span><span class=\"nt\">&gt;</span>顧客情報登録<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n\n    <span class=\"c\">&lt;!-- コンテンツ --&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-9 col-md-9 col-lg-9&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;row&quot;</span><span class=\"nt\">&gt;</span>\n\n        <span class=\"c\">&lt;!-- 見出し --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1&gt;</span>顧客情報更新<span class=\"nt\">&lt;/h1&gt;</span> \n        <span class=\"nt\">&lt;/div&gt;</span>\n\n        <span class=\"c\">&lt;!-- フォーム --&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;col-xs-12 col-sm-12 col-md-12 col-lg-12&quot;</span><span class=\"nt\">&gt;</span>\n          @form(routes.CustomerController.update(ID)) {\n            <span class=\"nt\">&lt;fieldset&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;@ID&quot;</span><span class=\"nt\">&gt;</span>\n              @inputText(customerForm(&quot;name&quot;), &#39;_label -&gt; &quot;顧客氏名&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;email&quot;), &#39;_label -&gt; &quot;メールアドレス&quot;,&#39;type -&gt; &quot;email&quot;, &#39;size -&gt; 40)\n              @inputText(customerForm(&quot;tel&quot;), &#39;_label -&gt; &quot;電話番号&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;address&quot;), &#39;_label -&gt; &quot;住所&quot;, &#39;size -&gt; 30)\n              @inputText(customerForm(&quot;comment&quot;), &#39;_label -&gt; &quot;備考&quot;, &#39;size -&gt; 30)\n            <span class=\"nt\">&lt;/fieldset&gt;</span>\n            <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;actions&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-primary&quot;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;/customers/search&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;btn btn-danger&quot;</span><span class=\"nt\">&gt;</span>キャンセル<span class=\"nt\">&lt;/a&gt;</span>\n            <span class=\"nt\">&lt;/div&gt;</span>\n          }\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n <span class=\"nt\">&lt;/div&gt;</span>\n}\n</pre></div></div><h3>\n        <span id=\"3-28\" class=\"fragment\"></span>\n        <a href=\"#3-28\"><i class=\"fa fa-link\"></i></a>手順 2-16: ブラウザから <code>http://localhost:9000/customers/search</code> にアクセスします\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230507.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>先ほど登録したデータを参照することができます</p>\n<h3>\n        <span id=\"3-29\" class=\"fragment\"></span>\n        <a href=\"#3-29\"><i class=\"fa fa-link\"></i></a>手順 2-17: <code>更新</code> ボタンをクリックします\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230529.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>データの更新が可能です。データを更新すると <code>顧客情報一覧</code> 画面に戻ります。</p>\n<h3>\n        <span id=\"3-30\" class=\"fragment\"></span>\n        <a href=\"#3-30\"><i class=\"fa fa-link\"></i></a>手順 2-18: <code>顧客情報一覧</code> 画面に戻ります\n      </h3><h3>\n        <span id=\"3-31\" class=\"fragment\"></span>\n        <a href=\"#3-31\"><i class=\"fa fa-link\"></i></a>手順 2-19: <code>削除</code> ボタンをクリックします\n      </h3><p><span><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kukita/20140805/20140805230550.png\" class=\"hatena-fotolife\"></span></p>\n\n<p>確認画面が表示されるので <code>OK</code> ボタンをクリックするとデータが削除されます。</p>\n\n<hr>\n<p>Play Framework 2.3.x を使って簡単な CRUD システムを構築することができました。</p>\n<p>続いて、「商品管理」機能、「受注登録」機能の実装に移りたいところですが、長くなってしまったので、続きは以下に書きました。</p>\n<p>【#Play】続・Play Framework 2.3 (Scala) を使った Web システム開発入門<br>\n<a href=\"http://qiita.com/kukita/items/178c6a274055d0139415\" title=\"\">[http://qiita.com/kukita/items/178c6a274055d0139415]</a></p>\n<p>以上</p>\n",
        "stock_users": [
            "yotchang4s",
            "chichi1091",
            "kaoru-kinoshita",
            "gutio",
            "ise_daisuke",
            "MasahiroSakoda",
            "tommy6073",
            "makoto78sasaki",
            "MAKOTO_MOBY",
            "uchiko",
            "da0shi",
            "hotchemi",
            "takehironet",
            "_marony",
            "qairy",
            "castersupermild",
            "nkhryo",
            "sumusu",
            "KatsuoBushiFPGA",
            "hayasshi",
            "ozw_sei",
            "ykosugi",
            "yodatomato",
            "futo4",
            "takaya1992",
            "KeithYokoma",
            "token7",
            "kasumani",
            "n_slender",
            "Reds",
            "thaladabar",
            "nilfigo",
            "lamblamp",
            "ryokosuge"
        ]
    },
    {
        "id": 104720,
        "uuid": "d6125a17ab015dfde459",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Scalaコードリーディングあるある",
        "created_at": "2014-08-05 09:44:38 +0900",
        "updated_at": "2014-08-05 09:44:38 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 10,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/d6125a17ab015dfde459",
        "created_at_as_seconds": 1407199478,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# はじめに\nScalaコードを読んでいると、たまに「あれ、なんで動くの？」みたいになる時があります。そんな時は決まってアレのせいなんですが。\nまずは問題のScalaコードを。\n\n```scala\nval m = Map(1->\"one\", 2->\"two\")\nval mOpt: Option[Map[Int, String]] = Some(m)\n\nmOpt.get(1) // one: String\nmOpt.get(2) // two: String\n```\n\n# おかしいところ\nぱっと見、このコードは問題無さそうなんですが、よく見るとおかしい。\nおかしい箇所は\n\n- Optionにgetメソッドはあるものの引数を取るgetメソッドはない\n- Mapにはkey値を引数に取るgetメソッドはあるものの、戻り値はOptionで返ってくるはずなのにこの場合はStringが返ってくる\n\nうーん、、なんで？？\n\n# 答え\n上記のコードを分解して書くとこうなります。\n\n```scala\nval m: Map[Int, String] = mOpt.get\nm(1) // one\n```\n\n一行で正確に記述するとこうですね。\n\n```scala\nmOpt.get.apply(1)\n```\n\nScalaではapplyメソッドは省略できます。\n\n知らないと意味不明すぎてScalaコワイとなると思いますが、知っててもよく「あれっ」ってなります。\n0.1秒で「ああ、applyでしょ」って言えるようになりたい。\n\n今回のは特にOption#getとMap#getがapply効果で余計分かりにくくなるというapply系の中でも分かりにくい方だとは思います。\n\nちなみに上記はapplyで呼んでいるので、当然存在しないkeyを引数に渡すとExceptionが出ますので要注意。\n\n```scala\nmOpt.get(3)\n\njava.util.NoSuchElementException: key not found: 3\n  at scala.collection.MapLike$class.default(MapLike.scala:228)\n  at scala.collection.AbstractMap.default(Map.scala:59)\n  at scala.collection.MapLike$class.apply(MapLike.scala:141)\n  at scala.collection.AbstractMap.apply(Map.scala:59)\n  ... 32 elided\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>Scalaコードを読んでいると、たまに「あれ、なんで動くの？」みたいになる時があります。そんな時は決まってアレのせいなんですが。<br>\nまずは問題のScalaコードを。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">m</span> <span class=\"k\">=</span> <span class=\"nc\">Map</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">-&gt;</span><span class=\"s\">&quot;one&quot;</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">-&gt;</span><span class=\"s\">&quot;two&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">mOpt</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"n\">mOpt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">// one: String</span>\n<span class=\"n\">mOpt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">// two: String</span>\n</pre></div></div><h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>おかしいところ\n      </h1><p>ぱっと見、このコードは問題無さそうなんですが、よく見るとおかしい。<br>\nおかしい箇所は</p>\n\n<ul>\n<li>Optionにgetメソッドはあるものの引数を取るgetメソッドはない</li>\n<li>Mapにはkey値を引数に取るgetメソッドはあるものの、戻り値はOptionで返ってくるはずなのにこの場合はStringが返ってくる</li>\n</ul>\n<p>うーん、、なんで？？</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>答え\n      </h1><p>上記のコードを分解して書くとこうなります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">m</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">mOpt</span><span class=\"o\">.</span><span class=\"n\">get</span>\n<span class=\"n\">m</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">// one</span>\n</pre></div></div><p>一行で正確に記述するとこうですね。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">mOpt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div></div><p>Scalaではapplyメソッドは省略できます。</p>\n<p>知らないと意味不明すぎてScalaコワイとなると思いますが、知っててもよく「あれっ」ってなります。<br>\n0.1秒で「ああ、applyでしょ」って言えるようになりたい。</p>\n<p>今回のは特にOption#getとMap#getがapply効果で余計分かりにくくなるというapply系の中でも分かりにくい方だとは思います。</p>\n<p>ちなみに上記はapplyで呼んでいるので、当然存在しないkeyを引数に渡すとExceptionが出ますので要注意。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">mOpt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">NoSuchElementException</span><span class=\"k\">:</span> <span class=\"kt\">key</span> <span class=\"kt\">not</span> <span class=\"kt\">found:</span> <span class=\"err\">3</span>\n  <span class=\"kt\">at</span> <span class=\"kt\">scala.collection.MapLike$class.default</span><span class=\"o\">(</span><span class=\"kt\">MapLike.scala:</span><span class=\"err\">228</span><span class=\"o\">)</span>\n  <span class=\"kt\">at</span> <span class=\"kt\">scala.collection.AbstractMap.default</span><span class=\"o\">(</span><span class=\"kt\">Map.scala:</span><span class=\"err\">59</span><span class=\"o\">)</span>\n  <span class=\"kt\">at</span> <span class=\"kt\">scala.collection.MapLike$class.apply</span><span class=\"o\">(</span><span class=\"kt\">MapLike.scala:</span><span class=\"err\">141</span><span class=\"o\">)</span>\n  <span class=\"kt\">at</span> <span class=\"kt\">scala.collection.AbstractMap.apply</span><span class=\"o\">(</span><span class=\"kt\">Map.scala:</span><span class=\"err\">59</span><span class=\"o\">)</span>\n  <span class=\"kt\">...</span> <span class=\"err\">32</span> <span class=\"kt\">elided</span>\n</pre></div></div>",
        "stock_users": [
            "KatsuoBushiFPGA",
            "kasumani",
            "tm8r@github",
            "ryokosuge",
            "JunSuzukiJapan@github",
            "morozumi_h",
            "hidenorigoto",
            "naokun776",
            "Reds",
            "yodatomato"
        ]
    },
    {
        "id": 102061,
        "uuid": "0b338f5c1b2e57ed915e",
        "user": {
            "id": 29692,
            "url_name": "cielavenir",
            "profile_image_url": "https://pbs.twimg.com/profile_images/378800000407459158/3dba541cbcc458e00702872dd8703b71_normal.png"
        },
        "title": "paiza POH kirishima (Perl/Scala/F#) #paizahack_lite",
        "created_at": "2014-07-31 09:46:37 +0900",
        "updated_at": "2014-09-07 02:48:59 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "17日",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Perl",
                "url_name": "perl",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/62b7b4bb21c57f377926995086a4723c566042e8/medium.jpg?1383884139",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 0,
        "url": "http://qiita.com/cielavenir/items/0b338f5c1b2e57ed915e",
        "created_at_as_seconds": 1406767597,
        "tweet": true,
        "gist_url": "https://gist.github.com/3a6d938dd67b6cd0692f",
        "private": false,
        "raw_body": "\n|問題|https://paiza.jp/poh/kirishima|\n|:--|:--|\n|C/Go/C&sharp;/VB/JavaScript|http://qiita.com/cielavenir/items/aad18ccc8463e77a1c87|\n|Java/CoffeeScript/Ruby/PHP/Python|http://qiita.com/cielavenir/items/d07e62d1dc61c2915003|\n|Perl/Scala/F&sharp;|http://qiita.com/cielavenir/items/0b338f5c1b2e57ed915e|\n\nPerl\n\n```pl:paizapohlite.pl\n#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse feature 'say';\nmy $M=<>;\nmy $N=<>;\nmy @num=();\nmy @cost=();\nmy $total=0;\nmy ($i,$j);\n\nfor($j=0;$j<$N;$j++){\n\tmy($q,$r)=split(/ /,<>);\n\t$total+=$q;\n\t$num[$j]=$q;\n\t$cost[$j]=$r;\n}\nmy @bag=();\n$bag[0]=0;\nfor($i=1;$i<=$total;$i++){$bag[$i]=-1;}\nfor($j=0;$j<$N;$j++){\n\tfor($i=$total;$i>=$num[$j];$i--){\n\t\tif($bag[$i-$num[$j]]>=0){\n\t\t\tif($bag[$i]<0||$bag[$i]>$bag[$i-$num[$j]]+$cost[$j]){\n\t\t\t\t$bag[$i]=$bag[$i-$num[$j]]+$cost[$j];\n\t\t\t}\n\t\t}\n\t}\n}\n$j=-1;\nfor($i=$M;$i<=$total;$i++){if($j<0||($bag[$i]>=0&&$j>$bag[$i])){$j=$bag[$i];}}\nsay $j;\n```\n\nScala\nAC取れた。どういうわけか、スペースだとOK、タブだとWAという謎な状態になってる。\n\n```scala:paizapohlite.scala\n//must use spaces rather than tabs, or WA somehow.\nobject Main extends App{\n    val M=readInt()\n    val N=readInt()\n    val num=new Array[Int](N)\n    val cost=new Array[Int](N)\n    var total=0\n    for(j<-0 to N-1){\n        val Array(q,r) = readLine().split(\" \").map(_.toInt)\n        total+=q\n        num(j)=q\n        cost(j)=r\n    }\n    val bag=new Array[Int](total+1)\n    for(i<-1 to total)bag(i)=(-1)\n    for(j<-0 to N-1){\n        for(i<-total to num(j) by -1){\n            if(bag(i-num(j))>=0){\n                if(bag(i)<0||bag(i)>bag(i-num(j))+cost(j)){\n                    bag(i)=bag(i-num(j))+cost(j)\n                }\n            }\n        }\n    }\n    var j=(-1)\n    for(i<-M to total){\n        if(j<0||(bag(i)>=0&&j>bag(i)))j=bag(i)\n    }\n    println(j)\n}\n```\n\nF&sharp;\n関数型言語として扱っていない。\n\n```fsharp:paizapohlite.fs\nopen System\nlet M=int(Console.ReadLine())\nlet N=int(Console.ReadLine())\nlet num:int array=Array.zeroCreate(N)\nlet cost:int array=Array.zeroCreate(N)\nlet mutable total=0\nfor j in 0..N-1 do\n let arg:String array=Console.ReadLine().Split(' ')\n total<-total+int(arg.[0])\n num.[j]<-int(arg.[0])\n cost.[j]<-int(arg.[1])\nlet bag:int array=Array.zeroCreate(total+1)\nfor i in 1..total do\n bag.[i]<-(-1)\nfor j in 0..N-1 do\n for i in total..(-1)..num.[j] do\n  if bag.[i-num.[j]]>=0 && (bag.[i]<0||bag.[i]>bag.[i-num.[j]]+cost.[j]) then\n   bag.[i]<-bag.[i-num.[j]]+cost.[j]\nlet mutable j=(-1)\nfor i in M..total do\n if j<0||(bag.[i]>=0&&j>bag.[i]) then\n  j<-bag.[i]\nConsole.WriteLine(j)\n```\n",
        "body": "<table><thead>\n<tr>\n<th style=\"text-align: left\">問題</th>\n<th style=\"text-align: left\"><a href=\"https://paiza.jp/poh/kirishima\" title=\"https://paiza.jp/poh/kirishima\" target=\"_blank\">https://paiza.jp/poh/kirishima</a></th>\n</tr>\n</thead><tbody>\n<tr>\n<td style=\"text-align: left\">C/Go/C&sharp;/VB/JavaScript</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/aad18ccc8463e77a1c87\" title=\"http://qiita.com/cielavenir/items/aad18ccc8463e77a1c87\">http://qiita.com/cielavenir/items/aad18ccc8463e77a1c87</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Java/CoffeeScript/Ruby/PHP/Python</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/d07e62d1dc61c2915003\" title=\"http://qiita.com/cielavenir/items/d07e62d1dc61c2915003\">http://qiita.com/cielavenir/items/d07e62d1dc61c2915003</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Perl/Scala/F&sharp;</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/0b338f5c1b2e57ed915e\" title=\"http://qiita.com/cielavenir/items/0b338f5c1b2e57ed915e\">http://qiita.com/cielavenir/items/0b338f5c1b2e57ed915e</a></td>\n</tr>\n</tbody></table>\n<p>Perl</p>\n<div class=\"code-frame\" data-lang=\"pl\"><div class=\"code-lang\"><span class=\"bold\">paizapohlite.pl</span></div><div class=\"highlight\"><pre><span class=\"c1\">#!/usr/bin/perl</span>\n<span class=\"k\">use</span> <span class=\"n\">strict</span><span class=\"p\">;</span>\n<span class=\"k\">use</span> <span class=\"n\">warnings</span><span class=\"p\">;</span>\n<span class=\"k\">use</span> <span class=\"n\">feature</span> <span class=\"s\">&#39;say&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">my</span> <span class=\"nv\">$M</span><span class=\"o\">=&lt;&gt;</span><span class=\"p\">;</span>\n<span class=\"k\">my</span> <span class=\"nv\">$N</span><span class=\"o\">=&lt;&gt;</span><span class=\"p\">;</span>\n<span class=\"k\">my</span> <span class=\"nv\">@num</span><span class=\"o\">=</span><span class=\"p\">();</span>\n<span class=\"k\">my</span> <span class=\"nv\">@cost</span><span class=\"o\">=</span><span class=\"p\">();</span>\n<span class=\"k\">my</span> <span class=\"nv\">$total</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$i</span><span class=\"p\">,</span><span class=\"nv\">$j</span><span class=\"p\">);</span>\n\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nv\">$j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nv\">$j</span><span class=\"o\">&lt;</span><span class=\"nv\">$N</span><span class=\"p\">;</span><span class=\"nv\">$j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"k\">my</span><span class=\"p\">(</span><span class=\"nv\">$q</span><span class=\"p\">,</span><span class=\"nv\">$r</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"nb\">split</span><span class=\"p\">(</span><span class=\"sr\">/ /</span><span class=\"p\">,</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">);</span>\n    <span class=\"nv\">$total</span><span class=\"o\">+=</span><span class=\"nv\">$q</span><span class=\"p\">;</span>\n    <span class=\"nv\">$num</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nv\">$q</span><span class=\"p\">;</span>\n    <span class=\"nv\">$cost</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nv\">$r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">my</span> <span class=\"nv\">@bag</span><span class=\"o\">=</span><span class=\"p\">();</span>\n<span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nv\">$i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nv\">$i</span><span class=\"o\">&lt;=</span><span class=\"nv\">$total</span><span class=\"p\">;</span><span class=\"nv\">$i</span><span class=\"o\">++</span><span class=\"p\">){</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"p\">]</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">;}</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nv\">$j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nv\">$j</span><span class=\"o\">&lt;</span><span class=\"nv\">$N</span><span class=\"p\">;</span><span class=\"nv\">$j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nv\">$i</span><span class=\"o\">=</span><span class=\"nv\">$total</span><span class=\"p\">;</span><span class=\"nv\">$i</span><span class=\"o\">&gt;=</span><span class=\"nv\">$num</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">];</span><span class=\"nv\">$i</span><span class=\"o\">--</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"o\">-</span><span class=\"nv\">$num</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">]]</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"p\">]</span><span class=\"sr\">&lt;0||$bag[$i]&gt;</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"o\">-</span><span class=\"nv\">$num</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">]]</span><span class=\"o\">+</span><span class=\"nv\">$cost</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">]){</span>\n                <span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"o\">-</span><span class=\"nv\">$num</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">]]</span><span class=\"o\">+</span><span class=\"nv\">$cost</span><span class=\"p\">[</span><span class=\"nv\">$j</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nv\">$j</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nv\">$i</span><span class=\"o\">=</span><span class=\"nv\">$M</span><span class=\"p\">;</span><span class=\"nv\">$i</span><span class=\"sr\">&lt;=$total;$i++){if($j&lt;0||($bag[$i]&gt;</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">&amp;&amp;</span><span class=\"nv\">$j</span><span class=\"o\">&gt;</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"p\">])){</span><span class=\"nv\">$j</span><span class=\"o\">=</span><span class=\"nv\">$bag</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"p\">];}}</span>\n<span class=\"n\">say</span> <span class=\"nv\">$j</span><span class=\"p\">;</span>\n</pre></div></div><p>Scala<br>\nAC取れた。どういうわけか、スペースだとOK、タブだとWAという謎な状態になってる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">paizapohlite.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">//must use spaces rather than tabs, or WA somehow.</span>\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span><span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">M</span><span class=\"k\">=</span><span class=\"n\">readInt</span><span class=\"o\">()</span>\n    <span class=\"k\">val</span> <span class=\"n\">N</span><span class=\"k\">=</span><span class=\"n\">readInt</span><span class=\"o\">()</span>\n    <span class=\"k\">val</span> <span class=\"n\">num</span><span class=\"k\">=new</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">cost</span><span class=\"k\">=new</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"k\">var</span> <span class=\"n\">total</span><span class=\"k\">=</span><span class=\"mi\">0</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">readLine</span><span class=\"o\">().</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">)</span>\n        <span class=\"n\">total</span><span class=\"o\">+=</span><span class=\"n\">q</span>\n        <span class=\"n\">num</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"k\">=</span><span class=\"n\">q</span>\n        <span class=\"n\">cost</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"k\">=</span><span class=\"n\">r</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">val</span> <span class=\"n\">bag</span><span class=\"k\">=new</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">total</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">total</span><span class=\"o\">)</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)=(-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"n\">total</span> <span class=\"n\">to</span> <span class=\"n\">num</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">by</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))&gt;=</span><span class=\"mi\">0</span><span class=\"o\">){</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)&lt;</span><span class=\"mi\">0</span><span class=\"o\">||</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)&gt;</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))+</span><span class=\"n\">cost</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)){</span>\n                    <span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"k\">=</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">))+</span><span class=\"n\">cost</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">var</span> <span class=\"n\">j</span><span class=\"o\">=(-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"n\">M</span> <span class=\"n\">to</span> <span class=\"n\">total</span><span class=\"o\">){</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">||(</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)&gt;=</span><span class=\"mi\">0</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">j</span><span class=\"o\">&gt;</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"n\">j</span><span class=\"k\">=</span><span class=\"n\">bag</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>F&sharp;<br>\n関数型言語として扱っていない。</p>\n<div class=\"code-frame\" data-lang=\"fsharp\"><div class=\"code-lang\"><span class=\"bold\">paizapohlite.fs</span></div><div class=\"highlight\"><pre><span class=\"k\">open</span> <span class=\"nn\">System</span>\n<span class=\"k\">let</span> <span class=\"nv\">M</span><span class=\"o\">=</span><span class=\"n\">int</span><span class=\"o\">(</span><span class=\"nn\">Console</span><span class=\"p\">.</span><span class=\"n\">ReadLine</span><span class=\"bp\">()</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">N</span><span class=\"o\">=</span><span class=\"n\">int</span><span class=\"o\">(</span><span class=\"nn\">Console</span><span class=\"p\">.</span><span class=\"n\">ReadLine</span><span class=\"bp\">()</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">num</span><span class=\"o\">:</span><span class=\"n\">int</span> <span class=\"n\">array</span><span class=\"o\">=</span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">zeroCreate</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">cost</span><span class=\"o\">:</span><span class=\"n\">int</span> <span class=\"n\">array</span><span class=\"o\">=</span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">zeroCreate</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">mutable</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"nv\">arg</span><span class=\"o\">:</span><span class=\"n\">String</span> <span class=\"n\">array</span><span class=\"o\">=</span><span class=\"nn\">Console</span><span class=\"p\">.</span><span class=\"n\">ReadLine</span><span class=\"bp\">()</span><span class=\"o\">.</span><span class=\"n\">Split</span><span class=\"o\">(</span><span class=\"sc\">&#39; &#39;</span><span class=\"o\">)</span>\n <span class=\"n\">total</span><span class=\"o\">&lt;-</span><span class=\"n\">total</span><span class=\"o\">+</span><span class=\"n\">int</span><span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">])</span>\n <span class=\"n\">num</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]&lt;-</span><span class=\"n\">int</span><span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">.[</span><span class=\"mi\">0</span><span class=\"o\">])</span>\n <span class=\"n\">cost</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]&lt;-</span><span class=\"n\">int</span><span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">.[</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n<span class=\"k\">let</span> <span class=\"nv\">bag</span><span class=\"o\">:</span><span class=\"n\">int</span> <span class=\"n\">array</span><span class=\"o\">=</span><span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">zeroCreate</span><span class=\"o\">(</span><span class=\"n\">total</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">total</span> <span class=\"k\">do</span>\n <span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]&lt;-(-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">do</span>\n <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">total</span><span class=\"o\">..(-</span><span class=\"mi\">1</span><span class=\"o\">)..</span><span class=\"n\">num</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]]&gt;=</span><span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]&lt;</span><span class=\"mi\">0</span><span class=\"o\">||</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]&gt;</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]]+</span><span class=\"n\">cost</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"k\">then</span>\n   <span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]&lt;-</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]]+</span><span class=\"n\">cost</span><span class=\"o\">.[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">mutable</span> <span class=\"n\">j</span><span class=\"o\">=(-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"nn\">M</span><span class=\"p\">..</span><span class=\"n\">total</span> <span class=\"k\">do</span>\n <span class=\"k\">if</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">||(</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]&gt;=</span><span class=\"mi\">0</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">j</span><span class=\"o\">&gt;</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"k\">then</span>\n  <span class=\"n\">j</span><span class=\"o\">&lt;-</span><span class=\"n\">bag</span><span class=\"o\">.[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n<span class=\"nn\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span>\n</pre></div></div>",
        "stock_users": [
            "Reds"
        ]
    },
    {
        "id": 100839,
        "uuid": "8f469708759a3c55137a",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "match-caseにおけるas-pattern(@)の嬉しさとは",
        "created_at": "2014-07-29 13:59:01 +0900",
        "updated_at": "2014-07-29 13:59:01 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/8f469708759a3c55137a",
        "created_at_as_seconds": 1406609941,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# as-patternとはなにか\n\nまずは例示。\n\n```scala\nval l = List(\"hello\", \"world\")\nl match {\n  case list @ List(first, _) => println(s\"first element is $first : length = ${list.size}\")\n  case _ => println(\"other\")\n}\n```\n\n上記の@のところ。\n長さ2のリストにマッチした場合、そのインスタンスをlistという変数で後続処理で利用できるようになる。\n\nただしこの例では全く嬉しさが伝わらない。\nそもそもlとlistが同じものを指すからでわざわざas-patternを用いて新規に変数を充てる意味が無い。\n\n# 嬉しさを感じるには\n\nこれが活きるシーンとして以下を考えた。\nBoxは任意の型を任意個格納できる箱。\nBoxを複数持つListからBoxの要素数が2つのものを取り出しtoStringを呼ぶ、というのがやりたいこと。\nこの時、as-patternがあるおかげでマッチした自身のインスタンスが簡単に取得できるためやりたいことが簡潔に書ける。\n\n```scala\ncase class Box[T](args: T*) {\n  override def toString = args.mkString(\":\")\n}\n\nval boxes = List(Box(), Box(\"A\"), Box(\"A\", \"B\"), Box(1, 2), Box(\"x\", \"y\", \"z\"))\nboxes.collect {\n  case b @ Box(_, _) => b.toString\n}\n```\n\ncollectの結果はもちろん、List(\"A:B\", \"1:2\")となる。\n\nちなみにas-patternが無ければ（もしくは存在を知らなければ）以下の様なコードを書くことになるはずで少し冗長。\n\n```scala\ncase class Box[T](args: T*) {\n  override def toString = args.mkString(\":\")\n  val size = args.size\n}\n\nval boxes = List(Box(), Box(\"A\"), Box(\"A\", \"B\"), Box(1, 2), Box(\"x\", \"y\", \"z\"))\nboxes.collect {\n  case b if b.size == 2 => b.toString\n}\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>as-patternとはなにか\n      </h1><p>まずは例示。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">l</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;world&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">l</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">list</span> <span class=\"k\">@</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;first element is $first : length = ${list.size}&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;other&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>上記の@のところ。<br>\n長さ2のリストにマッチした場合、そのインスタンスをlistという変数で後続処理で利用できるようになる。</p>\n<p>ただしこの例では全く嬉しさが伝わらない。<br>\nそもそもlとlistが同じものを指すからでわざわざas-patternを用いて新規に変数を充てる意味が無い。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>嬉しさを感じるには\n      </h1><p>これが活きるシーンとして以下を考えた。<br>\nBoxは任意の型を任意個格納できる箱。<br>\nBoxを複数持つListからBoxの要素数が2つのものを取り出しtoStringを呼ぶ、というのがやりたいこと。<br>\nこの時、as-patternがあるおかげでマッチした自身のインスタンスが簡単に取得できるためやりたいことが簡潔に書ける。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Box</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">T*</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span> <span class=\"k\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">boxes</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Box</span><span class=\"o\">(),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;B&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;y&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;z&quot;</span><span class=\"o\">))</span>\n<span class=\"n\">boxes</span><span class=\"o\">.</span><span class=\"n\">collect</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">b</span> <span class=\"k\">@</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>collectの結果はもちろん、List(&quot;A:B&quot;, &quot;1:2&quot;)となる。</p>\n<p>ちなみにas-patternが無ければ（もしくは存在を知らなければ）以下の様なコードを書くことになるはずで少し冗長。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Box</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">T*</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span> <span class=\"k\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">size</span> <span class=\"k\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">boxes</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Box</span><span class=\"o\">(),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;B&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"nc\">Box</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;y&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;z&quot;</span><span class=\"o\">))</span>\n<span class=\"n\">boxes</span><span class=\"o\">.</span><span class=\"n\">collect</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">b</span> <span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "rabitarochan",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 100756,
        "uuid": "0535f237f007c13942dc",
        "user": {
            "id": 14950,
            "url_name": "mather314",
            "profile_image_url": "https://secure.gravatar.com/avatar/3204f6241aaca4a1082bfe1202e60d69"
        },
        "title": "IgnoreCaseなパーサコンビネータ",
        "created_at": "2014-07-29 11:45:56 +0900",
        "updated_at": "2014-07-29 11:45:56 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/mather314/items/0535f237f007c13942dc",
        "created_at_as_seconds": 1406601956,
        "tweet": true,
        "gist_url": "https://gist.github.com/7766f72099c4a9820295",
        "private": false,
        "raw_body": "\nパーサ書いてると結構大小を区別しないキーワードがあったりするので、さくっと書けるようにしてみた。\n\n```scala\ntrait SampleParsers extends RegexParsers {\n  /** 文字列に\".i\"を付けると大文字小文字を区別せずマッチさせるようにする拡張 */\n  implicit class IgnoreCaseString(s: String) {\n    def i: Parser[String] = (\"\"\"(?i)\\Q\"\"\" + s + \"\"\"\\E\"\"\").r\n  }\n\n  def keyword: Parser[String] = \"keyword:\".i\n  def value: Parser[String] = \"[a-zA-Z0-9]+\".r\n  def parameter: Parser[(String,String)] = keyword ~ value ^^ { case k~v => (k,v) }\n}\n```\n\nちなみに、specs2にはパーサコンビネータ用のマッチャーがある。\nパーサ全体を通してだけでなく、細かいパーサ単位でテストを記述しておけるので、ちょっとずつ動きを確認しながら積み上げていける。\n\n```scala\nimport org.specs2.mutable.Specification\nimport org.specs2.matcher.ParserMatchers\n\nclass SampleParsersSpec extends Specification with ParserMatchers {\n  \"keyword\" should {\n    \"match with ignore-case\" in {\n      keyword must succeedOn(\"KEYWORD:\")\n      keyword must succeedOn(\"Keyword:\")\n      keyword must succeedOn(\"keyWord:\")\n    }\n    \"fail in other pattern\" in {\n      keyword must failOn(\"key-word:\")\n    }\n  }\n}\n```\n\nテストもちゃんと通るけど、IntellijIDEAで構文エラーになるのはなぜ…。\n",
        "body": "<p>パーサ書いてると結構大小を区別しないキーワードがあったりするので、さくっと書けるようにしてみた。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">SampleParsers</span> <span class=\"k\">extends</span> <span class=\"nc\">RegexParsers</span> <span class=\"o\">{</span>\n  <span class=\"cm\">/** 文字列に&quot;.i&quot;を付けると大文字小文字を区別せずマッチさせるようにする拡張 */</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">IgnoreCaseString</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"s\">&quot;&quot;&quot;(?i)\\Q&quot;&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"s\">&quot;&quot;&quot;\\E&quot;&quot;&quot;</span><span class=\"o\">).</span><span class=\"n\">r</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">keyword</span><span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;keyword:&quot;</span><span class=\"o\">.</span><span class=\"n\">i</span>\n  <span class=\"k\">def</span> <span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;[a-zA-Z0-9]+&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n  <span class=\"k\">def</span> <span class=\"n\">parameter</span><span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[(</span><span class=\"kt\">String</span>,<span class=\"kt\">String</span><span class=\"o\">)]</span> <span class=\"k\">=</span> <span class=\"n\">keyword</span> <span class=\"o\">~</span> <span class=\"n\">value</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">k</span><span class=\"o\">~</span><span class=\"n\">v</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>ちなみに、specs2にはパーサコンビネータ用のマッチャーがある。<br>\nパーサ全体を通してだけでなく、細かいパーサ単位でテストを記述しておけるので、ちょっとずつ動きを確認しながら積み上げていける。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.specs2.mutable.Specification</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.specs2.matcher.ParserMatchers</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleParsersSpec</span> <span class=\"k\">extends</span> <span class=\"nc\">Specification</span> <span class=\"k\">with</span> <span class=\"nc\">ParserMatchers</span> <span class=\"o\">{</span>\n  <span class=\"s\">&quot;keyword&quot;</span> <span class=\"n\">should</span> <span class=\"o\">{</span>\n    <span class=\"s\">&quot;match with ignore-case&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"n\">keyword</span> <span class=\"n\">must</span> <span class=\"n\">succeedOn</span><span class=\"o\">(</span><span class=\"s\">&quot;KEYWORD:&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">keyword</span> <span class=\"n\">must</span> <span class=\"n\">succeedOn</span><span class=\"o\">(</span><span class=\"s\">&quot;Keyword:&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">keyword</span> <span class=\"n\">must</span> <span class=\"n\">succeedOn</span><span class=\"o\">(</span><span class=\"s\">&quot;keyWord:&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"s\">&quot;fail in other pattern&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"n\">keyword</span> <span class=\"n\">must</span> <span class=\"n\">failOn</span><span class=\"o\">(</span><span class=\"s\">&quot;key-word:&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>テストもちゃんと通るけど、IntellijIDEAで構文エラーになるのはなぜ…。</p>\n",
        "stock_users": [
            "Reds",
            "kasumani"
        ]
    },
    {
        "id": 100525,
        "uuid": "4d8fa551107fdac83c53",
        "user": {
            "id": 4126,
            "url_name": "iwag@github",
            "profile_image_url": "https://avatars.githubusercontent.com/u/1522583"
        },
        "title": "elastic4s を試す",
        "created_at": "2014-07-28 21:52:01 +0900",
        "updated_at": "2014-07-28 21:52:01 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/iwag@github/items/4d8fa551107fdac83c53",
        "created_at_as_seconds": 1406551921,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "Elasticsearch 用のscala バインディングを探していて、[elastic4s](https://github.com/sksamuel/elastic4s) 触った記録。\n\n[他にもあるが](http://www.elasticsearch.org/guide/en/elasticsearch/client/community/current/clients.html#community-scala) このなかであげられてる中では一番☆が多かった。\n\n\n試す\n---\n\nbuild.sbt にこれだけ書いてsbt console起動。\n\n```scala\nlibraryDependencies ++= Seq(\n  \"com.sksamuel.elastic4s\" %% \"elastic4s\" % \"1.2.1.2\"\n)\n```\n\nまずパッケージをインポート\n\n```scala\nscala> import com.sksamuel.elastic4s.ElasticClient\nimport com.sksamuel.elastic4s.ElasticClient\n\nscala> import com.sksamuel.elastic4s.ElasticDsl._\nimport com.sksamuel.elastic4s.ElasticDsl._\n```\n\nてか、そもそもElasticsearchが動いてないじゃんってことでdocker repoから適当なのを取ってくる、\n\n```\n$ docker pull dockerfile/elasticsearch\n...\n$ docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch\n```\nはい。\n\nsbt consoleに戻ってESとつなげる。\n\n```scala\nscala > val cl = Elaticsearch.local\ncl: com.sksamuel.elastic4s.ElasticClient = com.sksamuel.elastic4s.ElasticClient@619fc958\n// val cl = Elaticsearch.remote(\"remote\", 9300) // リモートの場合\n```\n\nインデックスの作成\n\n```scala\nscala> cl.execute{ create index \"tweets\" }\nres0: scala.concurrent.Future[org.elasticsearch.action.admin.indices.create.CreateIndexResponse] = scala.concurrent.impl.Promise$DefaultPromise@16f91928\n```\n\n見て分かる通り全部Futureで返ってくる。\n\nインデックス\n\n```scala\nscala> val f =cl.execute{ index into \"tweets\" fields (\"text\"->\"helloworld\",\"user\"->\"iwag\")  }\nf: scala.concurrent.Future[org.elasticsearch.action.index.IndexResponse] = scala.concurrent.impl.Promise$DefaultPromise@26ae2063\n```\n\nサーチ\n\n```scala\nscala> val f =cl.execute{ search in \"tweets\" }\nf: scala.concurrent.Future[org.elasticsearch.action.search.SearchResponse] = scala.concurrent.impl.Promise$DefaultPromise@3ade8076\n```\n\nサーチ返ってくるのがESのJavaなSearchResponseでだるい。\n\n```\nscala> f.value.get.get\nres1: org.elasticsearch.action.search.SearchResponse =\n{\n  \"took\" : 2,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 7,\n    \"max_score\" : 1.0,\n    \"hits\" : [ {\n      \"_index\" : \"tweets\",\n      \"_type\" : \"test\",\n      \"_id\" : \"KGWbDEY7Q66PFDnDeFmdpA\",\n      \"_score\" : 1.0,\n      \"_source\":{\"text\":\"hello world\",\"user\":\"iwag\"}\n    }\n  }\n}\n```\n",
        "body": "<p>Elasticsearch 用のscala バインディングを探していて、<a href=\"https://github.com/sksamuel/elastic4s\" title=\"\" target=\"_blank\">elastic4s</a> 触った記録。</p>\n<p><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/client/community/current/clients.html#community-scala\" title=\"\" target=\"_blank\">他にもあるが</a> このなかであげられてる中では一番☆が多かった。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>試す\n      </h2><p>build.sbt にこれだけ書いてsbt console起動。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"s\">&quot;com.sksamuel.elastic4s&quot;</span> <span class=\"o\">%%</span> <span class=\"s\">&quot;elastic4s&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.2.1.2&quot;</span>\n<span class=\"o\">)</span>\n</pre></div></div><p>まずパッケージをインポート</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">import</span> <span class=\"nn\">com.sksamuel.elastic4s.ElasticClient</span>\n<span class=\"k\">import</span> <span class=\"nn\">com.sksamuel.elastic4s.ElasticClient</span>\n\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">import</span> <span class=\"nn\">com.sksamuel.elastic4s.ElasticDsl._</span>\n<span class=\"k\">import</span> <span class=\"nn\">com.sksamuel.elastic4s.ElasticDsl._</span>\n</pre></div></div><p>てか、そもそもElasticsearchが動いてないじゃんってことでdocker repoから適当なのを取ってくる、</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker pull dockerfile/elasticsearch\n...\n$ docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch\n</pre></div></div><p>はい。</p>\n<p>sbt consoleに戻ってESとつなげる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">scala</span> <span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">cl</span> <span class=\"k\">=</span> <span class=\"nc\">Elaticsearch</span><span class=\"o\">.</span><span class=\"n\">local</span>\n<span class=\"n\">cl</span><span class=\"k\">:</span> <span class=\"kt\">com.sksamuel.elastic4s.ElasticClient</span> <span class=\"o\">=</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">sksamuel</span><span class=\"o\">.</span><span class=\"n\">elastic4s</span><span class=\"o\">.</span><span class=\"nc\">ElasticClient</span><span class=\"k\">@</span><span class=\"mi\">619</span><span class=\"n\">fc958</span>\n<span class=\"c1\">// val cl = Elaticsearch.remote(&quot;remote&quot;, 9300) // リモートの場合</span>\n</pre></div></div><p>インデックスの作成</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">cl</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"o\">{</span> <span class=\"n\">create</span> <span class=\"n\">index</span> <span class=\"s\">&quot;tweets&quot;</span> <span class=\"o\">}</span>\n<span class=\"n\">res0</span><span class=\"k\">:</span> <span class=\"kt\">scala.concurrent.Future</span><span class=\"o\">[</span><span class=\"kt\">org.elasticsearch.action.admin.indices.create.CreateIndexResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">impl</span><span class=\"o\">.</span><span class=\"nc\">Promise$DefaultPromise</span><span class=\"k\">@</span><span class=\"mi\">16</span><span class=\"n\">f91928</span>\n</pre></div></div><p>見て分かる通り全部Futureで返ってくる。</p>\n<p>インデックス</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span><span class=\"n\">cl</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"o\">{</span> <span class=\"n\">index</span> <span class=\"n\">into</span> <span class=\"s\">&quot;tweets&quot;</span> <span class=\"n\">fields</span> <span class=\"o\">(</span><span class=\"s\">&quot;text&quot;</span><span class=\"o\">-&gt;</span><span class=\"s\">&quot;helloworld&quot;</span><span class=\"o\">,</span><span class=\"s\">&quot;user&quot;</span><span class=\"o\">-&gt;</span><span class=\"s\">&quot;iwag&quot;</span><span class=\"o\">)</span>  <span class=\"o\">}</span>\n<span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">scala.concurrent.Future</span><span class=\"o\">[</span><span class=\"kt\">org.elasticsearch.action.index.IndexResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">impl</span><span class=\"o\">.</span><span class=\"nc\">Promise$DefaultPromise</span><span class=\"k\">@</span><span class=\"mi\">26</span><span class=\"n\">ae2063</span>\n</pre></div></div><p>サーチ</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span><span class=\"n\">cl</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"o\">{</span> <span class=\"n\">search</span> <span class=\"n\">in</span> <span class=\"s\">&quot;tweets&quot;</span> <span class=\"o\">}</span>\n<span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">scala.concurrent.Future</span><span class=\"o\">[</span><span class=\"kt\">org.elasticsearch.action.search.SearchResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">impl</span><span class=\"o\">.</span><span class=\"nc\">Promise$DefaultPromise</span><span class=\"k\">@</span><span class=\"mi\">3</span><span class=\"n\">ade8076</span>\n</pre></div></div><p>サーチ返ってくるのがESのJavaなSearchResponseでだるい。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>scala&gt; f.value.get.get\nres1: org.elasticsearch.action.search.SearchResponse =\n{\n  &quot;took&quot; : 2,\n  &quot;timed_out&quot; : false,\n  &quot;_shards&quot; : {\n    &quot;total&quot; : 5,\n    &quot;successful&quot; : 5,\n    &quot;failed&quot; : 0\n  },\n  &quot;hits&quot; : {\n    &quot;total&quot; : 7,\n    &quot;max_score&quot; : 1.0,\n    &quot;hits&quot; : [ {\n      &quot;_index&quot; : &quot;tweets&quot;,\n      &quot;_type&quot; : &quot;test&quot;,\n      &quot;_id&quot; : &quot;KGWbDEY7Q66PFDnDeFmdpA&quot;,\n      &quot;_score&quot; : 1.0,\n      &quot;_source&quot;:{&quot;text&quot;:&quot;hello world&quot;,&quot;user&quot;:&quot;iwag&quot;}\n    }\n  }\n}\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 99925,
        "uuid": "5500fc655f191ed17f46",
        "user": {
            "id": 49432,
            "url_name": "esplo77",
            "profile_image_url": "https://pbs.twimg.com/profile_images/449974790833455104/KMs7vJNV_normal.png"
        },
        "title": "Codeforces #257 div.1 A",
        "created_at": "2014-07-28 01:18:06 +0900",
        "updated_at": "2014-07-28 01:18:06 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "codeforces",
                "url_name": "codeforces",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/esplo77/items/5500fc655f191ed17f46",
        "created_at_as_seconds": 1406477886,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# 概要\n\nhttp://codeforces.com/contest/449/problem/A\n\n[一昨日](http://qiita.com/esplo77/items/f1c6f3e5b34c0980ba4f)、[昨日](http://qiita.com/esplo77/items/792a88c0ae66e5295e33)に引き続いて解いていきます。\nようやくC問題ですね。\nこの問題、分割数も求めれば実際にチョコレートを割るときに使えるかも…？\n\n# 問題\n\nn*mのチョコレートをk回割りたい。\n割るときは、よくある溝に沿って割らないといけない。\n一番小さいチョコが最大の大きさになるように割った時、その大きさを求めよ。\n\n```math\n1 \\leq n,m \\leq 10^9 \\\\\n1 \\leq k \\leq 2 \\cdot 10^9\n```\n\n# アルゴリズム\n\nn,m,kがいつも通りでかいので、O(n)では間に合いませんね。\n面積が$10^18$あるチョコレート、見てみたい。単位がわからんけど。\nということは、全部の割るパターンを網羅はできないです。\nDiv.2 A問題なら全探索もありですが、これは生憎Div.1 A問題ですね。\n\nこういう時は、実際に割って考えてみましょう。\n\n\nさて、適当に割ってみると、どうも縦と横、両方向から割るのはダメそうです。\n縦なら縦、横なら横だけで割ると大きくできそうです。\n割る回数が多い時は、しょうがなく両方向から割る感じですね。\n\n長い辺を割るか、短い辺を割るかは場合によって違いそうです。\n例えば、4×3を割るとき、k=1なら4の辺を割ると6になって最大ですが、k=2なら3の辺を割った場合が4で最大です。\nここに法則を求めるのは難しそうなので、両方求めて大きい方を採用します。\nオーダー的には変化しないので問題ないでしょう。\n\nなお、$(n-1)+(m-1) < k$なら割る回数が多すぎて、割ることができません。\nこういう場合は-1を返して終わります。\n\nまとめると、\n\n1. 割る回数が多過ぎたら-1\n\n1. 両方の辺を割らないといけない時は、単方向から割り切って、残りの回数でもう一方向から割る\n\n1. それ以外の時は、縦横それぞれの方向で割った結果を比較\n\nというシンプルな処理で実現できそうです。\nこれをコードに落とします。\n\n# 解答\n\nScalaっぽさはありません。\n関数型感出せるんかな、こういう処理…。\n\n```scala\nimport scala.math.BigInt\n\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  val n,m,k = sc.nextInt\n\n  def solve( n: BigInt, m: BigInt, k: BigInt ): BigInt = {\n\n    if( k == 0 )\n      n * m\n    else if( (n-1) + (m-1) < k )\n      -1\n    else {\n      val shortSide = n.min(m)\n      val longSide = n.max(m)\n\n      // 両方の辺を割らないといけない場合\n      if( longSide < (k+1) ) {\n        solve(1, m, (k + 1) - n).max(\n          solve(n, 1, (k + 1) - m)\n        )\n      }\n      // 片方向からだけ割って、大きい方を採用\n      else {\n        val nCut = ( n / (k+1) ) * m\n        val mCut = ( m / (k+1) ) * n\n        nCut.max(mCut)\n      }\n    }\n  }\n\n  println( solve( n, m, k ) )\n}\n```\n\n# 結果\nTime: 218 ms\nMemoy: 0 KB\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h1><p><a href=\"http://codeforces.com/contest/449/problem/A\" title=\"http://codeforces.com/contest/449/problem/A\" target=\"_blank\">http://codeforces.com/contest/449/problem/A</a></p>\n<p><a href=\"http://qiita.com/esplo77/items/f1c6f3e5b34c0980ba4f\" title=\"\">一昨日</a>、<a href=\"http://qiita.com/esplo77/items/792a88c0ae66e5295e33\" title=\"\">昨日</a>に引き続いて解いていきます。<br>\nようやくC問題ですね。<br>\nこの問題、分割数も求めれば実際にチョコレートを割るときに使えるかも…？</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>問題\n      </h1><p>n*mのチョコレートをk回割りたい。<br>\n割るときは、よくある溝に沿って割らないといけない。<br>\n一番小さいチョコが最大の大きさになるように割った時、その大きさを求めよ。</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>1 \\leq n,m \\leq 10^9 \\\\\n1 \\leq k \\leq 2 \\cdot 10^9\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>アルゴリズム\n      </h1><p>n,m,kがいつも通りでかいので、O(n)では間に合いませんね。<br>\n面積が$10^18$あるチョコレート、見てみたい。単位がわからんけど。<br>\nということは、全部の割るパターンを網羅はできないです。<br>\nDiv.2 A問題なら全探索もありですが、これは生憎Div.1 A問題ですね。</p>\n<p>こういう時は、実際に割って考えてみましょう。</p>\n<p>さて、適当に割ってみると、どうも縦と横、両方向から割るのはダメそうです。<br>\n縦なら縦、横なら横だけで割ると大きくできそうです。<br>\n割る回数が多い時は、しょうがなく両方向から割る感じですね。</p>\n<p>長い辺を割るか、短い辺を割るかは場合によって違いそうです。<br>\n例えば、4×3を割るとき、k=1なら4の辺を割ると6になって最大ですが、k=2なら3の辺を割った場合が4で最大です。<br>\nここに法則を求めるのは難しそうなので、両方求めて大きい方を採用します。<br>\nオーダー的には変化しないので問題ないでしょう。</p>\n<p>なお、$(n-1)+(m-1) &lt; k$なら割る回数が多すぎて、割ることができません。<br>\nこういう場合は-1を返して終わります。</p>\n<p>まとめると、</p>\n\n<ol>\n<li><p>割る回数が多過ぎたら-1</p></li>\n<li><p>両方の辺を割らないといけない時は、単方向から割り切って、残りの回数でもう一方向から割る</p></li>\n<li><p>それ以外の時は、縦横それぞれの方向で割った結果を比較</p></li>\n</ol>\n<p>というシンプルな処理で実現できそうです。<br>\nこれをコードに落とします。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>解答\n      </h1><p>Scalaっぽさはありません。<br>\n関数型感出せるんかな、こういう処理…。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.math.BigInt</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">sc</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Scanner</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">in</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">k</span> <span class=\"k\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">nextInt</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">BigInt</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"k\">:</span> <span class=\"kt\">BigInt</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"k\">:</span> <span class=\"kt\">BigInt</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">BigInt</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n\n    <span class=\"k\">if</span><span class=\"o\">(</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n      <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">m</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">)</span>\n      <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">shortSide</span> <span class=\"k\">=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">longSide</span> <span class=\"k\">=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span>\n\n      <span class=\"c1\">// 両方の辺を割らないといけない場合</span>\n      <span class=\"k\">if</span><span class=\"o\">(</span> <span class=\"n\">longSide</span> <span class=\"o\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">).</span><span class=\"n\">max</span><span class=\"o\">(</span>\n          <span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n      <span class=\"c1\">// 片方向からだけ割って、大きい方を採用</span>\n      <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">val</span> <span class=\"n\">nCut</span> <span class=\"k\">=</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">m</span>\n        <span class=\"k\">val</span> <span class=\"n\">mCut</span> <span class=\"k\">=</span> <span class=\"o\">(</span> <span class=\"n\">m</span> <span class=\"o\">/</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n        <span class=\"n\">nCut</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">mCut</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>結果\n      </h1><p>Time: 218 ms<br>\nMemoy: 0 KB</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 99749,
        "uuid": "792a88c0ae66e5295e33",
        "user": {
            "id": 49432,
            "url_name": "esplo77",
            "profile_image_url": "https://pbs.twimg.com/profile_images/449974790833455104/KMs7vJNV_normal.png"
        },
        "title": "Codeforces #257 div.2 B",
        "created_at": "2014-07-27 02:03:38 +0900",
        "updated_at": "2014-07-28 00:59:47 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "codeforces",
                "url_name": "codeforces",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/esplo77/items/792a88c0ae66e5295e33",
        "created_at_as_seconds": 1406394218,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# 概要\n\nhttp://codeforces.com/contest/450/problem/B\n[昨日](http://qiita.com/esplo77/items/f1c6f3e5b34c0980ba4f)に引き続き。\nなかなか楽しい問題でした。\n今回はScalaっぽいこともできます。\n\n# 問題\n\n超シンプル。\n以下の数式がある。\n$f_n$の値を$10^9+7$で剰余を取り出力せよ。\n\n```math\nf_1 = x; f_2 = y;\\forall i (i \\leq 2), f_i = f_{i-1} + f_{i+1}\n```\n\n```math\n1 \\leq n \\leq 10^9\n```\n\n# アルゴリズム\n\n## 式変形\n\nまずは、馬鹿正直に与えられた数式を使ってみます。\n早速サンプル１、$x=2,y=3,n=3$の時を考えましょう。\n数式に当てはめて・・・\n\n```math\nf_3 = f_2 + f_4 \\\\\n = 3 + f_4 \\\\\n = ...\n```\n\n __$f_4$ が出ちゃったのォ！？__ ﾀﾞﾚｶﾀｽｹﾃｰ\n\nというわけで、式変形しましょう。\n\n```math\n(1) f_i = f_{i-1} + f_{i+1} \\\\\n(2) f_{i+1} = f_i - f_{i-1} \\\\\n(3) f_i = f_{i-1} - f_{i-2}\n```\n\n(3)を使うと、\n\n```math\nf_1 = x \\\\\nf_2 = y \\\\\nf_3 = f_2 - f_1 = y - x \\\\\nf_4 = f_3 - f_2 = (y-x) - y = -x\n```\n\nやったね！どこまでも行ける！\n\n## 速度的に\n\nどこまでも行けるようになったのはいいですが…。\nnが$10^9$とデカイので、O(n)でも死にそう。\nO(logn)とかO(1)にしないと競プロ的にはアウト。\n\nO(n)でもダメということは、フィボナッチとかでよくあるメモ化してもダメ。\n冪乗でフィボナッチ数を求めるような、画期的な何かが必要ですね。\n\n## 式変形アゲイン\n\nというわけで、再度式を眺めてみます。\nこういう時は、しばらく項を求めてみると何かが見えるもんです。\n実際にしばらく求めてみましょう。\n\n```math\nf_5 = f_4 - f_3 = -x - (y-x) = y \\\\\nf_6 = f_5 - f_4 = y - (-x) = y + x \\\\\nf_7 = f_6 - f_5 = (y+x) - y = x \\\\\nf_8 = f_7 - f_6 = x - (y+x) = y \\\\\nf_9 = f_8 - f_7 = y - x\n```\n\n$f_7$が・・・。\n__$f_1$に帰っちゃったのォ！？ﾀﾞﾚｶﾀｽ(ry__\n\n不思議ですが、この性質を使えばnがいくら大きかろうか、$f_1$～$f_6$のどれかを使えばOK。\nO(1)で求められます。\n\n## 剰余\n\n言語によって、以下のコードの結果が異なります。\n\n```scala\n-1 % 10\n```\n\nこれが9になるか、-1になるかは言語それぞれですが、Scalaでは-1のままです。困った。\n\nしょうがないので、以下のテクニックを使って、Mで剰余を取った時負数にならないようにします。\n\n```scala\n( ( -1 % M ) + M ) % M\n```\n\n# 解答\n\n今回はJava的な書き方とScala的な書き方を分けてみます。\n\n## Java的記述\n\n6要素を持つ配列を用意して、そこに入れます。\n念のため、Int - Intをする時にも剰余を取っておきます。\n\n```scala\nimport scala.math.BigInt\n\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  val x, y, n = sc.nextInt\n\n  def solve( x: Int, y: Int, n: Int ): Int = {\n    val M: Int = 1e9.toInt + 7\n\n    val newN = (n-1) % 6\n\n    var memo = new Array[Int](6)\n    memo(0) = x\n    memo(1) = y\n    for( i <- (2 until 6) ) {\n      memo(i) = ( memo(i-1) - memo(i-2) ) % M\n    }\n\n    ( ( memo(newN) % M ) + M ) % M\n  }\n\n  println( solve( x, y, n ) )\n}\n```\n\n分かりやすいですね。\nこれで通ります。\n\n## Scala的記述\n\n関数型言語的には、無限リストを作ってn番目の要素を取り出すのが美しい気がします。\nついでにBigIntを使って、Int - Intをしても大丈夫なようにしておきます（BigIntの計算速度わからんけど）。\n\n```scala\nimport scala.math.BigInt\n\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  val x, y, n = sc.nextInt\n\n  def solve2( x: Int, y: Int, n: Int ): Int = {\n    val M: Int = 1e9.toInt + 7\n\n    val newN = (n-1) % 6\n\n    def tail(a: BigInt, b: BigInt): Stream[BigInt] = a #:: tail(b, b - a)\n    val res = tail(x, y)(newN)\n    ( ( ( res % M ) + M ) mod M ).toInt\n  }\n\n  println( solve( x, y, n ) )\n}\n\n```\n\nなんとなく、エレガント。\n\n\n# 結果\n\nTime: 233ms\nMemory: 0 KB\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h1><p><a href=\"http://codeforces.com/contest/450/problem/B\" title=\"http://codeforces.com/contest/450/problem/B\" target=\"_blank\">http://codeforces.com/contest/450/problem/B</a><br>\n<a href=\"http://qiita.com/esplo77/items/f1c6f3e5b34c0980ba4f\" title=\"\">昨日</a>に引き続き。<br>\nなかなか楽しい問題でした。<br>\n今回はScalaっぽいこともできます。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>問題\n      </h1><p>超シンプル。<br>\n以下の数式がある。<br>\n$f_n$の値を$10^9+7$で剰余を取り出力せよ。</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>f_1 = x; f_2 = y;\\forall i (i \\leq 2), f_i = f_{i-1} + f_{i+1}\n</pre></div></div><div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>1 \\leq n \\leq 10^9\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>アルゴリズム\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>式変形\n      </h2><p>まずは、馬鹿正直に与えられた数式を使ってみます。<br>\n早速サンプル１、$x=2,y=3,n=3$の時を考えましょう。<br>\n数式に当てはめて・・・</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>f_3 = f_2 + f_4 \\\\\n = 3 + f_4 \\\\\n = ...\n</pre></div></div><p> <strong>$f_4$ が出ちゃったのォ！？</strong> ﾀﾞﾚｶﾀｽｹﾃｰ</p>\n<p>というわけで、式変形しましょう。</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>(1) f_i = f_{i-1} + f_{i+1} \\\\\n(2) f_{i+1} = f_i - f_{i-1} \\\\\n(3) f_i = f_{i-1} - f_{i-2}\n</pre></div></div><p>(3)を使うと、</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>f_1 = x \\\\\nf_2 = y \\\\\nf_3 = f_2 - f_1 = y - x \\\\\nf_4 = f_3 - f_2 = (y-x) - y = -x\n</pre></div></div><p>やったね！どこまでも行ける！</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>速度的に\n      </h2><p>どこまでも行けるようになったのはいいですが…。<br>\nnが$10^9$とデカイので、O(n)でも死にそう。<br>\nO(logn)とかO(1)にしないと競プロ的にはアウト。</p>\n<p>O(n)でもダメということは、フィボナッチとかでよくあるメモ化してもダメ。<br>\n冪乗でフィボナッチ数を求めるような、画期的な何かが必要ですね。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>式変形アゲイン\n      </h2><p>というわけで、再度式を眺めてみます。<br>\nこういう時は、しばらく項を求めてみると何かが見えるもんです。<br>\n実際にしばらく求めてみましょう。</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>f_5 = f_4 - f_3 = -x - (y-x) = y \\\\\nf_6 = f_5 - f_4 = y - (-x) = y + x \\\\\nf_7 = f_6 - f_5 = (y+x) - y = x \\\\\nf_8 = f_7 - f_6 = x - (y+x) = y \\\\\nf_9 = f_8 - f_7 = y - x\n</pre></div></div><p>$f_7$が・・・。<br>\n<strong>$f_1$に帰っちゃったのォ！？ﾀﾞﾚｶﾀｽ(ry</strong></p>\n<p>不思議ですが、この性質を使えばnがいくら大きかろうか、$f_1$～$f_6$のどれかを使えばOK。<br>\nO(1)で求められます。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>剰余\n      </h2><p>言語によって、以下のコードの結果が異なります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">%</span> <span class=\"mi\">10</span>\n</pre></div></div><p>これが9になるか、-1になるかは言語それぞれですが、Scalaでは-1のままです。困った。</p>\n<p>しょうがないので、以下のテクニックを使って、Mで剰余を取った時負数にならないようにします。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">%</span> <span class=\"n\">M</span> <span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span>\n</pre></div></div><h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>解答\n      </h1><p>今回はJava的な書き方とScala的な書き方を分けてみます。</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>Java的記述\n      </h2><p>6要素を持つ配列を用意して、そこに入れます。<br>\n念のため、Int - Intをする時にも剰余を取っておきます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.math.BigInt</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">sc</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Scanner</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">in</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">nextInt</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">M</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"n\">e9</span><span class=\"o\">.</span><span class=\"n\">toInt</span> <span class=\"o\">+</span> <span class=\"mi\">7</span>\n\n    <span class=\"k\">val</span> <span class=\"n\">newN</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"mi\">6</span>\n\n    <span class=\"k\">var</span> <span class=\"n\">memo</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"mi\">6</span><span class=\"o\">)</span>\n    <span class=\"n\">memo</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">x</span>\n    <span class=\"n\">memo</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">y</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span> <span class=\"n\">i</span> <span class=\"k\">&lt;-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"n\">until</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">memo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">(</span> <span class=\"n\">memo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">memo</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">memo</span><span class=\"o\">(</span><span class=\"n\">newN</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span> <span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>分かりやすいですね。<br>\nこれで通ります。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>Scala的記述\n      </h2><p>関数型言語的には、無限リストを作ってn番目の要素を取り出すのが美しい気がします。<br>\nついでにBigIntを使って、Int - Intをしても大丈夫なようにしておきます（BigIntの計算速度わからんけど）。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.math.BigInt</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">sc</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Scanner</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">in</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">nextInt</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">solve2</span><span class=\"o\">(</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">M</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"n\">e9</span><span class=\"o\">.</span><span class=\"n\">toInt</span> <span class=\"o\">+</span> <span class=\"mi\">7</span>\n\n    <span class=\"k\">val</span> <span class=\"n\">newN</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"mi\">6</span>\n\n    <span class=\"k\">def</span> <span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">BigInt</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">BigInt</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Stream</span><span class=\"o\">[</span><span class=\"kt\">BigInt</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">a</span> <span class=\"o\">#::</span> <span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">res</span> <span class=\"k\">=</span> <span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)(</span><span class=\"n\">newN</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">res</span> <span class=\"o\">%</span> <span class=\"n\">M</span> <span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">)</span> <span class=\"n\">mod</span> <span class=\"n\">M</span> <span class=\"o\">).</span><span class=\"n\">toInt</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>なんとなく、エレガント。</p>\n<h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>結果\n      </h1><p>Time: 233ms<br>\nMemory: 0 KB</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 99643,
        "uuid": "b406606704db74de9a03",
        "user": {
            "id": 47854,
            "url_name": "yukimura1227",
            "profile_image_url": "https://avatars.githubusercontent.com/u/7125192?"
        },
        "title": "プログラマーの通り名まとめ",
        "created_at": "2014-07-26 16:17:17 +0900",
        "updated_at": "2014-07-28 23:35:09 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Ruby",
                "url_name": "ruby",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/9de6a11d330f5694820082438f88ccf4a1b289b2/medium.jpg?1364837630",
                "versions": []
            },
            {
                "name": "Java",
                "url_name": "java",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fd27fd2571b0f0c64a7fd38b62bfe670f4680e4e/medium.jpg?1387959312",
                "versions": []
            },
            {
                "name": "JavaScript",
                "url_name": "javascript",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/c01023cf926d47b711747c9d00b00fd18dc6638a/medium.jpg?1364837881",
                "versions": []
            },
            {
                "name": "Perl",
                "url_name": "perl",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/62b7b4bb21c57f377926995086a4723c566042e8/medium.jpg?1383884139",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 65,
        "comment_count": 20,
        "url": "http://qiita.com/yukimura1227/items/b406606704db74de9a03",
        "created_at_as_seconds": 1406359037,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# プログラマーの通り名とは\nプログラミング言語っていろいろありますよね！！ぱっと思いついた順に列挙してみると、「C」「Java」「Ruby」「Python」「JavaScript」「Perl」「awk」「Objective-C」「Haskell」「Prolog」「ActionScript」「PHP」「Swift」「Scala」「Groovy」「Verilog」（手が止まったので、ここで終了）などなど、数え上げたらキリがありません。\nそのプログラムを使う人のことを、「Ruby使い=Rubyist（ルビイスト）」と言ったり、「Perl使い=Perler（パーラー）」とよんだりします。\nプログラムをこれから勉強しようかな？という全くの初心者の方は、なんか聞いたことある！！っていう印象で言語を選んで勉強し始める人もいるのではないでしょうか？？\n本稿では、ネット上から拾ってきたこの手のネタを集めて、コメントしてみました。「こんなのあるよ！！」っていうのがありましたら、どんどん追加していきますのでコメントいただけると助かります！！\n\n# タイプ別通り名一覧\n並べてみるとわかりますが、その呼び方によってある程度規則性があることに気付きます。この規則性に従うと新しい言語も呼び方をつけて広まりそうですね。といっても「～する人」というのは、「～er」、「～ist」「～ian」で表現されることが多いので、ほとんどがそれに準じています。\n\n## 「er」型\n言語の名前の最後に「er」をつけて、「～～ラー」みたいに呼ぶタイプです。もっとも割合が多いタイプですが、若干「ダサく」なりがちな気が。。。（笑）\n\n* JavaScripter（ジャバスクリプター）・・・weblioにjavascript使いとの記述あり\n* LISPer（リスパー）・・・weblioによると「舌もつれでしゃべる人」\n* Perler（パーラー）・・・weblioに情報なし\n* PHPer（ペチパー）・・・weblioにphp使いとの記述あり\n* Coboler（コボラー）・・・weblioに情報なし\n* Javaer（ジャバー？）・・・weblioに情報なし\n* Haskeller（ハスケラー） ・・・weblioに情報なし\n* Flasher（フラッシャー）・・・weblioによると「自動点滅装置」のほか、「露出狂」という意味あり\n* awker（オーカー）・・・weblioに情報なし\n* Pythoner（パイソナー）・・・weblioに情報なし\n* JSer（ジェイサー）・・・weblioに情報なし。JavaScriptを略して、よくjsと呼ぶことがあり。それに「er」を付与したものです。短くて呼びやすいですし、響きがいいですね。\n* C#er（シーシャーパー？）・・・weblioには、C#erは検索できずCERとして認識されました）CERを調べてみると、CERとは、京都メカニズムのうちクリーン開発メカニズム（CDM）によって創出されるものであり、国連によって認証された排出枠です。（Certified Emission Reduction）とのことです。すみません、全然関係ないですね。。\n* C++er（シープラプラー？）・・・weblioには、C++erは検索できず、CERとして(ry。。。C#er・C++erでgoogle先生に尋ねるとそこそこHitするので、実際に使われているんだとは思いますが、なにか別の素敵な呼び名ないですかね？\n\n\nScripter（スクリプター）というのは、汎用的に使えるし響きがかっこいいなーって思います。ちなみにスクリプターっていう用語自体は、「映画撮影における「記録」を管理している人」のことを言うらしいです。（和製英語らしいですが。。）ActionScriptやShellScriptなどに使えますね。\nこの中では、「ペチパー」の響きだけが異色な感じがしますね。。。個人的にはPHPPer（ペチッパー）のように、撥音をつけて呼びたいです。\nLISPerは響きはかっこいいのですが、意味を調べない方がよかったですね（笑）Flasherも、意味を調べて吹き出しました（笑）Flashといえば、少し前にFlexとかAirのアプリ開発をかじりましたが、最近全然触ってないなぁ。。。\n\n## 「ist」「ista」型\n言語の最後に、「ist」をつけて、「～～イスト」（「ista」は、「～～イスタ」）みたいに呼ぶタイプです。\n参考文献による「-ist はギリシャ語に由来する語尾で、economist、scientist、physicist、evangelist、atheistなどのように語根がギリシャ語源にある場合に、よく用いられます。」との情報があり、なんとなく上品（？）で格が高い気がしちゃいますね。こんなこと言うと怒られそうですが、「er」よりも高尚な感じがします（笑）\n\n* Rubyist（ルビイスト）・・・weblioにruby使いとの記述あり\n* Groovyist（グルービイスト）・・・weblioに情報なし\n* Pythonist（パイソニスト）・・・weblioによると、占い師とか奇術師らしい\n* Pythonista（パイソニスタ）・・・weblioにpython使いとの記述あり\n\nあれ！？意外とすくない。。。響きからすると「er」型をもっと「ist」型に変更して流行らせたいですね。\n最後にlがつく、PerlとかHaskellとかは、個人的には「ist」型の方がしっくりきます。\nPHPに適用したらペチピスト。。。なんか新種の病気みたいで嫌だな。。。（別にPHPが嫌いなわけでもないのですが、しっくりくる響きではないです。。。）\npythonがたくさん出ていているのは、きっといろんな人に愛されているからでしょうね。ってか、パイソニスタってかっこいいな。\n\n## 「ian」型\n\n* Pythonian（パイソニアン）・・・weblioに情報なし\n* Scalalian（スカラリアン）・・・weblioに情報なし\n* Dartian（ダーティアン？）・・・weblioに情報なし。Dartは、ダーツとか矢のように飛んでいくという意味があるので、猪突猛進する人みたいない意味になるのでしょうか？\n* Delphian（デルファイアン）・・・weblioによると、delphi（ギリシャの古都）→Delphic（delphiの形容詞）→Delphian。英語辞書を引くと、Delphianは、デルファイ人のことを指すようです。\n\n\nうーん、綴りは違うけど、「エイリアン」みたいな響きだからちょっと嫌ですね。。。特にスカラリアン（笑）しかし、ここまですべてに登場しているpython恐るべし。無理やり当てはめるのなら、コボリアンとかですかね。。。なんか、見下してるみたいで駄目か。コボリアン。。。\nあと、初めてしったのですが、Dartという言語があるんですね！！[wikipedia：Dart](http://ja.wikipedia.org/wiki/Dart)によると、Google製のプログラミング言語で、JavaScriptの代替を目指して作られているとか？TypeScriptやCoffeeScriptなど、JavaScriptを代替していくような言語が注目を浴びているので、追随していきたいです。\n\n## その他\n上記、形式にあてはまらないようなものです。おそらく、[er」とか「ist」をつけたもののださい。。。という熱い思いがあり後からつけられたものだと思います。呼んでる人の情熱を感じます！！今はまだマイナーなものもあるかもしれないですが、このタイプは、ぜひ流行らせたいですね！！\n\n* Scalman（スカルマン）・・・、石ノ森章太郎さんの漫画とか、ロックマン４のボスとか。。（笑）\n* Javarista（ジャバリスタ）・・・Javaといえば珈琲とのことからJava + Barista\n* Javanese（ジャバネス？ジャワニーズ？）・・・weblioによると、「ジャワ島人」「ジャワ語の」という意味。japaneseと綴りがにていますね。\n* Perl Monger（パールモンガー）・・・weblioによると、～屋という意味のほか、つまらないことを世に広めようとする人という意味らしいです。これは、最初に考えた人が意図的につけたのでしょうかね（gitみたいに）。「Perl Monger」は、Perl MongersというPerlのユーザーグループが語源になっているようです。Perl Mongersは、なんと254グループもあるみたいですよ！！[参考：Perl Mongers](http://www.pm.org/groups/)\n* Perlish（パーリッシュ）・・・weblioによると「Perl+ish」という形容詞として登録されていました。ざっとgoogle先生に聞いてみた感じでは、Perl使いというより「Perlチックな」という意味が強そうです。プログラムに「$」がたくさん出てきたら、「なんかPerlishだねぇ」なんて使えそうですね（笑）\n* Gopher（ゴーファー）・・・weblioによると「ホリネズミ」の意味。動物の写真を見ましたが、けっこうかわいい。それ以外の意味としては、「WWWが普及する前に幅広く使用されていた分散環境における文献検索/取得システム」があり、このシステムを知っていると年齢がバレそうですね（笑）\n* TeXnician（テフ二シャン）・・・weblioに情報なし。[wikipedia：TeX](http://ja.wikipedia.org/wiki/TeX)によるとTexは、「チューリング完全性を備えた関数型言語でもある。」とありました。\n\nスカルマン！！（笑）そしたら、Airによるアプリ開発を得意とする人はエアーマン！！倒せない！！（笑）\nジャバリスタは、納得！！というか、Javaerってダサいから、Java使いって呼んでたのですが、さっそくジャバリスタって使わせていただきます！！\n\n## 汎用型！？\nC言語やD言語、Rなどはなかなか型にはめて呼びづらいですね。そんな場合は超汎用的なXX  Programmerと読んだり、XX屋さんと読んだりもしますね。\n* C Programmer・・・組み込みといえばCだと思っていたのですが、最近ではJavaが使われたりすることも多いようで、組み込み屋さんにmallocって何？？っていわれて衝撃を受けました（笑）\n* Java屋さん・・・Javaプログラマーの総称？個人的なイメージですが、大手SIerではよく聞く気がします。\n# 参考にさせていただいた記事やサイト\nhttp://blog.ko31.com/201304/programing-language-nickname/\nhttp://d.hatena.ne.jp/liquidfunc/20100524/1274713089\nhttp://www.nilab.info/z3/20120708_04.html\nhttp://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1311863763\nhttp://ejje.weblio.jp/\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>プログラマーの通り名とは\n      </h1><p>プログラミング言語っていろいろありますよね！！ぱっと思いついた順に列挙してみると、「C」「Java」「Ruby」「Python」「JavaScript」「Perl」「awk」「Objective-C」「Haskell」「Prolog」「ActionScript」「PHP」「Swift」「Scala」「Groovy」「Verilog」（手が止まったので、ここで終了）などなど、数え上げたらキリがありません。<br>\nそのプログラムを使う人のことを、「Ruby使い=Rubyist（ルビイスト）」と言ったり、「Perl使い=Perler（パーラー）」とよんだりします。<br>\nプログラムをこれから勉強しようかな？という全くの初心者の方は、なんか聞いたことある！！っていう印象で言語を選んで勉強し始める人もいるのではないでしょうか？？<br>\n本稿では、ネット上から拾ってきたこの手のネタを集めて、コメントしてみました。「こんなのあるよ！！」っていうのがありましたら、どんどん追加していきますのでコメントいただけると助かります！！</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>タイプ別通り名一覧\n      </h1><p>並べてみるとわかりますが、その呼び方によってある程度規則性があることに気付きます。この規則性に従うと新しい言語も呼び方をつけて広まりそうですね。といっても「～する人」というのは、「～er」、「～ist」「～ian」で表現されることが多いので、ほとんどがそれに準じています。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>「er」型\n      </h2><p>言語の名前の最後に「er」をつけて、「～～ラー」みたいに呼ぶタイプです。もっとも割合が多いタイプですが、若干「ダサく」なりがちな気が。。。（笑）</p>\n\n<ul>\n<li>JavaScripter（ジャバスクリプター）・・・weblioにjavascript使いとの記述あり</li>\n<li>LISPer（リスパー）・・・weblioによると「舌もつれでしゃべる人」</li>\n<li>Perler（パーラー）・・・weblioに情報なし</li>\n<li>PHPer（ペチパー）・・・weblioにphp使いとの記述あり</li>\n<li>Coboler（コボラー）・・・weblioに情報なし</li>\n<li>Javaer（ジャバー？）・・・weblioに情報なし</li>\n<li>Haskeller（ハスケラー） ・・・weblioに情報なし</li>\n<li>Flasher（フラッシャー）・・・weblioによると「自動点滅装置」のほか、「露出狂」という意味あり</li>\n<li>awker（オーカー）・・・weblioに情報なし</li>\n<li>Pythoner（パイソナー）・・・weblioに情報なし</li>\n<li>JSer（ジェイサー）・・・weblioに情報なし。JavaScriptを略して、よくjsと呼ぶことがあり。それに「er」を付与したものです。短くて呼びやすいですし、響きがいいですね。</li>\n<li>C#er（シーシャーパー？）・・・weblioには、C#erは検索できずCERとして認識されました）CERを調べてみると、CERとは、京都メカニズムのうちクリーン開発メカニズム（CDM）によって創出されるものであり、国連によって認証された排出枠です。（Certified Emission Reduction）とのことです。すみません、全然関係ないですね。。</li>\n<li>C++er（シープラプラー？）・・・weblioには、C++erは検索できず、CERとして(ry。。。C#er・C++erでgoogle先生に尋ねるとそこそこHitするので、実際に使われているんだとは思いますが、なにか別の素敵な呼び名ないですかね？</li>\n</ul>\n<p>Scripter（スクリプター）というのは、汎用的に使えるし響きがかっこいいなーって思います。ちなみにスクリプターっていう用語自体は、「映画撮影における「記録」を管理している人」のことを言うらしいです。（和製英語らしいですが。。）ActionScriptやShellScriptなどに使えますね。<br>\nこの中では、「ペチパー」の響きだけが異色な感じがしますね。。。個人的にはPHPPer（ペチッパー）のように、撥音をつけて呼びたいです。<br>\nLISPerは響きはかっこいいのですが、意味を調べない方がよかったですね（笑）Flasherも、意味を調べて吹き出しました（笑）Flashといえば、少し前にFlexとかAirのアプリ開発をかじりましたが、最近全然触ってないなぁ。。。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>「ist」「ista」型\n      </h2><p>言語の最後に、「ist」をつけて、「～～イスト」（「ista」は、「～～イスタ」）みたいに呼ぶタイプです。<br>\n参考文献による「-ist はギリシャ語に由来する語尾で、economist、scientist、physicist、evangelist、atheistなどのように語根がギリシャ語源にある場合に、よく用いられます。」との情報があり、なんとなく上品（？）で格が高い気がしちゃいますね。こんなこと言うと怒られそうですが、「er」よりも高尚な感じがします（笑）</p>\n\n<ul>\n<li>Rubyist（ルビイスト）・・・weblioにruby使いとの記述あり</li>\n<li>Groovyist（グルービイスト）・・・weblioに情報なし</li>\n<li>Pythonist（パイソニスト）・・・weblioによると、占い師とか奇術師らしい</li>\n<li>Pythonista（パイソニスタ）・・・weblioにpython使いとの記述あり</li>\n</ul>\n<p>あれ！？意外とすくない。。。響きからすると「er」型をもっと「ist」型に変更して流行らせたいですね。<br>\n最後にlがつく、PerlとかHaskellとかは、個人的には「ist」型の方がしっくりきます。<br>\nPHPに適用したらペチピスト。。。なんか新種の病気みたいで嫌だな。。。（別にPHPが嫌いなわけでもないのですが、しっくりくる響きではないです。。。）<br>\npythonがたくさん出ていているのは、きっといろんな人に愛されているからでしょうね。ってか、パイソニスタってかっこいいな。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>「ian」型\n      </h2>\n<ul>\n<li>Pythonian（パイソニアン）・・・weblioに情報なし</li>\n<li>Scalalian（スカラリアン）・・・weblioに情報なし</li>\n<li>Dartian（ダーティアン？）・・・weblioに情報なし。Dartは、ダーツとか矢のように飛んでいくという意味があるので、猪突猛進する人みたいない意味になるのでしょうか？</li>\n<li>Delphian（デルファイアン）・・・weblioによると、delphi（ギリシャの古都）→Delphic（delphiの形容詞）→Delphian。英語辞書を引くと、Delphianは、デルファイ人のことを指すようです。</li>\n</ul>\n<p>うーん、綴りは違うけど、「エイリアン」みたいな響きだからちょっと嫌ですね。。。特にスカラリアン（笑）しかし、ここまですべてに登場しているpython恐るべし。無理やり当てはめるのなら、コボリアンとかですかね。。。なんか、見下してるみたいで駄目か。コボリアン。。。<br>\nあと、初めてしったのですが、Dartという言語があるんですね！！<a href=\"http://ja.wikipedia.org/wiki/Dart\" title=\"\" target=\"_blank\">wikipedia：Dart</a>によると、Google製のプログラミング言語で、JavaScriptの代替を目指して作られているとか？TypeScriptやCoffeeScriptなど、JavaScriptを代替していくような言語が注目を浴びているので、追随していきたいです。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>その他\n      </h2><p>上記、形式にあてはまらないようなものです。おそらく、[er」とか「ist」をつけたもののださい。。。という熱い思いがあり後からつけられたものだと思います。呼んでる人の情熱を感じます！！今はまだマイナーなものもあるかもしれないですが、このタイプは、ぜひ流行らせたいですね！！</p>\n\n<ul>\n<li>Scalman（スカルマン）・・・、石ノ森章太郎さんの漫画とか、ロックマン４のボスとか。。（笑）</li>\n<li>Javarista（ジャバリスタ）・・・Javaといえば珈琲とのことからJava + Barista</li>\n<li>Javanese（ジャバネス？ジャワニーズ？）・・・weblioによると、「ジャワ島人」「ジャワ語の」という意味。japaneseと綴りがにていますね。</li>\n<li>Perl Monger（パールモンガー）・・・weblioによると、～屋という意味のほか、つまらないことを世に広めようとする人という意味らしいです。これは、最初に考えた人が意図的につけたのでしょうかね（gitみたいに）。「Perl Monger」は、Perl MongersというPerlのユーザーグループが語源になっているようです。Perl Mongersは、なんと254グループもあるみたいですよ！！<a href=\"http://www.pm.org/groups/\" title=\"\" target=\"_blank\">参考：Perl Mongers</a></li>\n<li>Perlish（パーリッシュ）・・・weblioによると「Perl+ish」という形容詞として登録されていました。ざっとgoogle先生に聞いてみた感じでは、Perl使いというより「Perlチックな」という意味が強そうです。プログラムに「$」がたくさん出てきたら、「なんかPerlishだねぇ」なんて使えそうですね（笑）</li>\n<li>Gopher（ゴーファー）・・・weblioによると「ホリネズミ」の意味。動物の写真を見ましたが、けっこうかわいい。それ以外の意味としては、「WWWが普及する前に幅広く使用されていた分散環境における文献検索/取得システム」があり、このシステムを知っていると年齢がバレそうですね（笑）</li>\n<li>TeXnician（テフ二シャン）・・・weblioに情報なし。<a href=\"http://ja.wikipedia.org/wiki/TeX\" title=\"\" target=\"_blank\">wikipedia：TeX</a>によるとTexは、「チューリング完全性を備えた関数型言語でもある。」とありました。</li>\n</ul>\n<p>スカルマン！！（笑）そしたら、Airによるアプリ開発を得意とする人はエアーマン！！倒せない！！（笑）<br>\nジャバリスタは、納得！！というか、Javaerってダサいから、Java使いって呼んでたのですが、さっそくジャバリスタって使わせていただきます！！</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>汎用型！？\n      </h2><p>C言語やD言語、Rなどはなかなか型にはめて呼びづらいですね。そんな場合は超汎用的なXX  Programmerと読んだり、XX屋さんと読んだりもしますね。<br>\n* C Programmer・・・組み込みといえばCだと思っていたのですが、最近ではJavaが使われたりすることも多いようで、組み込み屋さんにmallocって何？？っていわれて衝撃を受けました（笑）<br>\n* Java屋さん・・・Javaプログラマーの総称？個人的なイメージですが、大手SIerではよく聞く気がします。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>参考にさせていただいた記事やサイト\n      </h1><p><a href=\"http://blog.ko31.com/201304/programing-language-nickname/\" title=\"http://blog.ko31.com/201304/programing-language-nickname/\" target=\"_blank\">http://blog.ko31.com/201304/programing-language-nickname/</a><br>\n<a href=\"http://d.hatena.ne.jp/liquidfunc/20100524/1274713089\" title=\"http://d.hatena.ne.jp/liquidfunc/20100524/1274713089\" target=\"_blank\">http://d.hatena.ne.jp/liquidfunc/20100524/1274713089</a><br>\n<a href=\"http://www.nilab.info/z3/20120708_04.html\" title=\"http://www.nilab.info/z3/20120708_04.html\" target=\"_blank\">http://www.nilab.info/z3/20120708_04.html</a><br>\n<a href=\"http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1311863763\" title=\"http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1311863763\" target=\"_blank\">http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1311863763</a><br>\n<a href=\"http://ejje.weblio.jp/\" title=\"http://ejje.weblio.jp/\" target=\"_blank\">http://ejje.weblio.jp/</a></p>\n",
        "stock_users": [
            "nemuiten",
            "tkt0821",
            "whitebell",
            "nakamu",
            "Noboruhi",
            "yuyuchu3333",
            "ryokosuge",
            "noritada",
            "koudaiii",
            "blp1526",
            "KaiLx",
            "labocho",
            "ongaeshi",
            "ahkr",
            "amay077",
            "PruneMazui",
            "mutoj_rdm821",
            "kysnm",
            "morozumi_h",
            "takaya1992",
            "selious",
            "da0shi",
            "maximum80",
            "pb_tmz08",
            "tsawada",
            "LightSpeedC",
            "manuluu",
            "mpyw",
            "_thisIsId",
            "n_6g",
            "ocharake2003",
            "kimuraya",
            "Kiyo_h76",
            "suin",
            "Reds",
            "nyarla",
            "cutmail",
            "magicant",
            "ic_lifewood",
            "zukkun",
            "kanpe777",
            "nyamogera",
            "houmei",
            "numa08",
            "ichigoro",
            "hiro_matsuno2",
            "kimama1997",
            "cu39",
            "surume",
            "sounisi5011",
            "ahiruson",
            "nagodon",
            "tosainu_maple",
            "NowhereMan21",
            "kimihiro_n",
            "bells17",
            "zaoriku0",
            "odamax@github",
            "kk2170",
            "asmasa",
            "fkshom",
            "tsuyoshi_cho",
            "kasumani",
            "amayaw9",
            "akmiyoshi"
        ]
    },
    {
        "id": 99524,
        "uuid": "f1c6f3e5b34c0980ba4f",
        "user": {
            "id": 49432,
            "url_name": "esplo77",
            "profile_image_url": "https://pbs.twimg.com/profile_images/449974790833455104/KMs7vJNV_normal.png"
        },
        "title": "Codeforces #257 div.2 A",
        "created_at": "2014-07-26 00:19:13 +0900",
        "updated_at": "2014-07-28 00:50:54 +0900",
        "created_at_in_words": "約2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "codeforces",
                "url_name": "codeforces",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/esplo77/items/f1c6f3e5b34c0980ba4f",
        "created_at_as_seconds": 1406301553,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# 概要\nhttp://codeforces.com/contest/450/problem/A\nをScalaで解いてみた。\n競プロのリハビリ兼Scalaが競プロでどう使えるのかの検証その1です。\n\n# 問題\n\nn人の子供が並んでいる（1..nの番号付き）。\nそれぞれ、少なくともa[i]個のキャンディを受け取るまで帰らない。\nJzzhuさんは先頭の子からm個ずつキャンディを与える。\nm個もらった子iは、もらった数の合計がa[i]を上回れば列から消え、まだなら列の最後に並ぶ。\n最後に列に残った子は何番？\n\n```math\n1 \\leq n \\leq 100\n```\n\n# アルゴリズム\n\n子供の列をListで表し、実装するだけ。\nnが小さいので何しても大丈夫。\n良心的なA問題。\n\n## Scala的には\n\n列の最後に追加、というList的に不吉な文言が。\n念のため、末尾に追加演算子（:+）を使わずreverseしてみた。\n両方コドフォサーバーで試したところ、実行速度に差はほぼなし。\n\n100程度なら何やっても大丈夫そう。\n詳しい検証は速度が厳しい問題が出てからにしよう…。\n\nこういうケース、うまく書けば再帰使わないで行けるんかな…？\n末尾に増える時点でmapじゃ書けなさそうだし、あんまりいい方法が浮かばない。\n\nなお、テストをしやすいように、solve関数にまとめた。\n\n# 解答\n\n```scala\nimport scala.annotation.tailrec\n\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  val n,m = sc.nextInt\n  val input = List.fill(n)(sc.nextInt)\n\n  def solve( m: Int, input: List[Int] ): Int = {\n\n    @tailrec\n    def dist(children: List[(Int, Int)] ): Int = {\n      children match {\n\n        case List(x) =>  // size == 1\n          x._2 + 1\n\n        case x :: xs =>\n          val diff = x._1 - m\n          if (diff <= 0)\n            dist(xs)\n          else\n            dist( ( (diff, x._2) :: xs.reverse ).reverse )\n      }\n    }\n\n    dist( input.zipWithIndex )\n  }\n\n  println( solve( m, input ) )\n}\n```\n\n## 自分で書いたテストケース\n\n```scala\nimport org.scalatest._\n\nclass Test extends FlatSpec with Matchers {\n\n  it should \"test 1\" in {\n    val input = List(1, 3, 1, 4, 2)\n    Main.solve(2, input) should be (4)\n  }\n\n  it should \"test 2\" in {\n    val input = List(1, 1, 2, 2, 3, 3)\n    Main.solve(4, input) should be (6)\n  }\n\n  it should \"test 3\" in {\n    val input = List(6, 1, 5, 4, 2, 3, 1)\n    Main.solve(3, input) should be (4)\n  }\n}\n```\n\n## 結果\nTime: 249 ms\nMemory: 100 KB\n\n## Scala見たことない人へのちょっとした解説\n\n * List[Int]\n IntのList。いわゆる単方向リスト。\n特定の要素に行くには先頭から辿らないと行けないので、末尾に追加とかは厄介。\nその代わり、先頭に追加、とか先頭を順に取り出し、とかは速い。\n\n * List[(Int,Int)]\n Intを2つ持つタプルのList。タプルを書くのは簡単。便利。\n\n * @tailrec\n  末尾再帰をしてね、ってお願いするアノテーション。\n末尾再帰な関数は、whileに展開されてスタックを食いつぶさなくなる、らしい。\n心休まるアノテーション。\n\n * match - case\n C言語のそれと比べてはいけないレベルで強力。\n数字、文字列のみならず、型やリストでもマッチでき、ガード条件も付けられる。\n\n * ;\n 省略可能。1行に処理を並べたい時は必要。\n\n * return\n省略可能。ブロックの最後に書いたのがreturn値になる。便利。\nブロックを使って変数を複雑な初期化とかすると綺麗&&便利。\n\n```scala\n  val t = {\n    val u = a+b\n    u*v\n  }\n```\n\n * reverse\n要素の順番をひっくり返した配列を返す。\n「reverse」→「先頭に要素追加」→「reverse」であら不思議、末尾に要素が追加できちゃう。\nListの末尾に追加するコストを気にしなければ、\nList() :+ elem\nで末尾に追加できる演算子が用意されている。\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>概要\n      </h1><p><a href=\"http://codeforces.com/contest/450/problem/A\" title=\"http://codeforces.com/contest/450/problem/A\" target=\"_blank\">http://codeforces.com/contest/450/problem/A</a><br>\nをScalaで解いてみた。<br>\n競プロのリハビリ兼Scalaが競プロでどう使えるのかの検証その1です。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>問題\n      </h1><p>n人の子供が並んでいる（1..nの番号付き）。<br>\nそれぞれ、少なくともa[i]個のキャンディを受け取るまで帰らない。<br>\nJzzhuさんは先頭の子からm個ずつキャンディを与える。<br>\nm個もらった子iは、もらった数の合計がa[i]を上回れば列から消え、まだなら列の最後に並ぶ。<br>\n最後に列に残った子は何番？</p>\n<div class=\"code-frame\" data-lang=\"math\"><div class=\"highlight\"><pre>1 \\leq n \\leq 100\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>アルゴリズム\n      </h1><p>子供の列をListで表し、実装するだけ。<br>\nnが小さいので何しても大丈夫。<br>\n良心的なA問題。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Scala的には\n      </h2><p>列の最後に追加、というList的に不吉な文言が。<br>\n念のため、末尾に追加演算子（:+）を使わずreverseしてみた。<br>\n両方コドフォサーバーで試したところ、実行速度に差はほぼなし。</p>\n<p>100程度なら何やっても大丈夫そう。<br>\n詳しい検証は速度が厳しい問題が出てからにしよう…。</p>\n<p>こういうケース、うまく書けば再帰使わないで行けるんかな…？<br>\n末尾に増える時点でmapじゃ書けなさそうだし、あんまりいい方法が浮かばない。</p>\n<p>なお、テストをしやすいように、solve関数にまとめた。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>解答\n      </h1><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.annotation.tailrec</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">sc</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Scanner</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">in</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">m</span> <span class=\"k\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">nextInt</span>\n  <span class=\"k\">val</span> <span class=\"n\">input</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">nextInt</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">m</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@tailrec</span>\n    <span class=\"k\">def</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">children</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">Int</span><span class=\"o\">)]</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n      <span class=\"n\">children</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n\n        <span class=\"k\">case</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>  <span class=\"c1\">// size == 1</span>\n          <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">_2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"k\">=&gt;</span>\n          <span class=\"k\">val</span> <span class=\"n\">diff</span> <span class=\"k\">=</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">_1</span> <span class=\"o\">-</span> <span class=\"n\">m</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">dist</span><span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">reverse</span> <span class=\"o\">).</span><span class=\"n\">reverse</span> <span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">dist</span><span class=\"o\">(</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">zipWithIndex</span> <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span> <span class=\"n\">solve</span><span class=\"o\">(</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">input</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>自分で書いたテストケース\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.scalatest._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Test</span> <span class=\"k\">extends</span> <span class=\"nc\">FlatSpec</span> <span class=\"k\">with</span> <span class=\"nc\">Matchers</span> <span class=\"o\">{</span>\n\n  <span class=\"n\">it</span> <span class=\"n\">should</span> <span class=\"s\">&quot;test 1&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">input</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">it</span> <span class=\"n\">should</span> <span class=\"s\">&quot;test 2&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">input</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">it</span> <span class=\"n\">should</span> <span class=\"s\">&quot;test 3&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">input</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>結果\n      </h2><p>Time: 249 ms<br>\nMemory: 100 KB</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>Scala見たことない人へのちょっとした解説\n      </h2>\n<ul>\n<li><p>List[Int]<br>\nIntのList。いわゆる単方向リスト。<br>\n特定の要素に行くには先頭から辿らないと行けないので、末尾に追加とかは厄介。<br>\nその代わり、先頭に追加、とか先頭を順に取り出し、とかは速い。</p></li>\n<li><p>List[(Int,Int)]<br>\nIntを2つ持つタプルのList。タプルを書くのは簡単。便利。</p></li>\n<li><p>@tailrec<br>\n末尾再帰をしてね、ってお願いするアノテーション。<br>\n末尾再帰な関数は、whileに展開されてスタックを食いつぶさなくなる、らしい。<br>\n心休まるアノテーション。</p></li>\n<li><p>match - case<br>\nC言語のそれと比べてはいけないレベルで強力。<br>\n数字、文字列のみならず、型やリストでもマッチでき、ガード条件も付けられる。</p></li>\n<li><p>;<br>\n省略可能。1行に処理を並べたい時は必要。</p></li>\n<li><p>return<br>\n省略可能。ブロックの最後に書いたのがreturn値になる。便利。<br>\nブロックを使って変数を複雑な初期化とかすると綺麗&amp;&amp;便利。</p></li>\n</ul>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">t</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">u</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n    <span class=\"n\">u</span><span class=\"o\">*</span><span class=\"n\">v</span>\n  <span class=\"o\">}</span>\n</pre></div></div>\n<ul>\n<li>reverse\n要素の順番をひっくり返した配列を返す。\n「reverse」→「先頭に要素追加」→「reverse」であら不思議、末尾に要素が追加できちゃう。\nListの末尾に追加するコストを気にしなければ、\nList() :+ elem\nで末尾に追加できる演算子が用意されている。</li>\n</ul>\n",
        "stock_users": [
            "Reds",
            "kasumani"
        ]
    },
    {
        "id": 99476,
        "uuid": "0cabb146c28c930f9b76",
        "user": {
            "id": 47562,
            "url_name": "namutaka",
            "profile_image_url": "https://avatars.githubusercontent.com/u/159467?"
        },
        "title": "SkinnyFrameworkのテストで自動ロールバックさせる",
        "created_at": "2014-07-25 22:01:47 +0900",
        "updated_at": "2014-07-25 22:01:47 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "scalikeJDBC",
                "url_name": "scalikejdbc",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "SkinnyFramework",
                "url_name": "skinnyframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5804020dd50c07346e91c715053f5d472ce46578/medium.jpg?1410616775",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 3,
        "url": "http://qiita.com/namutaka/items/0cabb146c28c930f9b76",
        "created_at_as_seconds": 1406293307,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "SkinnyFrameworkでDB関連のテストをする場合には、標準ではScalikeJDBCの\nscalikejdbc.scalatest.AutoRollbackを使うことになります。\nですが、scalikejdbcのAutoRollbackはDBSessionをimplicitで渡しまわすことで実現しているため、セッションを渡せなくなった時点で機能になくなります。\n\n一方、Skinny内ではAutoSessionFeature#autoSessionによって、スレッドローカルのDBSessionオブジェクトを取得する機能があります。\nそこで、autoSessionを利用している限りはセッションを共有できるようにする機能を作ってみました。\n\n\n```scala\npackage test\n\nimport org.scalatest.{Suite, BeforeAndAfter}\nimport scalikejdbc.{ConnectionPool, ThreadLocalDB}\n\ntrait EasyAutoRollback extends BeforeAndAfter { self: Suite =>\n\n  before {\n    Option(ThreadLocalDB.load()).getOrElse {\n      ThreadLocalDB.create(ConnectionPool.borrow())\n    }.beginIfNotYet()\n  }\n\n  after {\n    ThreadLocalDB.load().rollbackIfActive()\n  }\n\n}\n```\n",
        "body": "<p>SkinnyFrameworkでDB関連のテストをする場合には、標準ではScalikeJDBCの<br>\nscalikejdbc.scalatest.AutoRollbackを使うことになります。<br>\nですが、scalikejdbcのAutoRollbackはDBSessionをimplicitで渡しまわすことで実現しているため、セッションを渡せなくなった時点で機能になくなります。</p>\n<p>一方、Skinny内ではAutoSessionFeature#autoSessionによって、スレッドローカルのDBSessionオブジェクトを取得する機能があります。<br>\nそこで、autoSessionを利用している限りはセッションを共有できるようにする機能を作ってみました。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">test</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">org.scalatest.</span><span class=\"o\">{</span><span class=\"nc\">Suite</span><span class=\"o\">,</span> <span class=\"nc\">BeforeAndAfter</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">scalikejdbc.</span><span class=\"o\">{</span><span class=\"nc\">ConnectionPool</span><span class=\"o\">,</span> <span class=\"nc\">ThreadLocalDB</span><span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">EasyAutoRollback</span> <span class=\"k\">extends</span> <span class=\"nc\">BeforeAndAfter</span> <span class=\"o\">{</span> <span class=\"n\">self</span><span class=\"k\">:</span> <span class=\"kt\">Suite</span> <span class=\"o\">=&gt;</span>\n\n  <span class=\"n\">before</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"nc\">ThreadLocalDB</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"o\">()).</span><span class=\"n\">getOrElse</span> <span class=\"o\">{</span>\n      <span class=\"nc\">ThreadLocalDB</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"o\">(</span><span class=\"nc\">ConnectionPool</span><span class=\"o\">.</span><span class=\"n\">borrow</span><span class=\"o\">())</span>\n    <span class=\"o\">}.</span><span class=\"n\">beginIfNotYet</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">after</span> <span class=\"o\">{</span>\n    <span class=\"nc\">ThreadLocalDB</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"o\">().</span><span class=\"n\">rollbackIfActive</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "rynkjm",
            "Reds",
            "kasumani",
            "morozumi_h",
            "seratch@github"
        ]
    },
    {
        "id": 99082,
        "uuid": "143194fab4cdc1eb5c2f",
        "user": {
            "id": 7340,
            "url_name": "i18n",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1119764464/tiwtter_normal.png"
        },
        "title": "型パラメータとして与えられたクラスの名前を文字列にしたい",
        "created_at": "2014-07-25 14:16:13 +0900",
        "updated_at": "2014-07-25 14:16:13 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            }
        ],
        "stock_count": 2,
        "comment_count": 2,
        "url": "http://qiita.com/i18n/items/143194fab4cdc1eb5c2f",
        "created_at_as_seconds": 1406265373,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "表題の通りなのですが、型パラメータとして指定されたクラスの名前を文字列として得たい、ということです。\n\n動かないですけど、イメージ的には下記のような感じです。\n\n~~~scala\ntrait Trait[A] {\n  def parameterClassName = A.toString\n}\n~~~\n\n\n試行錯誤してなんとかできましたが、ちょっと微妙な気がしなくもないです。\n\nなにか良いやり方があったら教えていただけるとうれしいです。\n\n\n~~~scala:Main.scala\nimport traits._\n\nobject Main extends App {\n\n  case class Foo(bar:Int)\n\n  object Hoge extends ATrait[Foo] {\n    def printClass = println(parameterClassName)\n  }\n\n  override def main(args:Array[String]):Unit = {\n    Hoge.printClass\n  }\n}\n~~~\n\n\n利便性を考えてtraitにしたいけれど、traitは引数を受けられないっぽい？\n\n~~~scala:ATrait.scala\npackage traits\n\nimport scala.reflect.runtime.universe._\n\nclass TypeTagProvider[T](implicit t:TypeTag[T]) {\n  def tag = t\n}\n\n// いちおうtraitにしておく\ntrait ATrait[T] extends TypeTagProvider[T] {\n  def parameterClassName = tag.tpe.toString\n}\n~~~\n\n~~~text:output\nMain.Foo\n~~~\n",
        "body": "<p>表題の通りなのですが、型パラメータとして指定されたクラスの名前を文字列として得たい、ということです。</p>\n<p>動かないですけど、イメージ的には下記のような感じです。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Trait</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">parameterClassName</span> <span class=\"k\">=</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>試行錯誤してなんとかできましたが、ちょっと微妙な気がしなくもないです。</p>\n<p>なにか良いやり方があったら教えていただけるとうれしいです。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Main.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">traits._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n  <span class=\"k\">object</span> <span class=\"nc\">Hoge</span> <span class=\"k\">extends</span> <span class=\"nc\">ATrait</span><span class=\"o\">[</span><span class=\"kt\">Foo</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">printClass</span> <span class=\"k\">=</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">parameterClassName</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span><span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Hoge</span><span class=\"o\">.</span><span class=\"n\">printClass</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>利便性を考えてtraitにしたいけれど、traitは引数を受けられないっぽい？</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">ATrait.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"nn\">traits</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">scala.reflect.runtime.universe._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TypeTagProvider</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"k\">implicit</span> <span class=\"n\">t</span><span class=\"k\">:</span><span class=\"kt\">TypeTag</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">tag</span> <span class=\"k\">=</span> <span class=\"n\">t</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// いちおうtraitにしておく</span>\n<span class=\"k\">trait</span> <span class=\"nc\">ATrait</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">TypeTagProvider</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">parameterClassName</span> <span class=\"k\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">tpe</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"text\"><div class=\"code-lang\"><span class=\"bold\">output</span></div><div class=\"highlight\"><pre>Main.Foo\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 97645,
        "uuid": "c27e22b425d1a001e85a",
        "user": {
            "id": 2287,
            "url_name": "torao@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/f77485150808d93c9ddc9814a296c1c1?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "Scala で Stream を使った日付シーケンスの取得",
        "created_at": "2014-07-23 16:26:14 +0900",
        "updated_at": "2014-07-25 00:19:53 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 2,
        "url": "http://qiita.com/torao@github/items/c27e22b425d1a001e85a",
        "created_at_as_seconds": 1406100374,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "システムの傾向調査、問題分析などを行っておりますと期間指定で集計処理を行うことがよくあります。期間の開始日から終了日まで `Calendar#add()` しながら `while` で回してもいいんですけど、Scala なら `Stream` を使えばソレっぽく書けます。\n\n```scala\nimport java.util.{Calendar, Date}\ndef days(begin:Date):Stream[Date] = {\n  val cal = Calendar.getInstance\n  cal.setTime(begin)\n  cal.add(Calendar.DAY_OF_MONTH, 1)\n  begin #:: days(cal.getTime)\n}\n\n// from から to までの全ての日で処理を実行\nval from:Date = ...\nval to:Date = ...\ndays(from).takeWhile{ ! _.after(to) }.foreach{ date =>\n  // ...\n}\n```\n\n`Stream` の使用例を見ているとフィボナッチ数列的なものばかりなのでもう少し実用的な例としてメモしておきます。\n",
        "body": "<p>システムの傾向調査、問題分析などを行っておりますと期間指定で集計処理を行うことがよくあります。期間の開始日から終了日まで <code>Calendar#add()</code> しながら <code>while</code> で回してもいいんですけど、Scala なら <code>Stream</code> を使えばソレっぽく書けます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.util.</span><span class=\"o\">{</span><span class=\"nc\">Calendar</span><span class=\"o\">,</span> <span class=\"nc\">Date</span><span class=\"o\">}</span>\n<span class=\"k\">def</span> <span class=\"n\">days</span><span class=\"o\">(</span><span class=\"n\">begin</span><span class=\"k\">:</span><span class=\"kt\">Date</span><span class=\"o\">)</span><span class=\"k\">:</span><span class=\"kt\">Stream</span><span class=\"o\">[</span><span class=\"kt\">Date</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">cal</span> <span class=\"k\">=</span> <span class=\"nc\">Calendar</span><span class=\"o\">.</span><span class=\"n\">getInstance</span>\n  <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">setTime</span><span class=\"o\">(</span><span class=\"n\">begin</span><span class=\"o\">)</span>\n  <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"o\">(</span><span class=\"nc\">Calendar</span><span class=\"o\">.</span><span class=\"nc\">DAY_OF_MONTH</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">begin</span> <span class=\"o\">#::</span> <span class=\"n\">days</span><span class=\"o\">(</span><span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getTime</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// from から to までの全ての日で処理を実行</span>\n<span class=\"k\">val</span> <span class=\"n\">from</span><span class=\"k\">:</span><span class=\"kt\">Date</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"k\">val</span> <span class=\"n\">to</span><span class=\"k\">:</span><span class=\"kt\">Date</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">days</span><span class=\"o\">(</span><span class=\"n\">from</span><span class=\"o\">).</span><span class=\"n\">takeWhile</span><span class=\"o\">{</span> <span class=\"o\">!</span> <span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"o\">(</span><span class=\"n\">to</span><span class=\"o\">)</span> <span class=\"o\">}.</span><span class=\"n\">foreach</span><span class=\"o\">{</span> <span class=\"n\">date</span> <span class=\"k\">=&gt;</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"o\">}</span>\n</pre></div></div><p><code>Stream</code> の使用例を見ているとフィボナッチ数列的なものばかりなのでもう少し実用的な例としてメモしておきます。</p>\n",
        "stock_users": [
            "fjmtmnb",
            "TomoyaIgarashi",
            "mather314",
            "kasumani",
            "Reds",
            "akmiyoshi"
        ]
    },
    {
        "id": 97600,
        "uuid": "1d7520db70104de68015",
        "user": {
            "id": 29034,
            "url_name": "TomoyaIgarashi",
            "profile_image_url": "https://2.gravatar.com/avatar/10fae129f117d89d538ca0a85d2e582f?d=https%3A%2F%2Fidenticons.github.com%2Ffd5cfe5b6aa183fc2b4921a789e2e476.png"
        },
        "title": "learning-spark on Mac OS X Mavericks",
        "created_at": "2014-07-23 15:24:42 +0900",
        "updated_at": "2014-07-23 15:24:42 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Spark",
                "url_name": "spark",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2b32f68777d6f0d2d88609a3efb979378fc97320/medium.jpg?1401964762",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "MacOSX",
                "url_name": "macosx",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/01293a35b1a590d2ee890365ddba80da5e4d8fe1/medium.jpg?1388346292",
                "versions": []
            },
            {
                "name": "sbt",
                "url_name": "sbt",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/TomoyaIgarashi/items/1d7520db70104de68015",
        "created_at_as_seconds": 1406096682,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## set up Spark\n```sh:shell\n$ cd /usr/local/Cellar\n$ git clone git@github.com:apache/spark.git\n$ cd spark\n$ sbt/sbt publish-local\n```\n## configure SPARK_HOME\n```sh:shell\n$ vi ~/.xxxrc\nexport SPARK_HOME=/usr/local/Cellar/spark\n```\n## build\n```sh:shell\n$ git clone git@github.com:databricks/learning-spark.git\n$ cd learning-spark\n$ sbt/sbt compile\n```\n## run\n```sh:shell\n$ sbt/sbt run\nMultiple main classes detected, select one to run:\n```\n```sh:shell\n$ sbt/sbt 'run-main com.oreilly.learningsparkexamples.scala.BasicAvgFromFile local[4] inputfile'\n```\n```sh:shell\n$ sbt/sbt assembly\n$ cp target/scala-2.10/learning-spark-examples-assembly-0.0.1.jar ~/.\n$ cd ~\n$ CLASSPATH=./learning-spark-examples-assembly-0.0.1.jar\n$ java -cp $CLASSPATH com.oreilly.learningsparkexamples.scala.BasicAvgFromFile local[4] inputfile\n```\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>set up Spark\n      </h2><div class=\"code-frame\" data-lang=\"sh\"><div class=\"code-lang\"><span class=\"bold\">shell</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">cd</span> /usr/local/Cellar\n<span class=\"nv\">$ </span>git clone git@github.com:apache/spark.git\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>spark\n<span class=\"nv\">$ </span>sbt/sbt publish-local\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>configure SPARK_HOME\n      </h2><div class=\"code-frame\" data-lang=\"sh\"><div class=\"code-lang\"><span class=\"bold\">shell</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>vi ~/.xxxrc\n<span class=\"nb\">export </span><span class=\"nv\">SPARK_HOME</span><span class=\"o\">=</span>/usr/local/Cellar/spark\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>build\n      </h2><div class=\"code-frame\" data-lang=\"sh\"><div class=\"code-lang\"><span class=\"bold\">shell</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>git clone git@github.com:databricks/learning-spark.git\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>learning-spark\n<span class=\"nv\">$ </span>sbt/sbt compile\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>run\n      </h2><div class=\"code-frame\" data-lang=\"sh\"><div class=\"code-lang\"><span class=\"bold\">shell</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>sbt/sbt run\nMultiple main classes detected, <span class=\"k\">select</span> one to run:\n</pre></div></div><div class=\"code-frame\" data-lang=\"sh\"><div class=\"code-lang\"><span class=\"bold\">shell</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>sbt/sbt <span class=\"s1\">&#39;run-main com.oreilly.learningsparkexamples.scala.BasicAvgFromFile local[4] inputfile&#39;</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"sh\"><div class=\"code-lang\"><span class=\"bold\">shell</span></div><div class=\"highlight\"><pre><span class=\"nv\">$ </span>sbt/sbt assembly\n<span class=\"nv\">$ </span>cp target/scala-2.10/learning-spark-examples-assembly-0.0.1.jar ~/.\n<span class=\"nv\">$ </span><span class=\"nb\">cd</span> ~\n<span class=\"nv\">$ CLASSPATH</span><span class=\"o\">=</span>./learning-spark-examples-assembly-0.0.1.jar\n<span class=\"nv\">$ </span>java -cp <span class=\"nv\">$CLASSPATH</span> com.oreilly.learningsparkexamples.scala.BasicAvgFromFile <span class=\"nb\">local</span><span class=\"o\">[</span>4<span class=\"o\">]</span> inputfile\n</pre></div></div>",
        "stock_users": [
            "makoto78sasaki",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 97505,
        "uuid": "a5fcfb01a9bb56b2a492",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Play Frameworkのソースコードリーディング Action周り(BodyParserとAnyContent)",
        "created_at": "2014-07-23 13:00:19 +0900",
        "updated_at": "2014-07-23 13:00:19 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            },
            {
                "name": "Play2",
                "url_name": "play2",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f8d7c0088c04def66debcfcc9915914dc2c11df/medium.jpg?1364840479",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/a5fcfb01a9bb56b2a492",
        "created_at_as_seconds": 1406088019,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# はじめに\n本記事は[Play Frameworkのソースコードリーディング Action周り](http://qiita.com/mtoyoshi/items/0679618fdfa710ded645) の続きとなる。\n\n\n# BodyParserとAnyContent\nobject Actionのapplyの中で以下の定義があった。\n\n```scala\nfinal def apply(block: R[AnyContent] => Result): Action[AnyContent] = apply(BodyParsers.parse.anyContent)(block)\n```\n\n[BodyParsers.parse.anyContent](https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala#L545-L579)メソッド定義は以下となる。\n\n```scala\n/**\n * Guess the body content by checking the Content-Type header.\n */\ndef anyContent: BodyParser[AnyContent] = BodyParser(\"anyContent\") { request =>\n  import play.api.libs.iteratee.Execution.Implicits.trampoline\n  if (request.method == HttpVerbs.GET || request.method == HttpVerbs.HEAD) {\n    Play.logger.trace(\"Parsing AnyContent as empty\")\n    Done(Right(AnyContentAsEmpty), Empty)\n  } else {\n    val contentType: Option[String] = request.contentType.map(_.toLowerCase(Locale.ENGLISH))\n    contentType match {\n      case Some(\"text/plain\") => {\n        Play.logger.trace(\"Parsing AnyContent as text\")\n        text(request).map(_.right.map(s => AnyContentAsText(s)))\n      }\n      case Some(\"text/xml\") | Some(\"application/xml\") | Some(ApplicationXmlMatcher()) => {\n        Play.logger.trace(\"Parsing AnyContent as xml\")\n        xml(request).map(_.right.map(x => AnyContentAsXml(x)))\n      }\n      case Some(\"text/json\") | Some(\"application/json\") => {\n        Play.logger.trace(\"Parsing AnyContent as json\")\n        json(request).map(_.right.map(j => AnyContentAsJson(j)))\n      }\n      case Some(\"application/x-www-form-urlencoded\") => {\n        Play.logger.trace(\"Parsing AnyContent as urlFormEncoded\")\n        urlFormEncoded(request).map(_.right.map(d => AnyContentAsFormUrlEncoded(d)))\n      }\n      case Some(\"multipart/form-data\") => {\n        Play.logger.trace(\"Parsing AnyContent as multipartFormData\")\n        multipartFormData(request).map(_.right.map(m => AnyContentAsMultipartFormData(m)))\n      }\n      case _ => {\n        Play.logger.trace(\"Parsing AnyContent as raw\")\n        raw(request).map(_.right.map(r => AnyContentAsRaw(r)))\n      }\n    }\n  }\n}\n```\n\n要はAPI利用者から特に指定がなくてもcontent-type毎にリクエストボディのパースの仕方およびその結果(AnyContentAsTextやAnyContentAsRaw等の型)を自動で算出している。\n\n本記事ではGET呼び出しを想定している```Ok(\"hello\")```を例に進んできているが、GETだとすぐ終わってしまうのでPOSTリクエストがあったことを想定し進める。特に```text(request)```をピックアップして追いかける。\n\n```scala\ncase Some(\"text/plain\") => {\n  Play.logger.trace(\"Parsing AnyContent as text\")\n  text(request).map(_.right.map(s => AnyContentAsText(s)))\n}\n```\n\n一見すると上記は```def text(request: RequestHeader)```というメソッドが呼ばれているように見えるがそうではない。\n実際には以下が呼ばれており、\n\n```scala\ndef text: BodyParser[String] = text(DEFAULT_MAX_TEXT_LENGTH)\n```\n\n返ってきた（生成された）BodyParserインスタンスにRequestを渡している。つまり、apply(request: RequestHeader)メソッドである。\n\n順を追ってtext関数のその先を見ていくことにする。\nなお、DEFAULT_MAX_TEXT_LENGTHは、デフォルト設定では100kb。\napplication.confで```parsers.text.maxLength = 512k```と設定することで上限を書き換え可能。\n\ntext(DEFAULT_MAX_TEXT_LENGTH)は以下。\n\n```scala\ndef text(maxLength: Int): BodyParser[String] = when(\n  _.contentType.exists(_.equalsIgnoreCase(\"text/plain\")),\n  tolerantText(maxLength),\n  createBadResult(\"Expecting text/plain body\")\n)\n```\n\nリクエストヘッダのcontent-type部分をチェックしているのが分かる。\nチェーンして、\n\n```scala\ndef tolerantText(maxLength: Int): BodyParser[String] = BodyParser(\"text, maxLength=\" + maxLength) { request =>\n  // Encoding notes: RFC-2616 section 3.7.1 mandates ISO-8859-1 as the default charset if none is specified.\n\n  import Execution.Implicits.trampoline\n  Traversable.takeUpTo[Array[Byte]](maxLength)\n    .transform(Iteratee.consume[Array[Byte]]().map(c => new String(c, request.charset.getOrElse(\"ISO-8859-1\"))))\n    .flatMap(Iteratee.eofOrElse(Results.EntityTooLarge))\n}\n```\n\nとなり、object BodyParserを使用してBodyParserインスタンスを生成して返している。\nちなみに「tolerant」とは「寛大な、懐の深い」という意味。要はcontent-typeチェックを行わないメソッドであることを示している。\n\nでは実際にBodyParserの生成に使っているコンパニオンオブジェクト部を見てみる。\n\n```scala\nobject BodyParser {\n  def apply[T](debugName: String)(f: RequestHeader => Iteratee[Array[Byte], Either[Result, T]]): BodyParser[T] = new BodyParser[T] {\n    def apply(rh: RequestHeader) = f(rh)\n    override def toString = \"BodyParser(\" + debugName + \")\"\n  }\n```\n\nnewしているのが分かる。\n\nなお、BodyParserトレイト宣言部は以下。\n\n```scala\ntrait BodyParser[+A] extends Function1[RequestHeader, Iteratee[Array[Byte], Either[Result, A]]] {\n```\n\n実体は**RequestHeaderを受け取ってIteratee[Array[Byte], Either[Result, A]]を返すFunction1である**ことが分かる。\n\nHTTPリクエストのボディ部も複数回のArray[Byte]で来るのでそれを処理しやすいようIterateeとなっている。\ninputはArray[Byte]、outputはうまくいかなかった時がResultで、うまくパース出来た時がAとなる、Either。\n\nこれでようやく、以下のコードのtext部分が終わりとなる。\n\n```scala\ncase Some(\"text/plain\") => {\n  Play.logger.trace(\"Parsing AnyContent as text\")\n  text(request).map(_.right.map(s => AnyContentAsText(s)))\n}\n```\n\nBodyParser#apply(request: RequestHeader)、これは先ほど```def apply(rh: RequestHeader) = f(rh)```と定義していることを確認した。単に関数を実行しているだけで、Iteratee[Array[Byte], Either[Result, String]]が返ってきている。\nIteratee#mapの定義は以下なので、\n\n```scala\ntrait Iteratee[E, +A] {\n  def map[B](f: A => B)(implicit ec: ExecutionContext): Iteratee[E, B] = this.flatMap(a => Done(f(a), Input.Empty))(ec)\n```\n\nmap関数に渡す高階関数部ではoutput側のEitherが渡ってくることが分かる。\nEitherのrightのStringインスタンスをAnyContentAsText型のインスタンスに変換している。\n\n```scala\ncase class AnyContentAsText(txt: String) extends AnyContent\n```\n\nこれで晴れて、object Actionのapplyメソッド内の```BodyParsers.parse.anyContent```関数の処理が終わってBodyParser[AnyContent]が渡っていく事となる。\n\n```scala\nfinal def apply(block: R[AnyContent] => Result): Action[AnyContent] = apply(BodyParsers.parse.anyContent)(block)\n```\n\nなお、先ほどスキップしたGET時のanyContentメソッドのBodyParser部分を改めて。\n\n```scala\ndef anyContent: BodyParser[AnyContent] = BodyParser(\"anyContent\") { request =>\n  import play.api.libs.iteratee.Execution.Implicits.trampoline\n  if (request.method == HttpVerbs.GET || request.method == HttpVerbs.HEAD) {\n    Play.logger.trace(\"Parsing AnyContent as empty\")\n    Done(Right(AnyContentAsEmpty), Empty)\n  } else {\n```\n\nGET時はrequestを受け取って```Done(Right(AnyContentAsEmpty), Empty)```なIterateeとなり、BodyParser[AnyContent(実際はAnyContentAsEmpty)]が返っている。\n\n# Action\n改めてActionインスタンスの[apply](https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/Action.scala#L121-L135)関数。\n\n```scala\ndef apply(rh: RequestHeader): Iteratee[Array[Byte], Result] = parser(rh).mapM {\n  case Left(r) =>\n    Play.logger.trace(\"Got direct result from the BodyParser: \" + r)\n    Future.successful(r)\n  case Right(a) =>\n    val request = Request(rh, a)\n    Play.logger.trace(\"Invoking action with request: \" + request)\n    Play.maybeApplication.map { app =>\n      play.utils.Threads.withContextClassLoader(app.classloader) {\n        apply(request)\n      }\n    }.getOrElse {\n      apply(request)\n    }\n}(executionContext)\n```\n\nBodyParserはRequestHeaderを受け取り、Iteratee[Array[Byte], Either[Result, A]]を返すFunction1であった。よって```parser(rh)```の結果はパースが終わったIteratee[Array[Byte], Either[Result, A]]。IterateeのmapM関数を実行すると高階関数にはEither[Result, A]が渡ってくる(この高階関数はFuture[Result]を返す必要あり)。\nLeft、つまりボディ部のパース失敗時はLeftにBadRequestが格納されているのでそれを返す。\nRight、つまりパース成功時はAの部分が利用できるようになっている。RequestHeaderとbodyを使ってRequestを生成、その後ActionインスタンスのapplyにRequestを渡し、処理実行を行う。\n\nこのapplyは、object Actionのasync内で生成していたActionインスタンスのapply(Request)であり、ここで自分で定義したblock部が実行される。\n\n```scala\nfinal def async[A](bodyParser: BodyParser[A])(block: R[A] => Future[Result]): Action[A] = composeAction(new Action[A] {\n  def parser = composeParser(bodyParser)\n  def apply(request: Request[A]) = try {\n    invokeBlock(request, block)\n```\n\n以上、終わり！\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>本記事は<a href=\"http://qiita.com/mtoyoshi/items/0679618fdfa710ded645\" title=\"\">Play Frameworkのソースコードリーディング Action周り</a> の続きとなる。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>BodyParserとAnyContent\n      </h1><p>object Actionのapplyの中で以下の定義があった。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Result</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"nc\">BodyParsers</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">anyContent</span><span class=\"o\">)(</span><span class=\"n\">block</span><span class=\"o\">)</span>\n</pre></div></div><p><a href=\"https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/ContentTypes.scala#L545-L579\" title=\"\" target=\"_blank\">BodyParsers.parse.anyContent</a>メソッド定義は以下となる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Guess the body content by checking the Content-Type header.</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">def</span> <span class=\"n\">anyContent</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">BodyParser</span><span class=\"o\">(</span><span class=\"s\">&quot;anyContent&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n  <span class=\"k\">import</span> <span class=\"nn\">play.api.libs.iteratee.Execution.Implicits.trampoline</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"nc\">HttpVerbs</span><span class=\"o\">.</span><span class=\"nc\">GET</span> <span class=\"o\">||</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"nc\">HttpVerbs</span><span class=\"o\">.</span><span class=\"nc\">HEAD</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as empty&quot;</span><span class=\"o\">)</span>\n    <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"nc\">Right</span><span class=\"o\">(</span><span class=\"nc\">AnyContentAsEmpty</span><span class=\"o\">),</span> <span class=\"nc\">Empty</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">contentType</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">contentType</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toLowerCase</span><span class=\"o\">(</span><span class=\"nc\">Locale</span><span class=\"o\">.</span><span class=\"nc\">ENGLISH</span><span class=\"o\">))</span>\n    <span class=\"n\">contentType</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;text/plain&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as text&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsText</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;text/xml&quot;</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;application/xml&quot;</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"nc\">ApplicationXmlMatcher</span><span class=\"o\">())</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as xml&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">xml</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsXml</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;text/json&quot;</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;application/json&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as json&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">json</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsJson</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;application/x-www-form-urlencoded&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as urlFormEncoded&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">urlFormEncoded</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsFormUrlEncoded</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;multipart/form-data&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as multipartFormData&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">multipartFormData</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsMultipartFormData</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as raw&quot;</span><span class=\"o\">)</span>\n        <span class=\"n\">raw</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsRaw</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)))</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>要はAPI利用者から特に指定がなくてもcontent-type毎にリクエストボディのパースの仕方およびその結果(AnyContentAsTextやAnyContentAsRaw等の型)を自動で算出している。</p>\n<p>本記事ではGET呼び出しを想定している<code>Ok(&quot;hello&quot;)</code>を例に進んできているが、GETだとすぐ終わってしまうのでPOSTリクエストがあったことを想定し進める。特に<code>text(request)</code>をピックアップして追いかける。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;text/plain&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as text&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsText</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)))</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>一見すると上記は<code>def text(request: RequestHeader)</code>というメソッドが呼ばれているように見えるがそうではない。<br>\n実際には以下が呼ばれており、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">text</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"nc\">DEFAULT_MAX_TEXT_LENGTH</span><span class=\"o\">)</span>\n</pre></div></div><p>返ってきた（生成された）BodyParserインスタンスにRequestを渡している。つまり、apply(request: RequestHeader)メソッドである。</p>\n<p>順を追ってtext関数のその先を見ていくことにする。<br>\nなお、DEFAULT_MAX_TEXT_LENGTHは、デフォルト設定では100kb。<br>\napplication.confで<code>parsers.text.maxLength = 512k</code>と設定することで上限を書き換え可能。</p>\n<p>text(DEFAULT_MAX_TEXT_LENGTH)は以下。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">maxLength</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">when</span><span class=\"o\">(</span>\n  <span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">contentType</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">equalsIgnoreCase</span><span class=\"o\">(</span><span class=\"s\">&quot;text/plain&quot;</span><span class=\"o\">)),</span>\n  <span class=\"n\">tolerantText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span><span class=\"o\">),</span>\n  <span class=\"n\">createBadResult</span><span class=\"o\">(</span><span class=\"s\">&quot;Expecting text/plain body&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</pre></div></div><p>リクエストヘッダのcontent-type部分をチェックしているのが分かる。<br>\nチェーンして、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">tolerantText</span><span class=\"o\">(</span><span class=\"n\">maxLength</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">BodyParser</span><span class=\"o\">(</span><span class=\"s\">&quot;text, maxLength=&quot;</span> <span class=\"o\">+</span> <span class=\"n\">maxLength</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n  <span class=\"c1\">// Encoding notes: RFC-2616 section 3.7.1 mandates ISO-8859-1 as the default charset if none is specified.</span>\n\n  <span class=\"k\">import</span> <span class=\"nn\">Execution.Implicits.trampoline</span>\n  <span class=\"nc\">Traversable</span><span class=\"o\">.</span><span class=\"n\">takeUpTo</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]](</span><span class=\"n\">maxLength</span><span class=\"o\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">(</span><span class=\"nc\">Iteratee</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]]().</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">String</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"o\">.</span><span class=\"n\">getOrElse</span><span class=\"o\">(</span><span class=\"s\">&quot;ISO-8859-1&quot;</span><span class=\"o\">))))</span>\n    <span class=\"o\">.</span><span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"nc\">Iteratee</span><span class=\"o\">.</span><span class=\"n\">eofOrElse</span><span class=\"o\">(</span><span class=\"nc\">Results</span><span class=\"o\">.</span><span class=\"nc\">EntityTooLarge</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>となり、object BodyParserを使用してBodyParserインスタンスを生成して返している。<br>\nちなみに「tolerant」とは「寛大な、懐の深い」という意味。要はcontent-typeチェックを行わないメソッドであることを示している。</p>\n<p>では実際にBodyParserの生成に使っているコンパニオンオブジェクト部を見てみる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">BodyParser</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">debugName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">RequestHeader</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Iteratee</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]</span>, <span class=\"kt\">Either</span><span class=\"o\">[</span><span class=\"kt\">Result</span>, <span class=\"kt\">T</span><span class=\"o\">]])</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"k\">:</span> <span class=\"kt\">RequestHeader</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"o\">)</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span> <span class=\"k\">=</span> <span class=\"s\">&quot;BodyParser(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">debugName</span> <span class=\"o\">+</span> <span class=\"s\">&quot;)&quot;</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p>newしているのが分かる。</p>\n<p>なお、BodyParserトレイト宣言部は以下。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">+A</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Function1</span><span class=\"o\">[</span><span class=\"kt\">RequestHeader</span>, <span class=\"kt\">Iteratee</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]</span>, <span class=\"kt\">Either</span><span class=\"o\">[</span><span class=\"kt\">Result</span>, <span class=\"kt\">A</span><span class=\"o\">]]]</span> <span class=\"o\">{</span>\n</pre></div></div><p>実体は<strong>RequestHeaderを受け取ってIteratee[Array[Byte], Either[Result, A]]を返すFunction1である</strong>ことが分かる。</p>\n<p>HTTPリクエストのボディ部も複数回のArray[Byte]で来るのでそれを処理しやすいようIterateeとなっている。<br>\ninputはArray[Byte]、outputはうまくいかなかった時がResultで、うまくパース出来た時がAとなる、Either。</p>\n<p>これでようやく、以下のコードのtext部分が終わりとなる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;text/plain&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as text&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">AnyContentAsText</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)))</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>BodyParser#apply(request: RequestHeader)、これは先ほど<code>def apply(rh: RequestHeader) = f(rh)</code>と定義していることを確認した。単に関数を実行しているだけで、Iteratee[Array[Byte], Either[Result, String]]が返ってきている。<br>\nIteratee#mapの定義は以下なので、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Iteratee</span><span class=\"o\">[</span><span class=\"kt\">E</span>, <span class=\"kt\">+A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ec</span><span class=\"k\">:</span> <span class=\"kt\">ExecutionContext</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Iteratee</span><span class=\"o\">[</span><span class=\"kt\">E</span>, <span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"nc\">Input</span><span class=\"o\">.</span><span class=\"nc\">Empty</span><span class=\"o\">))(</span><span class=\"n\">ec</span><span class=\"o\">)</span>\n</pre></div></div><p>map関数に渡す高階関数部ではoutput側のEitherが渡ってくることが分かる。<br>\nEitherのrightのStringインスタンスをAnyContentAsText型のインスタンスに変換している。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">AnyContentAsText</span><span class=\"o\">(</span><span class=\"n\">txt</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">AnyContent</span>\n</pre></div></div><p>これで晴れて、object Actionのapplyメソッド内の<code>BodyParsers.parse.anyContent</code>関数の処理が終わってBodyParser[AnyContent]が渡っていく事となる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Result</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"nc\">BodyParsers</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">anyContent</span><span class=\"o\">)(</span><span class=\"n\">block</span><span class=\"o\">)</span>\n</pre></div></div><p>なお、先ほどスキップしたGET時のanyContentメソッドのBodyParser部分を改めて。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">anyContent</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">BodyParser</span><span class=\"o\">(</span><span class=\"s\">&quot;anyContent&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n  <span class=\"k\">import</span> <span class=\"nn\">play.api.libs.iteratee.Execution.Implicits.trampoline</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"nc\">HttpVerbs</span><span class=\"o\">.</span><span class=\"nc\">GET</span> <span class=\"o\">||</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"nc\">HttpVerbs</span><span class=\"o\">.</span><span class=\"nc\">HEAD</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Parsing AnyContent as empty&quot;</span><span class=\"o\">)</span>\n    <span class=\"nc\">Done</span><span class=\"o\">(</span><span class=\"nc\">Right</span><span class=\"o\">(</span><span class=\"nc\">AnyContentAsEmpty</span><span class=\"o\">),</span> <span class=\"nc\">Empty</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n</pre></div></div><p>GET時はrequestを受け取って<code>Done(Right(AnyContentAsEmpty), Empty)</code>なIterateeとなり、BodyParser[AnyContent(実際はAnyContentAsEmpty)]が返っている。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Action\n      </h1><p>改めてActionインスタンスの<a href=\"https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/Action.scala#L121-L135\" title=\"\" target=\"_blank\">apply</a>関数。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"k\">:</span> <span class=\"kt\">RequestHeader</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Iteratee</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]</span>, <span class=\"kt\">Result</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">parser</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"o\">).</span><span class=\"n\">mapM</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Left</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Got direct result from the BodyParser: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Right</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"n\">request</span> <span class=\"k\">=</span> <span class=\"nc\">Request</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Invoking action with request: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">)</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">maybeApplication</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">play</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"nc\">Threads</span><span class=\"o\">.</span><span class=\"n\">withContextClassLoader</span><span class=\"o\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">classloader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}.</span><span class=\"n\">getOrElse</span> <span class=\"o\">{</span>\n      <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}(</span><span class=\"n\">executionContext</span><span class=\"o\">)</span>\n</pre></div></div><p>BodyParserはRequestHeaderを受け取り、Iteratee[Array[Byte], Either[Result, A]]を返すFunction1であった。よって<code>parser(rh)</code>の結果はパースが終わったIteratee[Array[Byte], Either[Result, A]]。IterateeのmapM関数を実行すると高階関数にはEither[Result, A]が渡ってくる(この高階関数はFuture[Result]を返す必要あり)。<br>\nLeft、つまりボディ部のパース失敗時はLeftにBadRequestが格納されているのでそれを返す。<br>\nRight、つまりパース成功時はAの部分が利用できるようになっている。RequestHeaderとbodyを使ってRequestを生成、その後ActionインスタンスのapplyにRequestを渡し、処理実行を行う。</p>\n<p>このapplyは、object Actionのasync内で生成していたActionインスタンスのapply(Request)であり、ここで自分で定義したblock部が実行される。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">async</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">bodyParser</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">Result</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">composeAction</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Action</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">parser</span> <span class=\"k\">=</span> <span class=\"n\">composeParser</span><span class=\"o\">(</span><span class=\"n\">bodyParser</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"k\">:</span> <span class=\"kt\">Request</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">try</span> <span class=\"o\">{</span>\n    <span class=\"n\">invokeBlock</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">block</span><span class=\"o\">)</span>\n</pre></div></div><p>以上、終わり！</p>\n",
        "stock_users": [
            "n_slender",
            "kasumani",
            "hiro_matsuno2",
            "Reds"
        ]
    },
    {
        "id": 97504,
        "uuid": "0679618fdfa710ded645",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Play Frameworkのソースコードリーディング Action周り",
        "created_at": "2014-07-23 12:59:03 +0900",
        "updated_at": "2014-07-23 13:00:37 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": []
            },
            {
                "name": "Play2",
                "url_name": "play2",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/2f8d7c0088c04def66debcfcc9915914dc2c11df/medium.jpg?1364840479",
                "versions": []
            }
        ],
        "stock_count": 7,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/0679618fdfa710ded645",
        "created_at_as_seconds": 1406087943,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# 今回のゴール\n\n以下のコードの舞台裏を理解することが今回のゴール。\n\n\n```scala\nval hello = Action {\n  Ok(\"hello\")\n}\n\ndef echo = Action { request =>\n  Ok(\"Got [\" + request.body + \"]\")\n}\n```\n\nなお、対象のPlay Frameworkのバージョンは2.3.2。\n\n# はじめに\nActionがやることは一言でいうとHTTPリクエストを受け取ってHTTPレスポンスを返す、要はこれ。\nPlay Frameworkでこれを実施するにあたってHTTPリクエストとHTTPレスポンスに該当するものを先に整理しておく。\n\n## HTTPリクエスト\n- [play.api.mvc.RequestHeader](http://www.playframework.com/documentation/2.3.0/api/scala/index.html#play.api.mvc.RequestHeader)\n- [play.api.mvc.Request](http://www.playframework.com/documentation/2.3.0/api/scala/index.html#play.api.mvc.Request)\n\nRequestはRequestHeaderを継承しており、両者の違いは前者がbodyなし、後者はbodyありということ。\n以下のように記述した際のrequestの型はリクエストボディ部のパースが行われた後者のRequest型の方となる。\n\n```\ndef myAction = Action { request =>\n```\n\n※但し、Request型といってもGET時はそもそもbodyが無いので```body.asText```とやっても何も取れない。\n\n## HTTPレスポンス\n- [play.api.mvc.Result](http://www.playframework.com/documentation/2.3.0/api/scala/index.html#play.api.mvc.Result)\n\nResultの定義は以下で、構成要素として主にレスポンスヘッダとバイト配列のボディからなることが分かる。\n\n```scala\ncase class Result(header: ResponseHeader, body: Enumerator[Array[Byte]], connection: HttpConnection.Connection = HttpConnection.KeepAlive) {\n```\n\nEnumeratorでくるまれているのは、通常HTTPレスポンスはArray[Byte]が一発で返るというよりもむしろ複数回に分けて返されることが多いからで、その辺の仕組みが提供されている。\nもちろんレスポンスだけでなく、リクエストボディも同様である。\nここについては「やさしいIteratee入門」が分かりやすいので読みましょう。\nhttp://www.slideshare.net/TakashiKawachi/iteratee\n\n# Ok(\"hello\")\nさて、```Ok(\"hello\")```の部分から見ていくことにする。\n\nこのOkは[Resultsトレイト内](https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/mvc/Results.scala#L572-L703)に宣言されているStatusクラスのインスタンスである。\n\n```scala\n/** Generates a ‘200 OK’ result. */\nval Ok = new Status(OK)\n```\n\nこの他にもNotFound(404)やServiceUnavailable(503)なども定義されている。\n\nこのStatusというクラスは同じくResultsトレイト内にて定義されている。\n\n```scala\nclass Status(status: Int) extends Result(header = ResponseHeader(status), body = Enumerator.empty, connection = HttpConnection.KeepAlive) {\n```\n\nなお、```new Status(OK)```のOKは以下のStandardValues.scalaに宣言されている、Statusの定数。\nhttps://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/http/StandardValues.scala\n\nStandardValues.scalaにはステータスコードを表すStatus以外にも\n\n- MimeTypes(\"text/html\"や\"application/octet-stream\"など)\n- ContentTypes(\"text/html; charset=utf-8\"など)\n- HttpVerbs(\"GET\"や\"POST\"など)\n- HeaderNames(\"Accept-Language\"や\"ETag\"など)\n- HttpProtocols(\"HTTP/1.1\"など)\n\nといった各種定数クラスが用意されている。\nこれらtraitはControllerにmix-inされているので、使用したい場合はAtion定義時にimportなしで使用することが出来る。覚えておくといいだろう。\n\n```scala\ntrait Controller extends Results with BodyParsers with HttpProtocol with Status with HeaderNames with ContentTypes with RequestExtractors with Rendering {\n```\n\nで、話は戻って```Ok(\"hello\")```、これはStatusインスタンスOkに(\"hello\")とやっているわけで、要はStatus#applyを実行している。\n\n```scala\ndef apply[C](content: C)(implicit writeable: Writeable[C]): Result = {\n  Result(\n    ResponseHeader(status, writeable.contentType.map(ct => Map(CONTENT_TYPE -> ct)).getOrElse(Map.empty)),\n    Enumerator(writeable.transform(content))\n  )\n}\n```\n\nここで実際にResultを生成して返している。\nstatusコード、content-type、レスポンスボディ部が定義される。\n\nWriteableは型パラメータになっているのでコンパイル時に型に応じた適切なものが適用される。\n今回は\"hello\"を渡しているのでcontentはString型となり[Writeable[String]](https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/http/Writeable.scala)となる。\n\nこの他に、Writeable[JsValue]、Writeable[Xml]、Writeable[Array[Byte]]などがある。\n\n# Action\n次にAction部。\n\n```scala\nAction {\n  Ok(\"hello\")\n}\n```\n\nこれは[object Action](https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/mvc/Action.scala#L555-L557)のapplyメソッドを実行している。\nActionオブジェクトの宣言部は以下。\n\n```scala\nobject Action extends ActionBuilder[Request] {\n  def invokeBlock[A](request: Request[A], block: (Request[A]) => Future[Result]) = block(request)\n}\n```\n\nここではapplyが定義されていないので実際は継承元のActionBuilderのapplyが呼ばれている。\n\n```scala\nfinal def apply(block: => Result): Action[AnyContent] = apply(_ => block)\n```\n\napplyの引数はResult。\nAnyContentなActionインスタンスを返すのがこのapply関数だということが分かる。\nさらにチェーンして、\n\n```scala\nfinal def apply(block: R[AnyContent] => Result): Action[AnyContent] = apply(BodyParsers.parse.anyContent)(block)\n```\n\n冒頭の例のこっちのタイプなら上記applyから始まる。Requestを受け取ってResultを返す関数が引数。\n\n```scala\nAction{ request =>\n  Ok(\"Got [\" + request.body + \"]\")\n}\n```\nさらにチェーンして、\n\n```scala\nfinal def apply[A](bodyParser: BodyParser[A])(block: R[A] => Result): Action[A] = async(bodyParser) { req: R[A] =>\n    Future.successful(block(req))\n```\n\nbodyParserが登場。ここは最後に取り上げるが、役割はHTTPリクエストのbody部をパースしてArray[Byte]からStringやXmlを生成すること。\nさらにチェーンして、\n\n```scala\nfinal def async[A](bodyParser: BodyParser[A])(block: R[A] => Future[Result]): Action[A] = composeAction(new Action[A] {\n  def parser = composeParser(bodyParser)\n  def apply(request: Request[A]) = try {\n    invokeBlock(request, block)\n  } catch {\n    // NotImplementedError is not caught by NonFatal, wrap it\n    case e: NotImplementedError => throw new RuntimeException(e)\n    // LinkageError is similarly harmless in Play Framework, since automatic reloading could easily trigger it\n    case e: LinkageError => throw new RuntimeException(e)\n  }\n  override def executionContext = ActionBuilder.this.executionContext\n})\n```\n\nこれがapplyチェーンの最後で、ここでようやくActionインスタンスが生成されて返ることになる。\nなお、asyncということで戻りもこれまでのResultからFuture[Result]になっているものの、このapplyが呼ばれる前のapplyで、```Future.successful(block(req))```とやっていることから実行済みFutureを作成しているので(通常呼び出し時は)本スレッドと別にblockが並列実行されるわけではない事がわかる。\n\nActionインスタンスのinvokeBlockで定義したblockが使われているのが見て取れる。ActionインスタンスにRequestインスタンスが渡ってきた時に定義したblock部が実行される。\n\n## まとめ\n一度ここでまとめると、上記でも少し触れたが以下のコードは、\n\n```scala\ndef echo = Action { request =>\n  Ok(\"Got [\" + request.body + \"]\")\n}\n```\n\n**object ActionのapplyにRequest => Resultな関数を渡すことでActionインスタンスを生成している**ということ。\n\n実際に処理されるActionクラスの方の[apply](https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/Action.scala#L121-L135)を見てみると以下のようになっている。\n\n```scala\ndef apply(rh: RequestHeader): Iteratee[Array[Byte], Result] = parser(rh).mapM {\n  case Left(r) =>\n    Play.logger.trace(\"Got direct result from the BodyParser: \" + r)\n    Future.successful(r)\n  case Right(a) =>\n    val request = Request(rh, a)\n    Play.logger.trace(\"Invoking action with request: \" + request)\n    Play.maybeApplication.map { app =>\n      play.utils.Threads.withContextClassLoader(app.classloader) {\n        apply(request)\n      }\n    }.getOrElse {\n      apply(request)\n    }\n}(executionContext)\n```\n\nここを理解するにはBodyParserを理解する必要がありそうだ。\n\n# BodyParserとAnyContent\n長くなったので分けました。\n続きは[こちら](http://qiita.com/mtoyoshi/items/a5fcfb01a9bb56b2a492)。\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>今回のゴール\n      </h1><p>以下のコードの舞台裏を理解することが今回のゴール。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">hello</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">def</span> <span class=\"n\">echo</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n  <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"s\">&quot;Got [&quot;</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">+</span> <span class=\"s\">&quot;]&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>なお、対象のPlay Frameworkのバージョンは2.3.2。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>Actionがやることは一言でいうとHTTPリクエストを受け取ってHTTPレスポンスを返す、要はこれ。<br>\nPlay Frameworkでこれを実施するにあたってHTTPリクエストとHTTPレスポンスに該当するものを先に整理しておく。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>HTTPリクエスト\n      </h2>\n<ul>\n<li><a href=\"http://www.playframework.com/documentation/2.3.0/api/scala/index.html#play.api.mvc.RequestHeader\" title=\"\" target=\"_blank\">play.api.mvc.RequestHeader</a></li>\n<li><a href=\"http://www.playframework.com/documentation/2.3.0/api/scala/index.html#play.api.mvc.Request\" title=\"\" target=\"_blank\">play.api.mvc.Request</a></li>\n</ul>\n<p>RequestはRequestHeaderを継承しており、両者の違いは前者がbodyなし、後者はbodyありということ。<br>\n以下のように記述した際のrequestの型はリクエストボディ部のパースが行われた後者のRequest型の方となる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>def myAction = Action { request =&gt;\n</pre></div></div><p>※但し、Request型といってもGET時はそもそもbodyが無いので<code>body.asText</code>とやっても何も取れない。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>HTTPレスポンス\n      </h2>\n<ul>\n<li><a href=\"http://www.playframework.com/documentation/2.3.0/api/scala/index.html#play.api.mvc.Result\" title=\"\" target=\"_blank\">play.api.mvc.Result</a></li>\n</ul>\n<p>Resultの定義は以下で、構成要素として主にレスポンスヘッダとバイト配列のボディからなることが分かる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Result</span><span class=\"o\">(</span><span class=\"n\">header</span><span class=\"k\">:</span> <span class=\"kt\">ResponseHeader</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"k\">:</span> <span class=\"kt\">Enumerator</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]],</span> <span class=\"n\">connection</span><span class=\"k\">:</span> <span class=\"kt\">HttpConnection.Connection</span> <span class=\"o\">=</span> <span class=\"nc\">HttpConnection</span><span class=\"o\">.</span><span class=\"nc\">KeepAlive</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div><p>Enumeratorでくるまれているのは、通常HTTPレスポンスはArray[Byte]が一発で返るというよりもむしろ複数回に分けて返されることが多いからで、その辺の仕組みが提供されている。<br>\nもちろんレスポンスだけでなく、リクエストボディも同様である。<br>\nここについては「やさしいIteratee入門」が分かりやすいので読みましょう。<br>\n<a href=\"http://www.slideshare.net/TakashiKawachi/iteratee\" title=\"http://www.slideshare.net/TakashiKawachi/iteratee\" target=\"_blank\">http://www.slideshare.net/TakashiKawachi/iteratee</a></p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Ok(&quot;hello&quot;)\n      </h1><p>さて、<code>Ok(&quot;hello&quot;)</code>の部分から見ていくことにする。</p>\n<p>このOkは<a href=\"https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/mvc/Results.scala#L572-L703\" title=\"\" target=\"_blank\">Resultsトレイト内</a>に宣言されているStatusクラスのインスタンスである。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"cm\">/** Generates a ‘200 OK’ result. */</span>\n<span class=\"k\">val</span> <span class=\"nc\">Ok</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Status</span><span class=\"o\">(</span><span class=\"nc\">OK</span><span class=\"o\">)</span>\n</pre></div></div><p>この他にもNotFound(404)やServiceUnavailable(503)なども定義されている。</p>\n<p>このStatusというクラスは同じくResultsトレイト内にて定義されている。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Status</span><span class=\"o\">(</span><span class=\"n\">status</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Result</span><span class=\"o\">(</span><span class=\"n\">header</span> <span class=\"k\">=</span> <span class=\"nc\">ResponseHeader</span><span class=\"o\">(</span><span class=\"n\">status</span><span class=\"o\">),</span> <span class=\"n\">body</span> <span class=\"k\">=</span> <span class=\"nc\">Enumerator</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">,</span> <span class=\"n\">connection</span> <span class=\"k\">=</span> <span class=\"nc\">HttpConnection</span><span class=\"o\">.</span><span class=\"nc\">KeepAlive</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div><p>なお、<code>new Status(OK)</code>のOKは以下のStandardValues.scalaに宣言されている、Statusの定数。<br>\n<a href=\"https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/http/StandardValues.scala\" title=\"https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/http/StandardValues.scala\" target=\"_blank\">https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/http/StandardValues.scala</a></p>\n<p>StandardValues.scalaにはステータスコードを表すStatus以外にも</p>\n\n<ul>\n<li>MimeTypes(&quot;text/html&quot;や&quot;application/octet-stream&quot;など)</li>\n<li>ContentTypes(&quot;text/html; charset=utf-8&quot;など)</li>\n<li>HttpVerbs(&quot;GET&quot;や&quot;POST&quot;など)</li>\n<li>HeaderNames(&quot;Accept-Language&quot;や&quot;ETag&quot;など)</li>\n<li>HttpProtocols(&quot;HTTP/1.1&quot;など)</li>\n</ul>\n<p>といった各種定数クラスが用意されている。<br>\nこれらtraitはControllerにmix-inされているので、使用したい場合はAtion定義時にimportなしで使用することが出来る。覚えておくといいだろう。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Controller</span> <span class=\"k\">extends</span> <span class=\"nc\">Results</span> <span class=\"k\">with</span> <span class=\"nc\">BodyParsers</span> <span class=\"k\">with</span> <span class=\"nc\">HttpProtocol</span> <span class=\"k\">with</span> <span class=\"nc\">Status</span> <span class=\"k\">with</span> <span class=\"nc\">HeaderNames</span> <span class=\"k\">with</span> <span class=\"nc\">ContentTypes</span> <span class=\"k\">with</span> <span class=\"nc\">RequestExtractors</span> <span class=\"k\">with</span> <span class=\"nc\">Rendering</span> <span class=\"o\">{</span>\n</pre></div></div><p>で、話は戻って<code>Ok(&quot;hello&quot;)</code>、これはStatusインスタンスOkに(&quot;hello&quot;)とやっているわけで、要はStatus#applyを実行している。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">C</span><span class=\"o\">](</span><span class=\"n\">content</span><span class=\"k\">:</span> <span class=\"kt\">C</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">writeable</span><span class=\"k\">:</span> <span class=\"kt\">Writeable</span><span class=\"o\">[</span><span class=\"kt\">C</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Result</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Result</span><span class=\"o\">(</span>\n    <span class=\"nc\">ResponseHeader</span><span class=\"o\">(</span><span class=\"n\">status</span><span class=\"o\">,</span> <span class=\"n\">writeable</span><span class=\"o\">.</span><span class=\"n\">contentType</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">ct</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Map</span><span class=\"o\">(</span><span class=\"nc\">CONTENT_TYPE</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ct</span><span class=\"o\">)).</span><span class=\"n\">getOrElse</span><span class=\"o\">(</span><span class=\"nc\">Map</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)),</span>\n    <span class=\"nc\">Enumerator</span><span class=\"o\">(</span><span class=\"n\">writeable</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"o\">))</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>ここで実際にResultを生成して返している。<br>\nstatusコード、content-type、レスポンスボディ部が定義される。</p>\n<p>Writeableは型パラメータになっているのでコンパイル時に型に応じた適切なものが適用される。<br>\n今回は&quot;hello&quot;を渡しているのでcontentはString型となり<a href=\"https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/http/Writeable.scala\" title=\"\" target=\"_blank\">Writeable[String]</a>となる。</p>\n<p>この他に、Writeable[JsValue]、Writeable[Xml]、Writeable[Array[Byte]]などがある。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>Action\n      </h1><p>次にAction部。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"nc\">Action</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>これは<a href=\"https://github.com/playframework/playframework/blob/2.3.0/framework/src/play/src/main/scala/play/api/mvc/Action.scala#L555-L557\" title=\"\" target=\"_blank\">object Action</a>のapplyメソッドを実行している。<br>\nActionオブジェクトの宣言部は以下。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Action</span> <span class=\"k\">extends</span> <span class=\"nc\">ActionBuilder</span><span class=\"o\">[</span><span class=\"kt\">Request</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">invokeBlock</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">request</span><span class=\"k\">:</span> <span class=\"kt\">Request</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">Request</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">Result</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">block</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>ここではapplyが定義されていないので実際は継承元のActionBuilderのapplyが呼ばれている。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Result</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"n\">block</span><span class=\"o\">)</span>\n</pre></div></div><p>applyの引数はResult。<br>\nAnyContentなActionインスタンスを返すのがこのapply関数だということが分かる。<br>\nさらにチェーンして、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Result</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">AnyContent</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"nc\">BodyParsers</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">anyContent</span><span class=\"o\">)(</span><span class=\"n\">block</span><span class=\"o\">)</span>\n</pre></div></div><p>冒頭の例のこっちのタイプなら上記applyから始まる。Requestを受け取ってResultを返す関数が引数。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"nc\">Action</span><span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n  <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"s\">&quot;Got [&quot;</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">+</span> <span class=\"s\">&quot;]&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>さらにチェーンして、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">bodyParser</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Result</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">async</span><span class=\"o\">(</span><span class=\"n\">bodyParser</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">req</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(</span><span class=\"n\">block</span><span class=\"o\">(</span><span class=\"n\">req</span><span class=\"o\">))</span>\n</pre></div></div><p>bodyParserが登場。ここは最後に取り上げるが、役割はHTTPリクエストのbody部をパースしてArray[Byte]からStringやXmlを生成すること。<br>\nさらにチェーンして、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">final</span> <span class=\"k\">def</span> <span class=\"n\">async</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">bodyParser</span><span class=\"k\">:</span> <span class=\"kt\">BodyParser</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">block</span><span class=\"k\">:</span> <span class=\"kt\">R</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">Result</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Action</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">composeAction</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Action</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">parser</span> <span class=\"k\">=</span> <span class=\"n\">composeParser</span><span class=\"o\">(</span><span class=\"n\">bodyParser</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"k\">:</span> <span class=\"kt\">Request</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">try</span> <span class=\"o\">{</span>\n    <span class=\"n\">invokeBlock</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">block</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// NotImplementedError is not caught by NonFatal, wrap it</span>\n    <span class=\"k\">case</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">NotImplementedError</span> <span class=\"o\">=&gt;</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"c1\">// LinkageError is similarly harmless in Play Framework, since automatic reloading could easily trigger it</span>\n    <span class=\"k\">case</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">LinkageError</span> <span class=\"o\">=&gt;</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">executionContext</span> <span class=\"k\">=</span> <span class=\"nc\">ActionBuilder</span><span class=\"o\">.</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"n\">executionContext</span>\n<span class=\"o\">})</span>\n</pre></div></div><p>これがapplyチェーンの最後で、ここでようやくActionインスタンスが生成されて返ることになる。<br>\nなお、asyncということで戻りもこれまでのResultからFuture[Result]になっているものの、このapplyが呼ばれる前のapplyで、<code>Future.successful(block(req))</code>とやっていることから実行済みFutureを作成しているので(通常呼び出し時は)本スレッドと別にblockが並列実行されるわけではない事がわかる。</p>\n<p>ActionインスタンスのinvokeBlockで定義したblockが使われているのが見て取れる。ActionインスタンスにRequestインスタンスが渡ってきた時に定義したblock部が実行される。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>まとめ\n      </h2><p>一度ここでまとめると、上記でも少し触れたが以下のコードは、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">echo</span> <span class=\"k\">=</span> <span class=\"nc\">Action</span> <span class=\"o\">{</span> <span class=\"n\">request</span> <span class=\"k\">=&gt;</span>\n  <span class=\"nc\">Ok</span><span class=\"o\">(</span><span class=\"s\">&quot;Got [&quot;</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">+</span> <span class=\"s\">&quot;]&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p><strong>object ActionのapplyにRequest =&gt; Resultな関数を渡すことでActionインスタンスを生成している</strong>ということ。</p>\n<p>実際に処理されるActionクラスの方の<a href=\"https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/Action.scala#L121-L135\" title=\"\" target=\"_blank\">apply</a>を見てみると以下のようになっている。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"k\">:</span> <span class=\"kt\">RequestHeader</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Iteratee</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Byte</span><span class=\"o\">]</span>, <span class=\"kt\">Result</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">parser</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"o\">).</span><span class=\"n\">mapM</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Left</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Got direct result from the BodyParser: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Right</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"n\">request</span> <span class=\"k\">=</span> <span class=\"nc\">Request</span><span class=\"o\">(</span><span class=\"n\">rh</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"o\">(</span><span class=\"s\">&quot;Invoking action with request: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">)</span>\n    <span class=\"nc\">Play</span><span class=\"o\">.</span><span class=\"n\">maybeApplication</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">play</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"nc\">Threads</span><span class=\"o\">.</span><span class=\"n\">withContextClassLoader</span><span class=\"o\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">classloader</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}.</span><span class=\"n\">getOrElse</span> <span class=\"o\">{</span>\n      <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}(</span><span class=\"n\">executionContext</span><span class=\"o\">)</span>\n</pre></div></div><p>ここを理解するにはBodyParserを理解する必要がありそうだ。</p>\n<h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>BodyParserとAnyContent\n      </h1><p>長くなったので分けました。<br>\n続きは<a href=\"http://qiita.com/mtoyoshi/items/a5fcfb01a9bb56b2a492\" title=\"\">こちら</a>。</p>\n",
        "stock_users": [
            "MAKOTO_MOBY",
            "daichi87gi",
            "reki",
            "kasumani",
            "hiro_matsuno2",
            "nilfigo",
            "Reds"
        ]
    },
    {
        "id": 96757,
        "uuid": "5f8ad9389c04a7437ffc",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Scala: sbtでの文字化けを解消したい",
        "created_at": "2014-07-22 11:04:04 +0900",
        "updated_at": "2014-07-22 11:04:04 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "sbt-extras",
                "url_name": "sbt-extras",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "sbt",
                "url_name": "sbt",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 7,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/5f8ad9389c04a7437ffc",
        "created_at_as_seconds": 1405994644,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nsbtのコンソール内で文字化けするとき `-Dfile.encoding=UTF-8` をセットして解消することができるが、この設定をリポジトリに含めてプロジェクトで共有しておきたい。[sbt-extras]を使うと、設定ファイルを作ることができる。\n\nsbt-extrasのシェルスクリプトを入れたら、まず現在の文字コードが何になっているか確認する。\n\n```console\n$ ./sbt console\n\nscala> java.nio.charset.Charset.defaultCharset\nres0: java.nio.charset.Charset = US-ASCII\n```\n\nもしこの結果がUTF-8でなければそれが原因で文字化けしている可能性がある。\n\n.jvmoptsファイルを作る。\n\n```txt:.jvmopts\n-Dfile.encoding=UTF-8\n```\n\nsbtを起動しなおして、文字コードを確認する\n\n```console\n$ ./sbt console\n\nscala> java.nio.charset.Charset.defaultCharset\nres0: java.nio.charset.Charset = UTF-8\n```\n\nこの結果がUTF-8になっていれば設定が読み込まれている。\n\nあとは、.jvmoptsをリポジトリにコミットして共有する。\n\n[sbt-extras]: https://github.com/paulp/sbt-extras\n",
        "body": "<p>sbtのコンソール内で文字化けするとき <code>-Dfile.encoding=UTF-8</code> をセットして解消することができるが、この設定をリポジトリに含めてプロジェクトで共有しておきたい。<a href=\"https://github.com/paulp/sbt-extras\" title=\"\" target=\"_blank\">sbt-extras</a>を使うと、設定ファイルを作ることができる。</p>\n<p>sbt-extrasのシェルスクリプトを入れたら、まず現在の文字コードが何になっているか確認する。</p>\n<div class=\"code-frame\" data-lang=\"console\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ./sbt console\n\n<span class=\"go\">scala&gt; java.nio.charset.Charset.defaultCharset</span>\n<span class=\"go\">res0: java.nio.charset.Charset = US-ASCII</span>\n</pre></div></div><p>もしこの結果がUTF-8でなければそれが原因で文字化けしている可能性がある。</p>\n<p>.jvmoptsファイルを作る。</p>\n<div class=\"code-frame\" data-lang=\"txt\"><div class=\"code-lang\"><span class=\"bold\">.jvmopts</span></div><div class=\"highlight\"><pre>-Dfile.encoding=UTF-8\n</pre></div></div><p>sbtを起動しなおして、文字コードを確認する</p>\n<div class=\"code-frame\" data-lang=\"console\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ./sbt console\n\n<span class=\"go\">scala&gt; java.nio.charset.Charset.defaultCharset</span>\n<span class=\"go\">res0: java.nio.charset.Charset = UTF-8</span>\n</pre></div></div><p>この結果がUTF-8になっていれば設定が読み込まれている。</p>\n<p>あとは、.jvmoptsをリポジトリにコミットして共有する。</p>\n",
        "stock_users": [
            "fjmtmnb",
            "nijojin",
            "Noboruhi",
            "funaken",
            "TomoyaIgarashi",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 96286,
        "uuid": "26f32f13b7e8af206155",
        "user": {
            "id": 27773,
            "url_name": "asmasa",
            "profile_image_url": "https://secure.gravatar.com/avatar/ffd76e11956095ef32effffb5fc5878b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "独書会 Scala IN DEPTH @夜のイタリアンカフェ その5",
        "created_at": "2014-07-20 13:35:37 +0900",
        "updated_at": "2014-07-20 13:35:37 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/asmasa/items/26f32f13b7e8af206155",
        "created_at_as_seconds": 1405830937,
        "tweet": false,
        "gist_url": "https://gist.github.com/235b1284108027afc274",
        "private": false,
        "raw_body": "[独書会 Scala IN DEPTH @大人の喫茶店 その4](http://qiita.com/asmasa/items/604b2f0823371f16e07d)で記述した、第2章 __The core rules__ の続き。\n\n要約\n--\n\n# Polymorphic equality\n\n`equals` `hashCode`関数の実装は、polymorphic言語では注意が必要だが、次のルールに従がえば扱いやすくなる。\n\n一般的に、特に参照のequalityのようなequalityを強く必要とするクラスでは、複数の具体的なレベルを持つことを避けるのがベストである。\n\n- あるケースでは、クラスは参照のequalityのみを必要とする。参照のequalityとは、同じインスタンスであるかどうかを判断するために、2つのオブジェクトを区別する。\n- equalityの比較は、2つの異なるインスタンスが等価であることや、複数の具体的な階層であることを判断する必要がある。\n\n## Example: A timeline library\n\nタイムライン、カレンダー、ウィジェットを作る。\n\nウィジェットに必要なもの。\n\n- dates\n- times\n- time ranges\n- それぞれの日に関連付けられたイベント\n\n### `InstantaneousTime`\n\nこのライブラリの基本的な概念。\n`InstantaneousTime`は、時系列内の特定の離散時間を表すクラス。\nGregorian calendarで値を持つ。\n\n基本的な時間を、グレゴリオ暦のグリニッジ標準時の1970年1月1日午前0時からの秒の整数で持つようにする。\n他の全ての時間をこの表現にフォーマットできると仮定する。タイムゾーンは表現に対して直交する関心事である。\n\n### equality使用についての一般的な仮定\n\n- `equals`が呼ばれた場合、`true`を返す。この場合、2つのオブジェクトは同じ参照を持つ。\n- `equals`の呼び出しのほとんどが、`false`を返すことになる。\n- `hashCode`の実装は、`hashCodes`が異なるので、equality比較のためには十分希薄である。\n- `hashCode`計算は、深いequality比較よりも効率的である。\n- 参照のequalityをテストすることは、深いequality比較よりも効率的である。\n\nこれらの仮定は、ほとんどのequalityの実装で標準である。 \n\n> ```scala:Listing&nbsp;2.22&nbsp;Simple&nbsp;InstantaneousTime&nbsp;class\ntrait InstantaneousTime {\nval repr: Int\n  override def equals(other: Any) : Boolean = other match {\n    case that: InstantaneousTime =>\n       if(this eq that) {\n         true\n       } else {\n         (that.## == this.##) &&\n         (repr == that.repr)\n       }\n    case _ => false\n}\n  override def hashCode() : Int = repr.##\n}\n```\n> (Joshua D. Suereth, Scala in Depth, p.39)\n\n- このクラスのメンバーは、グリニッジ標準時の1970年1月1日午前0時からの秒を表す数値を持つ `repr`のみである。\n- `repr`はこのクラスで唯一のデータであり、しかもimmutableであり、`equals`と`hasCode`はこの値に基づいて行われる。\n- JVM内で`equals`メソッドを実装する時は、深いequalityチェックの並びにする前に、参照のequalityでテストすることは、効率が良くなる。\n- 特に複雑なクラスでは劇的にパフォーマンスが向上するが、このクラスでは対して必要としない。\n- 早期の`false`チェックのために、`hashCode`を使う。`hashCode`を計算することはわずかで簡単なので、良いアイデアである。\n\n\n### `##` AND `==` VS. EQUALS AND HASHCODE\n\n- `==`メソッドは、Javaの`equals`メソッドに相当\n- `##`メソッドは、Javaの`hashCode`メソッドに相当\n\n`equals`と`hashCode`メソッドを呼び出す時は、`##` `==`を使う方が良い。これらのメソッドは値型のサポートをしている。\n\n### 2つの原理\n\n- 良い`equality`メソッドの重要性\n- コードの仮定に常に挑戦すること\n\nこのケースでのベストプラクティス`equality`メソッドは、シンプルなクラスに利益を与える。\n独自のクラスのために`equality`を実装する時、`true`を持っていることを確認するために、標準的なequalityの実装で仮定をテストする。\n\n`equals`の実装は、polymorphismの欠陥に苦しむ。\n\n### Polymorphic equalsの実装\n\n一般的に、深いequalityを必要等する型で多態性を避けるのがベスト。\nScalaではこれを理由に、ケースクラスのサブクラス化をサポートしていない。\n\n> ```scala:Listing&nbsp;2.23&nbsp;Event&nbsp;subclass&nbsp;of&nbsp;InstantaneousTime\ntrait Event extends InstantaneousTime {\n  val name: String\n  override def equals(other: Any): Boolean = other match {\n    case that: Event =>\n      if(this eq that) {\n        true\n      } else {\n        (repr == that.repr) &&\n        (name == that.name)\n      }\n    case _ => false\n  }\n}\n```\n> (Joshua D. Suereth, Scala in Depth, p.40)\n\nタイムライン上のイベントを保持する`InstantaneousTime`のサブクラス`Event`クラスを作成した。\n2つの`Event`オブジェクトだけが等しくなるように、パターンマッチを変更している。\n\n> ```scala:Listing&nbsp;2.24&nbsp;Using&nbsp;Event&nbsp;and&nbsp;InstantaneousTime\nscala> val x = new InstantaneousTime {\n     | val repr = 2\n     |}\nx: java.lang.Object with InstantaneousTime = $anon$1@2\nscala> val y = new Event {\n     | val name = \"TestEvent\" | val repr = 2\n     |}\ny: java.lang.Object with Event = $anon$1@2\nscala> y == x\nres8: Boolean = false\nscala> x == y\nres9: Boolean = true\n```\n> (Joshua D. Suereth, Scala in Depth, p.40)\n\n上記のREPLを試してみる。\n古いクラスは、equalityメソッドの古い実装を使っているので、新しい名前のフィールドをチェックしない。\nサブクラスではequalityの意味を変更するかもしれない事実を考慮し、基本クラスで元のequalityを変更する必要がある。\n\nScalaではこの問題に対応する`scala.Equals`トレイトがある。\n`Equals`トレイトは、標準の`equals`メソッドと連携して使われる`canEqual`メソッドを定義する。\n\n`canEqual`メソッドはサブクラスに親クラスのequality実装を見合わせることを許す。\nこれは、`equals`メソッド内の他のパラメータがequalityの失敗で引き起こす機会を許すことにより行われる。\n\n`equals`メソッドをオーバライドした拒否基準が持つ何かでサブクラス内の`canEqual`をオーバライドする。\n\n> ```scala:Listing&nbsp;2.25&nbsp;Using&nbsp;scala.Equals\ntrait InstantaneousTime extends Equals {\n  val repr: Int\n  override def canEqual(other: Any) =\n    other.isInstanceOf[InstantaneousTime]\n  override def equals(other: Any) : Boolean =\n    other match {\n      case that: InstantaneousTime =>\n        if(this eq that) true else {\n             (that.## == this.##) &&\n             (that canEqual this) &&\n             (repr == that.repr)\n        }\n    case _ => false\n}\n  override def hashCode(): Int = repr.hashCode\n}\ntrait Event extends InstantaneousTime {\n  val name: String\n  override def canEqual(other: Any) =\n    other.isInstanceOf[Event]\n  override def equals(other: Any): Boolean = other match {\n    case that: Event =>\n      if(this eq that) {\n        true\n      } else {\n        (that canEqual this) &&\n        (repr == that.repr) &&\n        (name == that.name)\n      }\n    case _ => false\n  } \n}\n```\n> (Joshua D. Suereth, Scala in Depth, p.40)\n\n- 他のオブジェクトが`InstantaneousTime`である場合に`true`を返すように`InstantaneousTime`で`canEqual`を実装する。\n- equalityの実装内で、オブジェクト内の`canEqual`を戻す。\n- `Event`クラス内でオーバライドされた`canEqual`は他のEventsでだけequalityが許される。\n\n### 親クラスのequalityをオーバライドする時は、canEqualもオーバライドする\n\n- `canEqual`メソッドは、親クラスのequality実装を抜け出すことをサブクラスに許す手段である。\n- サブクラスは、`true`を返す親クラスの`equals`メソッドに関連付けられた通常の危険性をなくして行うことを許す。\n- サブクラスは、同じ2つのオブジェクトに対して`false`を返す。\n\n> ```scala:Listing&nbsp;2.26&nbsp;Using&nbsp;new&nbsp;equals&nbsp;and&nbsp;canEquals&nbsp;methods\nscala> val x = new InstantaneousTime {\n     | val repr = 2\n     |}\nx: java.lang.Object with InstantaneousTime = $anon$1@2\nscala> val y = new Event {\n     | val name = \"TestEvent\" | val repr = 2\n     |}\ny: java.lang.Object with Event = $anon$1@2\nscala> y == x\nres10: Boolean = false\nscala> x == y\nres11: Boolean = false\n```\n> (Joshua D. Suereth, Scala in Depth, p.40)\n\n最終的にpolymorphicでも対応したモノで、REPLしてみた結果。\n\n# Summary\n\n- Scalaを使うための最初の重要な項目を見た。\n- __REPL__ を活用することにが、Scala開発者として成功するには重要。\n- 式指向プログラミングとimmutableを好むことにより、プログラムを簡素化し、コードを推論する能力を向上させることができる。\n- `Option`により、初期化されていない値を受け入れられる場所を明確にし、コードの妥当性を高めることができる。\n- 多態の下で、適切なequalityメソッドを記述することは困難。\n\n上記のプラクティスのすべてが、Scalaの成功のための最初のステップとなる。\n\n# Rule\n## 5. 多態のequalityのために`scala.Equals`を使う\n多態のequalityは、簡単におかしくなる。\n`scala.Equals`には、間違いを避けるための簡単なテンプレートが提供されている。\n\n所感\n--\n\n- __Polymorphic__ 、多態・多相というよりは多型で良いのかな？\n- ドメインオブジェクトにはやっぱり`equals`と`hashCode`を実装しよう。\n- `scala.Equals`も使っていこう。\n",
        "body": "<p><a href=\"http://qiita.com/asmasa/items/604b2f0823371f16e07d\" title=\"\">独書会 Scala IN DEPTH @大人の喫茶店 その4</a>で記述した、第2章 <strong>The core rules</strong> の続き。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>要約\n      </h2><h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>Polymorphic equality\n      </h1><p><code>equals</code> <code>hashCode</code>関数の実装は、polymorphic言語では注意が必要だが、次のルールに従がえば扱いやすくなる。</p>\n<p>一般的に、特に参照のequalityのようなequalityを強く必要とするクラスでは、複数の具体的なレベルを持つことを避けるのがベストである。</p>\n\n<ul>\n<li>あるケースでは、クラスは参照のequalityのみを必要とする。参照のequalityとは、同じインスタンスであるかどうかを判断するために、2つのオブジェクトを区別する。</li>\n<li>equalityの比較は、2つの異なるインスタンスが等価であることや、複数の具体的な階層であることを判断する必要がある。</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Example: A timeline library\n      </h2><p>タイムライン、カレンダー、ウィジェットを作る。</p>\n<p>ウィジェットに必要なもの。</p>\n\n<ul>\n<li>dates</li>\n<li>times</li>\n<li>time ranges</li>\n<li>それぞれの日に関連付けられたイベント</li>\n</ul>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a><code>InstantaneousTime</code>\n      </h3><p>このライブラリの基本的な概念。<br>\n<code>InstantaneousTime</code>は、時系列内の特定の離散時間を表すクラス。<br>\nGregorian calendarで値を持つ。</p>\n<p>基本的な時間を、グレゴリオ暦のグリニッジ標準時の1970年1月1日午前0時からの秒の整数で持つようにする。<br>\n他の全ての時間をこの表現にフォーマットできると仮定する。タイムゾーンは表現に対して直交する関心事である。</p>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>equality使用についての一般的な仮定\n      </h3>\n<ul>\n<li><code>equals</code>が呼ばれた場合、<code>true</code>を返す。この場合、2つのオブジェクトは同じ参照を持つ。</li>\n<li><code>equals</code>の呼び出しのほとんどが、<code>false</code>を返すことになる。</li>\n<li><code>hashCode</code>の実装は、<code>hashCodes</code>が異なるので、equality比較のためには十分希薄である。</li>\n<li><code>hashCode</code>計算は、深いequality比較よりも効率的である。</li>\n<li>参照のequalityをテストすることは、深いequality比較よりも効率的である。</li>\n</ul>\n<p>これらの仮定は、ほとんどのequalityの実装で標準である。 </p>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.22&nbsp;Simple&nbsp;InstantaneousTime&nbsp;class</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">InstantaneousTime</span> <span class=\"o\">{</span>\n<span class=\"k\">val</span> <span class=\"n\">repr</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">other</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">other</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">InstantaneousTime</span> <span class=\"o\">=&gt;</span>\n       <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"n\">eq</span> <span class=\"n\">that</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"kc\">true</span>\n       <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n         <span class=\"o\">(</span><span class=\"n\">that</span><span class=\"o\">.#</span><span class=\"k\">#</span> <span class=\"o\">==</span> <span class=\"k\">this</span><span class=\"o\">.##)</span> <span class=\"o\">&amp;&amp;</span>\n         <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">==</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span>\n       <span class=\"o\">}</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span>\n<span class=\"o\">}</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">hashCode</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">repr</span><span class=\"o\">.#</span><span class=\"k\">#</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.39)</p>\n</blockquote>\n\n<ul>\n<li>このクラスのメンバーは、グリニッジ標準時の1970年1月1日午前0時からの秒を表す数値を持つ <code>repr</code>のみである。</li>\n<li><code>repr</code>はこのクラスで唯一のデータであり、しかもimmutableであり、<code>equals</code>と<code>hasCode</code>はこの値に基づいて行われる。</li>\n<li>JVM内で<code>equals</code>メソッドを実装する時は、深いequalityチェックの並びにする前に、参照のequalityでテストすることは、効率が良くなる。</li>\n<li>特に複雑なクラスでは劇的にパフォーマンスが向上するが、このクラスでは対して必要としない。</li>\n<li>早期の<code>false</code>チェックのために、<code>hashCode</code>を使う。<code>hashCode</code>を計算することはわずかで簡単なので、良いアイデアである。</li>\n</ul>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a><code>##</code> AND <code>==</code> VS. EQUALS AND HASHCODE\n      </h3>\n<ul>\n<li><code>==</code>メソッドは、Javaの<code>equals</code>メソッドに相当</li>\n<li><code>##</code>メソッドは、Javaの<code>hashCode</code>メソッドに相当</li>\n</ul>\n<p><code>equals</code>と<code>hashCode</code>メソッドを呼び出す時は、<code>##</code> <code>==</code>を使う方が良い。これらのメソッドは値型のサポートをしている。</p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>2つの原理\n      </h3>\n<ul>\n<li>良い<code>equality</code>メソッドの重要性</li>\n<li>コードの仮定に常に挑戦すること</li>\n</ul>\n<p>このケースでのベストプラクティス<code>equality</code>メソッドは、シンプルなクラスに利益を与える。<br>\n独自のクラスのために<code>equality</code>を実装する時、<code>true</code>を持っていることを確認するために、標準的なequalityの実装で仮定をテストする。</p>\n<p><code>equals</code>の実装は、polymorphismの欠陥に苦しむ。</p>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>Polymorphic equalsの実装\n      </h3><p>一般的に、深いequalityを必要等する型で多態性を避けるのがベスト。<br>\nScalaではこれを理由に、ケースクラスのサブクラス化をサポートしていない。</p>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.23&nbsp;Event&nbsp;subclass&nbsp;of&nbsp;InstantaneousTime</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Event</span> <span class=\"k\">extends</span> <span class=\"nc\">InstantaneousTime</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">other</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">other</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Event</span> <span class=\"o\">=&gt;</span>\n      <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"n\">eq</span> <span class=\"n\">that</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kc\">true</span>\n      <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">==</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.40)</p>\n</blockquote>\n<p>タイムライン上のイベントを保持する<code>InstantaneousTime</code>のサブクラス<code>Event</code>クラスを作成した。<br>\n2つの<code>Event</code>オブジェクトだけが等しくなるように、パターンマッチを変更している。</p>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.24&nbsp;Using&nbsp;Event&nbsp;and&nbsp;InstantaneousTime</span></div><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InstantaneousTime</span> <span class=\"o\">{</span>\n     <span class=\"o\">|</span> <span class=\"k\">val</span> <span class=\"n\">repr</span> <span class=\"k\">=</span> <span class=\"mi\">2</span>\n     <span class=\"o\">|}</span>\n<span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">java.lang.Object</span> <span class=\"kt\">with</span> <span class=\"kt\">InstantaneousTime</span> <span class=\"o\">=</span> <span class=\"nc\">$anon$1</span><span class=\"k\">@</span><span class=\"mi\">2</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">y</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Event</span> <span class=\"o\">{</span>\n     <span class=\"o\">|</span> <span class=\"k\">val</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"s\">&quot;TestEvent&quot;</span> <span class=\"o\">|</span> <span class=\"k\">val</span> <span class=\"n\">repr</span> <span class=\"k\">=</span> <span class=\"mi\">2</span>\n     <span class=\"o\">|}</span>\n<span class=\"n\">y</span><span class=\"k\">:</span> <span class=\"kt\">java.lang.Object</span> <span class=\"kt\">with</span> <span class=\"kt\">Event</span> <span class=\"o\">=</span> <span class=\"nc\">$anon$1</span><span class=\"k\">@</span><span class=\"mi\">2</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">x</span>\n<span class=\"n\">res8</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span>\n<span class=\"n\">res9</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.40)</p>\n</blockquote>\n<p>上記のREPLを試してみる。<br>\n古いクラスは、equalityメソッドの古い実装を使っているので、新しい名前のフィールドをチェックしない。<br>\nサブクラスではequalityの意味を変更するかもしれない事実を考慮し、基本クラスで元のequalityを変更する必要がある。</p>\n<p>Scalaではこの問題に対応する<code>scala.Equals</code>トレイトがある。<br>\n<code>Equals</code>トレイトは、標準の<code>equals</code>メソッドと連携して使われる<code>canEqual</code>メソッドを定義する。</p>\n<p><code>canEqual</code>メソッドはサブクラスに親クラスのequality実装を見合わせることを許す。<br>\nこれは、<code>equals</code>メソッド内の他のパラメータがequalityの失敗で引き起こす機会を許すことにより行われる。</p>\n<p><code>equals</code>メソッドをオーバライドした拒否基準が持つ何かでサブクラス内の<code>canEqual</code>をオーバライドする。</p>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.25&nbsp;Using&nbsp;scala.Equals</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">InstantaneousTime</span> <span class=\"k\">extends</span> <span class=\"nc\">Equals</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">repr</span><span class=\"k\">:</span> <span class=\"kt\">Int</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">canEqual</span><span class=\"o\">(</span><span class=\"n\">other</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n    <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">isInstanceOf</span><span class=\"o\">[</span><span class=\"kt\">InstantaneousTime</span><span class=\"o\">]</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">other</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span>\n    <span class=\"n\">other</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">InstantaneousTime</span> <span class=\"o\">=&gt;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"n\">eq</span> <span class=\"n\">that</span><span class=\"o\">)</span> <span class=\"kc\">true</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n             <span class=\"o\">(</span><span class=\"n\">that</span><span class=\"o\">.#</span><span class=\"k\">#</span> <span class=\"o\">==</span> <span class=\"k\">this</span><span class=\"o\">.##)</span> <span class=\"o\">&amp;&amp;</span>\n             <span class=\"o\">(</span><span class=\"n\">that</span> <span class=\"n\">canEqual</span> <span class=\"k\">this</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n             <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">==</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span>\n<span class=\"o\">}</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">hashCode</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">repr</span><span class=\"o\">.</span><span class=\"n\">hashCode</span>\n<span class=\"o\">}</span>\n<span class=\"k\">trait</span> <span class=\"nc\">Event</span> <span class=\"k\">extends</span> <span class=\"nc\">InstantaneousTime</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">canEqual</span><span class=\"o\">(</span><span class=\"n\">other</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n    <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">isInstanceOf</span><span class=\"o\">[</span><span class=\"kt\">Event</span><span class=\"o\">]</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">other</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">other</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">that</span><span class=\"k\">:</span> <span class=\"kt\">Event</span> <span class=\"o\">=&gt;</span>\n      <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"n\">eq</span> <span class=\"n\">that</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kc\">true</span>\n      <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"o\">(</span><span class=\"n\">that</span> <span class=\"n\">canEqual</span> <span class=\"k\">this</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">==</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"kc\">false</span>\n  <span class=\"o\">}</span> \n<span class=\"o\">}</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.40)</p>\n</blockquote>\n\n<ul>\n<li>他のオブジェクトが<code>InstantaneousTime</code>である場合に<code>true</code>を返すように<code>InstantaneousTime</code>で<code>canEqual</code>を実装する。</li>\n<li>equalityの実装内で、オブジェクト内の<code>canEqual</code>を戻す。</li>\n<li><code>Event</code>クラス内でオーバライドされた<code>canEqual</code>は他のEventsでだけequalityが許される。</li>\n</ul>\n<h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>親クラスのequalityをオーバライドする時は、canEqualもオーバライドする\n      </h3>\n<ul>\n<li><code>canEqual</code>メソッドは、親クラスのequality実装を抜け出すことをサブクラスに許す手段である。</li>\n<li>サブクラスは、<code>true</code>を返す親クラスの<code>equals</code>メソッドに関連付けられた通常の危険性をなくして行うことを許す。</li>\n<li>サブクラスは、同じ2つのオブジェクトに対して<code>false</code>を返す。</li>\n</ul>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.26&nbsp;Using&nbsp;new&nbsp;equals&nbsp;and&nbsp;canEquals&nbsp;methods</span></div><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">x</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">InstantaneousTime</span> <span class=\"o\">{</span>\n     <span class=\"o\">|</span> <span class=\"k\">val</span> <span class=\"n\">repr</span> <span class=\"k\">=</span> <span class=\"mi\">2</span>\n     <span class=\"o\">|}</span>\n<span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">java.lang.Object</span> <span class=\"kt\">with</span> <span class=\"kt\">InstantaneousTime</span> <span class=\"o\">=</span> <span class=\"nc\">$anon$1</span><span class=\"k\">@</span><span class=\"mi\">2</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"k\">val</span> <span class=\"n\">y</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Event</span> <span class=\"o\">{</span>\n     <span class=\"o\">|</span> <span class=\"k\">val</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"s\">&quot;TestEvent&quot;</span> <span class=\"o\">|</span> <span class=\"k\">val</span> <span class=\"n\">repr</span> <span class=\"k\">=</span> <span class=\"mi\">2</span>\n     <span class=\"o\">|}</span>\n<span class=\"n\">y</span><span class=\"k\">:</span> <span class=\"kt\">java.lang.Object</span> <span class=\"kt\">with</span> <span class=\"kt\">Event</span> <span class=\"o\">=</span> <span class=\"nc\">$anon$1</span><span class=\"k\">@</span><span class=\"mi\">2</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">x</span>\n<span class=\"n\">res10</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span>\n<span class=\"n\">res11</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.40)</p>\n</blockquote>\n<p>最終的にpolymorphicでも対応したモノで、REPLしてみた結果。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>Summary\n      </h1>\n<ul>\n<li>Scalaを使うための最初の重要な項目を見た。</li>\n<li><strong>REPL</strong> を活用することにが、Scala開発者として成功するには重要。</li>\n<li>式指向プログラミングとimmutableを好むことにより、プログラムを簡素化し、コードを推論する能力を向上させることができる。</li>\n<li><code>Option</code>により、初期化されていない値を受け入れられる場所を明確にし、コードの妥当性を高めることができる。</li>\n<li>多態の下で、適切なequalityメソッドを記述することは困難。</li>\n</ul>\n<p>上記のプラクティスのすべてが、Scalaの成功のための最初のステップとなる。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Rule\n      </h1><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>5. 多態のequalityのために<code>scala.Equals</code>を使う\n      </h2><p>多態のequalityは、簡単におかしくなる。<br>\n<code>scala.Equals</code>には、間違いを避けるための簡単なテンプレートが提供されている。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>所感\n      </h2>\n<ul>\n<li><strong>Polymorphic</strong> 、多態・多相というよりは多型で良いのかな？</li>\n<li>ドメインオブジェクトにはやっぱり<code>equals</code>と<code>hashCode</code>を実装しよう。</li>\n<li><code>scala.Equals</code>も使っていこう。</li>\n</ul>\n",
        "stock_users": [
            "Reds",
            "rkaneko",
            "kasumani"
        ]
    },
    {
        "id": 96168,
        "uuid": "3dd3ed63d161c53f2d89",
        "user": {
            "id": 49469,
            "url_name": "techno-tanoC",
            "profile_image_url": "https://avatars.githubusercontent.com/u/5437451?"
        },
        "title": "Scalaのパターンマッチ",
        "created_at": "2014-07-19 23:04:48 +0900",
        "updated_at": "2014-07-19 23:04:48 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/techno-tanoC/items/3dd3ed63d161c53f2d89",
        "created_at_as_seconds": 1405778688,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n#Scalaのパターンマッチ\n\n+ usage\n+ patterns\n+ pattern guard\n+ tuple\n+ regular expression\n+ Option\n+ unapply\n+ case class\n\n#usage\n\n```usage.scala\nval (x, y) = (1, 2)  //分解して代入 x = 1, y = 2\n\n(x, y) match {\n  case (1, 2) => \"one, two\"  //パターンで分岐\n  case _ => \"what?\"\n}\n```\n\n#patterns\n```patterns.scala\nany match {\n  case 1             => //定数パターン\n  case _: Int        => //型付きパターン\n  case (_, _)        => //タプルパターン\n  case List(_, _, _) => //固定長シーケンスパターン\n  case List(_, _*)   => //_*で任意長シーケンスパターン\n  case Some(x)       => //コンストラクタパターン\n  case x             => //変数パターン\n  case x @ (_, _)    => //変数束縛パターン\n  case _             => //ワイルドカードパターン\n}\n```\n\nそれぞれのパターンを入れ子にすることも可能\n\n```nest.scala\nnest match {\n  case (1, x: Int, xs @ List(_*), _) => \"match!!\"\n  case _ => \"I dont know\"\n```\n\n#pattern guard\nifで条件を付けることもできる。\n\n```guard.scala\nval piyo = \"piyopiyo\"\n\npiyo match {\n  case p if p.length < 5 => \"short piyo\"\n  case p if p.length >= 5 => \"long piyo\" //ここにマッチ\n}\n```\n\n#tuple\n```tuple.scala\nval p = \"piyo\"\nval h = \"hoge\"\n\n(p, h) match {\n  case (\"piyo\", \"fuga\") => \"piyo, fuga\"\n  case (\"piyo\", _)      => \"piyo, something\" //ここにマッチする\n  case (_, \"hoge\")      => \"something, hoge\"\n  case (_, _)           => \"something, something\"\n}\n```\n\n複数のものを一つのタプルにまとめて、条件分岐させることができる。\n「片方だけが○○の時は～、両方□□の時は～」のように分岐できる。\n\n#regular expression\n括弧の数でパターンが変わる。\nunanchoredで部分にマッチする(束縛するのは一番最初にマッチしたもの)\n入れ子も可。\n\n```regex.scala\nval re1 = \"piyo\\d+\".r\n\"piyo123\" match {\n  case re1() => \"match\"\n  case _ => \"mismatch\"\n//case re1(num)はエラー\n}\n\nval re2 = \"piyo(\\d+)hoge(\\d+)\".r\n\"piyo123hoge456\" match {\n  case re2(p, h) => p + h // \"123456\"\n  case _ => \"mismatch\"\n//case re2() はエラー\n}\n\nval re3 = \"piyo(\\d+)\".r.unanchored\n\"hogepiyo123hoge\" match {\n  case re3(num) => num // \"123\"\n  case _ => \"mismatch\"\n}\n```\n\n#Option\n後述のcase classの一つがOption。\n\n```option.scala\nval piyo: Option[String] = Some(\"piyo\") // Option[String]で型を指定しないとSome[String]になってしまって、Noneがtype errorになる。関数の返り値の推論はOptionになるので普段は不要\npiyo match {\n  case Some(p) => p // \"piyo\"\n  case None => \"none\"\n}\n```\n\n#unapply\nオブジェクトにunapplyが定義されていれば、パターンマッチができる(extractor:抽出子)\nBooleanかOptionを返すようにする。\nコンストラクタやapplyと違う形にできる。\n\n```unapply.scala\nclass Piyo(val piyo: String, val hoge: String)\nobject Piyo {\n  def unapply(p: Piyo) = Some(p.piyo)\n}\n\nval piyo = new Piyo(\"piyopiyo\", \"hogehoge\")\npiyo match {\n  case Piyo(p) => p // \"piyopiyo\"\n  case _ => \"not piyo...\"\n}\n```\n\n#case class\ncase classには自動的にunapplyが定義される。\nコンストラクタと同じ形のパターンになる。\n\n```caseclass.scala\ncase class Piyo(p: String, h: String)\n\nval piyo = Piyo(\"piyo\", \"hoge\") //applyも定義されるのでnew不要\n\npiyo match {\n  case Piyo(p, h) => p + h // \"piyohoge\"\n  case _ => \"mismatch\"\n}\n\n//代入もできる\nval Piyo(p, h) = piyo //p = \"piyo\", h = \"hoge\"\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>Scalaのパターンマッチ\n      </h1>\n<ul>\n<li>usage</li>\n<li>patterns</li>\n<li>pattern guard</li>\n<li>tuple</li>\n<li>regular expression</li>\n<li>Option</li>\n<li>unapply</li>\n<li>case class</li>\n</ul>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>usage\n      </h1><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">usage.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"c1\">//分解して代入 x = 1, y = 2</span>\n\n<span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;one, two&quot;</span>  <span class=\"c1\">//パターンで分岐</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;what?&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>patterns\n      </h1><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">patterns.scala</span></div><div class=\"highlight\"><pre><span class=\"n\">any</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"mi\">1</span>             <span class=\"k\">=&gt;</span> <span class=\"c1\">//定数パターン</span>\n  <span class=\"k\">case</span> <span class=\"k\">_:</span> <span class=\"kt\">Int</span>        <span class=\"o\">=&gt;</span> <span class=\"c1\">//型付きパターン</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span>        <span class=\"k\">=&gt;</span> <span class=\"c1\">//タプルパターン</span>\n  <span class=\"k\">case</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"c1\">//固定長シーケンスパターン</span>\n  <span class=\"k\">case</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">*)</span>   <span class=\"k\">=&gt;</span> <span class=\"c1\">//_*で任意長シーケンスパターン</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>       <span class=\"k\">=&gt;</span> <span class=\"c1\">//コンストラクタパターン</span>\n  <span class=\"k\">case</span> <span class=\"n\">x</span>             <span class=\"k\">=&gt;</span> <span class=\"c1\">//変数パターン</span>\n  <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"k\">@</span> <span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span>    <span class=\"k\">=&gt;</span> <span class=\"c1\">//変数束縛パターン</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span>             <span class=\"k\">=&gt;</span> <span class=\"c1\">//ワイルドカードパターン</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>それぞれのパターンを入れ子にすることも可能</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">nest.scala</span></div><div class=\"highlight\"><pre><span class=\"n\">nest</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">@</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">*),</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;match!!&quot;</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;I dont know&quot;</span>\n</pre></div></div><h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>pattern guard\n      </h1><p>ifで条件を付けることもできる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">guard.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">piyo</span> <span class=\"k\">=</span> <span class=\"s\">&quot;piyopiyo&quot;</span>\n\n<span class=\"n\">piyo</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">p</span> <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;short piyo&quot;</span>\n  <span class=\"k\">case</span> <span class=\"n\">p</span> <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;long piyo&quot;</span> <span class=\"c1\">//ここにマッチ</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>tuple\n      </h1><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">tuple.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">p</span> <span class=\"k\">=</span> <span class=\"s\">&quot;piyo&quot;</span>\n<span class=\"k\">val</span> <span class=\"n\">h</span> <span class=\"k\">=</span> <span class=\"s\">&quot;hoge&quot;</span>\n\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"s\">&quot;piyo&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;fuga&quot;</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;piyo, fuga&quot;</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"s\">&quot;piyo&quot;</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span>      <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;piyo, something&quot;</span> <span class=\"c1\">//ここにマッチする</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"o\">)</span>      <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;something, hoge&quot;</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span>           <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;something, something&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>複数のものを一つのタプルにまとめて、条件分岐させることができる。<br>\n「片方だけが○○の時は～、両方□□の時は～」のように分岐できる。</p>\n<h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>regular expression\n      </h1><p>括弧の数でパターンが変わる。<br>\nunanchoredで部分にマッチする(束縛するのは一番最初にマッチしたもの)<br>\n入れ子も可。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">regex.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">re1</span> <span class=\"k\">=</span> <span class=\"s\">&quot;piyo\\d+&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n<span class=\"s\">&quot;piyo123&quot;</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">re1</span><span class=\"o\">()</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;match&quot;</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;mismatch&quot;</span>\n<span class=\"c1\">//case re1(num)はエラー</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">re2</span> <span class=\"k\">=</span> <span class=\"s\">&quot;piyo(\\d+)hoge(\\d+)&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n<span class=\"s\">&quot;piyo123hoge456&quot;</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">re2</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"c1\">// &quot;123456&quot;</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;mismatch&quot;</span>\n<span class=\"c1\">//case re2() はエラー</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">re3</span> <span class=\"k\">=</span> <span class=\"s\">&quot;piyo(\\d+)&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">unanchored</span>\n<span class=\"s\">&quot;hogepiyo123hoge&quot;</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">re3</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">num</span> <span class=\"c1\">// &quot;123&quot;</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;mismatch&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-7\" class=\"fragment\"></span>\n        <a href=\"#1-7\"><i class=\"fa fa-link\"></i></a>Option\n      </h1><p>後述のcase classの一つがOption。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">option.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">piyo</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"s\">&quot;piyo&quot;</span><span class=\"o\">)</span> <span class=\"c1\">// Option[String]で型を指定しないとSome[String]になってしまって、Noneがtype errorになる。関数の返り値の推論はOptionになるので普段は不要</span>\n<span class=\"n\">piyo</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">p</span> <span class=\"c1\">// &quot;piyo&quot;</span>\n  <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;none&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-8\" class=\"fragment\"></span>\n        <a href=\"#1-8\"><i class=\"fa fa-link\"></i></a>unapply\n      </h1><p>オブジェクトにunapplyが定義されていれば、パターンマッチができる(extractor:抽出子)<br>\nBooleanかOptionを返すようにする。<br>\nコンストラクタやapplyと違う形にできる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">unapply.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">piyo</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"k\">val</span> <span class=\"n\">hoge</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n<span class=\"k\">object</span> <span class=\"nc\">Piyo</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">unapply</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"k\">:</span> <span class=\"kt\">Piyo</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">piyo</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">piyo</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"s\">&quot;piyopiyo&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;hogehoge&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">piyo</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">p</span> <span class=\"c1\">// &quot;piyopiyo&quot;</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;not piyo...&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-9\" class=\"fragment\"></span>\n        <a href=\"#1-9\"><i class=\"fa fa-link\"></i></a>case class\n      </h1><p>case classには自動的にunapplyが定義される。<br>\nコンストラクタと同じ形のパターンになる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">caseclass.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">piyo</span> <span class=\"k\">=</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"s\">&quot;piyo&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;hoge&quot;</span><span class=\"o\">)</span> <span class=\"c1\">//applyも定義されるのでnew不要</span>\n\n<span class=\"n\">piyo</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"c1\">// &quot;piyohoge&quot;</span>\n  <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;mismatch&quot;</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">//代入もできる</span>\n<span class=\"k\">val</span> <span class=\"nc\">Piyo</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">piyo</span> <span class=\"c1\">//p = &quot;piyo&quot;, h = &quot;hoge&quot;</span>\n</pre></div></div>",
        "stock_users": [
            "fjmtmnb",
            "Reds",
            "akmiyoshi"
        ]
    },
    {
        "id": 95989,
        "uuid": "52ec7dd36c514afc4592",
        "user": {
            "id": 49432,
            "url_name": "esplo77",
            "profile_image_url": "https://pbs.twimg.com/profile_images/449974790833455104/KMs7vJNV_normal.png"
        },
        "title": "始めてみた",
        "created_at": "2014-07-19 01:04:36 +0900",
        "updated_at": "2014-07-19 01:04:36 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 1,
        "comment_count": 0,
        "url": "http://qiita.com/esplo77/items/52ec7dd36c514afc4592",
        "created_at_as_seconds": 1405699476,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "```scala\nobject Main {\n  def main( args: Array[String] ): Unit = {\n    println( \"Hello Qiita\" )\n  }\n}\n```\n",
        "body": "<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span> <span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span> <span class=\"s\">&quot;Hello Qiita&quot;</span> <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "Reds"
        ]
    },
    {
        "id": 94790,
        "uuid": "6bbe261d0456d8dad9e1",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "sbt-assemblyでjarのファイル名の書式を設定したい",
        "created_at": "2014-07-17 15:40:17 +0900",
        "updated_at": "2014-07-18 14:19:50 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "assembly",
                "url_name": "assembly",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "sbt",
                "url_name": "sbt",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/6bbe261d0456d8dad9e1",
        "created_at_as_seconds": 1405579217,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nデフォルトでは name-assembly-version.jar の書式になる。\nassemblyの部分を取り除いたり、バージョンを取り除いたりしたい。\n\n\n1) assemblyの文字を取り除く設定\n\n\n```scala:build.sbt\njarName in assembly := { s\"${name.value}-${version.value}.jar\" }\n```\n\n\n2) assemblyのプロジェクト名だけにしたい場合\n\n```scala:build.sbt\njarName in assembly := { s\"${name.value}.jar\" }\n```\n\n\n3) 出力先ディレクトリも含めて設定したい場合\n\n```scala:build.sbt\noutputPath in assembly := file(s\"out/${name.value}-${version.value}.jar\")\n```\n",
        "body": "<p>デフォルトでは name-assembly-version.jar の書式になる。<br>\nassemblyの部分を取り除いたり、バージョンを取り除いたりしたい。</p>\n<p>1) assemblyの文字を取り除く設定</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">jarName</span> <span class=\"n\">in</span> <span class=\"n\">assembly</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span><span class=\"s\">&quot;${name.value}-${version.value}.jar&quot;</span> <span class=\"o\">}</span>\n</pre></div></div><p>2) assemblyのプロジェクト名だけにしたい場合</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">jarName</span> <span class=\"n\">in</span> <span class=\"n\">assembly</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span><span class=\"s\">&quot;${name.value}.jar&quot;</span> <span class=\"o\">}</span>\n</pre></div></div><p>3) 出力先ディレクトリも含めて設定したい場合</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">outputPath</span> <span class=\"n\">in</span> <span class=\"n\">assembly</span> <span class=\"o\">:=</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;out/${name.value}-${version.value}.jar&quot;</span><span class=\"o\">)</span>\n</pre></div></div>",
        "stock_users": [
            "Reds",
            "hoxo_m",
            "kasumani",
            "Noboruhi",
            "reoring"
        ]
    },
    {
        "id": 94773,
        "uuid": "9bed1ed3d9fd8e0f0312",
        "user": {
            "id": 31829,
            "url_name": "KeithYokoma",
            "profile_image_url": "https://gravatar.com/avatar/bbe9718bebdafbdc8dabbe3cadf1bc46?d=https%3A%2F%2Fidenticons.github.com%2F729c558a0f7928aaa7903413e598da90.png&r=x"
        },
        "title": "Scala 事始め1 - Option",
        "created_at": "2014-07-17 15:20:19 +0900",
        "updated_at": "2014-07-17 15:20:55 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/KeithYokoma/items/9bed1ed3d9fd8e0f0312",
        "created_at_as_seconds": 1405578019,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "Java と Scala を比べて、Null を扱うときのあれこれを。\n\n```java:Java\nclass Something {\n  private final String name;\n\n  public Something(String name) {\n    this.name = name;\n  }\n}\n\nclass Nice {\n  @Nullable Something getSomething(boolean hoge) {\n    if (hoge) {\n      return new Something();\n    } else [\n      return null;\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Nice nice = new Nice();\n    Something something = nice.getSomething(false);\n    if (something == null) {\n       System.out.println(\"null\");\n    } else {\n       System.out.println(\"not null\");\n    }\n  }\n}\n```\n\nScala だと。\n\n```scala:Scala\ncase class Something(name:String)\n\nobject Nice {\n  def getSomething(hoge:Boolean):Option[Something] = {\n    if (hoge) {\n      Some(Something(\"hogehoge\"))\n    } else {\n      None\n    }\n  }\n}\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    Nice.getSomething(hoge = false).map { _ =>\n      println(\"not null\")\n    }.getOrElse {\n      println(\"null\")\n    }\n  }\n}\n\n```\n\n分岐がなくて気持ちいい。\n",
        "body": "<p>Java と Scala を比べて、Null を扱うときのあれこれを。</p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"code-lang\"><span class=\"bold\">Java</span></div><div class=\"highlight\"><pre><span class=\"kd\">class</span> <span class=\"nc\">Something</span> <span class=\"o\">{</span>\n  <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">public</span> <span class=\"nf\">Something</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Nice</span> <span class=\"o\">{</span>\n  <span class=\"nd\">@Nullable</span> <span class=\"n\">Something</span> <span class=\"nf\">getSomething</span><span class=\"o\">(</span><span class=\"kt\">boolean</span> <span class=\"n\">hoge</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hoge</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Something</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">[</span>\n      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Nice</span> <span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Nice</span><span class=\"o\">();</span>\n    <span class=\"n\">Something</span> <span class=\"n\">something</span> <span class=\"o\">=</span> <span class=\"n\">nice</span><span class=\"o\">.</span><span class=\"na\">getSomething</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">something</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;null&quot;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n       <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;not null&quot;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>Scala だと。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Something</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span><span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Nice</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">getSomething</span><span class=\"o\">(</span><span class=\"n\">hoge</span><span class=\"k\">:</span><span class=\"kt\">Boolean</span><span class=\"o\">)</span><span class=\"k\">:</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Something</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">hoge</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"nc\">Something</span><span class=\"o\">(</span><span class=\"s\">&quot;hogehoge&quot;</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"nc\">None</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Nice</span><span class=\"o\">.</span><span class=\"n\">getSomething</span><span class=\"o\">(</span><span class=\"n\">hoge</span> <span class=\"k\">=</span> <span class=\"kc\">false</span><span class=\"o\">).</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;not null&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}.</span><span class=\"n\">getOrElse</span> <span class=\"o\">{</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;null&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>分岐がなくて気持ちいい。</p>\n",
        "stock_users": [
            "kasumani",
            "KeithYokoma"
        ]
    },
    {
        "id": 93226,
        "uuid": "df338d715c271c14a663",
        "user": {
            "id": 7565,
            "url_name": "reoring",
            "profile_image_url": "https://secure.gravatar.com/avatar/3735457720e670a400e445ae0f419ac1?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "ScalaのコンパイルはVirtualBox環境だと5倍時間がかかる",
        "created_at": "2014-07-15 14:26:08 +0900",
        "updated_at": "2014-09-09 15:57:54 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "14日",
        "tags": [
            {
                "name": "vagrant",
                "url_name": "vagrant",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/894dfb593318a0ff9aa160c87fe75b920cafb662/medium.jpg?1398263728",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "VirtualBox",
                "url_name": "virtualbox",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/f548c52e6be38560564332b412bf06927f719d3c/medium.jpg?1398263985",
                "versions": []
            },
            {
                "name": "docker",
                "url_name": "docker",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5dd175e323bc9dac09e906b515d54316d527890f/medium.jpg?1379804192",
                "versions": []
            }
        ],
        "stock_count": 28,
        "comment_count": 5,
        "url": "http://qiita.com/reoring/items/df338d715c271c14a663",
        "created_at_as_seconds": 1405401968,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n## 結論 \n-> vmwareを使うと速い\n\n## 経緯\n私達のチームでは、開発環境と本番環境の差をなるべく無くすために、VagrantとDockerを使って環境を構築しています。Vagrantで動作しているのはUbuntu 14.04 x64です。VirtualBoxにはGuest Additionsがインストールされている状態です。\n\nある日、同僚からdockerコンテナでScalaのソースをコンパイルすると遅すぎるとの苦情がきたのでどこが遅いか調べてみることにしました。\n\nどのくらい遅いかというと、macでコンパイルすると6秒で完了するものが、Dockerコンテナ内だと30秒かかる。5倍ぐらい時間がかかってます。\n\n## Dockerコンテナが遅いのか? -> 遅くない\n\nまずDockerコンテナが遅いのかどうかを知らべてみることにしました。\nそのために同じScalaの環境をゲスト環境(Ubuntu 14.04)にも構築して実行してみると、Dockerコンテナと差はなく30秒ほどかかります。少なくともDockerコンテナが遅いということでは無いということが判明しました。\n\n## VirtualBoxが問題なのか?\n\nということは、VirtualBoxで走らせてるからここが問題だろうということで、I/O APICをオンオフしたり、VT-xをオンオフしてみたりとVirtualBoxのパラメタを調整してみましたが変化は確認されず、案の定余計遅くなったりしました。割り当てCPU数は2CPUsから4CPUsまで試しましたが、3CPUsでは1〜2秒程早くなるものの抜本的解決には至りませんでした。4CPUsでは逆に遅くなることがありました。mac側の物理コア数が4つなのでこれ以上は試していません。メモリも同様に1G〜2Gと試してみましたが変化なし。\n\n\n## VirtualBoxが遅かった\n\nこれはもうVirtualBoxが遅いんだろう、ということで試しにVMWareの形式にコンバートして実行してみると、Scalaのコンパイルは6秒で完了するではないですか! 仮想化のオーバーヘッドが多少あるだろうと思うのですが、厳密なベンチマークを取得していないので詳細はわからないのですが、少なくとも体感的にはVirtualBoxより断然速いです。\n\nいままでVirtualBoxがそこまで遅いとは思ってなかったけど、コンパイルのような重い処理を実行させると処理速度の遅さが顕著に表われました。\n\n\n## VagrantのVMWareプロバイダ\n\nVagrantは、有料のオプション(いまは$79)で[VMWareプロバイダ](http://www.vagrantup.com/vmware)を使うことができます。\n\nライセンスを購入すると、license.licファイルが送られてくるので、下記コマンドでプラグインとライセンスを認識させます。\n\n```\nvagrant plugin install vagrant-vmware-fusion\nvagrant plugin license vagrant-vmware-fusion license.lic\n```\n\nplugin install vagrant-vmware-fusionは、jsonの拡張をコンパイルするために、command line toolsが必要です。インストールされていない場合は、```xcode-select --install``` としてインストールします。\n\nしかし現在のvagrant 1.6.3ではvagrantcloudから取得したvmwareのboxは、vmware_desktopと認識されてしまうようで、vmware_fusionプロバイダでは実行できないよ、と怒られてしまいます。\n\n```\nThe box you attempted to add doesn't match the provider you specified.\n\nProvider expected: vmware_fusion\nProvider of box: vmware_desktop\n```\n\n\n\nこれは直接box addすることで回避できました。この問題は修正中のようです。\n追記: 1.6.5で修正されていました。\n\n```vagrantcloudのboxを直接addする\nwget https://vagrantcloud.com/reoring/ubuntu-14.04-with-docker/version/5/provider/vmware_fusion.box\nvagrant box add ubuntu vmware_fusion.box\n```\n\n## boxファイル\n\n今回VirtualBoxとVMWareに使ったBoxファイルは[vagrantcloud/reoring/ubuntu-14.04-with-docker](https://vagrantcloud.com/reoring/ubuntu-14.04-with-docker)で公開しています。\n\n## packer\nこのboxファイルは、[packer](http://www.packer.io/)を使ってビルドしています。[github/reoring/packer-ubuntu-14.04-docker](https://github.com/reoring/packer-ubuntu-14.04-docker)\n\n## おまけ\n\nVagrantfileでvmwareのcpu数とメモリ数を設定する方法\n\n```\nconfig.vm.provider \"vmware_fusion\" do |v|\n  v.vmx[\"memsize\"] = \"1024\"\n  v.vmx[\"numvcpus\"] = \"2\"\nend\n```\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>結論\n      </h2><p>-&gt; vmwareを使うと速い</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>経緯\n      </h2><p>私達のチームでは、開発環境と本番環境の差をなるべく無くすために、VagrantとDockerを使って環境を構築しています。Vagrantで動作しているのはUbuntu 14.04 x64です。VirtualBoxにはGuest Additionsがインストールされている状態です。</p>\n<p>ある日、同僚からdockerコンテナでScalaのソースをコンパイルすると遅すぎるとの苦情がきたのでどこが遅いか調べてみることにしました。</p>\n<p>どのくらい遅いかというと、macでコンパイルすると6秒で完了するものが、Dockerコンテナ内だと30秒かかる。5倍ぐらい時間がかかってます。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Dockerコンテナが遅いのか? -&gt; 遅くない\n      </h2><p>まずDockerコンテナが遅いのかどうかを知らべてみることにしました。<br>\nそのために同じScalaの環境をゲスト環境(Ubuntu 14.04)にも構築して実行してみると、Dockerコンテナと差はなく30秒ほどかかります。少なくともDockerコンテナが遅いということでは無いということが判明しました。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>VirtualBoxが問題なのか?\n      </h2><p>ということは、VirtualBoxで走らせてるからここが問題だろうということで、I/O APICをオンオフしたり、VT-xをオンオフしてみたりとVirtualBoxのパラメタを調整してみましたが変化は確認されず、案の定余計遅くなったりしました。割り当てCPU数は2CPUsから4CPUsまで試しましたが、3CPUsでは1〜2秒程早くなるものの抜本的解決には至りませんでした。4CPUsでは逆に遅くなることがありました。mac側の物理コア数が4つなのでこれ以上は試していません。メモリも同様に1G〜2Gと試してみましたが変化なし。</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>VirtualBoxが遅かった\n      </h2><p>これはもうVirtualBoxが遅いんだろう、ということで試しにVMWareの形式にコンバートして実行してみると、Scalaのコンパイルは6秒で完了するではないですか! 仮想化のオーバーヘッドが多少あるだろうと思うのですが、厳密なベンチマークを取得していないので詳細はわからないのですが、少なくとも体感的にはVirtualBoxより断然速いです。</p>\n<p>いままでVirtualBoxがそこまで遅いとは思ってなかったけど、コンパイルのような重い処理を実行させると処理速度の遅さが顕著に表われました。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>VagrantのVMWareプロバイダ\n      </h2><p>Vagrantは、有料のオプション(いまは$79)で<a href=\"http://www.vagrantup.com/vmware\" title=\"\" target=\"_blank\">VMWareプロバイダ</a>を使うことができます。</p>\n<p>ライセンスを購入すると、license.licファイルが送られてくるので、下記コマンドでプラグインとライセンスを認識させます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>vagrant plugin install vagrant-vmware-fusion\nvagrant plugin license vagrant-vmware-fusion license.lic\n</pre></div></div><p>plugin install vagrant-vmware-fusionは、jsonの拡張をコンパイルするために、command line toolsが必要です。インストールされていない場合は、<code>xcode-select --install</code> としてインストールします。</p>\n<p>しかし現在のvagrant 1.6.3ではvagrantcloudから取得したvmwareのboxは、vmware_desktopと認識されてしまうようで、vmware_fusionプロバイダでは実行できないよ、と怒られてしまいます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>The box you attempted to add doesn&#39;t match the provider you specified.\n\nProvider expected: vmware_fusion\nProvider of box: vmware_desktop\n</pre></div></div><p>これは直接box addすることで回避できました。この問題は修正中のようです。<br>\n追記: 1.6.5で修正されていました。</p>\n<div class=\"code-frame\" data-lang=\"vagrantcloudのboxを直接addする\"><div class=\"highlight\"><pre>wget https://vagrantcloud.com/reoring/ubuntu-14.04-with-docker/version/5/provider/vmware_fusion.box\nvagrant box add ubuntu vmware_fusion.box\n</pre></div></div><h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>boxファイル\n      </h2><p>今回VirtualBoxとVMWareに使ったBoxファイルは<a href=\"https://vagrantcloud.com/reoring/ubuntu-14.04-with-docker\" title=\"\" target=\"_blank\">vagrantcloud/reoring/ubuntu-14.04-with-docker</a>で公開しています。</p>\n<h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>packer\n      </h2><p>このboxファイルは、<a href=\"http://www.packer.io/\" title=\"\" target=\"_blank\">packer</a>を使ってビルドしています。<a href=\"https://github.com/reoring/packer-ubuntu-14.04-docker\" title=\"\" target=\"_blank\">github/reoring/packer-ubuntu-14.04-docker</a></p>\n<h2>\n        <span id=\"2-9\" class=\"fragment\"></span>\n        <a href=\"#2-9\"><i class=\"fa fa-link\"></i></a>おまけ\n      </h2><p>Vagrantfileでvmwareのcpu数とメモリ数を設定する方法</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>config.vm.provider &quot;vmware_fusion&quot; do |v|\n  v.vmx[&quot;memsize&quot;] = &quot;1024&quot;\n  v.vmx[&quot;numvcpus&quot;] = &quot;2&quot;\nend\n</pre></div></div>",
        "stock_users": [
            "DaisukeKondo",
            "nag4",
            "satoshihirose",
            "pogin503",
            "xxthermidorxx",
            "uk_ar",
            "chobie@github",
            "epy0n0ff",
            "grimrose@github",
            "nouphet",
            "ozw_sei",
            "skatsuta",
            "farvel",
            "nacyot",
            "morika-t@github",
            "tsuyoshi_cho",
            "kasumani",
            "jpwgad",
            "nilfigo",
            "kumazo@github",
            "Reds",
            "mpyw",
            "poad1010",
            "nettabo@github",
            "takudo",
            "Noboruhi",
            "HirofumiYashima",
            "suin"
        ]
    },
    {
        "id": 92970,
        "uuid": "7f0bc006cbe56abbebb9",
        "user": {
            "id": 7340,
            "url_name": "i18n",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1119764464/tiwtter_normal.png"
        },
        "title": "Scalaでkuromojiを使ってみるメモ",
        "created_at": "2014-07-15 01:13:59 +0900",
        "updated_at": "2014-07-15 01:13:59 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.10.4"
                ]
            },
            {
                "name": "kuromoji",
                "url_name": "kuromoji",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "0.7.7"
                ]
            }
        ],
        "stock_count": 9,
        "comment_count": 0,
        "url": "http://qiita.com/i18n/items/7f0bc006cbe56abbebb9",
        "created_at_as_seconds": 1405354439,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "[こちら](http://qiita.com/sabakan21/items/5de12f971ae34caf91e5)の記事を見て、kuromojiってどんなものなのか興味があったので、お試しでコードを書いてみたメモです。\n\n~~~scala:build.sbt\nname := \"kuromoi\"\n\nversion := \"1.0\"\n\nresolvers += \"Atilika Open Source repository\" at \"http://www.atilika.org/nexus/content/repositories/atilika\"\n\nlibraryDependencies ++= Seq(\n  \"org.atilika.kuromoji\" % \"kuromoji\" % \"0.7.7\"\n)\n~~~\n\n~~~scala:src/main/scala/Main.scala\nimport org.atilika.kuromoji.Tokenizer\nimport org.atilika.kuromoji.Token\n\nobject Main extends App {\n\n  val tokenizer = Tokenizer.builder.mode(Tokenizer.Mode.NORMAL).build\n\n  val tokens = tokenizer.tokenize(\"僕の夢は、不労収入を得て一生遊んで暮らすことです。\").toArray\n\n  tokens.foreach { t =>\n    val token = t.asInstanceOf[Token]\n    println(s\"${token.getSurfaceForm} - ${token.getAllFeatures}\")\n  }\n}\n~~~\n\n~~~text:出力\n僕 - 名詞,代名詞,一般,*,*,*,僕,ボク,ボク\nの - 助詞,連体化,*,*,*,*,の,ノ,ノ\n夢 - 名詞,一般,*,*,*,*,夢,ユメ,ユメ\nは - 助詞,係助詞,*,*,*,*,は,ハ,ワ\n、 - 記号,読点,*,*,*,*,、,、,、\n不労 - 名詞,一般,*,*,*,*,不労,フロウ,フロー\n収入 - 名詞,一般,*,*,*,*,収入,シュウニュウ,シューニュー\nを - 助詞,格助詞,一般,*,*,*,を,ヲ,ヲ\n得 - 動詞,自立,*,*,一段,連用形,得る,エ,エ\nて - 助詞,接続助詞,*,*,*,*,て,テ,テ\n一生 - 名詞,副詞可能,*,*,*,*,一生,イッショウ,イッショー\n遊ん - 動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン\nで - 助詞,接続助詞,*,*,*,*,で,デ,デ\n暮らす - 動詞,自立,*,*,五段・サ行,基本形,暮らす,クラス,クラス\nこと - 名詞,非自立,一般,*,*,*,こと,コト,コト\nです - 助動詞,*,*,*,特殊・デス,基本形,です,デス,デス\n。 - 記号,句点,*,*,*,*,。,。,。\n~~~\n\nいいですね！　ちょっと楽しい＾＾\n",
        "body": "<p><a href=\"http://qiita.com/sabakan21/items/5de12f971ae34caf91e5\" title=\"\">こちら</a>の記事を見て、kuromojiってどんなものなのか興味があったので、お試しでコードを書いてみたメモです。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;kuromoi&quot;</span>\n\n<span class=\"n\">version</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;1.0&quot;</span>\n\n<span class=\"n\">resolvers</span> <span class=\"o\">+=</span> <span class=\"s\">&quot;Atilika Open Source repository&quot;</span> <span class=\"n\">at</span> <span class=\"s\">&quot;http://www.atilika.org/nexus/content/repositories/atilika&quot;</span>\n\n<span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"s\">&quot;org.atilika.kuromoji&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;kuromoji&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;0.7.7&quot;</span>\n<span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">src/main/scala/Main.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.atilika.kuromoji.Tokenizer</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.atilika.kuromoji.Token</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">tokenizer</span> <span class=\"k\">=</span> <span class=\"nc\">Tokenizer</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"o\">(</span><span class=\"nc\">Tokenizer</span><span class=\"o\">.</span><span class=\"nc\">Mode</span><span class=\"o\">.</span><span class=\"nc\">NORMAL</span><span class=\"o\">).</span><span class=\"n\">build</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">tokens</span> <span class=\"k\">=</span> <span class=\"n\">tokenizer</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"o\">(</span><span class=\"s\">&quot;僕の夢は、不労収入を得て一生遊んで暮らすことです。&quot;</span><span class=\"o\">).</span><span class=\"n\">toArray</span>\n\n  <span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"n\">foreach</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"n\">token</span> <span class=\"k\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">asInstanceOf</span><span class=\"o\">[</span><span class=\"kt\">Token</span><span class=\"o\">]</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;${token.getSurfaceForm} - ${token.getAllFeatures}&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"text\"><div class=\"code-lang\"><span class=\"bold\">出力</span></div><div class=\"highlight\"><pre>僕 - 名詞,代名詞,一般,*,*,*,僕,ボク,ボク\nの - 助詞,連体化,*,*,*,*,の,ノ,ノ\n夢 - 名詞,一般,*,*,*,*,夢,ユメ,ユメ\nは - 助詞,係助詞,*,*,*,*,は,ハ,ワ\n、 - 記号,読点,*,*,*,*,、,、,、\n不労 - 名詞,一般,*,*,*,*,不労,フロウ,フロー\n収入 - 名詞,一般,*,*,*,*,収入,シュウニュウ,シューニュー\nを - 助詞,格助詞,一般,*,*,*,を,ヲ,ヲ\n得 - 動詞,自立,*,*,一段,連用形,得る,エ,エ\nて - 助詞,接続助詞,*,*,*,*,て,テ,テ\n一生 - 名詞,副詞可能,*,*,*,*,一生,イッショウ,イッショー\n遊ん - 動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン\nで - 助詞,接続助詞,*,*,*,*,で,デ,デ\n暮らす - 動詞,自立,*,*,五段・サ行,基本形,暮らす,クラス,クラス\nこと - 名詞,非自立,一般,*,*,*,こと,コト,コト\nです - 助動詞,*,*,*,特殊・デス,基本形,です,デス,デス\n。 - 記号,句点,*,*,*,*,。,。,。\n</pre></div></div><p>いいですね！　ちょっと楽しい＾＾</p>\n",
        "stock_users": [
            "KatsuoBushiFPGA",
            "mtoyoshi",
            "TomoyaIgarashi",
            "kasumani",
            "rakuten_saitama",
            "takumakei@github",
            "Reds",
            "miseyu",
            "akmiyoshi"
        ]
    },
    {
        "id": 92952,
        "uuid": "efeee20917ee2b478ec9",
        "user": {
            "id": 35671,
            "url_name": "hirokidaichi",
            "profile_image_url": "https://gravatar.com/avatar/cc08756798ff94dad86ebc51c1701195?d=https%3A%2F%2Fidenticons.github.com%2F35dce29cf91a19ead1de07e2c3616bd1.png&r=x"
        },
        "title": "「オブジェクト指向プログラミング」と「関数型プログラミング」のたった一つのシンプルな違い",
        "created_at": "2014-07-15 00:36:18 +0900",
        "updated_at": "2014-07-15 11:59:00 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "オブジェクト指向",
                "url_name": "%e3%82%aa%e3%83%96%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e6%8c%87%e5%90%91",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Ruby",
                "url_name": "ruby",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/9de6a11d330f5694820082438f88ccf4a1b289b2/medium.jpg?1364837630",
                "versions": []
            },
            {
                "name": "JavaScript",
                "url_name": "javascript",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/c01023cf926d47b711747c9d00b00fd18dc6638a/medium.jpg?1364837881",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Go",
                "url_name": "go",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/52d8b32911f5e71b421e2cd751b48425c29fab11/medium.jpg?1366622944",
                "versions": []
            }
        ],
        "stock_count": 674,
        "comment_count": 0,
        "url": "http://qiita.com/hirokidaichi/items/efeee20917ee2b478ec9",
        "created_at_as_seconds": 1405352178,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "\n\n# はじめに\n[関数型プログラミングとオブジェクト指向の抜き差しならない関係について整理して考える](http://qiita.com/kenokabe/items/13ea8d2da6adce1b3b9a)という記事がkenokabeさんという方が挙げていて、拙著の [新人プログラマに知っておいてもらいたい人類がオブジェクト指向を手に入れるまでの軌跡](http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1)について言及があったので、補考として挙げておく。\n\n# 暗黙的状態と明示的状態\nこれまで、関数を「わかりやすくきれいに書く方法」とオブジェクト指向が「どのようにして生まれてきたか」について話してきた。\n\n* [新人プログラマに知ってもらいたいメソッドを読みやすく維持するいくつかの原則](http://qiita.com/hirokidaichi/items/c9a76191216f3cc6c4b2)\n* [新人プログラマに知っておいてもらいたい人類がオブジェクト指向を手に入れるまでの軌跡](http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1)\n\n\n一見、それぞれ関係ないように思うかもしれないが、実は大きなテーマでつながっている。\n\n『それは「状態」をどのように取り扱い単純化するか。』ということだ。そして、これがいわゆる関数型プログラミングとオブジェクト指向プログラミングの最大の違いとなる。\n\n関数をきれいに書くためには理解を困難にする「状態」を排除する方法を学んだ。それは例えば再代入を避けることや、ネストを減らして今どのような状態にあるかを覚えなくてよいようにした。\n\nまた、オブジェクト指向の歴史は、状態とそれに関わる処理を明示的にするための歴史だと学んだ。実際的なプログラミングをするのには直面してしまう「状態」に対して、名前を付け、階層管理し、必要以上にそれらが依存しないようにし、関連する処理を一纏めにして、その処理以外を受け付けないことで一つの部品・仮想機械として取り扱えるようにすることで、より大きな課題を解決していけるようにした。\n\n~~これらのように状態を意識しないように隠蔽した状態を「暗黙的状態」（または宣言的状態）と呼び、明示的に名前を付けて管理した状態を明示的状態と言う。~~\n\nこのように、プログラム中で動的に変化する状態をオブジェクトや構造体、変数の粒度で管理されるとき、その状態は「明示的状態」と呼ばれ、プログラム中で変数間の関係性が宣言的に記述され、イミュータブル性が維持される状態を「暗黙的状態」または「宣言的状態」という。このパラダイムを採用しているプログラミングスタイルのことを関数型プログラミングと呼ぶ。これは参照透過性を表から見るか裏から見るかの違いではあるが、手続き型プログラミングの対比としては、この観点で見るのがもっともわかりやすいだろう。(7/15文意がとりにくいため修正)\n\nガウディ本として知られる[コンピュータプログラミングの概念・技法・モデル](http://www.amazon.co.jp/dp/4798113468)から明示的状態について、引用すると\n\n> 手続きの中の明示的状態とは、その生存期間が二度以上の手続き呼び出しにわたるような１つの状態で、手続きの引数に現れないものである。(6.1.2 明示的状態)\n\n明示的状態の取り扱いは非常に難しい。なぜならそれは、人間が「覚えておくべきこと」がシステムの中に残ってしまうからだ。それが残っている限り、バグを見つけ出すのは人間の仕事になる。\n\nオブジェクト指向のよいところは、「状態」を明示的にして、人間がそのコントロールをしやすくするところにある。だが、複雑に絡み合う状態をわかりやすく明示的に管理するのが人間の仕事である以上、不断の努力が必要になる。\n\nある程度サイズまでのプログラムであれば、明示的状態を持つプログラミングスタイルは、明快でわかりやすい。オブジェクト指向プログラミングが一定の成果を上げたのもそれが大きな要因だ。\n\n一方で、近年、関数型プログラミングが再び注目を集めている最大の理由は、オブジェクト指向だけで取り扱うには複雑になりすぎてしまう問題に対して、１つのソリューションを提供してくれるからだと考えている。たとえば、並列性の問題などを明示的状態ではなく、暗黙的状態として宣言できることで、人間が明示的に管理する必要がなくなり、バグが入り込む余地が大幅に減る。\n\n暗黙的状態しかもたないプログラミングスタイルは、抽象度がどれだけあがっても管理する問題の複雑性は変化しないため、明示的状態を持つプログラミングスタイルで対応が難しくなる問題への回答となりうるということだ。\n\n```ruby:明示的状態と暗黙的状態\nlist = [1, 2, 3, 4, 5, 6, 7]\n\n# 暗黙的状態のsum関数\ndef sum_dec(list, s)\n  return s if list.empty?\n  x, *xr = list\n  sum_dec(xr, s + x)\nend\n\n# 明示的状態のsum関数\ndef sum_exp(list)\n  s = 0\n  list.each { |i| s += i }\n  s\nend\n\np sum_dec(list, 0)\np sum_exp(list)\n```\n\n#状態ありプログラミングの限界\n\nガウディ本では、OOPのような状態ありプログラミングの限界(6.9.1)として、次の２つを挙げている。\n\n* 現実世界は並行的である\n* 現実世界は分散的である\n\n並行性、分散性どちらも現代的なプログラミングにとって重要なファクターである。GoのChannel、ScalaのActorなど並列性・分散性に意識を向けたプログラミング言語が注目を浴びていることからも、これらの問題は今そこにあるものとして認識されつつあるのであろう。\n\n元記事ではFRPの話が、取りざたされていた。リアクティブプログラミングとは、離散イベントにおける値の関係を宣言的に記述する(暗黙的・宣言的状態)ことで、並列性、非同期性の諸問題を隠蔽し、モジュラーに扱えることが最大の特徴だ。\n\nこれもまた、状態の明示性と暗黙性の問題だ。\n\n# まとめ\n* OOPと関数型の違いは状態の明示性\n* 一定レベルの抽象化までは明示的状態は扱いやすい\n* 並行分散非同期に注目が集まる昨今、ふたたび宣言的状態に注目があつまりつつある\n\n\n\n\n\n\n\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p><a href=\"http://qiita.com/kenokabe/items/13ea8d2da6adce1b3b9a\" title=\"\">関数型プログラミングとオブジェクト指向の抜き差しならない関係について整理して考える</a>という記事がkenokabeさんという方が挙げていて、拙著の <a href=\"http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1\" title=\"\">新人プログラマに知っておいてもらいたい人類がオブジェクト指向を手に入れるまでの軌跡</a>について言及があったので、補考として挙げておく。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>暗黙的状態と明示的状態\n      </h1><p>これまで、関数を「わかりやすくきれいに書く方法」とオブジェクト指向が「どのようにして生まれてきたか」について話してきた。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/hirokidaichi/items/c9a76191216f3cc6c4b2\" title=\"\">新人プログラマに知ってもらいたいメソッドを読みやすく維持するいくつかの原則</a></li>\n<li><a href=\"http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1\" title=\"\">新人プログラマに知っておいてもらいたい人類がオブジェクト指向を手に入れるまでの軌跡</a></li>\n</ul>\n<p>一見、それぞれ関係ないように思うかもしれないが、実は大きなテーマでつながっている。</p>\n<p>『それは「状態」をどのように取り扱い単純化するか。』ということだ。そして、これがいわゆる関数型プログラミングとオブジェクト指向プログラミングの最大の違いとなる。</p>\n<p>関数をきれいに書くためには理解を困難にする「状態」を排除する方法を学んだ。それは例えば再代入を避けることや、ネストを減らして今どのような状態にあるかを覚えなくてよいようにした。</p>\n<p>また、オブジェクト指向の歴史は、状態とそれに関わる処理を明示的にするための歴史だと学んだ。実際的なプログラミングをするのには直面してしまう「状態」に対して、名前を付け、階層管理し、必要以上にそれらが依存しないようにし、関連する処理を一纏めにして、その処理以外を受け付けないことで一つの部品・仮想機械として取り扱えるようにすることで、より大きな課題を解決していけるようにした。</p>\n<p><del>これらのように状態を意識しないように隠蔽した状態を「暗黙的状態」（または宣言的状態）と呼び、明示的に名前を付けて管理した状態を明示的状態と言う。</del></p>\n<p>このように、プログラム中で動的に変化する状態をオブジェクトや構造体、変数の粒度で管理されるとき、その状態は「明示的状態」と呼ばれ、プログラム中で変数間の関係性が宣言的に記述され、イミュータブル性が維持される状態を「暗黙的状態」または「宣言的状態」という。このパラダイムを採用しているプログラミングスタイルのことを関数型プログラミングと呼ぶ。これは参照透過性を表から見るか裏から見るかの違いではあるが、手続き型プログラミングの対比としては、この観点で見るのがもっともわかりやすいだろう。(7/15文意がとりにくいため修正)</p>\n<p>ガウディ本として知られる<a href=\"http://www.amazon.co.jp/dp/4798113468\" title=\"\" target=\"_blank\">コンピュータプログラミングの概念・技法・モデル</a>から明示的状態について、引用すると</p>\n\n<blockquote>\n<p>手続きの中の明示的状態とは、その生存期間が二度以上の手続き呼び出しにわたるような１つの状態で、手続きの引数に現れないものである。(6.1.2 明示的状態)</p>\n</blockquote>\n<p>明示的状態の取り扱いは非常に難しい。なぜならそれは、人間が「覚えておくべきこと」がシステムの中に残ってしまうからだ。それが残っている限り、バグを見つけ出すのは人間の仕事になる。</p>\n<p>オブジェクト指向のよいところは、「状態」を明示的にして、人間がそのコントロールをしやすくするところにある。だが、複雑に絡み合う状態をわかりやすく明示的に管理するのが人間の仕事である以上、不断の努力が必要になる。</p>\n<p>ある程度サイズまでのプログラムであれば、明示的状態を持つプログラミングスタイルは、明快でわかりやすい。オブジェクト指向プログラミングが一定の成果を上げたのもそれが大きな要因だ。</p>\n<p>一方で、近年、関数型プログラミングが再び注目を集めている最大の理由は、オブジェクト指向だけで取り扱うには複雑になりすぎてしまう問題に対して、１つのソリューションを提供してくれるからだと考えている。たとえば、並列性の問題などを明示的状態ではなく、暗黙的状態として宣言できることで、人間が明示的に管理する必要がなくなり、バグが入り込む余地が大幅に減る。</p>\n<p>暗黙的状態しかもたないプログラミングスタイルは、抽象度がどれだけあがっても管理する問題の複雑性は変化しないため、明示的状態を持つプログラミングスタイルで対応が難しくなる問題への回答となりうるということだ。</p>\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"code-lang\"><span class=\"bold\">明示的状態と暗黙的状態</span></div><div class=\"highlight\"><pre><span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"o\">]</span>\n\n<span class=\"c1\"># 暗黙的状態のsum関数</span>\n<span class=\"k\">def</span> <span class=\"nf\">sum_dec</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">s</span> <span class=\"k\">if</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"n\">empty?</span>\n  <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">xr</span> <span class=\"o\">=</span> <span class=\"n\">list</span>\n  <span class=\"n\">sum_dec</span><span class=\"p\">(</span><span class=\"n\">xr</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># 明示的状態のsum関数</span>\n<span class=\"k\">def</span> <span class=\"nf\">sum_exp</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span>\n  <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"n\">each</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">i</span> <span class=\"p\">}</span>\n  <span class=\"n\">s</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">p</span> <span class=\"n\">sum_dec</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">p</span> <span class=\"n\">sum_exp</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>状態ありプログラミングの限界\n      </h1><p>ガウディ本では、OOPのような状態ありプログラミングの限界(6.9.1)として、次の２つを挙げている。</p>\n\n<ul>\n<li>現実世界は並行的である</li>\n<li>現実世界は分散的である</li>\n</ul>\n<p>並行性、分散性どちらも現代的なプログラミングにとって重要なファクターである。GoのChannel、ScalaのActorなど並列性・分散性に意識を向けたプログラミング言語が注目を浴びていることからも、これらの問題は今そこにあるものとして認識されつつあるのであろう。</p>\n<p>元記事ではFRPの話が、取りざたされていた。リアクティブプログラミングとは、離散イベントにおける値の関係を宣言的に記述する(暗黙的・宣言的状態)ことで、並列性、非同期性の諸問題を隠蔽し、モジュラーに扱えることが最大の特徴だ。</p>\n<p>これもまた、状態の明示性と暗黙性の問題だ。</p>\n<h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>まとめ\n      </h1>\n<ul>\n<li>OOPと関数型の違いは状態の明示性</li>\n<li>一定レベルの抽象化までは明示的状態は扱いやすい</li>\n<li>並行分散非同期に注目が集まる昨今、ふたたび宣言的状態に注目があつまりつつある</li>\n</ul>\n",
        "stock_users": [
            "kota_na_",
            "hryoichi@github",
            "pogin503",
            "yuki-ooka",
            "arc218",
            "sanryuu",
            "siroken3@github",
            "nana4gonta",
            "satotin",
            "toshiyuki",
            "nakatashunsuke",
            "uma_blue",
            "mikamix",
            "ginkgo",
            "ryutaro",
            "NoticiaBuena",
            "6A419BD5h",
            "hiroyasu55",
            "meatball55",
            "mizunokura",
            "RYOQN",
            "y244a",
            "Objective_Worker",
            "xhide3",
            "kunoutatewaki",
            "schr0edinger",
            "haiju",
            "oroshi",
            "matsumos",
            "musemel",
            "0te_y",
            "MHHR",
            "popoko0120",
            "imagepit",
            "yasuhiroki",
            "yuyuchu3333",
            "tonbo",
            "one-a",
            "FumiyasuSumiya",
            "shisogohan",
            "maruma",
            "kokona86",
            "yohsuga",
            "xkumiyu",
            "Viarofka",
            "dnby",
            "ywindish",
            "chinju-hetare",
            "taul_y",
            "naoto02",
            "kamemoge",
            "icacht",
            "redamoon",
            "Nanigashi",
            "aTaroAsari",
            "mmatsumoto1973",
            "yukkundev",
            "genei",
            "AntSparrow",
            "satoshi-kubota",
            "Hironobu",
            "mratassyu",
            "dorayaki_kun",
            "ktera1123",
            "Gyoku",
            "yzwork@github",
            "amayaw9",
            "token7",
            "fuusuke",
            "TetsuTaka",
            "nishioka",
            "tokiw",
            "yukio",
            "shogogg",
            "pakiln",
            "kuriya0909",
            "okazaki_hiromichi",
            "sonedayuya",
            "mitsunobu",
            "nanoninejp",
            "selmertsx",
            "oro350",
            "kui23",
            "kawachitafs",
            "FumihikoSHIROYAMA",
            "fvi-att",
            "ryuu",
            "ykanek",
            "tetsuroito",
            "sasashin",
            "ukyooo",
            "ainame",
            "muscat_bell",
            "sluchin",
            "lei2knight",
            "kiyo",
            "tazakih",
            "atomita",
            "EBvi",
            "tkzw",
            "ukey39",
            "ToruIwashita",
            "T_MURACHI",
            "color_box",
            "YusukeKomiyama",
            "kaznmb",
            "rynkjm",
            "thc_oO",
            "takuji31@github",
            "hirokidaichi",
            "tech_machii",
            "tetuo614",
            "N_Oda",
            "neetular@github",
            "tomokane@github",
            "msyk",
            "solight",
            "matsuosh",
            "ozaki_shigenobu",
            "zenkou",
            "mutoj_rdm821",
            "stsnoda",
            "nao550",
            "mola",
            "toyamarinyon",
            "kowwwwji",
            "ynomi",
            "takoba",
            "ri0031",
            "shsh1982",
            "Dr_Radialist",
            "keygx",
            "usk4buya",
            "fk2cdoc",
            "amaron518",
            "dario_okazaki",
            "yoshinori63",
            "phi",
            "iganayino",
            "ANTON072",
            "n-oshiro",
            "atgs-ghayakawa",
            "hnakamur",
            "yura",
            "Horie1024",
            "nkwi",
            "nhiro78",
            "msya3@github",
            "tukejonny",
            "ogch_v",
            "DQNEO",
            "wgkoro@github",
            "arc279",
            "norainu4949",
            "KanSAKAMOTO",
            "yos316",
            "mikesorae",
            "ronnosippo",
            "nkyma",
            "yoshizaru",
            "soi33org",
            "shabushabu256",
            "monomoti",
            "tkd55",
            "awa-vg",
            "wiroha",
            "ysaito8015@github",
            "tao-k",
            "PPCG4Cube",
            "ProgramPooh",
            "stir",
            "sawahato",
            "u1aryz",
            "snmptrap",
            "moritata",
            "planet768",
            "watarumohawk",
            "yudemanjyu",
            "m_ikawa",
            "syokenz",
            "hideakihonda",
            "kazukomati",
            "Gookina",
            "gogyo",
            "takemichi@github",
            "y_sasaki",
            "bonetaro",
            "oguraya",
            "YAMASHITAHiroki",
            "clo2_",
            "ishi_kuro",
            "ban05",
            "mymneco",
            "tetranium",
            "ishideo",
            "juan62@github",
            "Plus_9",
            "ksqz",
            "mteranisi",
            "kiyoami",
            "walts4debby@github",
            "sipadan2003",
            "naokits",
            "dica33",
            "yuki_2021",
            "cyoco",
            "pippo",
            "IamTouma",
            "shintaros",
            "rentalname@github",
            "psyark",
            "COHENZ",
            "hiramoto",
            "tommmot",
            "tachiba",
            "manabe-mk1",
            "toricaposss",
            "Chalon37699077",
            "KarasawaTakahiro@github",
            "0ceanMoo",
            "yami_beta",
            "tamanobi",
            "ZerOx4C",
            "ultrakanji",
            "sadayuki",
            "dk4kd",
            "yamahei",
            "wshino",
            "tenten0213",
            "Qurage",
            "h13",
            "ykominami",
            "geopelia",
            "manofac",
            "zosan_oryza",
            "o_tsuji",
            "piinattu1",
            "takehironet",
            "shiraco",
            "Rittyan",
            "takuma7",
            "shuma",
            "tcyyky",
            "hironow@github",
            "tmoro",
            "hirdot",
            "calmscape@github",
            "existy2",
            "chikin14niwa",
            "yasumichi",
            "switch_driven",
            "HibiU1",
            "shibafu528",
            "kmu",
            "gooichi",
            "horihorio",
            "intermezzo-fr",
            "wktk",
            "kimiya",
            "DaisukeKondo",
            "k31kvvmt",
            "kaizu",
            "again22",
            "kuwana",
            "aimBULL",
            "kskomori",
            "ichiking",
            "caesar_cat",
            "KAGE_MIKU",
            "heiz123@github",
            "majikuzu_",
            "tshioda",
            "tak01cuebs",
            "tanshiono",
            "spin8823",
            "chobitnet",
            "Funyamo",
            "coporlock",
            "BLADE_BRAVE0w0",
            "yh414303",
            "kbr104",
            "a9b",
            "longk",
            "escapeejp",
            "hahirusan",
            "nekokoneko_mode",
            "EnsekiTT@github",
            "asus4",
            "amemiya4126",
            "tmizo",
            "redfrog@github",
            "shun159@github",
            "nbjiao",
            "ikuwow",
            "sesshw",
            "matsun0323",
            "SioIkzk",
            "syo-sa1982",
            "iKatsuki",
            "snowsunny",
            "skurakake",
            "fereria",
            "Rui",
            "dora56",
            "jun784",
            "ozero",
            "jac",
            "HappyLuckyAkira",
            "sutetotanuki",
            "ktsn",
            "chishida",
            "nag4",
            "hisholy",
            "102782",
            "vicugna",
            "hona0079",
            "pinohara",
            "haldais@github",
            "Shunta_Suzuki",
            "ohsuga",
            "munazo",
            "momoyoro",
            "some_mamo",
            "uehara@github",
            "y-320",
            "gendosu@github",
            "minmaxsum",
            "relax4u",
            "gutio",
            "ktsugita@github",
            "akasakas",
            "at212abusan",
            "sa104",
            "m_mysht",
            "BigSea",
            "shabutora",
            "wings1685",
            "TakumiTakahashi",
            "urrr@github",
            "yuitsubasapapa55",
            "vochicong",
            "novita",
            "goldspring",
            "nackii",
            "ndb_number_0391",
            "noir_neo",
            "machupicchubeta",
            "tarchan@github",
            "oakira30",
            "turtle2005",
            "duketadano",
            "hiroaki-suzuki",
            "junk616",
            "hiroki-ishikawa",
            "takashyx@github",
            "kmotoki",
            "snj",
            "j_kugiya",
            "UnadonSSK",
            "chatii0079",
            "suzume002",
            "hikida220desu",
            "yoshiyukiohta@github",
            "garathea",
            "IT_oh_",
            "allensweets",
            "den258",
            "Junko-W@github",
            "aki77",
            "eslar",
            "bananaumai",
            "yukung",
            "9ryu",
            "one_pattern",
            "quark",
            "bcqiita",
            "taise",
            "obanaopon",
            "NobuakiYamaki",
            "tsussxxx",
            "brightwaltz",
            "blackowl",
            "seage",
            "a_yasui",
            "kin3qiita",
            "kouchi67",
            "leaves",
            "awwa",
            "_uy",
            "angedessin",
            "shiroashi",
            "nkmr12",
            "farvel",
            "t39@github",
            "morishitter",
            "Yuki_Yamashina",
            "e24ns",
            "clowdish",
            "ryutakajp",
            "chinmo@github",
            "akisuteno",
            "sushihappy",
            "nahi",
            "MegaBlackLabel",
            "gplains",
            "teracy",
            "hidetoshi",
            "snicker_jp",
            "kinakano@github",
            "9joneg",
            "tkr_hko625",
            "taka7beckham",
            "yamadaman51",
            "hirogw",
            "upscent",
            "muro",
            "yuu_hara",
            "NOGPON",
            "hash",
            "tettekete",
            "ta1kt0me@github",
            "ktu",
            "super2baba",
            "winterlong",
            "SRAU_Factory",
            "hoxo_m",
            "EntreGulss",
            "taiszk",
            "creaism",
            "kkam0907",
            "Yusk1450@github",
            "Noboruhi",
            "haruchango",
            "hisamekms",
            "asaokamei",
            "todashuta@github",
            "takayukishmz@github",
            "azukiwash",
            "k2zo_o",
            "satoshiyamamoto",
            "kijitoraneko",
            "riverk2",
            "stilo",
            "hattrickn",
            "wing3298",
            "shinoyu",
            "ahkr",
            "oogumaru",
            "tkzwh__",
            "ikekou",
            "motosato",
            "yoshikatu79",
            "amasok23",
            "MasatoYoshioka@github",
            "megane9988",
            "nakataka777",
            "yancya",
            "Apollon",
            "ultimakazu",
            "takawo",
            "reoring",
            "huchiwa",
            "ryobb",
            "tebonz",
            "omorinrin",
            "LordOfNightmare",
            "geek_duck",
            "jfujima",
            "bontar0",
            "mixim",
            "itoKami1123",
            "chikuwa365",
            "minoringo",
            "botesan",
            "sith9209",
            "sugard12",
            "bakorer",
            "izumin5210",
            "take1017x",
            "ic_lifewood",
            "teruhito@github",
            "GENYA",
            "Nagatani",
            "maravilloso",
            "KeithYokoma",
            "masaki_ooba",
            "mdstoy",
            "kiimiiis",
            "a-beco",
            "pollseed",
            "amberjack115",
            "KeBiNdz",
            "Na-OH",
            "saltyshiomix",
            "FiNGAHOLiC",
            "quanon86",
            "ktana_",
            "keyangu",
            "ishiduca",
            "pierusan2010",
            "TomoyaIgarashi",
            "kanpe777",
            "watabokugyunyu",
            "xerxes_132",
            "joker1007",
            "900090009",
            "LightSpeedC",
            "toshi0607",
            "mt-takao",
            "zajja",
            "potch8228",
            "mm36",
            "modal_soul",
            "hasssie",
            "Hoshi_7",
            "himara2",
            "endu@github",
            "PGMY",
            "hondasports8",
            "miyakou1982",
            "gyagya1111",
            "msykiino",
            "yacchin1205",
            "nHigashino@github",
            "okachan",
            "yharikita",
            "asahina_mukade",
            "applesnow",
            "mnagaku",
            "emahiro",
            "nkjnackey",
            "kentaTech@github",
            "otaka1107",
            "bnrh29",
            "nhsgwa",
            "tacke_jp",
            "tsuyoshi_cho",
            "abtky",
            "morozumi_h",
            "PallCreaker",
            "hirokaki",
            "naminaminet",
            "Silbercat",
            "it__ssei",
            "moscowmule2240",
            "komeda",
            "osd",
            "rn404",
            "ishioh@github",
            "sakihama",
            "hiroshi_999",
            "dorokei@github",
            "TAKAyuki_atkwsk",
            "george_tsubota",
            "accaman@github",
            "hachi8833",
            "futo4",
            "mekayama",
            "yadokarielectri",
            "kiichi54321",
            "japboy",
            "laqiiz",
            "takashiiwase",
            "c_katase",
            "sisidovski",
            "moc0311",
            "migi",
            "cu39",
            "gokazy",
            "hkoba@github",
            "kasumani",
            "tkkemg@github",
            "fa11enprince",
            "yosshi1202",
            "snaflot",
            "hachiman8",
            "kumazo@github",
            "norick1701",
            "kantoku@github",
            "makiton",
            "HiDARi",
            "oubakiou",
            "tamuratamuo",
            "nobeans",
            "you21979@github",
            "kanipan",
            "kyuns",
            "fist0",
            "koichiyo",
            "vespid",
            "heki1224",
            "jiz",
            "mather314",
            "junichi",
            "ignorant",
            "aRyoKajiwara",
            "hiracchi",
            "poad1010",
            "reginn666",
            "koyama",
            "s_kic",
            "bells17",
            "hiroism007",
            "dame-hal@github",
            "kidachi_",
            "knsh14",
            "toru2220",
            "kysnm",
            "ryu1_okd",
            "masuwo3",
            "nekogeruge_987",
            "nibushibu",
            "JunSuzukiJapan@github",
            "sadah@github",
            "tsawada",
            "GenTamura84",
            "tadsan",
            "abe00makoto",
            "Granade",
            "takecy",
            "mystblue",
            "watt1006",
            "alpha_350",
            "junkbr",
            "nettabo@github",
            "saisa6153",
            "kz_kazuki",
            "TalesofFox",
            "knt45",
            "foldrr",
            "jumboly",
            "peketamin",
            "Keita-N",
            "waday",
            "tomiacannondale@github",
            "magicant",
            "mtoyoshi",
            "gaplanttr5@github",
            "yuyawata",
            "_Nnwww",
            "otaka",
            "surume",
            "nkhryo",
            "FujiharaTatsuya",
            "tohashi",
            "akishin",
            "sukobuto",
            "135yshr",
            "kazica",
            "edo_m18",
            "kubota2136@github",
            "ksymmsk",
            "STAR_ZERO",
            "falloutkids",
            "selious",
            "wakaba260",
            "mpyw",
            "risgk",
            "Feelird",
            "techKazu",
            "mmorita",
            "hiro_matsuno2",
            "wivern888",
            "yakumoQ",
            "zaoriku0",
            "Reds",
            "guyon@github",
            "SushiYasukawa",
            "riocampos",
            "fumizp",
            "sasasin@github",
            "ozyozyo@github",
            "satton_maroyaka",
            "nikaidoou"
        ]
    },
    {
        "id": 92577,
        "uuid": "93d8b0622fc35333c6ab",
        "user": {
            "id": 2059,
            "url_name": "kencoba",
            "profile_image_url": "https://pbs.twimg.com/profile_images/472209859/photo_normal.JPG"
        },
        "title": "Domain Driven Design ",
        "created_at": "2014-07-14 15:29:44 +0900",
        "updated_at": "2014-07-14 15:30:54 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/kencoba/items/93d8b0622fc35333c6ab",
        "created_at_as_seconds": 1405319384,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "7月10日豆ナイト\n[ぐるぐるDDD/SCRUM - ドメイン駆動設計入門 ～ モデリング探求のうずまきをまわしてみよう！」]\n(http://kokucheese.com/event/index/186937/)\n\nの成果物。\n\n[First Iteration](https://gist.github.com/kencoba/25dde260ef53210c1d72)\n[Second Iteration](https://gist.github.com/kencoba/6ac7537c993d1802ed50)\n[Third Iteration](https://gist.github.com/kencoba/1294f7c3030a10346101)\n\n第2イテレーションはJavaです。\n\n第3イテレーションは、自宅で回しました。\nそれぞれの区画ごとに別の課金アルゴリズムがある、という想定。\n",
        "body": "<p>7月10日豆ナイト<br>\n<a href=\"http://kokucheese.com/event/index/186937/\" title=\"\" target=\"_blank\">ぐるぐるDDD/SCRUM - ドメイン駆動設計入門 ～ モデリング探求のうずまきをまわしてみよう！」</a></p>\n<p>の成果物。</p>\n<p><a href=\"https://gist.github.com/kencoba/25dde260ef53210c1d72\" title=\"\" target=\"_blank\">First Iteration</a><br>\n<a href=\"https://gist.github.com/kencoba/6ac7537c993d1802ed50\" title=\"\" target=\"_blank\">Second Iteration</a><br>\n<a href=\"https://gist.github.com/kencoba/1294f7c3030a10346101\" title=\"\" target=\"_blank\">Third Iteration</a></p>\n<p>第2イテレーションはJavaです。</p>\n<p>第3イテレーションは、自宅で回しました。<br>\nそれぞれの区画ごとに別の課金アルゴリズムがある、という想定。</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 92195,
        "uuid": "de843a441859cf81af48",
        "user": {
            "id": 47014,
            "url_name": "rubyu",
            "profile_image_url": "https://pbs.twimg.com/profile_images/585391487/qBqPu0mK.20061024094725_normal.jpg"
        },
        "title": "ScalaのRegexParsersで書いたパーサのチューニング方法 #2",
        "created_at": "2014-07-13 10:17:36 +0900",
        "updated_at": "2014-07-13 20:24:19 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/rubyu/items/de843a441859cf81af48",
        "created_at_as_seconds": 1405214256,
        "tweet": true,
        "gist_url": "https://gist.github.com/871c22b13cf7060a2175",
        "private": false,
        "raw_body": "#例\n適当なパーサを2つ例に取ります。\n\n```Parser.scala\n//適当なCSVパーサの定義\n//lazy val field = \"[a-z]+\".r\nlazy val A = field ~ ( rep( \",\" ~ field ) ).? \nlazy val B = ( rep( field ~ \",\" ) ).? ~ field\n```\n\nAもBも意図するところは同じです。`a`、`a,b`、`a,b,c`のような入力を、CSVの行としてパースします。\nこのAとBを見て、どちらがより優れたパーサなのかすぐに分かりますか？　答えはAなのですが、なかなかパッと見ただけでは判断し辛いです。\n\n# 入力文字列へのアクセス回数でパーサを評価する\n適当な入力に対する実行時間を計測するのもよいのですが、別の手法として、入力した文字列へのアクセス回数を数えるという方法だと、バックグラウンドのプロセスやCPUクロックの変動などのノイズの影響を受けず、高速にスコアを求められます。\n\nもちろん、実際のパフォーマンスと差異がありますが、Parserのパフォーマンスは、概ねこのスコアに比例します。\n\n```ParserTest.scala\n\nvar count = 0\nclass DebugCharSequence(seq: CharSequence) extends java.lang.CharSequence {\n  def charAt(n: Int) = { count += 1; seq.charAt(n) }\n  def subSequence(s: Int, e: Int) = new DebugCharSequence(seq.subSequence(s, e))\n  def length = seq.length\n  override def toString = seq.toString\n}\nval dseq = new DebugCharSequence(\"a,b,c\")\nparser.parse(parser.A, dseq)\nprintln(\"access count: A\", count)\ncount = 0\nparser.parse(parser.B, dseq)\nprintln(\"access count: B\", count)\n```\n\n```\n(access count: A,31)\n(access count: B,40)\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>例\n      </h1><p>適当なパーサを2つ例に取ります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Parser.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">//適当なCSVパーサの定義</span>\n<span class=\"c1\">//lazy val field = &quot;[a-z]+&quot;.r</span>\n<span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">A</span> <span class=\"k\">=</span> <span class=\"n\">field</span> <span class=\"o\">~</span> <span class=\"o\">(</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"s\">&quot;,&quot;</span> <span class=\"o\">~</span> <span class=\"n\">field</span> <span class=\"o\">)</span> <span class=\"o\">).?</span> \n<span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">B</span> <span class=\"k\">=</span> <span class=\"o\">(</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"n\">field</span> <span class=\"o\">~</span> <span class=\"s\">&quot;,&quot;</span> <span class=\"o\">)</span> <span class=\"o\">).?</span> <span class=\"o\">~</span> <span class=\"n\">field</span>\n</pre></div></div><p>AもBも意図するところは同じです。<code>a</code>、<code>a,b</code>、<code>a,b,c</code>のような入力を、CSVの行としてパースします。<br>\nこのAとBを見て、どちらがより優れたパーサなのかすぐに分かりますか？　答えはAなのですが、なかなかパッと見ただけでは判断し辛いです。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>入力文字列へのアクセス回数でパーサを評価する\n      </h1><p>適当な入力に対する実行時間を計測するのもよいのですが、別の手法として、入力した文字列へのアクセス回数を数えるという方法だと、バックグラウンドのプロセスやCPUクロックの変動などのノイズの影響を受けず、高速にスコアを求められます。</p>\n<p>もちろん、実際のパフォーマンスと差異がありますが、Parserのパフォーマンスは、概ねこのスコアに比例します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">ParserTest.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">var</span> <span class=\"n\">count</span> <span class=\"k\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">class</span> <span class=\"nc\">DebugCharSequence</span><span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"k\">:</span> <span class=\"kt\">CharSequence</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"nc\">CharSequence</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span> <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DebugCharSequence</span><span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n  <span class=\"k\">def</span> <span class=\"n\">length</span> <span class=\"k\">=</span> <span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">length</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span> <span class=\"k\">=</span> <span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n<span class=\"o\">}</span>\n<span class=\"k\">val</span> <span class=\"n\">dseq</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DebugCharSequence</span><span class=\"o\">(</span><span class=\"s\">&quot;a,b,c&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">(</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">dseq</span><span class=\"o\">)</span>\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;access count: A&quot;</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">)</span>\n<span class=\"n\">count</span> <span class=\"k\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">(</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">dseq</span><span class=\"o\">)</span>\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;access count: B&quot;</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>(access count: A,31)\n(access count: B,40)\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 91705,
        "uuid": "32591dd03376ba534d1e",
        "user": {
            "id": 29692,
            "url_name": "cielavenir",
            "profile_image_url": "https://pbs.twimg.com/profile_images/378800000407459158/3dba541cbcc458e00702872dd8703b71_normal.png"
        },
        "title": "paiza POH paizen #paizahack_02 [CoffeeScript/Go/Scala/VB]",
        "created_at": "2014-07-11 18:31:36 +0900",
        "updated_at": "2014-08-05 11:27:12 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Go",
                "url_name": "go",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/52d8b32911f5e71b421e2cd751b48425c29fab11/medium.jpg?1366622944",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "CoffeeScript",
                "url_name": "coffeescript",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e41b881d25c683db2ce913dba0d07b9695a55741/medium.jpg?1368788624",
                "versions": []
            },
            {
                "name": "VB.Net",
                "url_name": "vb.net",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/cielavenir/items/32591dd03376ba534d1e",
        "created_at_as_seconds": 1405071096,
        "tweet": true,
        "gist_url": "https://gist.github.com/6303ffe3d714117a8af4",
        "private": false,
        "raw_body": "|問題|https://paiza.jp/poh/paizen|\n|:--|:--|\n|タイム一覧/Ruby/C/C++/C&sharp;/Java|http://qiita.com/cielavenir/items/17f66daa2be639fd74f3|\n|Perl/PHP/Python|http://qiita.com/cielavenir/items/5b57808a28a8b4c5c7b2|\n|JavaScript|http://qiita.com/cielavenir/items/9dab2bfbcfa0047b345f|\n|CoffeeScript/Go/Scala/VB|http://qiita.com/cielavenir/items/32591dd03376ba534d1e|\n\nCoffeeScript\n\n```coffee:paizapoh2.coffee\n#!/usr/bin/env coffee\nT=[]\nstdin = process.openStdin()\nstdin.setEncoding('utf8')\n\ninput_fragment=''\nstdin.on 'data', (input) ->\n\t\tref=(input_fragment+input).split(\"\\n\")\n\t\tinput_fragment=ref.pop()\n\t\tfor i in [0...ref.length]\n\t\t\tif ref[i]==''\n\t\t\t\tcontinue\n\t\t\tT.push(ref[i])\n\n\nstdin.on 'end', (z) ->\n\tif input_fragment\n\t\tref=(input_fragment+\"\\n\").split(\"\\n\")\n\t\tinput_fragment=ref.pop()\n\t\tfor i in [0...ref.length]\n\t\t\tif ref[i]==''\n\t\t\t\tcontinue\n\t\t\tT.push(ref[i])\n\targ=T[0].split(' ').map(Number)\n\th=arg[0]\n\tw=arg[1]\n\ta=Array(h)\n\tfor i in [0...h]\n\t\tline=T[1+i]\n\t\ta[i]=Array(w)\n\t\tfor j in [0...w]\n\t\t\ta[i][j]=Array(h)\n\t\t\ta[i][j][0]=line[j]^1\n\taccum=Array(h)\n\tfor i in [0...h]\n\t\taccum[i]=Array(w+1)\n\t\tfor j in [0..w]\n\t\t\taccum[i][j]=0;\n\tfor i in [0...h]\n\t\taccum[0][a[i][0][0]]++\n\t\tfor j in [1...w]\n\t\t\tif a[i][j][0]\n\t\t\t\ta[i][j][0]+=a[i][j-1][0]\n\t\t\t\taccum[0][a[i][j][0]]++\n\tfor i in [1...h]\n\t\tfor j in [0...w]\n\t\t\tfor k in [1..i]\n\t\t\t\ta[i][j][k]=a[i-1][j][k-1]\n\t\t\t\tif a[i][j][k]>a[i][j][k-1]\n\t\t\t\t\ta[i][j][k]=a[i][j][k-1]\n\t\t\t\tif !a[i][j][k]\n\t\t\t\t\tbreak\n\t\t\t\taccum[k][a[i][j][k]]++\n\tfor i in [0...h]\n\t\tfor j in [0...w]\n\t\t\taccum[i][w-1-j]+=accum[i][w-1-j+1]\n\tk=Number(T[1+h])\n\tfor i in [0...k]\n\t\targ=T[1+h+1+i].split(' ').map(Number)\n\t\ts=arg[0]\n\t\tt=arg[1]\n\t\tconsole.log(if s<=h&&t<=w then accum[s-1][t] else 0)\n```\n\nGo\n多次元配列を直接宣言する方法がないらしいので、Cと同様に最大値固定で。\n\n```go:paizapoh2.go\npackage main\nimport(\n\t\"fmt\"\n\t\"os\"\n\t\"text/scanner\"\n\t\"strconv\"\n)\n\nvar sin scanner.Scanner\nfunc scanint() int{\n\tsin.Scan()\n\tret,_ := strconv.Atoi(sin.TokenText())\n\treturn ret\n}\n\nfunc main(){\n\t//wtf?\n\tvar a [300][300][300]int\n\tvar accum [300][301]int\n\n\tsin.Init(os.Stdin)\n\th:=scanint()\n\tw:=scanint()\n\n\tfor i:=0;i<h;i++ {\n\t\tsin.Scan()\n\t\tline:=sin.TokenText()\n\t\tfor j:=0;j<w;j++ {a[i][j][0]=(int)(line[j]-'0')^1}\n\t}\n\tfor i:=0;i<h;i++ {\n\t\taccum[0][a[i][0][0]]++\n\t\tfor j:=1;j<w;j++ {\n\t\t\tif a[i][j][0]>0 {\n\t\t\t\ta[i][j][0]+=a[i][j-1][0]\n\t\t\t\taccum[0][a[i][j][0]]++\n\t\t\t}\n\t\t}\n\t}\n\tfor i:=1;i<h;i++ {\n\t\tfor j:=0;j<w;j++ {\n\t\t\tfor k:=1;k<=i;k++ {\n\t\t\t\ta[i][j][k]=a[i-1][j][k-1]\n\t\t\t\tif a[i-1][j][k-1]>a[i][j][k-1] { a[i][j][k]=a[i][j][k-1] }\n\t\t\t\tif a[i][j][k]==0 {break}\n\t\t\t\taccum[k][a[i][j][k]]++\n\t\t\t}\n\t\t}\n\t}\n\tfor i:=0;i<h;i++ {\n\t\tfor j:=w-1;j>=0;j-- {\n\t\t\taccum[i][j]+=accum[i][j+1]\n\t\t}\n\t}\n\tfor k:=scanint();k>0;k-- {\n\t\ts:=scanint()\n\t\tt:=scanint()\n\t\tif s<=h&&t<=w {\n\t\t\tfmt.Println(accum[s-1][t])\n\t\t} else {\n\t\t\tfmt.Println(0)\n\t\t}\n\t}\n}\n```\n\nScala\n\n```scala:paizapoh2.scala\nimport scala.util.control.Breaks\nobject Main extends App{\n\tval Array(h,w) = readLine().split(\" \").map(_.toInt)\n\tval a=Array.ofDim[Int](h,w,h)\n\tval accum=Array.ofDim[Int](h,w+1)\n\tfor(i<-0 to h-1){\n\t\tval line=readLine();\n\t\tfor(j<-0 to w-1)a(i)(j)(0)=(line.charAt(j)-'0')^1\n\t}\n\tfor(i<-0 to h-1){\n\t\taccum(0)(a(i)(0)(0))+=1\n\t\tfor(j<-1 to w-1){\n\t\t\tif(a(i)(j)(0)>0){\n\t\t\t\ta(i)(j)(0)+=a(i)(j-1)(0)\n\t\t\t\taccum(0)(a(i)(j)(0))+=1\n\t\t\t}\n\t\t}\n\t}\n\tval b=new Breaks\n\tfor(i<-1 to h-1){\n\t\tfor(j<-0 to w-1){\n\t\t\tb.breakable{\n\t\t\t\tfor(k<-1 to i){\n\t\t\t\t\ta(i)(j)(k)=Math.min(a(i-1)(j)(k-1),a(i)(j)(k-1))\n\t\t\t\t\tif(a(i)(j)(k)==0)b.break\n\t\t\t\t\taccum(k)(a(i)(j)(k))+=1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i<-0 to h-1){\n\t\tfor(j<-w-1 to 0 by -1)accum(i)(j)+=accum(i)(j+1)\n\t}\n\tval K=readInt()\n\tfor(k<-1 to K){\n\t\tval Array(s,t) = readLine().split(\" \").map(_.toInt)\n\t\tprintln(if(s<=h&&t<=w) accum(s-1)(t) else 0)\n\t}\n}\n```\n\nVB\n\n```vbnet:paizapoh2.vb\nmodule PaizaPOH2\n\tdim SIZE as integer=9999999\n\tdim z(SIZE-1) as byte\n\tdim input_count as integer=0\n\n\tfunction myget() as integer\n\t\tdim r as integer\n\t\twhile 48<=z(input_count) andalso z(input_count)<=57\n\t\t\tr=r*10+z(input_count)-48\n\t\t\tinput_count+=1\n\t\tend while\n\t\tinput_count+=1\n\t\treturn r\n\tend function\n\tfunction mygetC() as integer\n\t\tinput_count+=1\n\t\treturn z(input_count-1)\n\tend function\n\n\tsub Main()\n\t\tConsole.OpenStandardInput().Read(z,0,SIZE)\n\t\tdim h as integer=myget()\n\t\tdim w as integer=myget()\n\t\tdim a(h-1,w-1,h-1) as integer\n\t\tdim accum(h-1,w) as integer\n\t\tfor i as integer=0 to h-1\n\t\t\tfor j as integer=0 to w-1\n\t\t\t\ta(i,j,0)=(mygetC()-48) xor 1\n\t\t\tnext\n\t\t\tmygetC()\n\t\tnext\n\t\tfor i as integer=0 to h-1\n\t\t\taccum(0,a(i,0,0))+=1\n\t\t\tfor j as integer=1 to w-1\n\t\t\t\tif a(i,j,0)>0\n\t\t\t\t\ta(i,j,0)+=a(i,j-1,0)\n\t\t\t\t\taccum(0,a(i,j,0))+=1\n\t\t\t\tend if\n\t\t\tnext\n\t\tnext\n\t\tfor i as integer=1 to h-1\n\t\t\tfor j as integer=0 to w-1\n\t\t\t\tfor k as integer=1 to i\n\t\t\t\t\ta(i,j,k)=Math.min(a(i-1,j,k-1),a(i,j,k-1))\n\t\t\t\t\tif a(i,j,k)=0\n\t\t\t\t\t\texit for\n\t\t\t\t\tend if\n\t\t\t\t\taccum(k,a(i,j,k))+=1\n\t\t\t\tnext\n\t\t\tnext\n\t\tnext\n\t\tfor i as integer=0 to h-1\n\t\t\tfor j as integer=w-1 to 0 step -1\n\t\t\t\taccum(i,j)+=accum(i,j+1)\n\t\t\tnext\n\t\tnext\n\t\tdim k as integer=myget()\n\t\twhile k>0\n\t\t\tdim s as integer=myget()\n\t\t\tdim t as integer=myget()\n\t\t\tConsole.WriteLine(if(s<=h andalso t<=w,accum(s-1,t),0))\n\t\t\tk-=1\n\t\tend while\n\tend sub\nend module\n```\n",
        "body": "<table><thead>\n<tr>\n<th style=\"text-align: left\">問題</th>\n<th style=\"text-align: left\"><a href=\"https://paiza.jp/poh/paizen\" title=\"https://paiza.jp/poh/paizen\" target=\"_blank\">https://paiza.jp/poh/paizen</a></th>\n</tr>\n</thead><tbody>\n<tr>\n<td style=\"text-align: left\">タイム一覧/Ruby/C/C++/C&sharp;/Java</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/17f66daa2be639fd74f3\" title=\"http://qiita.com/cielavenir/items/17f66daa2be639fd74f3\">http://qiita.com/cielavenir/items/17f66daa2be639fd74f3</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Perl/PHP/Python</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/5b57808a28a8b4c5c7b2\" title=\"http://qiita.com/cielavenir/items/5b57808a28a8b4c5c7b2\">http://qiita.com/cielavenir/items/5b57808a28a8b4c5c7b2</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">JavaScript</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/9dab2bfbcfa0047b345f\" title=\"http://qiita.com/cielavenir/items/9dab2bfbcfa0047b345f\">http://qiita.com/cielavenir/items/9dab2bfbcfa0047b345f</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">CoffeeScript/Go/Scala/VB</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/32591dd03376ba534d1e\" title=\"http://qiita.com/cielavenir/items/32591dd03376ba534d1e\">http://qiita.com/cielavenir/items/32591dd03376ba534d1e</a></td>\n</tr>\n</tbody></table>\n<p>CoffeeScript</p>\n<div class=\"code-frame\" data-lang=\"coffee\"><div class=\"code-lang\"><span class=\"bold\">paizapoh2.coffee</span></div><div class=\"highlight\"><pre><span class=\"c1\">#!/usr/bin/env coffee</span>\n<span class=\"nx\">T</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"nv\">stdin = </span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">openStdin</span><span class=\"p\">()</span>\n<span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">setEncoding</span><span class=\"p\">(</span><span class=\"s\">&#39;utf8&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">input_fragment</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span>\n<span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">on</span> <span class=\"s\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"nf\">(input) -&gt;</span>\n        <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">input_fragment</span><span class=\"o\">+</span><span class=\"nx\">input</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">input_fragment</span><span class=\"o\">=</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s\">&#39;&#39;</span>\n                <span class=\"k\">continue</span>\n            <span class=\"nx\">T</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span>\n\n\n<span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">on</span> <span class=\"s\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"nf\">(z) -&gt;</span>\n    <span class=\"k\">if</span> <span class=\"nx\">input_fragment</span>\n        <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">input_fragment</span><span class=\"o\">+</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">input_fragment</span><span class=\"o\">=</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s\">&#39;&#39;</span>\n                <span class=\"k\">continue</span>\n            <span class=\"nx\">T</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span>\n    <span class=\"nx\">arg</span><span class=\"o\">=</span><span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">)</span>\n    <span class=\"nx\">h</span><span class=\"o\">=</span><span class=\"nx\">arg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nx\">w</span><span class=\"o\">=</span><span class=\"nx\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"nx\">a</span><span class=\"o\">=</span><span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">h</span><span class=\"p\">]</span>\n        <span class=\"nx\">line</span><span class=\"o\">=</span><span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n        <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">w</span><span class=\"p\">]</span>\n            <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">)</span>\n            <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nx\">line</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">^</span><span class=\"mi\">1</span>\n    <span class=\"nx\">accum</span><span class=\"o\">=</span><span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">h</span><span class=\"p\">]</span>\n        <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"nx\">w</span><span class=\"p\">]</span>\n            <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">h</span><span class=\"p\">]</span>\n        <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">++</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">...</span><span class=\"nx\">w</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+=</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">++</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">...</span><span class=\"nx\">h</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">w</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"nx\">k</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">..</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n                <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]</span>\n                    <span class=\"k\">break</span>\n                <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">][</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]]</span><span class=\"o\">++</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">h</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">w</span><span class=\"p\">]</span>\n            <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+=</span><span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"nx\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"nx\">k</span><span class=\"o\">=</span><span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nx\">h</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">k</span><span class=\"p\">]</span>\n        <span class=\"nx\">arg</span><span class=\"o\">=</span><span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nx\">h</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">)</span>\n        <span class=\"nx\">s</span><span class=\"o\">=</span><span class=\"nx\">arg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"nx\">t</span><span class=\"o\">=</span><span class=\"nx\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nx\">s</span><span class=\"o\">&lt;=</span><span class=\"nx\">h</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">t</span><span class=\"o\">&lt;=</span><span class=\"nx\">w</span> <span class=\"k\">then</span> <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"nx\">t</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div></div><p>Go<br>\n多次元配列を直接宣言する方法がないらしいので、Cと同様に最大値固定で。</p>\n<div class=\"code-frame\" data-lang=\"go\"><div class=\"code-lang\"><span class=\"bold\">paizapoh2.go</span></div><div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n<span class=\"kn\">import</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;os&quot;</span>\n    <span class=\"s\">&quot;text/scanner&quot;</span>\n    <span class=\"s\">&quot;strconv&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">sin</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nx\">Scanner</span>\n<span class=\"kd\">func</span> <span class=\"nx\">scanint</span><span class=\"p\">()</span> <span class=\"kt\">int</span><span class=\"p\">{</span>\n    <span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">Scan</span><span class=\"p\">()</span>\n    <span class=\"nx\">ret</span><span class=\"p\">,</span><span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nx\">Atoi</span><span class=\"p\">(</span><span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">TokenText</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ret</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">(){</span>\n    <span class=\"c1\">//wtf?</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">][</span><span class=\"mi\">300</span><span class=\"p\">][</span><span class=\"mi\">300</span><span class=\"p\">]</span><span class=\"kt\">int</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">accum</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">][</span><span class=\"mi\">301</span><span class=\"p\">]</span><span class=\"kt\">int</span>\n\n    <span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">Init</span><span class=\"p\">(</span><span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Stdin</span><span class=\"p\">)</span>\n    <span class=\"nx\">h</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n    <span class=\"nx\">w</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"p\">&lt;</span><span class=\"nx\">h</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">Scan</span><span class=\"p\">()</span>\n        <span class=\"nx\">line</span><span class=\"o\">:=</span><span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">TokenText</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"p\">&lt;</span><span class=\"nx\">w</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]=(</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"nx\">line</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">)^</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"p\">&lt;</span><span class=\"nx\">h</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">++</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"p\">&lt;</span><span class=\"nx\">w</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]&gt;</span><span class=\"mi\">0</span> <span class=\"p\">{</span>\n                <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+=</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">++</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"p\">&lt;</span><span class=\"nx\">h</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"p\">&lt;</span><span class=\"nx\">w</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nx\">k</span><span class=\"o\">&lt;=</span><span class=\"nx\">i</span><span class=\"p\">;</span><span class=\"nx\">k</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n                <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]=</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]&gt;</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">{</span> <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]=</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">0</span> <span class=\"p\">{</span><span class=\"k\">break</span><span class=\"p\">}</span>\n                <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">][</span><span class=\"nx\">a</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">][</span><span class=\"nx\">k</span><span class=\"p\">]]</span><span class=\"o\">++</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"p\">&lt;</span><span class=\"nx\">h</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"nx\">j</span><span class=\"o\">:=</span><span class=\"nx\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"o\">--</span> <span class=\"p\">{</span>\n            <span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+=</span><span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"nx\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">();</span><span class=\"nx\">k</span><span class=\"p\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">k</span><span class=\"o\">--</span> <span class=\"p\">{</span>\n        <span class=\"nx\">s</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n        <span class=\"nx\">t</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nx\">s</span><span class=\"o\">&lt;=</span><span class=\"nx\">h</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">t</span><span class=\"o\">&lt;=</span><span class=\"nx\">w</span> <span class=\"p\">{</span>\n            <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">accum</span><span class=\"p\">[</span><span class=\"nx\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"nx\">t</span><span class=\"p\">])</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div><p>Scala</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">paizapoh2.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.util.control.Breaks</span>\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span><span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">readLine</span><span class=\"o\">().</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">a</span><span class=\"k\">=</span><span class=\"nc\">Array</span><span class=\"o\">.</span><span class=\"n\">ofDim</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">accum</span><span class=\"k\">=</span><span class=\"nc\">Array</span><span class=\"o\">.</span><span class=\"n\">ofDim</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"k\">val</span> <span class=\"n\">line</span><span class=\"k\">=</span><span class=\"n\">readLine</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">)=(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)-</span><span class=\"sc\">&#39;0&#39;</span><span class=\"o\">)^</span><span class=\"mi\">1</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"n\">accum</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">))+=</span><span class=\"mi\">1</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">)&gt;</span><span class=\"mi\">0</span><span class=\"o\">){</span>\n                <span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">)+=</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">accum</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"mi\">0</span><span class=\"o\">))+=</span><span class=\"mi\">1</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">val</span> <span class=\"n\">b</span><span class=\"k\">=new</span> <span class=\"nc\">Breaks</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">breakable</span><span class=\"o\">{</span>\n                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"k\">&lt;-</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">i</span><span class=\"o\">){</span>\n                    <span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"k\">=</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">)==</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">break</span>\n                    <span class=\"n\">accum</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"n\">k</span><span class=\"o\">))+=</span><span class=\"mi\">1</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">0</span> <span class=\"n\">by</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"n\">accum</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">)+=</span><span class=\"n\">accum</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">val</span> <span class=\"n\">K</span><span class=\"k\">=</span><span class=\"n\">readInt</span><span class=\"o\">()</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"k\">&lt;-</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"o\">){</span>\n        <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">readLine</span><span class=\"o\">().</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">)</span>\n        <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">&lt;=</span><span class=\"n\">h</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">t</span><span class=\"o\">&lt;=</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">accum</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>VB</p>\n<div class=\"code-frame\" data-lang=\"vbnet\"><div class=\"code-lang\"><span class=\"bold\">paizapoh2.vb</span></div><div class=\"highlight\"><pre><span class=\"k\">module</span> <span class=\"nn\">PaizaPOH2</span>\n    <span class=\"k\">dim</span> <span class=\"n\">SIZE</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">9999999</span>\n    <span class=\"k\">dim</span> <span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">as</span> <span class=\"kt\">byte</span>\n    <span class=\"k\">dim</span> <span class=\"n\">input_count</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n\n    <span class=\"k\">function</span> <span class=\"nf\">myget</span><span class=\"p\">()</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span>\n        <span class=\"k\">dim</span> <span class=\"n\">r</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span>\n        <span class=\"k\">while</span> <span class=\"mi\">48</span><span class=\"o\">&lt;=</span><span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">input_count</span><span class=\"p\">)</span> <span class=\"ow\">andalso</span> <span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">input_count</span><span class=\"p\">)</span><span class=\"o\">&lt;=</span><span class=\"mi\">57</span>\n            <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">r</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">input_count</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">48</span>\n            <span class=\"n\">input_count</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n        <span class=\"k\">end</span> <span class=\"k\">while</span>\n        <span class=\"n\">input_count</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">r</span>\n    <span class=\"k\">end</span> <span class=\"k\">function</span>\n    <span class=\"k\">function</span> <span class=\"nf\">mygetC</span><span class=\"p\">()</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span>\n        <span class=\"n\">input_count</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">input_count</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span> <span class=\"k\">function</span>\n\n    <span class=\"k\">sub</span> <span class=\"nf\">Main</span><span class=\"p\">()</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">OpenStandardInput</span><span class=\"p\">().</span><span class=\"n\">Read</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">SIZE</span><span class=\"p\">)</span>\n        <span class=\"k\">dim</span> <span class=\"n\">h</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"n\">myget</span><span class=\"p\">()</span>\n        <span class=\"k\">dim</span> <span class=\"n\">w</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"n\">myget</span><span class=\"p\">()</span>\n        <span class=\"k\">dim</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span>\n        <span class=\"k\">dim</span> <span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">to</span> <span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n                <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">mygetC</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">48</span><span class=\"p\">)</span> <span class=\"ow\">xor</span> <span class=\"mi\">1</span>\n            <span class=\"k\">next</span>\n            <span class=\"n\">mygetC</span><span class=\"p\">()</span>\n        <span class=\"k\">next</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span>\n                    <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">+=</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n                <span class=\"k\">end</span> <span class=\"k\">if</span>\n            <span class=\"k\">next</span>\n        <span class=\"k\">next</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">to</span> <span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"n\">i</span>\n                    <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n                    <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n                        <span class=\"k\">exit</span> <span class=\"k\">for</span>\n                    <span class=\"k\">end</span> <span class=\"k\">if</span>\n                    <span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">))</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n                <span class=\"k\">next</span>\n            <span class=\"k\">next</span>\n        <span class=\"k\">next</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">to</span> <span class=\"n\">h</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"n\">w</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">to</span> <span class=\"mi\">0</span> <span class=\"k\">step</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n                <span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">+=</span><span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">next</span>\n        <span class=\"k\">next</span>\n        <span class=\"k\">dim</span> <span class=\"n\">k</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"n\">myget</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"n\">k</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span>\n            <span class=\"k\">dim</span> <span class=\"n\">s</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"n\">myget</span><span class=\"p\">()</span>\n            <span class=\"k\">dim</span> <span class=\"n\">t</span> <span class=\"ow\">as</span> <span class=\"kt\">integer</span><span class=\"o\">=</span><span class=\"n\">myget</span><span class=\"p\">()</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"n\">WriteLine</span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">&lt;=</span><span class=\"n\">h</span> <span class=\"ow\">andalso</span> <span class=\"n\">t</span><span class=\"o\">&lt;=</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">accum</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">),</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"n\">k</span><span class=\"o\">-=</span><span class=\"mi\">1</span>\n        <span class=\"k\">end</span> <span class=\"k\">while</span>\n    <span class=\"k\">end</span> <span class=\"k\">sub</span>\n<span class=\"k\">end</span> <span class=\"k\">module</span>\n</pre></div></div>",
        "stock_users": [
            "Reds",
            "kasumani",
            "Noboruhi"
        ]
    },
    {
        "id": 91294,
        "uuid": "79016a0afd30470f440d",
        "user": {
            "id": 29692,
            "url_name": "cielavenir",
            "profile_image_url": "https://pbs.twimg.com/profile_images/378800000407459158/3dba541cbcc458e00702872dd8703b71_normal.png"
        },
        "title": "paiza POH ec-campaign #paizahack_01 (Go/CoffeeScript/Scala/R/Bash)",
        "created_at": "2014-07-11 01:53:00 +0900",
        "updated_at": "2014-07-31 17:00:12 +0900",
        "created_at_in_words": "2ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "R",
                "url_name": "r",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e631fe7eebf57846928b12ec343dd10e09abcadb/medium.jpg?1364838922",
                "versions": []
            },
            {
                "name": "Go",
                "url_name": "go",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/52d8b32911f5e71b421e2cd751b48425c29fab11/medium.jpg?1366622944",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "CoffeeScript",
                "url_name": "coffeescript",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/e41b881d25c683db2ce913dba0d07b9695a55741/medium.jpg?1368788624",
                "versions": []
            },
            {
                "name": "Bash",
                "url_name": "bash",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/005e4b716bc85c3e4f1a6cc3fcbcdc4560866392/medium.jpg?1364838255",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/cielavenir/items/79016a0afd30470f440d",
        "created_at_as_seconds": 1405011180,
        "tweet": true,
        "gist_url": "https://gist.github.com/bdf80e500bdd9023a2e3",
        "private": false,
        "raw_body": "|問題|https://paiza.jp/poh/ec-campaign|\n|:--|:--|\n|タイム一覧/C++|http://qiita.com/cielavenir/items/a61cfe8390eb16866ae5|\n|Python/Ruby(1)|http://qiita.com/cielavenir/items/b10ff4d201150f525062|\n|C&sharp;/Java/Python/Ruby|http://qiita.com/cielavenir/items/d89e85f069cf570e6786|\n|Perl/PHP|http://qiita.com/cielavenir/items/1a650a4c41d7bdd31392|\n|JavaScript|http://qiita.com/cielavenir/items/a85b985888fdc15c52b7|\n|Go/CoffeeScript/Scala/R/Bash|http://qiita.com/cielavenir/items/79016a0afd30470f440d|\n|VB/F&sharp;|http://qiita.com/cielavenir/items/cb6094bab56253de992c|\n\nGo\n2分探索は標準のもののほうが速いっぽい。まあ、そうですよね。\n\n```go:paizapoh1.go\npackage main\nimport(\n\t\"fmt\"\n\t\"os\"\n\t\"text/scanner\"\n\t\"strconv\"\n\t\"sort\"\n)\n\nvar sin scanner.Scanner\nfunc scanint() int{\n\tsin.Scan()\n\tret,_ := strconv.Atoi(sin.TokenText())\n\treturn ret\n}\n\n/*\nfunc array_binarysearch(needle int,haystack []int,size int) int{\n\thigh := size-1\n\tlow := 0\n\tret := size\n\tfor low <= high {\n\t\tprobe := (high + low) / 2\n\t\tcomparison := haystack[probe]-needle\n\t\tif comparison <= 0 {\n\t\t\tlow = probe+1\n\t\t}else{\n\t\t\tret=high\n\t\t\thigh = probe-1\n\t\t}\n\t}\n\treturn ret\n}\n*/\n\nfunc main(){\n\tsin.Init(os.Stdin)\n\tn:=scanint()\n\td:=scanint()\n\t_v:=make([]int,1000001)\n\tv:=make([]int,n)\n\tfor i:=0;i<n;i++ { _v[scanint()]++ }\n\ti:=0\n\tfor j:=0;j<1000001;j++ {\n\t\tfor k:=0;k<_v[j];k++ { v[i]=j;i++ }\n\t}\n\tfor i=0;i<d;i++ {\n\t\tm:=scanint()\n\t\t//idx:=array_binarysearch(m-v[0],v,n)\n\t\tidx:=sort.Search(n,func(i int) bool{return m-v[0]<v[i]})\n\t\tr:=0\n\t\tj:=0\n\t\tk:=idx-1\n\t\tfor r<m&&j<k&&v[j]+v[j+1]<=m {\n\t\t\tfor v[j]+v[k]>m {k--}\n\t\t\tif r<v[j]+v[k] {r=v[j]+v[k]}\n\t\t\tj++\n\t\t}\n\t\tfmt.Println(r)\n\t}\n}\n```\n\nCoffeeScript\n\n```coffee:paizapoh1.coffee\n#!/usr/bin/env coffee\nT=[]\nstdin = process.openStdin()\nstdin.setEncoding('utf8')\n\narray_binarysearch = (needle,haystack,size) ->\n\thigh = size-1\n\tlow = 0\n\tret = size\n\twhile low <= high\n\t\tprobe = (high + low) / 2^0\n\t\tcomparison = haystack[probe]-needle\n\t\tif comparison <= 0\n\t\t\tlow = probe+1\n\t\telse\n\t\t\tret=high;\n\t\t\thigh = probe-1;\n\treturn ret\n\ninput_fragment=''\nstdin.on 'data', (input) ->\n\t\tref=(input_fragment+input).split(\"\\n\")\n\t\tinput_fragment=ref.pop()\n\t\tfor i in [0...ref.length]\n\t\t\tif ref[i]==''\n\t\t\t\tcontinue\n\t\t\tT.push(ref[i])\n\n\nstdin.on 'end', (z) ->\n\tif input_fragment\n\t\tref=(input_fragment+\"\\n\").split(\"\\n\")\n\t\tinput_fragment=ref.pop()\n\t\tfor i in [0...ref.length]\n\t\t\tif ref[i]==''\n\t\t\t\tcontinue\n\t\t\tT.push(ref[i])\n\targ=T[0].split(' ').map(Number)\n\tn=arg[0]\n\td=arg[1]\n\tv=T.slice(1,1+n).map(Number).sort (a,b) ->\n\t\treturn a-b\n\tfor i in [0...d]\n\t\tm=Number(T[1+n+i])\n\t\tidx=array_binarysearch(m-v[0],v,n)\n\t\tr=0;\n\t\tj=0;\n\t\tk=idx-1\n\t\twhile r<m&&j<k&&v[j]+v[j+1]<=m\n\t\t\twhile v[j]+v[k]>m\n\t\t\t\tk--\n\t\t\tif r<v[j]+v[k]\n\t\t\t\tr=v[j]+v[k]\n\t\t\tj++\n\t\tconsole.log r\n```\n\nScala\nbinarySearchを使うとばぐるっぽい。手元では大丈夫なんだけど。\n\n```scala:paizapoh1.scala\n//import scala.collection.JavaConversions._\nobject Main extends App{\n\tval Array(n,d) = readLine().split(\" \").map(_.toInt)\n\tval _v=new Array[Int](1000001)\n\tval v=new Array[Int](n)\n\tfor(i<-0 to n-1)_v(readInt())+=1\n\tvar i=0\n\tfor(j<-0 to 1000000)for(k<-0 to _v(j)-1){\n\t\tv(i)=j\n\t\ti+=1\n\t}\n\tfor(i<-0 to d-1){\n\t\tval m=readInt()\n\t\tvar idx=n//java.util.Arrays.binarySearch(v,m-v(0)+1)\n\t\tif(idx<0)idx=(~idx)\n\t\tvar r=0\n\t\tvar j=0\n\t\tvar k=idx-1\n\t\twhile(r<m&&j<k&&v(j)+v(j+1)<=m){\n\t\t\t\twhile(v(j)+v(k)>m)k-=1\n\t\t\t\tif(r<v(j)+v(k)){\n\t\t\t\t\tr=v(j)+v(k)\n\t\t\t\t}\n\t\t\t\tj+=1\n\t\t}\n\t\tprintln(r)\n\t}\n}\n```\n\nR\nまあ、TLEになる予想はできていた。\n\n```R:paizapoh1.R\n#!/usr/bin/env Rscript\nx=scan(\"stdin\")\nn=x[1]\nd=x[2]\nv=sort(x[3:(2+n)])\nt=x[(3+n):length(x)]\nfor(i in 1:length(t)){\n\tm=t[i]\n\tidx=n+1\n\tr=0\n\tj=1\n\tk=idx-1\n\twhile(r<m&&j<k&&v[j]+v[j+1]<=m){\n\t\twhile(v[j]+v[k]>m)k=k-1\n\t\tif(r<v[j]+v[k]){\n\t\t\tr=v[j]+v[k]\n\t\t}\n\t\tj=j+1\n\t}\n\tcat(r)\n\tcat(\"\\n\")\n}\n```\n\nBash\n遅すぎて使い物になりませぬ。\nsenpai-tasuketeによる計測ですら1分かかってます。\nあとpaizaで謎のランタイムエラーになる。問い合わせ中。\n\n```bash:paizapoh1.sh\n#!/bin/sh\n#set -e\n#https://gist.github.com/oliverdaff/6067071\nbinary_search(){\n\tTARGET=$1\n\tTO_SEARCH=(${v[@]}) #(${@:2})\n\tLENGTH=${#TO_SEARCH[@]}\n\n\tRETURN=$LENGTH\n\tSTART=0\n\tEND=$((LENGTH - 1))\n\twhile [[ $START -le $END ]]; do\n\t\tMIDDLE=$(((START + END)/2))\n\t\tITEM_AT_MIDDLE=${TO_SEARCH[MIDDLE]}\n\t\tif [[ $ITEM_AT_MIDDLE -le $TARGET ]]; then\n\t\t\tSTART=$((MIDDLE+1))\n\t\telse\n\t\t\tRETURN=$END\n\t\t\tEND=$((MIDDLE-1))\n\t\tfi\n\tdone\n\techo $RETURN\n}\n\nread line\na=($line)\nn=${a[0]}\nd=${a[1]}\n#v=()\n#i=0\n#input n\n#while [ $i -ne $n ];do\n#\tread line\n#\tv=(\"${v[@]}\" $line)\n#\ti=`expr $i + 1`\n#done\n#sort\norig_ifs=$IFS\nIFS=$'\\n'\n_v=($(cat))\nv=($(echo \"${_v[*]:0:$n}\" | sort -n))\nIFS=$orig_ifs\nt=(\"${_v[@]:$n:$d}\")\ni=0\nwhile [ $i -ne $d ];do\n\tm=${t[$i]}\n\tidx=$(binary_search $((m-v[0])))\n\tr=0\n\tj=0\n\tk=$((idx-1))\n\twhile [ $r -lt $m ] && [ $j -lt $k ] && [ $((v[j]+v[j+1])) -le $m ];do\n\t\tm_minus_vj=$((m-v[j]))\n\t\twhile [ ${v[k]} -gt $m_minus_vj ];do\n\t\t\tk=$((k-1))\n\t\tdone\n\t\tvj_minus_vk=$((v[j]+v[k]))\n\t\tif [ $r -le $vj_minus_vk ];then\n\t\t\tr=$vj_minus_vk\n\t\tfi\n\t\tj=$((j+1))\n\tdone\n\techo $r\n\ti=$((i+1))\ndone\n```\n",
        "body": "<table><thead>\n<tr>\n<th style=\"text-align: left\">問題</th>\n<th style=\"text-align: left\"><a href=\"https://paiza.jp/poh/ec-campaign\" title=\"https://paiza.jp/poh/ec-campaign\" target=\"_blank\">https://paiza.jp/poh/ec-campaign</a></th>\n</tr>\n</thead><tbody>\n<tr>\n<td style=\"text-align: left\">タイム一覧/C++</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/a61cfe8390eb16866ae5\" title=\"http://qiita.com/cielavenir/items/a61cfe8390eb16866ae5\">http://qiita.com/cielavenir/items/a61cfe8390eb16866ae5</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Python/Ruby(1)</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/b10ff4d201150f525062\" title=\"http://qiita.com/cielavenir/items/b10ff4d201150f525062\">http://qiita.com/cielavenir/items/b10ff4d201150f525062</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">C&sharp;/Java/Python/Ruby</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/d89e85f069cf570e6786\" title=\"http://qiita.com/cielavenir/items/d89e85f069cf570e6786\">http://qiita.com/cielavenir/items/d89e85f069cf570e6786</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Perl/PHP</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/1a650a4c41d7bdd31392\" title=\"http://qiita.com/cielavenir/items/1a650a4c41d7bdd31392\">http://qiita.com/cielavenir/items/1a650a4c41d7bdd31392</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">JavaScript</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/a85b985888fdc15c52b7\" title=\"http://qiita.com/cielavenir/items/a85b985888fdc15c52b7\">http://qiita.com/cielavenir/items/a85b985888fdc15c52b7</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">Go/CoffeeScript/Scala/R/Bash</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/79016a0afd30470f440d\" title=\"http://qiita.com/cielavenir/items/79016a0afd30470f440d\">http://qiita.com/cielavenir/items/79016a0afd30470f440d</a></td>\n</tr>\n<tr>\n<td style=\"text-align: left\">VB/F&sharp;</td>\n<td style=\"text-align: left\"><a href=\"http://qiita.com/cielavenir/items/cb6094bab56253de992c\" title=\"http://qiita.com/cielavenir/items/cb6094bab56253de992c\">http://qiita.com/cielavenir/items/cb6094bab56253de992c</a></td>\n</tr>\n</tbody></table>\n<p>Go<br>\n2分探索は標準のもののほうが速いっぽい。まあ、そうですよね。</p>\n<div class=\"code-frame\" data-lang=\"go\"><div class=\"code-lang\"><span class=\"bold\">paizapoh1.go</span></div><div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n<span class=\"kn\">import</span><span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;os&quot;</span>\n    <span class=\"s\">&quot;text/scanner&quot;</span>\n    <span class=\"s\">&quot;strconv&quot;</span>\n    <span class=\"s\">&quot;sort&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">sin</span> <span class=\"nx\">scanner</span><span class=\"p\">.</span><span class=\"nx\">Scanner</span>\n<span class=\"kd\">func</span> <span class=\"nx\">scanint</span><span class=\"p\">()</span> <span class=\"kt\">int</span><span class=\"p\">{</span>\n    <span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">Scan</span><span class=\"p\">()</span>\n    <span class=\"nx\">ret</span><span class=\"p\">,</span><span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nx\">Atoi</span><span class=\"p\">(</span><span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">TokenText</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ret</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\">func array_binarysearch(needle int,haystack []int,size int) int{</span>\n<span class=\"cm\">    high := size-1</span>\n<span class=\"cm\">    low := 0</span>\n<span class=\"cm\">    ret := size</span>\n<span class=\"cm\">    for low &lt;= high {</span>\n<span class=\"cm\">        probe := (high + low) / 2</span>\n<span class=\"cm\">        comparison := haystack[probe]-needle</span>\n<span class=\"cm\">        if comparison &lt;= 0 {</span>\n<span class=\"cm\">            low = probe+1</span>\n<span class=\"cm\">        }else{</span>\n<span class=\"cm\">            ret=high</span>\n<span class=\"cm\">            high = probe-1</span>\n<span class=\"cm\">        }</span>\n<span class=\"cm\">    }</span>\n<span class=\"cm\">    return ret</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">(){</span>\n    <span class=\"nx\">sin</span><span class=\"p\">.</span><span class=\"nx\">Init</span><span class=\"p\">(</span><span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Stdin</span><span class=\"p\">)</span>\n    <span class=\"nx\">n</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n    <span class=\"nx\">d</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n    <span class=\"nx\">_v</span><span class=\"o\">:=</span><span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span><span class=\"mi\">1000001</span><span class=\"p\">)</span>\n    <span class=\"nx\">v</span><span class=\"o\">:=</span><span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span><span class=\"nx\">n</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"p\">&lt;</span><span class=\"nx\">n</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span> <span class=\"nx\">_v</span><span class=\"p\">[</span><span class=\"nx\">scanint</span><span class=\"p\">()]</span><span class=\"o\">++</span> <span class=\"p\">}</span>\n    <span class=\"nx\">i</span><span class=\"o\">:=</span><span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"nx\">j</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"p\">&lt;</span><span class=\"mi\">1000001</span><span class=\"p\">;</span><span class=\"nx\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"nx\">k</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">k</span><span class=\"p\">&lt;</span><span class=\"nx\">_v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">];</span><span class=\"nx\">k</span><span class=\"o\">++</span> <span class=\"p\">{</span> <span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]=</span><span class=\"nx\">j</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"p\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"p\">&lt;</span><span class=\"nx\">d</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n        <span class=\"nx\">m</span><span class=\"o\">:=</span><span class=\"nx\">scanint</span><span class=\"p\">()</span>\n        <span class=\"c1\">//idx:=array_binarysearch(m-v[0],v,n)</span>\n        <span class=\"nx\">idx</span><span class=\"o\">:=</span><span class=\"nx\">sort</span><span class=\"p\">.</span><span class=\"nx\">Search</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">,</span><span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">bool</span><span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">m</span><span class=\"o\">-</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]&lt;</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]})</span>\n        <span class=\"nx\">r</span><span class=\"o\">:=</span><span class=\"mi\">0</span>\n        <span class=\"nx\">j</span><span class=\"o\">:=</span><span class=\"mi\">0</span>\n        <span class=\"nx\">k</span><span class=\"o\">:=</span><span class=\"nx\">idx</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"nx\">r</span><span class=\"p\">&lt;</span><span class=\"nx\">m</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">j</span><span class=\"p\">&lt;</span><span class=\"nx\">k</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&lt;=</span><span class=\"nx\">m</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]&gt;</span><span class=\"nx\">m</span> <span class=\"p\">{</span><span class=\"nx\">k</span><span class=\"o\">--</span><span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"nx\">r</span><span class=\"p\">&lt;</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"nx\">r</span><span class=\"p\">=</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]}</span>\n            <span class=\"nx\">j</span><span class=\"o\">++</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div><p>CoffeeScript</p>\n<div class=\"code-frame\" data-lang=\"coffee\"><div class=\"code-lang\"><span class=\"bold\">paizapoh1.coffee</span></div><div class=\"highlight\"><pre><span class=\"c1\">#!/usr/bin/env coffee</span>\n<span class=\"nx\">T</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"nv\">stdin = </span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">openStdin</span><span class=\"p\">()</span>\n<span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">setEncoding</span><span class=\"p\">(</span><span class=\"s\">&#39;utf8&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nv\">array_binarysearch = </span><span class=\"nf\">(needle,haystack,size) -&gt;</span>\n    <span class=\"nv\">high = </span><span class=\"nx\">size</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"nv\">low = </span><span class=\"mi\">0</span>\n    <span class=\"nv\">ret = </span><span class=\"nx\">size</span>\n    <span class=\"k\">while</span> <span class=\"nx\">low</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">high</span>\n        <span class=\"nv\">probe = </span><span class=\"p\">(</span><span class=\"nx\">high</span> <span class=\"o\">+</span> <span class=\"nx\">low</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"mi\">0</span>\n        <span class=\"nv\">comparison = </span><span class=\"nx\">haystack</span><span class=\"p\">[</span><span class=\"nx\">probe</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"nx\">needle</span>\n        <span class=\"k\">if</span> <span class=\"nx\">comparison</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span>\n            <span class=\"nv\">low = </span><span class=\"nx\">probe</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n        <span class=\"k\">else</span>\n            <span class=\"nx\">ret</span><span class=\"o\">=</span><span class=\"nx\">high</span><span class=\"p\">;</span>\n            <span class=\"nv\">high = </span><span class=\"nx\">probe</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ret</span>\n\n<span class=\"nx\">input_fragment</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span>\n<span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">on</span> <span class=\"s\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"nf\">(input) -&gt;</span>\n        <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">input_fragment</span><span class=\"o\">+</span><span class=\"nx\">input</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">input_fragment</span><span class=\"o\">=</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s\">&#39;&#39;</span>\n                <span class=\"k\">continue</span>\n            <span class=\"nx\">T</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span>\n\n\n<span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">on</span> <span class=\"s\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"nf\">(z) -&gt;</span>\n    <span class=\"k\">if</span> <span class=\"nx\">input_fragment</span>\n        <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">input_fragment</span><span class=\"o\">+</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)</span>\n        <span class=\"nx\">input_fragment</span><span class=\"o\">=</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s\">&#39;&#39;</span>\n                <span class=\"k\">continue</span>\n            <span class=\"nx\">T</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span>\n    <span class=\"nx\">arg</span><span class=\"o\">=</span><span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">)</span>\n    <span class=\"nx\">n</span><span class=\"o\">=</span><span class=\"nx\">arg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nx\">d</span><span class=\"o\">=</span><span class=\"nx\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"nx\">v</span><span class=\"o\">=</span><span class=\"nx\">T</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nx\">n</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nb\">Number</span><span class=\"p\">).</span><span class=\"nx\">sort</span> <span class=\"nf\">(a,b) -&gt;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">a</span><span class=\"o\">-</span><span class=\"nx\">b</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">...</span><span class=\"nx\">d</span><span class=\"p\">]</span>\n        <span class=\"nx\">m</span><span class=\"o\">=</span><span class=\"nb\">Number</span><span class=\"p\">(</span><span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"nx\">n</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">])</span>\n        <span class=\"nx\">idx</span><span class=\"o\">=</span><span class=\"nx\">array_binarysearch</span><span class=\"p\">(</span><span class=\"nx\">m</span><span class=\"o\">-</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"nx\">v</span><span class=\"p\">,</span><span class=\"nx\">n</span><span class=\"p\">)</span>\n        <span class=\"nx\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"nx\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"nx\">k</span><span class=\"o\">=</span><span class=\"nx\">idx</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">while</span> <span class=\"nx\">r</span><span class=\"o\">&lt;</span><span class=\"nx\">m</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">j</span><span class=\"o\">&lt;</span><span class=\"nx\">k</span><span class=\"o\">&amp;&amp;</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&lt;=</span><span class=\"nx\">m</span>\n            <span class=\"k\">while</span> <span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"nx\">m</span>\n                <span class=\"nx\">k</span><span class=\"o\">--</span>\n            <span class=\"k\">if</span> <span class=\"nx\">r</span><span class=\"o\">&lt;</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span>\n                <span class=\"nx\">r</span><span class=\"o\">=</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"nx\">v</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span>\n            <span class=\"nx\">j</span><span class=\"o\">++</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"nx\">r</span>\n</pre></div></div><p>Scala<br>\nbinarySearchを使うとばぐるっぽい。手元では大丈夫なんだけど。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">paizapoh1.scala</span></div><div class=\"highlight\"><pre><span class=\"c1\">//import scala.collection.JavaConversions._</span>\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span><span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">readLine</span><span class=\"o\">().</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">_v</span><span class=\"k\">=new</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"mi\">1000001</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"n\">v</span><span class=\"k\">=new</span> <span class=\"nc\">Array</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"nc\">_v</span><span class=\"o\">(</span><span class=\"n\">readInt</span><span class=\"o\">())+=</span><span class=\"mi\">1</span>\n    <span class=\"k\">var</span> <span class=\"n\">i</span><span class=\"k\">=</span><span class=\"mi\">0</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"nc\">_v</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"k\">=</span><span class=\"n\">j</span>\n        <span class=\"n\">i</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">&lt;-</span><span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"n\">d</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">){</span>\n        <span class=\"k\">val</span> <span class=\"n\">m</span><span class=\"k\">=</span><span class=\"n\">readInt</span><span class=\"o\">()</span>\n        <span class=\"k\">var</span> <span class=\"n\">idx</span><span class=\"k\">=</span><span class=\"n\">n</span><span class=\"c1\">//java.util.Arrays.binarySearch(v,m-v(0)+1)</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"n\">idx</span><span class=\"o\">=(~</span><span class=\"n\">idx</span><span class=\"o\">)</span>\n        <span class=\"k\">var</span> <span class=\"n\">r</span><span class=\"k\">=</span><span class=\"mi\">0</span>\n        <span class=\"k\">var</span> <span class=\"n\">j</span><span class=\"k\">=</span><span class=\"mi\">0</span>\n        <span class=\"k\">var</span> <span class=\"n\">k</span><span class=\"k\">=</span><span class=\"n\">idx</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">&lt;</span><span class=\"n\">m</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">k</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)+</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)&lt;=</span><span class=\"n\">m</span><span class=\"o\">){</span>\n                <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)+</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)&gt;</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"n\">k</span><span class=\"o\">-=</span><span class=\"mi\">1</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">&lt;</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)+</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)){</span>\n                    <span class=\"n\">r</span><span class=\"k\">=</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)+</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">j</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>R<br>\nまあ、TLEになる予想はできていた。</p>\n<div class=\"code-frame\" data-lang=\"R\"><div class=\"code-lang\"><span class=\"bold\">paizapoh1.R</span></div><div class=\"highlight\"><pre><span class=\"c1\">#!/usr/bin/env Rscript</span>\nx<span class=\"o\">=</span><span class=\"kp\">scan</span><span class=\"p\">(</span><span class=\"s\">&quot;stdin&quot;</span><span class=\"p\">)</span>\nn<span class=\"o\">=</span>x<span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span>\nd<span class=\"o\">=</span>x<span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span>\nv<span class=\"o\">=</span><span class=\"kp\">sort</span><span class=\"p\">(</span>x<span class=\"p\">[</span><span class=\"m\">3</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"o\">+</span>n<span class=\"p\">)])</span>\nt<span class=\"o\">=</span>x<span class=\"p\">[(</span><span class=\"m\">3</span><span class=\"o\">+</span>n<span class=\"p\">)</span><span class=\"o\">:</span><span class=\"kp\">length</span><span class=\"p\">(</span>x<span class=\"p\">)]</span>\n<span class=\"kr\">for</span><span class=\"p\">(</span>i <span class=\"kr\">in</span> <span class=\"m\">1</span><span class=\"o\">:</span><span class=\"kp\">length</span><span class=\"p\">(</span><span class=\"kp\">t</span><span class=\"p\">)){</span>\n    m<span class=\"o\">=</span><span class=\"kp\">t</span><span class=\"p\">[</span>i<span class=\"p\">]</span>\n    idx<span class=\"o\">=</span>n<span class=\"m\">+1</span>\n    r<span class=\"o\">=</span><span class=\"m\">0</span>\n    j<span class=\"o\">=</span><span class=\"m\">1</span>\n    k<span class=\"o\">=</span>idx<span class=\"m\">-1</span>\n    <span class=\"kr\">while</span><span class=\"p\">(</span>r<span class=\"o\">&lt;</span>m<span class=\"o\">&amp;&amp;</span>j<span class=\"o\">&lt;</span>k<span class=\"o\">&amp;&amp;</span>v<span class=\"p\">[</span>j<span class=\"p\">]</span><span class=\"o\">+</span>v<span class=\"p\">[</span>j<span class=\"m\">+1</span><span class=\"p\">]</span><span class=\"o\">&lt;=</span>m<span class=\"p\">){</span>\n        <span class=\"kr\">while</span><span class=\"p\">(</span>v<span class=\"p\">[</span>j<span class=\"p\">]</span><span class=\"o\">+</span>v<span class=\"p\">[</span>k<span class=\"p\">]</span><span class=\"o\">&gt;</span>m<span class=\"p\">)</span>k<span class=\"o\">=</span>k<span class=\"m\">-1</span>\n        <span class=\"kr\">if</span><span class=\"p\">(</span>r<span class=\"o\">&lt;</span>v<span class=\"p\">[</span>j<span class=\"p\">]</span><span class=\"o\">+</span>v<span class=\"p\">[</span>k<span class=\"p\">]){</span>\n            r<span class=\"o\">=</span>v<span class=\"p\">[</span>j<span class=\"p\">]</span><span class=\"o\">+</span>v<span class=\"p\">[</span>k<span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n        j<span class=\"o\">=</span>j<span class=\"m\">+1</span>\n    <span class=\"p\">}</span>\n    <span class=\"kp\">cat</span><span class=\"p\">(</span>r<span class=\"p\">)</span>\n    <span class=\"kp\">cat</span><span class=\"p\">(</span><span class=\"s\">&quot;\\n&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div></div><p>Bash<br>\n遅すぎて使い物になりませぬ。<br>\nsenpai-tasuketeによる計測ですら1分かかってます。<br>\nあとpaizaで謎のランタイムエラーになる。問い合わせ中。</p>\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"code-lang\"><span class=\"bold\">paizapoh1.sh</span></div><div class=\"highlight\"><pre><span class=\"c\">#!/bin/sh</span>\n<span class=\"c\">#set -e</span>\n<span class=\"c\">#https://gist.github.com/oliverdaff/6067071</span>\nbinary_search<span class=\"o\">(){</span>\n    <span class=\"nv\">TARGET</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\n    <span class=\"nv\">TO_SEARCH</span><span class=\"o\">=(</span><span class=\"k\">${</span><span class=\"nv\">v</span><span class=\"p\">[@]</span><span class=\"k\">}</span><span class=\"o\">)</span> <span class=\"c\">#(${@:2})</span>\n    <span class=\"nv\">LENGTH</span><span class=\"o\">=</span><span class=\"k\">${#</span><span class=\"nv\">TO_SEARCH</span><span class=\"p\">[@]</span><span class=\"k\">}</span>\n\n    <span class=\"nv\">RETURN</span><span class=\"o\">=</span><span class=\"nv\">$LENGTH</span>\n    <span class=\"nv\">START</span><span class=\"o\">=</span>0\n    <span class=\"nv\">END</span><span class=\"o\">=</span><span class=\"k\">$((</span>LENGTH <span class=\"o\">-</span> <span class=\"m\">1</span><span class=\"k\">))</span>\n    <span class=\"k\">while</span> <span class=\"o\">[[</span> <span class=\"nv\">$START</span> -le <span class=\"nv\">$END</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n        <span class=\"nv\">MIDDLE</span><span class=\"o\">=</span><span class=\"k\">$((</span><span class=\"o\">(</span>START <span class=\"o\">+</span> END<span class=\"o\">)/</span><span class=\"m\">2</span><span class=\"k\">))</span>\n        <span class=\"nv\">ITEM_AT_MIDDLE</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">TO_SEARCH</span><span class=\"p\">[MIDDLE]</span><span class=\"k\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"nv\">$ITEM_AT_MIDDLE</span> -le <span class=\"nv\">$TARGET</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n            <span class=\"nv\">START</span><span class=\"o\">=</span><span class=\"k\">$((</span>MIDDLE+1<span class=\"k\">))</span>\n        <span class=\"k\">else</span>\n            <span class=\"nv\">RETURN</span><span class=\"o\">=</span><span class=\"nv\">$END</span>\n            <span class=\"nv\">END</span><span class=\"o\">=</span><span class=\"k\">$((</span>MIDDLE-1<span class=\"k\">))</span>\n        <span class=\"k\">fi</span>\n    <span class=\"k\">done</span>\n    <span class=\"nb\">echo</span> <span class=\"nv\">$RETURN</span>\n<span class=\"o\">}</span>\n\n<span class=\"nb\">read </span>line\n<span class=\"nv\">a</span><span class=\"o\">=(</span><span class=\"nv\">$line</span><span class=\"o\">)</span>\n<span class=\"nv\">n</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">a</span><span class=\"p\">[0]</span><span class=\"k\">}</span>\n<span class=\"nv\">d</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">a</span><span class=\"p\">[1]</span><span class=\"k\">}</span>\n<span class=\"c\">#v=()</span>\n<span class=\"c\">#i=0</span>\n<span class=\"c\">#input n</span>\n<span class=\"c\">#while [ $i -ne $n ];do</span>\n<span class=\"c\">#   read line</span>\n<span class=\"c\">#   v=(&quot;${v[@]}&quot; $line)</span>\n<span class=\"c\">#   i=`expr $i + 1`</span>\n<span class=\"c\">#done</span>\n<span class=\"c\">#sort</span>\n<span class=\"nv\">orig_ifs</span><span class=\"o\">=</span><span class=\"nv\">$IFS</span>\n<span class=\"nv\">IFS</span><span class=\"o\">=</span><span class=\"s1\">$&#39;\\n&#39;</span>\n<span class=\"nv\">_v</span><span class=\"o\">=(</span><span class=\"k\">$(</span>cat<span class=\"k\">)</span><span class=\"o\">)</span>\n<span class=\"nv\">v</span><span class=\"o\">=(</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;${_v[*]:0:$n}&quot;</span> <span class=\"p\">|</span> sort -n<span class=\"k\">)</span><span class=\"o\">)</span>\n<span class=\"nv\">IFS</span><span class=\"o\">=</span><span class=\"nv\">$orig_ifs</span>\n<span class=\"nv\">t</span><span class=\"o\">=(</span><span class=\"s2\">&quot;${_v[@]:$n:$d}&quot;</span><span class=\"o\">)</span>\n<span class=\"nv\">i</span><span class=\"o\">=</span>0\n<span class=\"k\">while</span> <span class=\"o\">[</span> <span class=\"nv\">$i</span> -ne <span class=\"nv\">$d</span> <span class=\"o\">]</span><span class=\"p\">;</span><span class=\"k\">do</span>\n    <span class=\"nv\">m</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">t</span><span class=\"p\">[</span><span class=\"nv\">$i</span><span class=\"p\">]</span><span class=\"k\">}</span>\n    <span class=\"nv\">idx</span><span class=\"o\">=</span><span class=\"k\">$(</span>binary_search <span class=\"k\">$((</span>m-v<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span><span class=\"k\">)))</span>\n    <span class=\"nv\">r</span><span class=\"o\">=</span>0\n    <span class=\"nv\">j</span><span class=\"o\">=</span>0\n    <span class=\"nv\">k</span><span class=\"o\">=</span><span class=\"k\">$((</span>idx-1<span class=\"k\">))</span>\n    <span class=\"k\">while</span> <span class=\"o\">[</span> <span class=\"nv\">$r</span> -lt <span class=\"nv\">$m</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">[</span> <span class=\"nv\">$j</span> -lt <span class=\"nv\">$k</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">[</span> <span class=\"k\">$((</span>v<span class=\"o\">[</span>j<span class=\"o\">]+</span>v<span class=\"o\">[</span>j+1<span class=\"o\">]</span><span class=\"k\">))</span> -le <span class=\"nv\">$m</span> <span class=\"o\">]</span><span class=\"p\">;</span><span class=\"k\">do</span>\n        <span class=\"nv\">m_minus_vj</span><span class=\"o\">=</span><span class=\"k\">$((</span>m-v<span class=\"o\">[</span>j<span class=\"o\">]</span><span class=\"k\">))</span>\n        <span class=\"k\">while</span> <span class=\"o\">[</span> <span class=\"k\">${</span><span class=\"nv\">v</span><span class=\"p\">[k]</span><span class=\"k\">}</span> -gt <span class=\"nv\">$m_minus_vj</span> <span class=\"o\">]</span><span class=\"p\">;</span><span class=\"k\">do</span>\n            <span class=\"nv\">k</span><span class=\"o\">=</span><span class=\"k\">$((</span>k-1<span class=\"k\">))</span>\n        <span class=\"k\">done</span>\n        <span class=\"nv\">vj_minus_vk</span><span class=\"o\">=</span><span class=\"k\">$((</span>v<span class=\"o\">[</span>j<span class=\"o\">]+</span>v<span class=\"o\">[</span>k<span class=\"o\">]</span><span class=\"k\">))</span>\n        <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$r</span> -le <span class=\"nv\">$vj_minus_vk</span> <span class=\"o\">]</span><span class=\"p\">;</span><span class=\"k\">then</span>\n            <span class=\"nv\">r</span><span class=\"o\">=</span><span class=\"nv\">$vj_minus_vk</span>\n        <span class=\"k\">fi</span>\n        <span class=\"nv\">j</span><span class=\"o\">=</span><span class=\"k\">$((</span>j+1<span class=\"k\">))</span>\n    <span class=\"k\">done</span>\n    <span class=\"nb\">echo</span> <span class=\"nv\">$r</span>\n    <span class=\"nv\">i</span><span class=\"o\">=</span><span class=\"k\">$((</span>i+1<span class=\"k\">))</span>\n<span class=\"k\">done</span>\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 90211,
        "uuid": "353bcb727964cbc8d4ef",
        "user": {
            "id": 6000,
            "url_name": "daisy1754",
            "profile_image_url": "https://pbs.twimg.com/profile_images/378800000750223869/584e0010d73123cf3eb6a15f387d5a6b_normal.png"
        },
        "title": "Mac + IntelliJ 13でScalaのHello Worldまで",
        "created_at": "2014-07-09 14:43:20 +0900",
        "updated_at": "2014-07-09 15:22:27 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "IntelliJ",
                "url_name": "intellij",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/86ce6198a1ef4a3e5be6bf29893bff9bbda3fa4e/medium.jpg?1367911208",
                "versions": [
                    "13"
                ]
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/daisy1754/items/353bcb727964cbc8d4ef",
        "created_at_as_seconds": 1404884600,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "#### HomeBrewでscalaとsbtをインストール\n> brew install scala\n> brew install sbt\n\n#### IntelliJのscalaプラグインとsbtプラグインをインストール\nIntellij -> Preference -> plugins -> browse repositories\nscalaプラグインとsbtプラグインを入れて再起動\n\n#### HelloWorld実行\nIntellij -> Create new project -> Scala -> SBT -> Helloworldとか適当に名前を付ける\nProject SDKはJDKで良い?\n\n生成されたプロジェクトのsrc>main>scalaの上で右クリック (srcフォルダが生成されるまで少し時間がかかります)\nnew>scala classでHelloScalaというクラスを作って以下をコピペ\n\n```scala\nimport util.Properties\n\nobject HelloScala {\n  def main(args: Array[String]) :Unit = {\n    println(\"Hello, Scala!\")\n    println(Properties.versionString)\n  }\n}\n```\n\nHelloScalaを右クリック -> Runで実行\n",
        "body": "<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>HomeBrewでscalaとsbtをインストール\n      </h4>\n<blockquote>\n<p>brew install scala<br>\nbrew install sbt</p>\n</blockquote>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>IntelliJのscalaプラグインとsbtプラグインをインストール\n      </h4><p>Intellij -> Preference -> plugins -> browse repositories<br>\nscalaプラグインとsbtプラグインを入れて再起動</p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>HelloWorld実行\n      </h4><p>Intellij -> Create new project -> Scala -> SBT -> Helloworldとか適当に名前を付ける<br>\nProject SDKはJDKで良い?</p>\n<p>生成されたプロジェクトのsrc&gt;main&gt;scalaの上で右クリック (srcフォルダが生成されるまで少し時間がかかります)<br>\nnew&gt;scala classでHelloScalaというクラスを作って以下をコピペ</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">util.Properties</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">HelloScala</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">:</span><span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Hello, Scala!&quot;</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Properties</span><span class=\"o\">.</span><span class=\"n\">versionString</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>HelloScalaを右クリック -> Runで実行</p>\n",
        "stock_users": [
            "corocorococoro",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 89954,
        "uuid": "af5a5159bbb2bb0bb3eb",
        "user": {
            "id": 39243,
            "url_name": "FumiyasuSumiya",
            "profile_image_url": "https://pbs.twimg.com/profile_images/442337376396783616/qy_x6la8_normal.jpeg"
        },
        "title": "playframework 国際化",
        "created_at": "2014-07-09 00:23:10 +0900",
        "updated_at": "2014-07-09 00:23:10 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": [
                    "2.2"
                ]
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/FumiyasuSumiya/items/af5a5159bbb2bb0bb3eb",
        "created_at_as_seconds": 1404832990,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "例えば日本語、英語に対応したい時。\n# application.conf\napplication.confにjaを追加する。\n\n```scala:application.conf\napplication.langs=\"en,ja\"\n```\n# messages.ja\nconf配下に messages.ja という名前のファイルを用意する。\n\n```scala:messages.ja\n# --- Application\napplication.description=国際化(≧∇≦)/\n```\n\n# xxx.scala.html\nあとは国際化したい場所で使うだけ。\n\n```scala:xxx.scala.html\n@import play.api.i18n.Messages\n@main(\"Welcome to XXX\") {\n\n    <div class=\"well\">\n        <h1>XXX</h1>\n        @Messages(\"application.description\")\n    </div>\n        \n}\n\n```\n",
        "body": "<p>例えば日本語、英語に対応したい時。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>application.conf\n      </h1><p>application.confにjaを追加する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">application.conf</span></div><div class=\"highlight\"><pre><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">langs</span><span class=\"o\">=</span><span class=\"s\">&quot;en,ja&quot;</span>\n</pre></div></div><h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>messages.ja\n      </h1><p>conf配下に messages.ja という名前のファイルを用意する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">messages.ja</span></div><div class=\"highlight\"><pre><span class=\"k\">#</span> <span class=\"o\">---</span> <span class=\"nc\">Application</span>\n<span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"n\">国際化</span><span class=\"o\">(≧∇≦)/</span>\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>xxx.scala.html\n      </h1><p>あとは国際化したい場所で使うだけ。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">xxx.scala.html</span></div><div class=\"highlight\"><pre><span class=\"nd\">@import</span> <span class=\"n\">play</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">i18n</span><span class=\"o\">.</span><span class=\"nc\">Messages</span>\n<span class=\"nd\">@main</span><span class=\"o\">(</span><span class=\"s\">&quot;Welcome to XXX&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"o\">&lt;</span><span class=\"n\">div</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;well&quot;</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"nc\">XXX</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span>\n        <span class=\"nd\">@Messages</span><span class=\"o\">(</span><span class=\"s\">&quot;application.description&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "akokubu",
            "Reds",
            "LightSpeedC",
            "kasumani",
            "akmiyoshi",
            "takehiro_t59"
        ]
    },
    {
        "id": 88950,
        "uuid": "71dc83dd5e746424a46f",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "[Scala]Tupleでまさかのプチハマり",
        "created_at": "2014-07-07 12:14:16 +0900",
        "updated_at": "2014-07-07 13:02:17 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/71dc83dd5e746424a46f",
        "created_at_as_seconds": 1404702856,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# はじめに\n\nTuple3を受け取るListBufferを宣言してTuple3インスタンスを追加するという、このなんでもないコード、まさかのコンパイルエラーになった。\n\n```scala\nval l = ListBuffer.empty[(Int, Int, Int)]\nl += (1, 2, 3)\n```\n\nコンパイルエラー結果は以下。\n\n```\nMain.scala:3: error: type mismatch;\n found   : Int(1)\n required: (Int, Int, Int)\n  l += (1, 2, 3)\n        ^\nMain.scala:3: error: type mismatch;\n found   : Int(2)\n required: (Int, Int, Int)\n  l += (1, 2, 3)\n           ^\nMain.scala:3: error: type mismatch;\n found   : Int(3)\n required: (Int, Int, Int)\n  l += (1, 2, 3)\n```\n\n# 原因\n\nListBufferの[Scaladoc](http://www.scala-lang.org/api/current/index.html#scala.collection.mutable.ListBuffer)を読むと、+=は２つのオーバーロードメソッドを持つことが分かる。\n\n```\ndef +=(x: A): ListBuffer.this.type\n```\n\nと\n\n```\ndef +=(elem1: A, elem2: A, elems: A*): ListBuffer.this.type\n```\n\nだ。\n\nこのコンパイルエラーは２番目の可変長引数を取る方として実行されてしまっている。\nつまり、冒頭のコードはこのように解釈されているため、型エラーとなる。\n\n```scala\nl.+=(1,2,3)\n```\n\n# 解決案\n曖昧さを除去して明示的に書いてやればよい。\n\n## 解決案１\nメソッド引数としてのカッコとTupleを表すカッコの２つ書くことで中身がTupleであることを明らかにする。\n\n```scala\nval l = ListBuffer.empty[(Int, Int, Int)]\nl += ((1, 2, 3))\n```\n\n## 解決案２\nTuple3って明示的に宣言する。\n\n```scala\nval l = ListBuffer.empty[(Int, Int, Int)]\nl += Tuple3(1, 2, 3)\n```\n\n## 解決案３\n一度変数に取ることで曖昧さを無くす。\n\n```scala\nval l = ListBuffer.empty[(Int, Int, Int)]\nval t = (1, 2, 3)\nl += t\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>Tuple3を受け取るListBufferを宣言してTuple3インスタンスを追加するという、このなんでもないコード、まさかのコンパイルエラーになった。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">l</span> <span class=\"k\">=</span> <span class=\"nc\">ListBuffer</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">Int</span>, <span class=\"kt\">Int</span><span class=\"o\">)]</span>\n<span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</pre></div></div><p>コンパイルエラー結果は以下。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>Main.scala:3: error: type mismatch;\n found   : Int(1)\n required: (Int, Int, Int)\n  l += (1, 2, 3)\n        ^\nMain.scala:3: error: type mismatch;\n found   : Int(2)\n required: (Int, Int, Int)\n  l += (1, 2, 3)\n           ^\nMain.scala:3: error: type mismatch;\n found   : Int(3)\n required: (Int, Int, Int)\n  l += (1, 2, 3)\n</pre></div></div><h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>原因\n      </h1><p>ListBufferの<a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.mutable.ListBuffer\" title=\"\" target=\"_blank\">Scaladoc</a>を読むと、+=は２つのオーバーロードメソッドを持つことが分かる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>def +=(x: A): ListBuffer.this.type\n</pre></div></div><p>と</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>def +=(elem1: A, elem2: A, elems: A*): ListBuffer.this.type\n</pre></div></div><p>だ。</p>\n<p>このコンパイルエラーは２番目の可変長引数を取る方として実行されてしまっている。<br>\nつまり、冒頭のコードはこのように解釈されているため、型エラーとなる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">l</span><span class=\"o\">.+=(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>解決案\n      </h1><p>曖昧さを除去して明示的に書いてやればよい。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>解決案１\n      </h2><p>メソッド引数としてのカッコとTupleを表すカッコの２つ書くことで中身がTupleであることを明らかにする。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">l</span> <span class=\"k\">=</span> <span class=\"nc\">ListBuffer</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">Int</span>, <span class=\"kt\">Int</span><span class=\"o\">)]</span>\n<span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>解決案２\n      </h2><p>Tuple3って明示的に宣言する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">l</span> <span class=\"k\">=</span> <span class=\"nc\">ListBuffer</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">Int</span>, <span class=\"kt\">Int</span><span class=\"o\">)]</span>\n<span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"nc\">Tuple3</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>解決案３\n      </h2><p>一度変数に取ることで曖昧さを無くす。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">l</span> <span class=\"k\">=</span> <span class=\"nc\">ListBuffer</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">Int</span>, <span class=\"kt\">Int</span><span class=\"o\">)]</span>\n<span class=\"k\">val</span> <span class=\"n\">t</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"n\">t</span>\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds",
            "Noboruhi",
            "JunSuzukiJapan@github"
        ]
    },
    {
        "id": 87767,
        "uuid": "aef85c8231ef1c4a387c",
        "user": {
            "id": 46349,
            "url_name": "snvx",
            "profile_image_url": "https://avatars.githubusercontent.com/u/7327867?"
        },
        "title": "IntelliJ IDEA 13に標準で入っているコードテンプレート一覧",
        "created_at": "2014-07-03 17:47:37 +0900",
        "updated_at": "2014-07-03 17:50:48 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "IntelliJ",
                "url_name": "intellij",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/86ce6198a1ef4a3e5be6bf29893bff9bbda3fa4e/medium.jpg?1367911208",
                "versions": []
            },
            {
                "name": "Java",
                "url_name": "java",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/fd27fd2571b0f0c64a7fd38b62bfe670f4680e4e/medium.jpg?1387959312",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Groovy",
                "url_name": "groovy",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/4e19a0be49d1f319a6504116d90570f878262afd/medium.jpg?1364839430",
                "versions": []
            }
        ],
        "stock_count": 7,
        "comment_count": 0,
        "url": "http://qiita.com/snvx/items/aef85c8231ef1c4a387c",
        "created_at_as_seconds": 1404377257,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "#はじめに\nIntelliJ IDEAに標準搭載のテンプレートをまとめてみました。\nテンプレートは、設定のLive Templatesから編集することができます。\n・HTML、XML、XSLのテンプレートは載せていません。\n\n#テンプレートの説明\n＄と＄で挟まれた部分はユーザーが入力する部分です。\n`$END$`だけは、自動補完のあとカーソルがendの部分に来ます。\n\n#Java\n##修飾子\nここのテンプレートは単語の頭文字をとったものが多いです。\n###psf\n```java\npublic static final\n```\n\n###psfi\n```java\npublic static final int \n```\n\n###psfs\n```java\npublic static final String \n```\n\n###St\n修飾子ではないですが一応入れときます\n\n```java\nString\n```\n\n###thr\n```java\nthrow new \n```\n\n##output文\n###serr\n_エラーの文字列を出力します_\n\n```java\nSystem.err.println(\"$END$\");\n```\n\n###souf\n_フォーマットされた文字列を出力します_\n\n```java\nSystem.out.printf(\"$END$\");\n```\n\n###sout\n_文字列を出力します_\n\n```java\nSystem.out.println($END$);\n```\n\n###soutm\n_現在のクラス名とメソッド名を出力します_\n\n```java\nSystem.out.println(\"$CLASS_NAME$.$METHOD_NAME$\");\n```\n\n###soutp\n_メソッドのパラメータの名前と値を出力します_\n\n```java\nSystem.out.println($FORMAT$);\n```\n\n###soutv\n_値を出力します_\n\n```java\nSystem.out.println(\"$EXPR_COPY$ = \" + $EXPR$);\n```\n\n##if文\n###ifn\n_nullの時の判定_\n\n```java\nif ($VAR$ == null) {\n$END$\n}\n```\n\n###inn\n_nullでない時の判定_\n\n```java\nif ($VAR$ != null) {\n$END$\n}\n```\n\n###inst\n_instanceof演算子とダウンキャストのオブジェクトタイプをチェックします_\n\n```java\nif ($EXPR$ instanceof $TYPE$) {\n  $TYPE$ $VAR1$ = ($TYPE$)$EXPR$;\n  $END$\n}\n```\n\n###lazy\n_初期化処理_\n\n```java\nif ($VAR$ == null) {\n  $VAR$ = new $TYPE$($END$);\n}\n```\n##for,while文\n###fori\n_for文のテンプレート_\n\n```java\nfor(int $INDEX$ = 0; $INDEX$ < $LIMIT$; $INDEX$++) {\n  $END$\n}\n```\n\n###itar\n_arrayの要素を繰り返し処理するためのテンプレート_\n\n```java\nfor(int $INDEX$ = 0; $INDEX$ < $ARRAY$.length; $INDEX$++) {\n  $ELEMENT_TYPE$ $VAR$ = $ARRAY$[$INDEX$];\n  $END$\n}\n```\n\n###itco\n_java.util.Collectionの要素を繰り返し処理するためのテンプレート_\n\n```java\nfor($ITER_TYPE$ $ITER$ = $COLLECTION$.iterator(); $ITER$.hasNext(); ) {\n  $ELEMENT_TYPE$ $VAR$ =$CAST$ $ITER$.next();\n  $END$\n}\n```\n\n###iten\n_java.util.Enumerationの繰り返し処理のテンプレート_\n\n```java\nwhile($ENUM$.hasMoreElements()){\n  $TYPE$ $VAR$ = $CAST$ $ENUM$.nextElement();\n  $END$\n}\n```\n\n###iter\n_Iterate Iterable | Array in J2SDK 5.0 syntax_\n\n```java\nfor ($ELEMENT_TYPE$ $VAR$ : $ITERABLE_TYPE$) {\n  $END$\n}\n```\n\n###itit\n_java.util.Iteratorの繰り返し処理のテンプレート_\n\n```java\nwhile($ITER$.hasNext()){\n  $TYPE$ $VAR$ = $CAST$ $ITER$.next();\n  $END$\n}\n```\n\n###itli\n_java.util.Listの要素の繰り返し処理のテンプレート_\n\n```java\nfor (int $INDEX$ = 0; $INDEX$ < $LIST$.size(); $INDEX$++) {\n  $ELEMENT_TYPE$ $VAR$ = $CAST$ $LIST$.get($INDEX$);\n  $END$\n}\n```\n\n###ittok\n_文字列からトークンを生成する繰り返し処理のテンプレート_\n\n```java\nfor (java.util.StringTokenizer $TOKENIZER$ = new java.util.StringTokenizer($STRING$); $TOKENIZER$.hasMoreTokens(); ) {\n    String $VAR$ = $TOKENIZER_COPY$.nextToken();\n    $END$\n}\n```\n\n###itve\n_java.util.Vectorの要素を繰り返し処理するためのテンプレート_\n\n```java\nfor(int $INDEX$ = 0; $INDEX$ < $VECTOR$.size(); $INDEX$++) {\n  $ELEMENT_TYPE$ $VAR$ = $CAST$ $VECTOR$.elementAt($INDEX$);\n  $END$\n}\n```\n\n###ritar\n_逆の順序で配列の要素を繰り返し処理するためのテンプレート_\n\n```java\nfor(int $INDEX$ = $ARRAY$.length - 1; $INDEX$ >= 0; $INDEX$--) {\n  $ELEMENT_TYPE$ $VAR$ = $ARRAY$[$INDEX$];\n  $END$\n}\n```\n\n##その他\n###geti\n_getInstanceメソッドのテンプレート_\n\n```java\npublic static $CLASS_NAME$ getInstance() {\n  return $VALUE$;\n}\n```\n\n###lst\n_配列の最後の要素を取り出します_\n\n```java\n$ARRAY$[$ARRAY$.length - 1]\n```\n\n###mn\n_変数のどちらか小さな方の値を設定します_\n\n```java\n$VAR$ = Math.min($VAR$, $END$);\n```\n\n###mx\n_変数のどちらか大きな方の値を設定します_\n\n```java\n$VAR$ = Math.max($VAR$, $END$);\n```\n\n###psvm\n_mainメソッドのテンプレート_\n\n```java\npublic static void main(String[] args){\n  $END$\n}\n```\n\n###toar\n_java.util.Collectionの配列の記憶要素のテンプレート_\n\n```java\n$COLLECTION$.toArray(new $COMPONENT_TYPE$[$COLLECTION$.size()])$END$\n```\n\n#Scala\n###itr\n_scala foreachのテンプレート_\n\n```scala\nfor ($NAME$ <- $FOR$ $GUARD$) {\n  $END$\n  }\n```\n\n###itry\n_scala foreachのテンプレート_\n\n```scala\nfor ($NAME$ <- $FOR$ $GUARD$) yield {\n  $END$\n  }\n```\n\n###main\n_mainメソッドのテンプレート_\n\n```scala\ndef main(args: Array[String]){\n  $END$\n}\n```\n\n###opt\n_オプションの種類を一致させるためのテンプレート_\n\n```scala\n$OPTION$ match {\n  case Some($NAME$) => $END$\n  case None =>\n}\n```\n\n###priv\n_式を出力するためのテンプレート_\n\n```scala\nprintln(\"$EXPR_COPY$ = \" + $EXPR$)\n```\n\n###T\n_`<tag></tag>`で囲みます_\n\n```scala\n<$TAG$>$SELECTION$</$TAGNAME$>\n```\n\n#Groovy\n###serr\n_エラーの文字列を出力します_\n\n```groovy\nSystem.err.println(\"$END$\")\n```\n\n###souf\n_フォーマットされた文字列を出力します_\n\n```groovy\nprintf \"$END$\"\n```\n\n###sout\n_文字列を出力します_\n\n```groovy\nprintln $END$\n```\n\n###soutm\n_現在のクラス名とメソッド名を出力します_\n\n```groovy\n println \"$CLASS_NAME$.$METHOD_NAME$\"\n```\n\n###soutp\n_メソッドのパラメータの名前と値を出力します_\n\n```groovy\nprintln \"$FORMAT$\"\n```\n\n###soutv\n_値を出力します_\n\n```groovy\nprintln \"$EXPR_COPY$ = $DOLLAR$$EXPR$\"\n```\n\n#Maven\n###dep\n_依存関係のテンプレート_\n\n```xml\n<dependency>\n   <groupId>$GROUP$</groupId>\n   <artifactId>$ARTIFACT$</artifactId>\n   <version>$VERSION$</version>\n</dependency>\n```\n\n###pl\n_プラグインのテンプレート_\n\n```xml\n<plugin>\n   <groupId>$GROUP$</groupId>\n   <artifactId>$ARTIFACT$</artifactId>\n   <version>$VERSION$</version>\n</plugin>\n```\n\n###repo\n_リポジトリのテンプレート_\n\n```xml\n<repository>\n  <id>$ID$</id>\n  <name>$NAME$</name>\n  <url>$URL$</url>\n</repository>\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>IntelliJ IDEAに標準搭載のテンプレートをまとめてみました。<br>\nテンプレートは、設定のLive Templatesから編集することができます。<br>\n・HTML、XML、XSLのテンプレートは載せていません。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>テンプレートの説明\n      </h1><p>＄と＄で挟まれた部分はユーザーが入力する部分です。<br>\n<code>$END$</code>だけは、自動補完のあとカーソルがendの部分に来ます。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Java\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>修飾子\n      </h2><p>ここのテンプレートは単語の頭文字をとったものが多いです。</p>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>psf\n      </h3><div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span>\n</pre></div></div><h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>psfi\n      </h3><div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> \n</pre></div></div><h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>psfs\n      </h3><div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> \n</pre></div></div><h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>St\n      </h3><p>修飾子ではないですが一応入れときます</p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">String</span>\n</pre></div></div><h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>thr\n      </h3><div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">throw</span> <span class=\"k\">new</span> \n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>output文\n      </h2><h3>\n        <span id=\"3-6\" class=\"fragment\"></span>\n        <a href=\"#3-6\"><i class=\"fa fa-link\"></i></a>serr\n      </h3><p><em>エラーの文字列を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;$END$&quot;</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-7\" class=\"fragment\"></span>\n        <a href=\"#3-7\"><i class=\"fa fa-link\"></i></a>souf\n      </h3><p><em>フォーマットされた文字列を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">&quot;$END$&quot;</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-8\" class=\"fragment\"></span>\n        <a href=\"#3-8\"><i class=\"fa fa-link\"></i></a>sout\n      </h3><p><em>文字列を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">$END$</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-9\" class=\"fragment\"></span>\n        <a href=\"#3-9\"><i class=\"fa fa-link\"></i></a>soutm\n      </h3><p><em>現在のクラス名とメソッド名を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;$CLASS_NAME$.$METHOD_NAME$&quot;</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-10\" class=\"fragment\"></span>\n        <a href=\"#3-10\"><i class=\"fa fa-link\"></i></a>soutp\n      </h3><p><em>メソッドのパラメータの名前と値を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">$FORMAT$</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-11\" class=\"fragment\"></span>\n        <a href=\"#3-11\"><i class=\"fa fa-link\"></i></a>soutv\n      </h3><p><em>値を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;$EXPR_COPY$ = &quot;</span> <span class=\"o\">+</span> <span class=\"n\">$EXPR$</span><span class=\"o\">);</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>if文\n      </h2><h3>\n        <span id=\"3-12\" class=\"fragment\"></span>\n        <a href=\"#3-12\"><i class=\"fa fa-link\"></i></a>ifn\n      </h3><p><em>nullの時の判定</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">$VAR$</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-13\" class=\"fragment\"></span>\n        <a href=\"#3-13\"><i class=\"fa fa-link\"></i></a>inn\n      </h3><p><em>nullでない時の判定</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">$VAR$</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-14\" class=\"fragment\"></span>\n        <a href=\"#3-14\"><i class=\"fa fa-link\"></i></a>inst\n      </h3><p><em>instanceof演算子とダウンキャストのオブジェクトタイプをチェックします</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">$EXPR$</span> <span class=\"k\">instanceof</span> <span class=\"n\">$TYPE$</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$TYPE$</span> <span class=\"n\">$VAR1$</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">$TYPE$</span><span class=\"o\">)</span><span class=\"n\">$EXPR$</span><span class=\"o\">;</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-15\" class=\"fragment\"></span>\n        <a href=\"#3-15\"><i class=\"fa fa-link\"></i></a>lazy\n      </h3><p><em>初期化処理</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">$VAR$</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">$TYPE$</span><span class=\"o\">(</span><span class=\"n\">$END$</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>for,while文\n      </h2><h3>\n        <span id=\"3-16\" class=\"fragment\"></span>\n        <a href=\"#3-16\"><i class=\"fa fa-link\"></i></a>fori\n      </h3><p><em>for文のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">&lt;</span> <span class=\"n\">$LIMIT$</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-17\" class=\"fragment\"></span>\n        <a href=\"#3-17\"><i class=\"fa fa-link\"></i></a>itar\n      </h3><p><em>arrayの要素を繰り返し処理するためのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">&lt;</span> <span class=\"n\">$ARRAY$</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$ELEMENT_TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$ARRAY$</span><span class=\"o\">[</span><span class=\"n\">$INDEX$</span><span class=\"o\">];</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-18\" class=\"fragment\"></span>\n        <a href=\"#3-18\"><i class=\"fa fa-link\"></i></a>itco\n      </h3><p><em>java.util.Collectionの要素を繰り返し処理するためのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">$ITER_TYPE$</span> <span class=\"n\">$ITER$</span> <span class=\"o\">=</span> <span class=\"n\">$COLLECTION$</span><span class=\"o\">.</span><span class=\"na\">iterator</span><span class=\"o\">();</span> <span class=\"n\">$ITER$</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">();</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$ELEMENT_TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span><span class=\"n\">$CAST$</span> <span class=\"n\">$ITER$</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">();</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-19\" class=\"fragment\"></span>\n        <a href=\"#3-19\"><i class=\"fa fa-link\"></i></a>iten\n      </h3><p><em>java.util.Enumerationの繰り返し処理のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">$ENUM$</span><span class=\"o\">.</span><span class=\"na\">hasMoreElements</span><span class=\"o\">()){</span>\n  <span class=\"n\">$TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$CAST$</span> <span class=\"n\">$ENUM$</span><span class=\"o\">.</span><span class=\"na\">nextElement</span><span class=\"o\">();</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-20\" class=\"fragment\"></span>\n        <a href=\"#3-20\"><i class=\"fa fa-link\"></i></a>iter\n      </h3><p><em>Iterate Iterable | Array in J2SDK 5.0 syntax</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">$ELEMENT_TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">:</span> <span class=\"n\">$ITERABLE_TYPE$</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-21\" class=\"fragment\"></span>\n        <a href=\"#3-21\"><i class=\"fa fa-link\"></i></a>itit\n      </h3><p><em>java.util.Iteratorの繰り返し処理のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">$ITER$</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">()){</span>\n  <span class=\"n\">$TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$CAST$</span> <span class=\"n\">$ITER$</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">();</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-22\" class=\"fragment\"></span>\n        <a href=\"#3-22\"><i class=\"fa fa-link\"></i></a>itli\n      </h3><p><em>java.util.Listの要素の繰り返し処理のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">&lt;</span> <span class=\"n\">$LIST$</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">$INDEX$</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$ELEMENT_TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$CAST$</span> <span class=\"n\">$LIST$</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">$INDEX$</span><span class=\"o\">);</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-23\" class=\"fragment\"></span>\n        <a href=\"#3-23\"><i class=\"fa fa-link\"></i></a>ittok\n      </h3><p><em>文字列からトークンを生成する繰り返し処理のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">util</span><span class=\"o\">.</span><span class=\"na\">StringTokenizer</span> <span class=\"n\">$TOKENIZER$</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">util</span><span class=\"o\">.</span><span class=\"na\">StringTokenizer</span><span class=\"o\">(</span><span class=\"n\">$STRING$</span><span class=\"o\">);</span> <span class=\"n\">$TOKENIZER$</span><span class=\"o\">.</span><span class=\"na\">hasMoreTokens</span><span class=\"o\">();</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$TOKENIZER_COPY$</span><span class=\"o\">.</span><span class=\"na\">nextToken</span><span class=\"o\">();</span>\n    <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-24\" class=\"fragment\"></span>\n        <a href=\"#3-24\"><i class=\"fa fa-link\"></i></a>itve\n      </h3><p><em>java.util.Vectorの要素を繰り返し処理するためのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">&lt;</span> <span class=\"n\">$VECTOR$</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">$INDEX$</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$ELEMENT_TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$CAST$</span> <span class=\"n\">$VECTOR$</span><span class=\"o\">.</span><span class=\"na\">elementAt</span><span class=\"o\">(</span><span class=\"n\">$INDEX$</span><span class=\"o\">);</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-25\" class=\"fragment\"></span>\n        <a href=\"#3-25\"><i class=\"fa fa-link\"></i></a>ritar\n      </h3><p><em>逆の順序で配列の要素を繰り返し処理するためのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">=</span> <span class=\"n\">$ARRAY$</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">$INDEX$</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n  <span class=\"n\">$ELEMENT_TYPE$</span> <span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">$ARRAY$</span><span class=\"o\">[</span><span class=\"n\">$INDEX$</span><span class=\"o\">];</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>その他\n      </h2><h3>\n        <span id=\"3-26\" class=\"fragment\"></span>\n        <a href=\"#3-26\"><i class=\"fa fa-link\"></i></a>geti\n      </h3><p><em>getInstanceメソッドのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">$CLASS_NAME$</span> <span class=\"nf\">getInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">$VALUE$</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-27\" class=\"fragment\"></span>\n        <a href=\"#3-27\"><i class=\"fa fa-link\"></i></a>lst\n      </h3><p><em>配列の最後の要素を取り出します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">$ARRAY$</span><span class=\"o\">[</span><span class=\"n\">$ARRAY$</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</pre></div></div><h3>\n        <span id=\"3-28\" class=\"fragment\"></span>\n        <a href=\"#3-28\"><i class=\"fa fa-link\"></i></a>mn\n      </h3><p><em>変数のどちらか小さな方の値を設定します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">$VAR$</span><span class=\"o\">,</span> <span class=\"n\">$END$</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-29\" class=\"fragment\"></span>\n        <a href=\"#3-29\"><i class=\"fa fa-link\"></i></a>mx\n      </h3><p><em>変数のどちらか大きな方の値を設定します</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">$VAR$</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">$VAR$</span><span class=\"o\">,</span> <span class=\"n\">$END$</span><span class=\"o\">);</span>\n</pre></div></div><h3>\n        <span id=\"3-30\" class=\"fragment\"></span>\n        <a href=\"#3-30\"><i class=\"fa fa-link\"></i></a>psvm\n      </h3><p><em>mainメソッドのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n  <span class=\"n\">$END$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-31\" class=\"fragment\"></span>\n        <a href=\"#3-31\"><i class=\"fa fa-link\"></i></a>toar\n      </h3><p><em>java.util.Collectionの配列の記憶要素のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"n\">$COLLECTION$</span><span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">$COMPONENT_TYPE$</span><span class=\"o\">[</span><span class=\"n\">$COLLECTION$</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()])</span><span class=\"n\">$END$</span>\n</pre></div></div><h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>Scala\n      </h1><h3>\n        <span id=\"3-32\" class=\"fragment\"></span>\n        <a href=\"#3-32\"><i class=\"fa fa-link\"></i></a>itr\n      </h3><p><em>scala foreachのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">$NAME</span><span class=\"n\">$</span> <span class=\"k\">&lt;-</span> <span class=\"nc\">$FOR</span><span class=\"n\">$</span> <span class=\"nc\">$GUARD</span><span class=\"n\">$</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"nc\">$END</span><span class=\"n\">$</span>\n  <span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-33\" class=\"fragment\"></span>\n        <a href=\"#3-33\"><i class=\"fa fa-link\"></i></a>itry\n      </h3><p><em>scala foreachのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">$NAME</span><span class=\"n\">$</span> <span class=\"k\">&lt;-</span> <span class=\"nc\">$FOR</span><span class=\"n\">$</span> <span class=\"nc\">$GUARD</span><span class=\"n\">$</span><span class=\"o\">)</span> <span class=\"k\">yield</span> <span class=\"o\">{</span>\n  <span class=\"nc\">$END</span><span class=\"n\">$</span>\n  <span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-34\" class=\"fragment\"></span>\n        <a href=\"#3-34\"><i class=\"fa fa-link\"></i></a>main\n      </h3><p><em>mainメソッドのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]){</span>\n  <span class=\"nc\">$END</span><span class=\"n\">$</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-35\" class=\"fragment\"></span>\n        <a href=\"#3-35\"><i class=\"fa fa-link\"></i></a>opt\n      </h3><p><em>オプションの種類を一致させるためのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"nc\">$OPTION</span><span class=\"n\">$</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"nc\">$NAME</span><span class=\"n\">$</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">$END</span><span class=\"n\">$</span>\n  <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span>\n<span class=\"o\">}</span>\n</pre></div></div><h3>\n        <span id=\"3-36\" class=\"fragment\"></span>\n        <a href=\"#3-36\"><i class=\"fa fa-link\"></i></a>priv\n      </h3><p><em>式を出力するためのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;$EXPR_COPY$ = &quot;</span> <span class=\"o\">+</span> <span class=\"nc\">$EXPR</span><span class=\"n\">$</span><span class=\"o\">)</span>\n</pre></div></div><h3>\n        <span id=\"3-37\" class=\"fragment\"></span>\n        <a href=\"#3-37\"><i class=\"fa fa-link\"></i></a>T\n      </h3><p><em><code>&lt;tag&gt;&lt;/tag&gt;</code>で囲みます</em></p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"o\">&lt;</span><span class=\"nc\">$TAG</span><span class=\"n\">$</span><span class=\"o\">&gt;</span><span class=\"nc\">$SELECTION</span><span class=\"n\">$</span><span class=\"o\">&lt;/</span><span class=\"nc\">$TAGNAME</span><span class=\"n\">$</span><span class=\"o\">&gt;</span>\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>Groovy\n      </h1><h3>\n        <span id=\"3-38\" class=\"fragment\"></span>\n        <a href=\"#3-38\"><i class=\"fa fa-link\"></i></a>serr\n      </h3><p><em>エラーの文字列を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s2\">&quot;$END$&quot;</span><span class=\"o\">)</span>\n</pre></div></div><h3>\n        <span id=\"3-39\" class=\"fragment\"></span>\n        <a href=\"#3-39\"><i class=\"fa fa-link\"></i></a>souf\n      </h3><p><em>フォーマットされた文字列を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre><span class=\"n\">printf</span> <span class=\"s2\">&quot;$END$&quot;</span>\n</pre></div></div><h3>\n        <span id=\"3-40\" class=\"fragment\"></span>\n        <a href=\"#3-40\"><i class=\"fa fa-link\"></i></a>sout\n      </h3><p><em>文字列を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre><span class=\"n\">println</span> <span class=\"n\">$END$</span>\n</pre></div></div><h3>\n        <span id=\"3-41\" class=\"fragment\"></span>\n        <a href=\"#3-41\"><i class=\"fa fa-link\"></i></a>soutm\n      </h3><p><em>現在のクラス名とメソッド名を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre> <span class=\"n\">println</span> <span class=\"s2\">&quot;$CLASS_NAME$.$METHOD_NAME$&quot;</span>\n</pre></div></div><h3>\n        <span id=\"3-42\" class=\"fragment\"></span>\n        <a href=\"#3-42\"><i class=\"fa fa-link\"></i></a>soutp\n      </h3><p><em>メソッドのパラメータの名前と値を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre><span class=\"n\">println</span> <span class=\"s2\">&quot;$FORMAT$&quot;</span>\n</pre></div></div><h3>\n        <span id=\"3-43\" class=\"fragment\"></span>\n        <a href=\"#3-43\"><i class=\"fa fa-link\"></i></a>soutv\n      </h3><p><em>値を出力します</em></p>\n<div class=\"code-frame\" data-lang=\"groovy\"><div class=\"highlight\"><pre><span class=\"n\">println</span> <span class=\"s2\">&quot;$EXPR_COPY$ = $DOLLAR$$EXPR$&quot;</span>\n</pre></div></div><h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>Maven\n      </h1><h3>\n        <span id=\"3-44\" class=\"fragment\"></span>\n        <a href=\"#3-44\"><i class=\"fa fa-link\"></i></a>dep\n      </h3><p><em>依存関係のテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;dependency&gt;</span>\n   <span class=\"nt\">&lt;groupId&gt;</span>$GROUP$<span class=\"nt\">&lt;/groupId&gt;</span>\n   <span class=\"nt\">&lt;artifactId&gt;</span>$ARTIFACT$<span class=\"nt\">&lt;/artifactId&gt;</span>\n   <span class=\"nt\">&lt;version&gt;</span>$VERSION$<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</pre></div></div><h3>\n        <span id=\"3-45\" class=\"fragment\"></span>\n        <a href=\"#3-45\"><i class=\"fa fa-link\"></i></a>pl\n      </h3><p><em>プラグインのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;plugin&gt;</span>\n   <span class=\"nt\">&lt;groupId&gt;</span>$GROUP$<span class=\"nt\">&lt;/groupId&gt;</span>\n   <span class=\"nt\">&lt;artifactId&gt;</span>$ARTIFACT$<span class=\"nt\">&lt;/artifactId&gt;</span>\n   <span class=\"nt\">&lt;version&gt;</span>$VERSION$<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div></div><h3>\n        <span id=\"3-46\" class=\"fragment\"></span>\n        <a href=\"#3-46\"><i class=\"fa fa-link\"></i></a>repo\n      </h3><p><em>リポジトリのテンプレート</em></p>\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;repository&gt;</span>\n  <span class=\"nt\">&lt;id&gt;</span>$ID$<span class=\"nt\">&lt;/id&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>$NAME$<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>$URL$<span class=\"nt\">&lt;/url&gt;</span>\n<span class=\"nt\">&lt;/repository&gt;</span>\n</pre></div></div>",
        "stock_users": [
            "reginn666",
            "FSMS",
            "hideoku",
            "kasumani",
            "Reds",
            "otchy",
            "RyotaMurohoshi"
        ]
    },
    {
        "id": 87100,
        "uuid": "efd05e7677badf2efcf8",
        "user": {
            "id": 40982,
            "url_name": "msano",
            "profile_image_url": "https://avatars.githubusercontent.com/u/5754743?"
        },
        "title": "猿でも分かるScala!：文字列の扱い ",
        "created_at": "2014-07-02 14:35:22 +0900",
        "updated_at": "2014-07-02 14:35:22 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/msano/items/efd05e7677badf2efcf8",
        "created_at_as_seconds": 1404279322,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "#はじめに\n何らかのプログラミング言語を利用すると、文字列の操作は数値の処理と同じくらい頻繁に現れます。そこで、[猿でも分かるScala!シリーズ](http://qiita.com/natsuisexy/items/59c2190561e08b85d1de)の本記事ではScala言語の文字列の基本操作を紹介します。紹介する内容は主に以下の項目になります。\n\n* Stringオブジェクトの生成\n* エスケープ文字\n* 生文字リテラル\n* 文字列の連結、検索、抽出、置換\n* 生文字リテラルと正規表現\n\nそれでははじめましょう！\n\n##Stringオブジェクトの生成\nScala言語で文字列を扱うとき、最も基本的な操作は文字列をオブジェクトとして生成することです。Stringオブジェクトを生成する場合はダブルクオーテーション記号`\"`で文字列を囲みます。例えばStringオブジェクト`text`を生成したい場合には次のようにします。\n\n```scala\nval str:String = \"test\"\n```\n\n####エスケープ文字\nScalaは他の言語と同じようにエスケープ文字を持ちます。エスケープ文字は次のようになっています。\n\n|識別|説明|使用例|\n|----|----|----|\n|\\n|改行コード(LF)|Hello\\n|\n|\\r|改行コード(CR)|Hello\\r|\n|\\t|タブ文字|\\tHello|\n|\\b|後退文字|Hello\\b\\b|\n|\\ \\ |バックスラッシュ|\\ \\ ([a-z]+\\ \\ ) |\n|\\'|シングルクオーテーション|\\'Hello\\'|\n|\\\"|ダブルクオーテーション|\\\"Hello\\\"|\n\n####生文字リテラル\n生文字リテラルはダブルクオーテーション記号を3つつなげた`\"\"\"`で囲んだ文字列です。生文字リテラルは\n\n* エスケープ文字を持たない。したがって`\\`をテキスト内で自由に使うことができます。\n* 改行コードをそもまま使うことが可能になり、複数行の文字列を記述できます。\n\n例えば生文字リテラルを次のように生成することができます。\n\n```scala\nval test = \"\"\"This is a pen.\nMy name is Tom.\nThank you \\\n\"\"\"\n```\n\n生文字リテラルは後で正規表現と一緒に再度紹介します。\n\n\n##文字列の連結：+\n文字列の結合には演算子`+`を使います。具体的に\"Thank\"と\"you\"を結合してみましょう。結合は次のように行います。\n\n```scala\nval str1 = \"Thank\"\nval str2 = \"you\"\nval str3 = str1 + str2\n```\n\nここでは\"Thank\"オブジェクトと\"you\"オブジェクトが生成され、その後でこれら2つのオブジェクトの連結処理が行われ新たな\"Thankyou\"オブジェクトが生成されています。ここで生成された変数には`val`が付いているので、生成されたStringオブジェクトは不変オブジェクトになります。したがって文字列`str1`や`str2`はそのままの状態で、新しい\"Thankyou\"オブジェクトが生成されています。\n\n####メソッドとしての+\n演算子`+`はStringオブジェクトの`+`メソッドでもあります。したがって次のようにも文字列結合処理を書くことが可能です。\n\n```scala\nval str4 = str1.+(str2)\n```\n\n##検索：indexOf\nStringの`indexOf`メソッドはあるStringの文字列の中に指定の文字が文字列の左から数えて何番目に存在するか、その位置を教えてくれるメソッドです。文字の位置は文字列の左端を0番目として、そこから何番目に存在しているのか表示されます。\n\n例えば\n\n```scala\nval index:Int = \"Thankyou\".indexOf(\"o\")\n```\nでは\"o\"の位置が6と表示されます。\n\n\n##抽出：indexOf, lastIndexOf, substring\n文字列を抽出するためにすでに紹介したindexOfに加えて、`lastIndexOf`と`substring`を紹介します。\n\nindexOfは左から指定の文字が存在するか調べるのに対して、lastIndexOfは右端から検索してインデックスを返します(インデックスは左端の0から数えられます)。例えば文字列\"2014-06-06\"の右側のハイフンのインデックスを調べます。\n\n```scala\nval index2:Int = \"2014-06-06\".lastIndexOf(\"-\")\n```\n\nこの処理でインデックスとして7が返ってきます。ちゃんと2番目の\"-\"のインデックスを取得出来ました。それでは次に2つのハイフンで挟まれている\"06\"を抽出してみましょう。これを実行するために`substring`メソッドを使います。substring(x,y)で __インデックスx__から __インデックスy-1__までの文字列を抽出します。実際にやってみましょう。\n\n```scala\nval index3:Int = \"2014-06-06\".substring(4+1, 7)\n```\n\n##置換：replace\n文字列の置換をするには`replace`メッソドを使います。例えば\"2014-06-07\"の\"06\"を\"08\"で置換することを考えます。これは次の処理で可能です。\n\n```scala\nval rep = \"2014-06-07\".replace(\"06\", \"08\")\n```\n\n注意点としては置換でヒットした文字は全て置き換えられてしまう点です。例えば\n\n```scala\nval rep2 = \"2014-06-06\".replace(\"06\", \"07\")\n```\n\nで置換した場合には帰ってくる結果が`2014-07-07`となります。\n\n\n##生文字リテラルと正規表現\nScalaで正規表現を使用するときに生文字リテラルが便利になってきます。例として2014-06-07から06を抽出する正規表現を考えてみましょう。正規表現は生文字リテラルを使って次のようになります。\n\n```scala\nval regex = \"\"\"\\d\\d\\d\\d-(\\d\\d)-\\d\\d\"\"\".r\n```\n\nここで\n\n* \\dは数字1文字を表しています。\n* \\d\\d\\d\\d-(\\d\\d)-\\d\\dは数字4つ続き、その後にハイフン、その後に数字2つ続きでこの2つを抽出、更にその後にハイフンと数字2つ続くという意味。「()」は抽出対象を意味しています。\n\n正規表現(regex)オブジェクトとは「.r」で生成されます。生文字リテラルを使うと通常の文字列の中でエスケープ文字として扱われるバックスラッシュ`\\`を気にすることなく正規表現を記述できます。\n\n定義した正規表現を使って\"2014-06-07\"から06を抽出して変数`x`に格納してみます。これは次のような処理で実行できます。\n\n```scala\nval regex(x) = \"2014-06-07\"\n```\n\nこれで変数xに06が格納されます。\n\n##まとめ\nここまでScalaで文字列を扱うための基本操作を紹介してきました。\n\nStringオブジェクトの生成方法やエスケープ文字は他の言語と似ていました。生文字リテラルでは、エスケープ文字を使わずに正規表現を記述したり、改行を含めて文字列を作ることが可能でした。文字列の結合、検索、抽出、置換も専用のメソッドが用意されていて、それぞれを組み合わせることで上手く文字列を抽出することが可能でした。\n\n正規表現と生文字リテラルの組み合わせは非常に便利です。活用することをおすすめします！\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>何らかのプログラミング言語を利用すると、文字列の操作は数値の処理と同じくらい頻繁に現れます。そこで、<a href=\"http://qiita.com/natsuisexy/items/59c2190561e08b85d1de\" title=\"\">猿でも分かるScala!シリーズ</a>の本記事ではScala言語の文字列の基本操作を紹介します。紹介する内容は主に以下の項目になります。</p>\n\n<ul>\n<li>Stringオブジェクトの生成</li>\n<li>エスケープ文字</li>\n<li>生文字リテラル</li>\n<li>文字列の連結、検索、抽出、置換</li>\n<li>生文字リテラルと正規表現</li>\n</ul>\n<p>それでははじめましょう！</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>Stringオブジェクトの生成\n      </h2><p>Scala言語で文字列を扱うとき、最も基本的な操作は文字列をオブジェクトとして生成することです。Stringオブジェクトを生成する場合はダブルクオーテーション記号<code>&quot;</code>で文字列を囲みます。例えばStringオブジェクト<code>text</code>を生成したい場合には次のようにします。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">str</span><span class=\"k\">:</span><span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">&quot;test&quot;</span>\n</pre></div></div><h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>エスケープ文字\n      </h4><p>Scalaは他の言語と同じようにエスケープ文字を持ちます。エスケープ文字は次のようになっています。</p>\n\n<table><thead>\n<tr>\n<th>識別</th>\n<th>説明</th>\n<th>使用例</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>\\n</td>\n<td>改行コード(LF)</td>\n<td>Hello\\n</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>改行コード(CR)</td>\n<td>Hello\\r</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>タブ文字</td>\n<td>\\tHello</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>後退文字</td>\n<td>Hello\\b\\b</td>\n</tr>\n<tr>\n<td>\\ \\</td>\n<td>バックスラッシュ</td>\n<td>\\ \\ ([a-z]+\\ \\ )</td>\n</tr>\n<tr>\n<td>\\&#39;</td>\n<td>シングルクオーテーション</td>\n<td>\\&#39;Hello\\&#39;</td>\n</tr>\n<tr>\n<td>\\&quot;</td>\n<td>ダブルクオーテーション</td>\n<td>\\&quot;Hello\\&quot;</td>\n</tr>\n</tbody></table>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>生文字リテラル\n      </h4><p>生文字リテラルはダブルクオーテーション記号を3つつなげた<code>&quot;&quot;&quot;</code>で囲んだ文字列です。生文字リテラルは</p>\n\n<ul>\n<li>エスケープ文字を持たない。したがって<code>\\</code>をテキスト内で自由に使うことができます。</li>\n<li>改行コードをそもまま使うことが可能になり、複数行の文字列を記述できます。</li>\n</ul>\n<p>例えば生文字リテラルを次のように生成することができます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">test</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;This is a pen.</span>\n<span class=\"s\">My name is Tom.</span>\n<span class=\"s\">Thank you \\</span>\n<span class=\"s\">&quot;&quot;&quot;</span>\n</pre></div></div><p>生文字リテラルは後で正規表現と一緒に再度紹介します。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>文字列の連結：+\n      </h2><p>文字列の結合には演算子<code>+</code>を使います。具体的に&quot;Thank&quot;と&quot;you&quot;を結合してみましょう。結合は次のように行います。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">str1</span> <span class=\"k\">=</span> <span class=\"s\">&quot;Thank&quot;</span>\n<span class=\"k\">val</span> <span class=\"n\">str2</span> <span class=\"k\">=</span> <span class=\"s\">&quot;you&quot;</span>\n<span class=\"k\">val</span> <span class=\"n\">str3</span> <span class=\"k\">=</span> <span class=\"n\">str1</span> <span class=\"o\">+</span> <span class=\"n\">str2</span>\n</pre></div></div><p>ここでは&quot;Thank&quot;オブジェクトと&quot;you&quot;オブジェクトが生成され、その後でこれら2つのオブジェクトの連結処理が行われ新たな&quot;Thankyou&quot;オブジェクトが生成されています。ここで生成された変数には<code>val</code>が付いているので、生成されたStringオブジェクトは不変オブジェクトになります。したがって文字列<code>str1</code>や<code>str2</code>はそのままの状態で、新しい&quot;Thankyou&quot;オブジェクトが生成されています。</p>\n<h4>\n        <span id=\"4-3\" class=\"fragment\"></span>\n        <a href=\"#4-3\"><i class=\"fa fa-link\"></i></a>メソッドとしての+\n      </h4><p>演算子<code>+</code>はStringオブジェクトの<code>+</code>メソッドでもあります。したがって次のようにも文字列結合処理を書くことが可能です。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">str4</span> <span class=\"k\">=</span> <span class=\"n\">str1</span><span class=\"o\">.+(</span><span class=\"n\">str2</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>検索：indexOf\n      </h2><p>Stringの<code>indexOf</code>メソッドはあるStringの文字列の中に指定の文字が文字列の左から数えて何番目に存在するか、その位置を教えてくれるメソッドです。文字の位置は文字列の左端を0番目として、そこから何番目に存在しているのか表示されます。</p>\n<p>例えば</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">index</span><span class=\"k\">:</span><span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Thankyou&quot;</span><span class=\"o\">.</span><span class=\"n\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;o&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>では&quot;o&quot;の位置が6と表示されます。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>抽出：indexOf, lastIndexOf, substring\n      </h2><p>文字列を抽出するためにすでに紹介したindexOfに加えて、<code>lastIndexOf</code>と<code>substring</code>を紹介します。</p>\n<p>indexOfは左から指定の文字が存在するか調べるのに対して、lastIndexOfは右端から検索してインデックスを返します(インデックスは左端の0から数えられます)。例えば文字列&quot;2014-06-06&quot;の右側のハイフンのインデックスを調べます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">index2</span><span class=\"k\">:</span><span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"s\">&quot;2014-06-06&quot;</span><span class=\"o\">.</span><span class=\"n\">lastIndexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>この処理でインデックスとして7が返ってきます。ちゃんと2番目の&quot;-&quot;のインデックスを取得出来ました。それでは次に2つのハイフンで挟まれている&quot;06&quot;を抽出してみましょう。これを実行するために<code>substring</code>メソッドを使います。substring(x,y)で <strong>インデックスx</strong>から <strong>インデックスy-1</strong>までの文字列を抽出します。実際にやってみましょう。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">index3</span><span class=\"k\">:</span><span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"s\">&quot;2014-06-06&quot;</span><span class=\"o\">.</span><span class=\"n\">substring</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>置換：replace\n      </h2><p>文字列の置換をするには<code>replace</code>メッソドを使います。例えば&quot;2014-06-07&quot;の&quot;06&quot;を&quot;08&quot;で置換することを考えます。これは次の処理で可能です。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">rep</span> <span class=\"k\">=</span> <span class=\"s\">&quot;2014-06-07&quot;</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;06&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;08&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>注意点としては置換でヒットした文字は全て置き換えられてしまう点です。例えば</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">rep2</span> <span class=\"k\">=</span> <span class=\"s\">&quot;2014-06-06&quot;</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;06&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;07&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>で置換した場合には帰ってくる結果が<code>2014-07-07</code>となります。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>生文字リテラルと正規表現\n      </h2><p>Scalaで正規表現を使用するときに生文字リテラルが便利になってきます。例として2014-06-07から06を抽出する正規表現を考えてみましょう。正規表現は生文字リテラルを使って次のようになります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">regex</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;\\d\\d\\d\\d-(\\d\\d)-\\d\\d&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n</pre></div></div><p>ここで</p>\n\n<ul>\n<li>\\dは数字1文字を表しています。</li>\n<li>\\d\\d\\d\\d-(\\d\\d)-\\d\\dは数字4つ続き、その後にハイフン、その後に数字2つ続きでこの2つを抽出、更にその後にハイフンと数字2つ続くという意味。「()」は抽出対象を意味しています。</li>\n</ul>\n<p>正規表現(regex)オブジェクトとは「.r」で生成されます。生文字リテラルを使うと通常の文字列の中でエスケープ文字として扱われるバックスラッシュ<code>\\</code>を気にすることなく正規表現を記述できます。</p>\n<p>定義した正規表現を使って&quot;2014-06-07&quot;から06を抽出して変数<code>x</code>に格納してみます。これは次のような処理で実行できます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">regex</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"s\">&quot;2014-06-07&quot;</span>\n</pre></div></div><p>これで変数xに06が格納されます。</p>\n<h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>まとめ\n      </h2><p>ここまでScalaで文字列を扱うための基本操作を紹介してきました。</p>\n<p>Stringオブジェクトの生成方法やエスケープ文字は他の言語と似ていました。生文字リテラルでは、エスケープ文字を使わずに正規表現を記述したり、改行を含めて文字列を作ることが可能でした。文字列の結合、検索、抽出、置換も専用のメソッドが用意されていて、それぞれを組み合わせることで上手く文字列を抽出することが可能でした。</p>\n<p>正規表現と生文字リテラルの組み合わせは非常に便利です。活用することをおすすめします！</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 87098,
        "uuid": "151a6402605df071a7de",
        "user": {
            "id": 40982,
            "url_name": "msano",
            "profile_image_url": "https://avatars.githubusercontent.com/u/5754743?"
        },
        "title": "猿でも分かるScala!：Scalaの型",
        "created_at": "2014-07-02 14:33:50 +0900",
        "updated_at": "2014-07-02 14:33:50 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/msano/items/151a6402605df071a7de",
        "created_at_as_seconds": 1404279230,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "#はじめに\n[猿でも分かるScala!シリーズ](http://qiita.com/natsuisexy/items/59c2190561e08b85d1de)として本記事ではScalaにおける型について基本的な事項を紹介していきます。紹介する項目は主に次のものです。\n\n* クラスとしての型\n* SymbolとStringの相違\n* BigDecimal\n* 数値と文字列の相互変更\n\nScalaでの型の扱いにはJavaと異なる部分があります。型がクラスとして扱われたり、BigDecimalの演算がJavaよりも直感的になったりする特徴があります。以下ではこのようなScalaの型に関する特徴を紹介します。\n\nでは早速始めましょう！\n\n\n##クラスとしての型\nScalaではJavaのプリミティブ型(int, double等)に相当する型は存在せず、全てクラスとなっています。Javaのプリミティブ型に相当する型は、Scalaの全ての親クラスであるAnyクラスを継承したAnyValクラスのサブクラスになっています。java.lang.Objectを親に持つ全ての Java オブジェクトは Anyクラスの子クラスであるAnyRef型として扱うことができます(ScalaではSymbol, String, BigInt, BigDecimalはAnyRefに所属します)。\n\nScalaの型にはどのようなものがあるのか確認してみましょう。下の表を見るとScalaの型はJavaとほとんど変わらないことがわかると思います(SymbolはScala特有です)。\n\n|型名|説明|例|デフォルト値|親クラス|\n|---|---|---|---|---|\n|Boolean|trueかfalse|true, false|false|AnyVal|\n|String|文字列, 同じ内容でも異なるインスタンスが存在|\"text\"|null|AnyRef|\n|Char|16ビット符号なしUnicode文字|'text'|'\\0'|AnyVal|\n|Symbol|文字列, 同じ内容ならインスタンスも等しい|'text, Symbol(\"text\")|null|AnyRef|\n|Byte|8ビット符号付き整数値|-128, 127|0|AnyVal|\n|Short|16ビット符号付き整数値|-32768, 32767|0|AnyVal|\n|Int|32ビット符号付き整数値|-2147483648, 2147483647|0|AnyVal|\n|Long|64ビット符号付き整数値|-2^63, 2^63-1|0|AnyVal|\n|Float|32ビットIEEE 745倍精度浮動小数点数|1.2F, 1.2e2f|0.0|AnyVal|\n|Double|64ビットIEEE 745倍精度浮動小数点数|1.2, 1D, 1.2e2|0.0|AnyVal|\n|BigInt|任意精度の整数|BigInt(10)|null|AnyRef|\n|BigDecimal|任意精度の固定小数|BigDecimal(10.54)|null|AnyRef|\n\nここでnビットは2^n種類の値を保存できることを示しています。例えば8ビット符号付き整数値のときは256個の整数を-128から127まで変数に保持できることをしましています。\n\nJavaとScalaでは変数の宣言や初期化の方法が異なっています。Javaの場合は変数を例えば`Int x = 0`のように初期化します。Scalaの場合に、何らかの数値を格納する変数xを宣言するとき\n\n`val または var x:型名`\n\nで行います。初期化をするときは例えば\n\n`val x:Int = 100`\n\nのようにします。\n\n変数の初期化でJavaと大きく異なる点は、Scalaが便利な __型推論__の機能を持ってることです。これによって型名を明記せず初期化をすることが可能です。例えば`val x = 100`と書くとxは __Int型__とされます。また`val x = 100.0`と書くと、少数点から空気を読んでxは __Double型__とされます。\n\n上記の表の「デフォルト値」というのは、 __varで変数を宣言__したときに「_」（アンダースコア）を指定した場合の初期値です。例えば\n\n```scala\nvar x:Int = _\n```\n\nの場合、変数が0で初期化されます。\n\n##SymbolとStringの相違\n文字列は同じ内容でもインスタンスとしては異なる場合があるのに対し、シンボルは __同じシンボルリテラルを複数書いても全く同一のSymbolオブジェクトを参照します__。例えば文字列として、\n\n```scala\nval str1 = new String(\"A\")\nval str2 = new String(\"A\")\n```\nと同じ\"A\"を持つstr1, str2を定義します。インスタンスとして同一か判定するために`eq`メソッドで`str1 eq str2`と書くと、`Boolean = false`と返ってきます。一方、Symbolで\n\n```scala\nval symb1 = Symbol(\"A\")\nval symb2 = Symbol(\"A\")\n```\nと定義し、`symb1 eq symb2`で比較しても`Boolean = true`となります。\n\n##BigDecimal\n\nBigDecimalは任意精度の固定小数点数です。10進法演算を行います。わかりやすく言うと、小数点以下も可能な限り丸めたりせず正確に表示します。\nBigDecimalの変数の生成は、例えば次のようになります。\n\n```scala\nval num = BigDecimal(200)\nval num2 = BigDecimal(1.005)\n```\n四則演算もInt型やDouble型の変数と同様に実行することができます。\n\n```scala\nnum + num2\nnum - num2\nnum * num2\nnum / num2\n```\n\n一方、Javaの場合はBigDecimalで処理されたある変数num1, num2の四則演算はScalaのように直感的ではありません。例えば和を計算するのに`num1.add(num1)`のように書きます。ScalaのBigDecimalは通常の四則演算と同じ感じで計算できるので便利です。\n\n\n有効数字の桁数指定や四捨五入、切り捨て、切り上げは次のように`setScale()`メソッドにより可能です。例えば`val num3 = num / num2`に対して小数点以下4桁を表示、5桁目を四捨五入、切り上げ、切り捨てするには上から順に次のような文になります。\n\n```scala\nval num3 = num3.setScale(4, scala.math.BigDecimal.RoundingMode.HALF_UP)\nval num4 = num3.setScale(4, scala.math.BigDecimal.RoundingMode.CEILING)\nval num5 = num3.setScale(4, scala.math.BigDecimal.RoundingMode.FLOOR)\n```\n\n##数値と文字列の相互変更\nデータの型をString型に変換するためには`toString()`メソッドを使って次のように簡単に書けます。\n\n```scala\nval str = x.toString\n```\n\n変数xの型はString以外のどの型でも可能です。\n\n今度は文字列から各データ型への変換をみてみます。String型のある変数が`val xStr`で定義されていたとします。このとき変数の型に合わせて変換は次のようになります。\n\n```scala\nval xBoolean = xStr.toBoolean\nval xChar = xStr.charAt(n)\nval xSymb = Symbol(xStr)\nval xByte = xStr.toByte\nval xShort = xStr.toShort\nval xInt = xStr.toInt\nval xLong = xStr.toLong\nval xFloat = xStr.toFloat\nval xDouble = xStr.toDouble\n```\nここで`charAt(n)`はxStrのCharシークエンスを左から数えてn-1番目をChar型にするという意味です。\n\n\n##まとめ\nここまでScalaの型について紹介してきました。Scalaの基本的な型の種類はJavaと同一ですが、型がクラスとして扱われる点がJavaとことなる点でした。また型はAnyクラスの子クラスであるAnyRefまたはAnyValに所属することも見てきました。BigDecimalはJavaよりも直感的に操作できることを紹介しました。Scalaでは文字列への変換が簡単にできる等の特徴も紹介してきました。\n\nScalaは非常に簡単に処理を実行できる言語なので、本章で紹介したような手短な操作をどんどん使ってコードを簡潔で読みやすいものにしたいですね！\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p><a href=\"http://qiita.com/natsuisexy/items/59c2190561e08b85d1de\" title=\"\">猿でも分かるScala!シリーズ</a>として本記事ではScalaにおける型について基本的な事項を紹介していきます。紹介する項目は主に次のものです。</p>\n\n<ul>\n<li>クラスとしての型</li>\n<li>SymbolとStringの相違</li>\n<li>BigDecimal</li>\n<li>数値と文字列の相互変更</li>\n</ul>\n<p>Scalaでの型の扱いにはJavaと異なる部分があります。型がクラスとして扱われたり、BigDecimalの演算がJavaよりも直感的になったりする特徴があります。以下ではこのようなScalaの型に関する特徴を紹介します。</p>\n<p>では早速始めましょう！</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>クラスとしての型\n      </h2><p>ScalaではJavaのプリミティブ型(int, double等)に相当する型は存在せず、全てクラスとなっています。Javaのプリミティブ型に相当する型は、Scalaの全ての親クラスであるAnyクラスを継承したAnyValクラスのサブクラスになっています。java.lang.Objectを親に持つ全ての Java オブジェクトは Anyクラスの子クラスであるAnyRef型として扱うことができます(ScalaではSymbol, String, BigInt, BigDecimalはAnyRefに所属します)。</p>\n<p>Scalaの型にはどのようなものがあるのか確認してみましょう。下の表を見るとScalaの型はJavaとほとんど変わらないことがわかると思います(SymbolはScala特有です)。</p>\n\n<table><thead>\n<tr>\n<th>型名</th>\n<th>説明</th>\n<th>例</th>\n<th>デフォルト値</th>\n<th>親クラス</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>Boolean</td>\n<td>trueかfalse</td>\n<td>true, false</td>\n<td>false</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>String</td>\n<td>文字列, 同じ内容でも異なるインスタンスが存在</td>\n<td>&quot;text&quot;</td>\n<td>null</td>\n<td>AnyRef</td>\n</tr>\n<tr>\n<td>Char</td>\n<td>16ビット符号なしUnicode文字</td>\n<td>&#39;text&#39;</td>\n<td>&#39;\\0&#39;</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>文字列, 同じ内容ならインスタンスも等しい</td>\n<td>&#39;text, Symbol(&quot;text&quot;)</td>\n<td>null</td>\n<td>AnyRef</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>8ビット符号付き整数値</td>\n<td>-128, 127</td>\n<td>0</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>16ビット符号付き整数値</td>\n<td>-32768, 32767</td>\n<td>0</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>32ビット符号付き整数値</td>\n<td>-2147483648, 2147483647</td>\n<td>0</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>64ビット符号付き整数値</td>\n<td>-2^63, 2^63-1</td>\n<td>0</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>32ビットIEEE 745倍精度浮動小数点数</td>\n<td>1.2F, 1.2e2f</td>\n<td>0.0</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>64ビットIEEE 745倍精度浮動小数点数</td>\n<td>1.2, 1D, 1.2e2</td>\n<td>0.0</td>\n<td>AnyVal</td>\n</tr>\n<tr>\n<td>BigInt</td>\n<td>任意精度の整数</td>\n<td>BigInt(10)</td>\n<td>null</td>\n<td>AnyRef</td>\n</tr>\n<tr>\n<td>BigDecimal</td>\n<td>任意精度の固定小数</td>\n<td>BigDecimal(10.54)</td>\n<td>null</td>\n<td>AnyRef</td>\n</tr>\n</tbody></table>\n<p>ここでnビットは2^n種類の値を保存できることを示しています。例えば8ビット符号付き整数値のときは256個の整数を-128から127まで変数に保持できることをしましています。</p>\n<p>JavaとScalaでは変数の宣言や初期化の方法が異なっています。Javaの場合は変数を例えば<code>Int x = 0</code>のように初期化します。Scalaの場合に、何らかの数値を格納する変数xを宣言するとき</p>\n<p><code>val または var x:型名</code></p>\n<p>で行います。初期化をするときは例えば</p>\n<p><code>val x:Int = 100</code></p>\n<p>のようにします。</p>\n<p>変数の初期化でJavaと大きく異なる点は、Scalaが便利な <strong>型推論</strong>の機能を持ってることです。これによって型名を明記せず初期化をすることが可能です。例えば<code>val x = 100</code>と書くとxは <strong>Int型</strong>とされます。また<code>val x = 100.0</code>と書くと、少数点から空気を読んでxは <strong>Double型</strong>とされます。</p>\n<p>上記の表の「デフォルト値」というのは、 <strong>varで変数を宣言</strong>したときに「_」（アンダースコア）を指定した場合の初期値です。例えば</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">var</span> <span class=\"n\">x</span><span class=\"k\">:</span><span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"k\">_</span>\n</pre></div></div><p>の場合、変数が0で初期化されます。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>SymbolとStringの相違\n      </h2><p>文字列は同じ内容でもインスタンスとしては異なる場合があるのに対し、シンボルは <strong>同じシンボルリテラルを複数書いても全く同一のSymbolオブジェクトを参照します</strong>。例えば文字列として、</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">str1</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">String</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">str2</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">String</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>と同じ&quot;A&quot;を持つstr1, str2を定義します。インスタンスとして同一か判定するために<code>eq</code>メソッドで<code>str1 eq str2</code>と書くと、<code>Boolean = false</code>と返ってきます。一方、Symbolで</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">symb1</span> <span class=\"k\">=</span> <span class=\"nc\">Symbol</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">symb2</span> <span class=\"k\">=</span> <span class=\"nc\">Symbol</span><span class=\"o\">(</span><span class=\"s\">&quot;A&quot;</span><span class=\"o\">)</span>\n</pre></div></div><p>と定義し、<code>symb1 eq symb2</code>で比較しても<code>Boolean = true</code>となります。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>BigDecimal\n      </h2><p>BigDecimalは任意精度の固定小数点数です。10進法演算を行います。わかりやすく言うと、小数点以下も可能な限り丸めたりせず正確に表示します。<br>\nBigDecimalの変数の生成は、例えば次のようになります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">num</span> <span class=\"k\">=</span> <span class=\"nc\">BigDecimal</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">num2</span> <span class=\"k\">=</span> <span class=\"nc\">BigDecimal</span><span class=\"o\">(</span><span class=\"mf\">1.005</span><span class=\"o\">)</span>\n</pre></div></div><p>四則演算もInt型やDouble型の変数と同様に実行することができます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">num2</span>\n<span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">num2</span>\n<span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">num2</span>\n<span class=\"n\">num</span> <span class=\"o\">/</span> <span class=\"n\">num2</span>\n</pre></div></div><p>一方、Javaの場合はBigDecimalで処理されたある変数num1, num2の四則演算はScalaのように直感的ではありません。例えば和を計算するのに<code>num1.add(num1)</code>のように書きます。ScalaのBigDecimalは通常の四則演算と同じ感じで計算できるので便利です。</p>\n<p>有効数字の桁数指定や四捨五入、切り捨て、切り上げは次のように<code>setScale()</code>メソッドにより可能です。例えば<code>val num3 = num / num2</code>に対して小数点以下4桁を表示、5桁目を四捨五入、切り上げ、切り捨てするには上から順に次のような文になります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">num3</span> <span class=\"k\">=</span> <span class=\"n\">num3</span><span class=\"o\">.</span><span class=\"n\">setScale</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"nc\">BigDecimal</span><span class=\"o\">.</span><span class=\"nc\">RoundingMode</span><span class=\"o\">.</span><span class=\"nc\">HALF_UP</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">num4</span> <span class=\"k\">=</span> <span class=\"n\">num3</span><span class=\"o\">.</span><span class=\"n\">setScale</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"nc\">BigDecimal</span><span class=\"o\">.</span><span class=\"nc\">RoundingMode</span><span class=\"o\">.</span><span class=\"nc\">CEILING</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">num5</span> <span class=\"k\">=</span> <span class=\"n\">num3</span><span class=\"o\">.</span><span class=\"n\">setScale</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">scala</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"nc\">BigDecimal</span><span class=\"o\">.</span><span class=\"nc\">RoundingMode</span><span class=\"o\">.</span><span class=\"nc\">FLOOR</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>数値と文字列の相互変更\n      </h2><p>データの型をString型に変換するためには<code>toString()</code>メソッドを使って次のように簡単に書けます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">str</span> <span class=\"k\">=</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n</pre></div></div><p>変数xの型はString以外のどの型でも可能です。</p>\n<p>今度は文字列から各データ型への変換をみてみます。String型のある変数が<code>val xStr</code>で定義されていたとします。このとき変数の型に合わせて変換は次のようになります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">xBoolean</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toBoolean</span>\n<span class=\"k\">val</span> <span class=\"n\">xChar</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">xSymb</span> <span class=\"k\">=</span> <span class=\"nc\">Symbol</span><span class=\"o\">(</span><span class=\"n\">xStr</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">xByte</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toByte</span>\n<span class=\"k\">val</span> <span class=\"n\">xShort</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toShort</span>\n<span class=\"k\">val</span> <span class=\"n\">xInt</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toInt</span>\n<span class=\"k\">val</span> <span class=\"n\">xLong</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toLong</span>\n<span class=\"k\">val</span> <span class=\"n\">xFloat</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toFloat</span>\n<span class=\"k\">val</span> <span class=\"n\">xDouble</span> <span class=\"k\">=</span> <span class=\"n\">xStr</span><span class=\"o\">.</span><span class=\"n\">toDouble</span>\n</pre></div></div><p>ここで<code>charAt(n)</code>はxStrのCharシークエンスを左から数えてn-1番目をChar型にするという意味です。</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>まとめ\n      </h2><p>ここまでScalaの型について紹介してきました。Scalaの基本的な型の種類はJavaと同一ですが、型がクラスとして扱われる点がJavaとことなる点でした。また型はAnyクラスの子クラスであるAnyRefまたはAnyValに所属することも見てきました。BigDecimalはJavaよりも直感的に操作できることを紹介しました。Scalaでは文字列への変換が簡単にできる等の特徴も紹介してきました。</p>\n<p>Scalaは非常に簡単に処理を実行できる言語なので、本章で紹介したような手短な操作をどんどん使ってコードを簡潔で読みやすいものにしたいですね！</p>\n",
        "stock_users": [
            "kasumani",
            "prinum",
            "Reds"
        ]
    },
    {
        "id": 86839,
        "uuid": "b3ad13c66d75311dc839",
        "user": {
            "id": 34365,
            "url_name": "ryosy383",
            "profile_image_url": "https://secure.gravatar.com/avatar/a5d12ae1f1b3108de77d6c85e86814a3"
        },
        "title": "Scala開発環境構築(ScalaIDE, Ubuntu版)",
        "created_at": "2014-07-01 21:40:02 +0900",
        "updated_at": "2014-07-01 21:40:02 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            },
            {
                "name": "Ubuntu",
                "url_name": "ubuntu",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/16292ce7a37e2133dc34acef293af06f998c8da8/medium.jpg?1387917339",
                "versions": []
            },
            {
                "name": "Eclipse",
                "url_name": "eclipse",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/ccf32cbcb30733164a0ea2331e24dacf1c2a3cf1/medium.jpg?1398264070",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/ryosy383/items/b3ad13c66d75311dc839",
        "created_at_as_seconds": 1404218402,
        "tweet": true,
        "gist_url": "https://gist.github.com/41ee6c90a5f2f62426d8",
        "private": false,
        "raw_body": "## JDK7をインストールする\n\n```\n$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java7-installer\n```\n\nバージョンを確認します。\n\n```\n$ java -version\njava version \"1.7.0_51\"\nJava(TM) SE Runtime Environment (build 1.7.0_51-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)\n```\n\n## ScalaIDEをダウンロードする\n\n以下のURLにアクセスします。\nhttp://scala-ide.org/download/sdk.html\n\n\n\n「For Scala 2.11.1」から以下の２つのどちらかを選択します。\nLinux GTK 64 bit \nLinux GTK 32 bit\n\n基本的には64ビット版Ubuntuは「Linux GTK 64 bit」、\n32ビット版Ubuntuは「Linux GTK 32 bit」をダウンロードすれば大丈夫です。\n\n正確に確かめたい場合はGTKのバージョンを以下のコマンドで確認できます。\n\n```\n$ dpkg -l libgtk2.0-0 libgtk-3-0\n```\n\n## ScalaIDEをインストール・起動する\n\ntar.gzファイルを展開して、ScalaIDEを起動します。\n\n```\n$ tar xvzf scala-SDK-3.0.4-2.11-2.11-linux.gtk.x86_64.tar.gz\n$ cd eclipse\n$ ./eclipse\n```\n\nScala開発用のプラグインが入ったEclipseが起動して開発を行うことができます。\n\n\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>JDK7をインストールする\n      </h2><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java7-installer\n</pre></div></div><p>バージョンを確認します。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ java -version\njava version &quot;1.7.0_51&quot;\nJava(TM) SE Runtime Environment (build 1.7.0_51-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>ScalaIDEをダウンロードする\n      </h2><p>以下のURLにアクセスします。<br>\n<a href=\"http://scala-ide.org/download/sdk.html\" title=\"http://scala-ide.org/download/sdk.html\" target=\"_blank\">http://scala-ide.org/download/sdk.html</a></p>\n<p>「For Scala 2.11.1」から以下の２つのどちらかを選択します。<br>\nLinux GTK 64 bit <br>\nLinux GTK 32 bit</p>\n<p>基本的には64ビット版Ubuntuは「Linux GTK 64 bit」、<br>\n32ビット版Ubuntuは「Linux GTK 32 bit」をダウンロードすれば大丈夫です。</p>\n<p>正確に確かめたい場合はGTKのバージョンを以下のコマンドで確認できます。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ dpkg -l libgtk2.0-0 libgtk-3-0\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>ScalaIDEをインストール・起動する\n      </h2><p>tar.gzファイルを展開して、ScalaIDEを起動します。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ tar xvzf scala-SDK-3.0.4-2.11-2.11-linux.gtk.x86_64.tar.gz\n$ cd eclipse\n$ ./eclipse\n</pre></div></div><p>Scala開発用のプラグインが入ったEclipseが起動して開発を行うことができます。</p>\n",
        "stock_users": [
            "fjmtmnb",
            "takehiro_t59",
            "kasumani",
            "Reds",
            "nilfigo",
            "akmiyoshi"
        ]
    },
    {
        "id": 86592,
        "uuid": "cc34f6a0c111854124e6",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Spray: 静的ファイルの目次を出したい",
        "created_at": "2014-07-01 14:55:37 +0900",
        "updated_at": "2014-07-01 14:55:37 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "spray",
                "url_name": "spray",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/cc34f6a0c111854124e6",
        "created_at_as_seconds": 1404194137,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nSprayで静的ファイルを表示したい場合は `src/main/resouces` にファイルを置く。\n\n```console\n% tree src/main/resources/test/\nsrc/main/resources/test/\n├── a.html\n├── b.html\n└── index.html\n```\n\n`getFromBrowseableDirectory` ディレクティブを使うことで、静的ファイルを置いてある特定のディレクトリのインデックスを自動生成することができる。\n\n```scala\n...\npathPrefix(\"test\") {\n  compressResponse() {\n    getFromBrowseableDirectory(getClass.getResource(\"/test\").getPath)\n  }\n} ~\n...\n```\n\nインデックスページの様子:\n\n![Index_of__test_.png](https://qiita-image-store.s3.amazonaws.com/0/889/cc88cb73-a4db-479b-f430-b99a9b36e15e.png \"Index_of__test_.png\")\n\n\n`index.html` はSprayではただのいちファイルでしかないので、Apacheのように目次ページとして使われることはないみたい。\n\n単にディレクトリを公開したいだけであれば `getFromResourceDirectory` を使ってもいい。\n\n```scala\npathPrefix(\"test\") {\n  compressResponse() {\n    getFromResourceDirectory(\"test\")\n  }\n} ~\n```\n\nちなみに配置したファイルはコンパイル時に、`target/scala-2.10/classes` にコピーされるので、ファイルを変更した時はコンパイルし直す必要がある。\n\n",
        "body": "<p>Sprayで静的ファイルを表示したい場合は <code>src/main/resouces</code> にファイルを置く。</p>\n<div class=\"code-frame\" data-lang=\"console\"><div class=\"highlight\"><pre><span class=\"gp\">%</span> tree src/main/resources/test/\n<span class=\"go\">src/main/resources/test/</span>\n<span class=\"go\">├── a.html</span>\n<span class=\"go\">├── b.html</span>\n<span class=\"go\">└── index.html</span>\n</pre></div></div><p><code>getFromBrowseableDirectory</code> ディレクティブを使うことで、静的ファイルを置いてある特定のディレクトリのインデックスを自動生成することができる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"o\">...</span>\n<span class=\"n\">pathPrefix</span><span class=\"o\">(</span><span class=\"s\">&quot;test&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">compressResponse</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">getFromBrowseableDirectory</span><span class=\"o\">(</span><span class=\"n\">getClass</span><span class=\"o\">.</span><span class=\"n\">getResource</span><span class=\"o\">(</span><span class=\"s\">&quot;/test&quot;</span><span class=\"o\">).</span><span class=\"n\">getPath</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> <span class=\"o\">~</span>\n<span class=\"o\">...</span>\n</pre></div></div><p>インデックスページの様子:</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/889/cc88cb73-a4db-479b-f430-b99a9b36e15e.png\" alt=\"Index_of__test_.png\" title=\"Index_of__test_.png\"></p>\n<p><code>index.html</code> はSprayではただのいちファイルでしかないので、Apacheのように目次ページとして使われることはないみたい。</p>\n<p>単にディレクトリを公開したいだけであれば <code>getFromResourceDirectory</code> を使ってもいい。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">pathPrefix</span><span class=\"o\">(</span><span class=\"s\">&quot;test&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">compressResponse</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">getFromResourceDirectory</span><span class=\"o\">(</span><span class=\"s\">&quot;test&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> <span class=\"o\">~</span>\n</pre></div></div><p>ちなみに配置したファイルはコンパイル時に、<code>target/scala-2.10/classes</code> にコピーされるので、ファイルを変更した時はコンパイルし直す必要がある。</p>\n",
        "stock_users": [
            "kasumani",
            "reoring",
            "Reds"
        ]
    },
    {
        "id": 86559,
        "uuid": "d0f4b4af9b572f322d4d",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Selenium2: RemoteWebDriverでスクリーンショットを撮影する",
        "created_at": "2014-07-01 13:38:38 +0900",
        "updated_at": "2014-07-01 13:38:38 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Selenium",
                "url_name": "selenium",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/92e1ece1d42fcd42e69dfcd3fa980d0d6f7bd7f1/medium.jpg?1403564935",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/d0f4b4af9b572f322d4d",
        "created_at_as_seconds": 1404189518,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n\n`RemoteWebDriver` はそのままではスクリーンショットが取れない。`RemoteWebDriver` は `TakesScreenshot` インターフェイスを実装していないためだ。そこで、 `Augmenter` を使って、ドライバのインスタンスに `TakesScreenshot` が実装される。\n\n```scala\nimport org.openqa.selenium.{ OutputType, TakesScreenshot }\nimport org.openqa.selenium.remote.{Augmenter, RemoteWebDriver}\n\nval driver = new RemoteWebDriver(...)\nval screenshot = new Augmenter().augment(driver).asInstanceOf[TakesScreenshot].getScreenshotAs(OutputType.BASE64)\n```\n\nなお、この例ではスクリーンショットを Base64 形式で取得するようにしているが、直接ファイルに落とすこともできる。\n",
        "body": "<p><code>RemoteWebDriver</code> はそのままではスクリーンショットが取れない。<code>RemoteWebDriver</code> は <code>TakesScreenshot</code> インターフェイスを実装していないためだ。そこで、 <code>Augmenter</code> を使って、ドライバのインスタンスに <code>TakesScreenshot</code> が実装される。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.openqa.selenium.</span><span class=\"o\">{</span> <span class=\"nc\">OutputType</span><span class=\"o\">,</span> <span class=\"nc\">TakesScreenshot</span> <span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.openqa.selenium.remote.</span><span class=\"o\">{</span><span class=\"nc\">Augmenter</span><span class=\"o\">,</span> <span class=\"nc\">RemoteWebDriver</span><span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">driver</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RemoteWebDriver</span><span class=\"o\">(...)</span>\n<span class=\"k\">val</span> <span class=\"n\">screenshot</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Augmenter</span><span class=\"o\">().</span><span class=\"n\">augment</span><span class=\"o\">(</span><span class=\"n\">driver</span><span class=\"o\">).</span><span class=\"n\">asInstanceOf</span><span class=\"o\">[</span><span class=\"kt\">TakesScreenshot</span><span class=\"o\">].</span><span class=\"n\">getScreenshotAs</span><span class=\"o\">(</span><span class=\"nc\">OutputType</span><span class=\"o\">.</span><span class=\"nc\">BASE64</span><span class=\"o\">)</span>\n</pre></div></div><p>なお、この例ではスクリーンショットを Base64 形式で取得するようにしているが、直接ファイルに落とすこともできる。</p>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 86519,
        "uuid": "a3cd9dd1f3c4cfea6fbf",
        "user": {
            "id": 14950,
            "url_name": "mather314",
            "profile_image_url": "https://secure.gravatar.com/avatar/3204f6241aaca4a1082bfe1202e60d69"
        },
        "title": "Configuration for Akka application",
        "created_at": "2014-07-01 12:12:25 +0900",
        "updated_at": "2014-07-01 12:12:25 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Akka",
                "url_name": "akka",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/mather314/items/a3cd9dd1f3c4cfea6fbf",
        "created_at_as_seconds": 1404184345,
        "tweet": true,
        "gist_url": "https://gist.github.com/d0152f2e0b3d6ff6f079",
        "private": false,
        "raw_body": "\nakkaでアプリケーションを作るときに設定値の読み込みをどうするか、という話。\n\n1. akka.actor.Extension\n=======================\n\n`akka.actor.Extension` を使って各アクターで共通化させることができる。\n\n```scala\nimport akka.actor.{ExtendedActorSystem, Extension, ExtensionId}\n\nclass SampleExtentionImpl(system: ExtendedActorSystem) extends Extension {\n  val hoge = \"HOGE\"\n}\n\nobject SampleExtension extends ExtensionId[SampleExtensionImpl] {\n  def createExtension(system: ExtendedActorSystem) = new SampleExtensionImpl(system)\n}\n```\n\nExtensionを定義しておくことで、アクターから呼び出すことができる。\n\n```scala\nimport akka.actor.Actor\n\nclass SampleActor extends Actor {\n  val ext = SampleExtension(system)\n\n  def hoge = ext.hoge //=> \"HOGE\"\n}\n```\n\n手っ取り早い方法ではあるが、ExtensionIdのオブジェクトを直接呼ぶ必要があり、実行時切り替えなどには向かない。\nまた、Actorクラス以外では`system: ActorSystem`がないと利用できない。\n\n主にActorSystemにおける共通処理の集約やシングルトンな処理に向いている気がする。\n\n2. TypesafeConfig\n=================\n\nakkaはデフォルトで`reference.conf`と`application.conf`をクラスパスから読み込み、`system.settings.config`から利用可能にしている。\n\ncf. http://doc.akka.io/docs/akka/2.3.4/general/configuration.html\n\n書式はTypesafeがライブラリとして提供するHOCON(Human-Optimized Config Object Notation)というものになる。\n\nActorクラスであれば先述したように`system.settings.config`から取得できるが、他クラスではsystemが無いため利用できない。\n直接初期化時の引数に渡すこともできるが、configに依存したクラスであることを明示するため、DIを試みる。\n\n```scala\nimport com.typesafe.config.Config\nimport akka.actor.ActorSystem\n\n// configを定義するtrait\ntrait ConfigSupplier {\n  val config: Config\n}\n\n// configから読み込む設定情報の実装\ntrait DatabaseSetting { this: ConfigSupplier =>\n  import scala.util.Try\n  val dbHost = Try(config.getString(\"sample.db.host\")).getOrElse(\"localhost\")\n  val dbPort = Try(config.getInt(\"sample.db.port\")).getOrElse(5432)\n}\n\n// 設定情報を利用するクラス\nclass SampleApplication { this: DatabaseSetting =>\n  val connection = getConnection(dbHost, dbPort)\n}\n\nobject Main extends App {\n  val system = ActorSystem()\n\n  // インスタンス化のときに配線と注入\n  val app = new SampleApplication with DatabaseSetting with ConfigSupplier {\n    val config = system.settings.config\n  }\n\n  //...\n}\n```\n\n",
        "body": "<p>akkaでアプリケーションを作るときに設定値の読み込みをどうするか、という話。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>1. akka.actor.Extension\n      </h1><p><code>akka.actor.Extension</code> を使って各アクターで共通化させることができる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.actor.</span><span class=\"o\">{</span><span class=\"nc\">ExtendedActorSystem</span><span class=\"o\">,</span> <span class=\"nc\">Extension</span><span class=\"o\">,</span> <span class=\"nc\">ExtensionId</span><span class=\"o\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleExtentionImpl</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"k\">:</span> <span class=\"kt\">ExtendedActorSystem</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Extension</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">hoge</span> <span class=\"k\">=</span> <span class=\"s\">&quot;HOGE&quot;</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">SampleExtension</span> <span class=\"k\">extends</span> <span class=\"nc\">ExtensionId</span><span class=\"o\">[</span><span class=\"kt\">SampleExtensionImpl</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">createExtension</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"k\">:</span> <span class=\"kt\">ExtendedActorSystem</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SampleExtensionImpl</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>Extensionを定義しておくことで、アクターから呼び出すことができる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.actor.Actor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleActor</span> <span class=\"k\">extends</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">ext</span> <span class=\"k\">=</span> <span class=\"nc\">SampleExtension</span><span class=\"o\">(</span><span class=\"n\">system</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">hoge</span> <span class=\"k\">=</span> <span class=\"n\">ext</span><span class=\"o\">.</span><span class=\"n\">hoge</span> <span class=\"c1\">//=&gt; &quot;HOGE&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>手っ取り早い方法ではあるが、ExtensionIdのオブジェクトを直接呼ぶ必要があり、実行時切り替えなどには向かない。<br>\nまた、Actorクラス以外では<code>system: ActorSystem</code>がないと利用できない。</p>\n<p>主にActorSystemにおける共通処理の集約やシングルトンな処理に向いている気がする。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>2. TypesafeConfig\n      </h1><p>akkaはデフォルトで<code>reference.conf</code>と<code>application.conf</code>をクラスパスから読み込み、<code>system.settings.config</code>から利用可能にしている。</p>\n<p>cf. <a href=\"http://doc.akka.io/docs/akka/2.3.4/general/configuration.html\" title=\"http://doc.akka.io/docs/akka/2.3.4/general/configuration.html\" target=\"_blank\">http://doc.akka.io/docs/akka/2.3.4/general/configuration.html</a></p>\n<p>書式はTypesafeがライブラリとして提供するHOCON(Human-Optimized Config Object Notation)というものになる。</p>\n<p>Actorクラスであれば先述したように<code>system.settings.config</code>から取得できるが、他クラスではsystemが無いため利用できない。<br>\n直接初期化時の引数に渡すこともできるが、configに依存したクラスであることを明示するため、DIを試みる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">com.typesafe.config.Config</span>\n<span class=\"k\">import</span> <span class=\"nn\">akka.actor.ActorSystem</span>\n\n<span class=\"c1\">// configを定義するtrait</span>\n<span class=\"k\">trait</span> <span class=\"nc\">ConfigSupplier</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">config</span><span class=\"k\">:</span> <span class=\"kt\">Config</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// configから読み込む設定情報の実装</span>\n<span class=\"k\">trait</span> <span class=\"nc\">DatabaseSetting</span> <span class=\"o\">{</span> <span class=\"k\">this:</span> <span class=\"kt\">ConfigSupplier</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">import</span> <span class=\"nn\">scala.util.Try</span>\n  <span class=\"k\">val</span> <span class=\"n\">dbHost</span> <span class=\"k\">=</span> <span class=\"nc\">Try</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">getString</span><span class=\"o\">(</span><span class=\"s\">&quot;sample.db.host&quot;</span><span class=\"o\">)).</span><span class=\"n\">getOrElse</span><span class=\"o\">(</span><span class=\"s\">&quot;localhost&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">dbPort</span> <span class=\"k\">=</span> <span class=\"nc\">Try</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">getInt</span><span class=\"o\">(</span><span class=\"s\">&quot;sample.db.port&quot;</span><span class=\"o\">)).</span><span class=\"n\">getOrElse</span><span class=\"o\">(</span><span class=\"mi\">5432</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 設定情報を利用するクラス</span>\n<span class=\"k\">class</span> <span class=\"nc\">SampleApplication</span> <span class=\"o\">{</span> <span class=\"k\">this:</span> <span class=\"kt\">DatabaseSetting</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">val</span> <span class=\"n\">connection</span> <span class=\"k\">=</span> <span class=\"n\">getConnection</span><span class=\"o\">(</span><span class=\"n\">dbHost</span><span class=\"o\">,</span> <span class=\"n\">dbPort</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n\n  <span class=\"c1\">// インスタンス化のときに配線と注入</span>\n  <span class=\"k\">val</span> <span class=\"n\">app</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SampleApplication</span> <span class=\"k\">with</span> <span class=\"nc\">DatabaseSetting</span> <span class=\"k\">with</span> <span class=\"nc\">ConfigSupplier</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">config</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">config</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c1\">//...</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "ygurumi",
            "kasumani",
            "mtoyoshi",
            "Reds"
        ]
    },
    {
        "id": 86329,
        "uuid": "fa35adb0558ae7ba7298",
        "user": {
            "id": 16928,
            "url_name": "sa-wa-m@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/ea9e9592b59069d1d086953068208733?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "ScaloidでWebサイトから取得したデータを元にUIを構築する。",
        "created_at": "2014-06-30 22:37:23 +0900",
        "updated_at": "2014-06-30 22:37:23 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Android",
                "url_name": "android",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0062451c92bb932b6bb257a40a35eee709b5597c/medium.jpg?1403644757",
                "versions": []
            },
            {
                "name": "scaloid",
                "url_name": "scaloid",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/sa-wa-m@github/items/fa35adb0558ae7ba7298",
        "created_at_as_seconds": 1404135443,
        "tweet": false,
        "gist_url": "https://gist.github.com/2aac859f9430f62733e9",
        "private": false,
        "raw_body": "\n## 今回実装するサンプルの説明\n今回は、ユーザが指定したWebサイトのURLからHTMLのソースを取得してきてソースのまま表示するアプリを実装します。今回学ぶものは次の通りです。\n\n* Androidでのスレッド生成の仕方\n* UIスレッドの制約\n\n## Androidの制約とFutureについて学ぶ\nAndroidアプリでは、UIの描画や、タップイベントの処理などUIに関連する処理は全てUIスレッドのみで許可されています。そのため、他のスレッドでUIのオブジェクトの描画処理が走らせたら、例外が投げられますし、UIスレッドで重い処理をすると、ユーザの操作に対してアプリが応答しなくなります。そこで、ネットワークアクセスなどの重い処理は別スレッドで行い、生成した別スレッドから、UIスレッド内で処理を行うようにする。\n\n今回は、Futureというものを使います。一言で言うと、将来のある時点で実行される処理を抽象化したものです。これを使うと、ネットワークアクセスや重い処理を別スレッドで実行出来ます。詳細は[Scala 2.10.0 Futures and Promises - 1](http://d.hatena.ne.jp/Kazuhira/20130111/1357920383)を参照ください。色々と面白いです。\n\n## サンプルコード\nFutureオブジェクトは次のように生成して、次のように設定します。\n\n``` scala\nval f = future {\n\t// 重い処理\n\tThread.sleep(10000)\n\t100\n}\nf.onComplete {\n\tcase Success(x) => Log.i(\"Test\", s\"response is $x\")\n\tcase Failure(e) => Log.i(\"Test\", s\"error is $e\")\n}\n```\nと実行すると、Logcatのログに100と表示されます。futureの中で例外が投げられると、error is {エラーメッセージ}と表示されます。このfutureメソッドが返すオブジェクトはFutureオブジェクトで、このonCompleteメソッドに部分関数を渡すことで、スレッドの処理終了時の挙動を設定できます。また、別スレッドでUIスレッド上で実行させたい処理を書くには、runOnUiThreadメソッドに関数オブジェクトを渡せば良いです。以上のことをまとめるとサンプルプログラムは次のとおりになります。\n\n``` SFutureSample.scala\nimport org.scaloid.common._\nimport scala.concurrent._\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.util.{ Success, Failure }\nimport android.util.Log\nimport android.view.Gravity\nimport org.apache.http.util.EntityUtils\nimport org.apache.http.impl.client.DefaultHttpClient\nimport org.apache.http.client.methods.HttpGet\n\nclass SFutureSample extends SActivity {\n  onCreate {\n    contentView = new SVerticalLayout {\n      SEditText() id 100 singleLine (true)\n      SButton(\"Generate future\").onClick(fillEditboxWithHtml)\n      SEditText() id 200 lines 20 gravity (Gravity.TOP)\n    } padding 20.dip\n  }\n  def fillEditboxWithHtml {\n    val f = future {\n      val url = find[SEditText](100).text.toString\n      val httpGet = new HttpGet(url)\n      val response = (new DefaultHttpClient()).execute(httpGet)\n      EntityUtils.toString(response.getEntity(), \"UTF-8\")\n    }\n    f.onComplete {\n      case Success(x) => runOnUiThread(find[SEditText](200).text = x)\n      case Failure(e) => runOnUiThread(toast(s\"Failed to get htmls: $e\"))\n    }\n  }\n}\n```\n\n実行すると次の画面のようになります。\n![test.png](https://qiita-image-store.s3.amazonaws.com/0/16928/aca812f1-4efa-cb8e-c09e-e1f71f72c9b2.png \"test.png\")\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>今回実装するサンプルの説明\n      </h2><p>今回は、ユーザが指定したWebサイトのURLからHTMLのソースを取得してきてソースのまま表示するアプリを実装します。今回学ぶものは次の通りです。</p>\n\n<ul>\n<li>Androidでのスレッド生成の仕方</li>\n<li>UIスレッドの制約</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Androidの制約とFutureについて学ぶ\n      </h2><p>Androidアプリでは、UIの描画や、タップイベントの処理などUIに関連する処理は全てUIスレッドのみで許可されています。そのため、他のスレッドでUIのオブジェクトの描画処理が走らせたら、例外が投げられますし、UIスレッドで重い処理をすると、ユーザの操作に対してアプリが応答しなくなります。そこで、ネットワークアクセスなどの重い処理は別スレッドで行い、生成した別スレッドから、UIスレッド内で処理を行うようにする。</p>\n<p>今回は、Futureというものを使います。一言で言うと、将来のある時点で実行される処理を抽象化したものです。これを使うと、ネットワークアクセスや重い処理を別スレッドで実行出来ます。詳細は<a href=\"http://d.hatena.ne.jp/Kazuhira/20130111/1357920383\" title=\"\" target=\"_blank\">Scala 2.10.0 Futures and Promises - 1</a>を参照ください。色々と面白いです。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>サンプルコード\n      </h2><p>Futureオブジェクトは次のように生成して、次のように設定します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"n\">future</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 重い処理</span>\n    <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">10000</span><span class=\"o\">)</span>\n    <span class=\"mi\">100</span>\n<span class=\"o\">}</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onComplete</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">(</span><span class=\"s\">&quot;Test&quot;</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"s\">&quot;response is $x&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Log</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"o\">(</span><span class=\"s\">&quot;Test&quot;</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"s\">&quot;error is $e&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>と実行すると、Logcatのログに100と表示されます。futureの中で例外が投げられると、error is {エラーメッセージ}と表示されます。このfutureメソッドが返すオブジェクトはFutureオブジェクトで、このonCompleteメソッドに部分関数を渡すことで、スレッドの処理終了時の挙動を設定できます。また、別スレッドでUIスレッド上で実行させたい処理を書くには、runOnUiThreadメソッドに関数オブジェクトを渡せば良いです。以上のことをまとめるとサンプルプログラムは次のとおりになります。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">SFutureSample.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.scaloid.common._</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent._</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.ExecutionContext.Implicits.global</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.util.</span><span class=\"o\">{</span> <span class=\"nc\">Success</span><span class=\"o\">,</span> <span class=\"nc\">Failure</span> <span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.util.Log</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.view.Gravity</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.http.util.EntityUtils</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.http.impl.client.DefaultHttpClient</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.http.client.methods.HttpGet</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SFutureSample</span> <span class=\"k\">extends</span> <span class=\"nc\">SActivity</span> <span class=\"o\">{</span>\n  <span class=\"n\">onCreate</span> <span class=\"o\">{</span>\n    <span class=\"n\">contentView</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SVerticalLayout</span> <span class=\"o\">{</span>\n      <span class=\"nc\">SEditText</span><span class=\"o\">()</span> <span class=\"n\">id</span> <span class=\"mi\">100</span> <span class=\"n\">singleLine</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span>\n      <span class=\"nc\">SButton</span><span class=\"o\">(</span><span class=\"s\">&quot;Generate future&quot;</span><span class=\"o\">).</span><span class=\"n\">onClick</span><span class=\"o\">(</span><span class=\"n\">fillEditboxWithHtml</span><span class=\"o\">)</span>\n      <span class=\"nc\">SEditText</span><span class=\"o\">()</span> <span class=\"n\">id</span> <span class=\"mi\">200</span> <span class=\"n\">lines</span> <span class=\"mi\">20</span> <span class=\"n\">gravity</span> <span class=\"o\">(</span><span class=\"nc\">Gravity</span><span class=\"o\">.</span><span class=\"nc\">TOP</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"n\">padding</span> <span class=\"mf\">20.d</span><span class=\"n\">ip</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">fillEditboxWithHtml</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"n\">future</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">url</span> <span class=\"k\">=</span> <span class=\"n\">find</span><span class=\"o\">[</span><span class=\"kt\">SEditText</span><span class=\"o\">](</span><span class=\"mi\">100</span><span class=\"o\">).</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n      <span class=\"k\">val</span> <span class=\"n\">httpGet</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HttpGet</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">response</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DefaultHttpClient</span><span class=\"o\">()).</span><span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">httpGet</span><span class=\"o\">)</span>\n      <span class=\"nc\">EntityUtils</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">getEntity</span><span class=\"o\">(),</span> <span class=\"s\">&quot;UTF-8&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onComplete</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">runOnUiThread</span><span class=\"o\">(</span><span class=\"n\">find</span><span class=\"o\">[</span><span class=\"kt\">SEditText</span><span class=\"o\">](</span><span class=\"mi\">200</span><span class=\"o\">).</span><span class=\"n\">text</span> <span class=\"k\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">runOnUiThread</span><span class=\"o\">(</span><span class=\"n\">toast</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;Failed to get htmls: $e&quot;</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>実行すると次の画面のようになります。<br>\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/16928/aca812f1-4efa-cb8e-c09e-e1f71f72c9b2.png\" alt=\"test.png\" title=\"test.png\"></p>\n",
        "stock_users": [
            "nijojin",
            "kasumani",
            "kyuq9q",
            "Reds"
        ]
    },
    {
        "id": 86011,
        "uuid": "cc34d95bdffb6ce012e9",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Futureをマスターする -おまけ-",
        "created_at": "2014-06-30 12:36:35 +0900",
        "updated_at": "2014-06-30 12:43:51 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9",
        "created_at_as_seconds": 1404099395,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# シリーズ目次\n[はじめに](http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc)\n[コンパニオンオブジェクト操作](http://qiita.com/mtoyoshi/items/297f6acdfe610440c719)\n[インスタンス操作](http://qiita.com/mtoyoshi/items/f68beb17710c3819697f)\n[おまけ](http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9)\n\n# おまけ\n```Future{ ... }```と書けば、必ず新しいスレッドで処理が行われるのかと思っていたがそうではなく、実際は色々と複雑に制御されているようだ。\n※Futureのソースコードを読んだわけではないので何故このような動きになるのかといった解説まではできていない。\n\n```scala\nobject Main extends App {\n  println(\"in main : \" + Thread.currentThread().getId())\n\n  val f1 = Future{ println(s\"f1 : ${Thread.currentThread().getId()}\"); 1 }\n  val f2 = Future{ println(s\"f2 : ${Thread.currentThread().getId()}\"); 2 }\n\n  val f = f1.flatMap { n1 =>\n    println(s\"f1#flatMap : ${Thread.currentThread().getId()}\");\n\n    f2.map{ n2 =>\n      println(s\"f2#map : ${Thread.currentThread().getId()}\");\n      n1 + n2\n    }\n  }\n\n  f.onSuccess {\n    case result => println(s\"f#onSuccess : ${Thread.currentThread().getId()}\")\n  }\n\n  Await.ready(f, Duration.Inf)\n}\n```\n\nこの実行結果は以下となる。\nf1とf2は同一スレッドで実行されていることが確認できる。冒頭で述べたFuture{...}と書けば別スレッドで処理されると思っていたら違っていた、はこれを見たことによる。\n\n```\nmain : 1296\nf1 : 1290\nf2 : 1290\nf1#flatMap : 1297\nf2#map : 1297\nf#onSuccess : 1297\n```\n\n次に、f1とf2を以下のように変える。\n\n```scala\n  val f1 = Future{ Thread.sleep(3000); println(s\"f1 : ${Thread.currentThread().getId()}\"); 1 }\n  val f2 = Future{ Thread.sleep(3000); println(s\"f2 : ${Thread.currentThread().getId()}\"); 2 }\n```\n\n結果は以下。\n今度は別スレッドで実行されるようになった。\n\n```\nmain : 1304\nf1 : 1290\nf1#flatMap : 1290\nf2 : 1305\nf2#map : 1290\nf#onSuccess : 1290\n```\n\n次は更にonSuccessをforeachで書き換える。\n\n```scala\n  f.foreach {\n    println(s\"f#foreach : ${Thread.currentThread().getId()}\")\n    println(_)\n  }\n```\n\n結果は以下。\nなんとforeachのスレッド番号はMainと同じになった。それを裏付けるように出力順序も早くに出てくる。\nもちろん結果は一番最後。\nプログラマから見るとonSuccessと同じかもしれないが、実際は細かいレベルで振る舞いは異なるようだ。\n\n```\nmain : 1313\nf#foreach : 1313\nf1 : 1306\nf2 : 1314\nf1#flatMap : 1306\nf2#map : 1306\n3\n```\n\nほんの少しの変更だが今度は以下のように変えてみた。\n\n```scala\n  f.foreach { r =>\n    println(s\"f#foreach : ${Thread.currentThread().getId()}\")\n    println(r)\n  }\n```\n\n結果は以下。\n今度はforeachはMainとは別スレッドで呼ばれており、表示順も最後の方になった。\n結果を変数に束縛するようにしたからなんだろう。\n\n```\nmain : 1322\nf1 : 1314\nf1#flatMap : 1314\nf2 : 1323\nf2#map : 1314\nf#foreach : 1314\n3\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>シリーズ目次\n      </h1><p><a href=\"http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc\" title=\"\">はじめに</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/297f6acdfe610440c719\" title=\"\">コンパニオンオブジェクト操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/f68beb17710c3819697f\" title=\"\">インスタンス操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9\" title=\"\">おまけ</a></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>おまけ\n      </h1><p><code>Future{ ... }</code>と書けば、必ず新しいスレッドで処理が行われるのかと思っていたがそうではなく、実際は色々と複雑に制御されているようだ。<br>\n※Futureのソースコードを読んだわけではないので何故このような動きになるのかといった解説まではできていない。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;in main : &quot;</span> <span class=\"o\">+</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">currentThread</span><span class=\"o\">().</span><span class=\"n\">getId</span><span class=\"o\">())</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f1</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f1 : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">f2</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f2 : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"o\">{</span> <span class=\"n\">n1</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f1#flatMap : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">);</span>\n\n    <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"n\">n2</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f2#map : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">);</span>\n      <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">result</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f#onSuccess : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>この実行結果は以下となる。<br>\nf1とf2は同一スレッドで実行されていることが確認できる。冒頭で述べたFuture{...}と書けば別スレッドで処理されると思っていたら違っていた、はこれを見たことによる。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>main : 1296\nf1 : 1290\nf2 : 1290\nf1#flatMap : 1297\nf2#map : 1297\nf#onSuccess : 1297\n</pre></div></div><p>次に、f1とf2を以下のように変える。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f1</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f1 : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">f2</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f2 : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n</pre></div></div><p>結果は以下。<br>\n今度は別スレッドで実行されるようになった。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>main : 1304\nf1 : 1290\nf1#flatMap : 1290\nf2 : 1305\nf2#map : 1290\nf#onSuccess : 1290\n</pre></div></div><p>次は更にonSuccessをforeachで書き換える。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">foreach</span> <span class=\"o\">{</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f#foreach : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p>結果は以下。<br>\nなんとforeachのスレッド番号はMainと同じになった。それを裏付けるように出力順序も早くに出てくる。<br>\nもちろん結果は一番最後。<br>\nプログラマから見るとonSuccessと同じかもしれないが、実際は細かいレベルで振る舞いは異なるようだ。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>main : 1313\nf#foreach : 1313\nf1 : 1306\nf2 : 1314\nf1#flatMap : 1306\nf2#map : 1306\n3\n</pre></div></div><p>ほんの少しの変更だが今度は以下のように変えてみた。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">foreach</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;f#foreach : ${Thread.currentThread().getId()}&quot;</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div></div><p>結果は以下。<br>\n今度はforeachはMainとは別スレッドで呼ばれており、表示順も最後の方になった。<br>\n結果を変数に束縛するようにしたからなんだろう。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>main : 1322\nf1 : 1314\nf1#flatMap : 1314\nf2 : 1323\nf2#map : 1314\nf#foreach : 1314\n3\n</pre></div></div>",
        "stock_users": [
            "ygurumi",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 86010,
        "uuid": "f68beb17710c3819697f",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Futureをマスターする -インスタンス操作-",
        "created_at": "2014-06-30 12:35:34 +0900",
        "updated_at": "2014-06-30 12:43:31 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/f68beb17710c3819697f",
        "created_at_as_seconds": 1404099334,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "最後はFutureトレイトに関する操作をやりきる。\n\n# シリーズ目次\n[はじめに](http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc)\n[コンパニオンオブジェクト操作](http://qiita.com/mtoyoshi/items/297f6acdfe610440c719)\n[インスタンス操作](http://qiita.com/mtoyoshi/items/f68beb17710c3819697f)\n[おまけ](http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9)\n\n# 変換\n\n## map\nお馴染みの。結果を何かしら変換する際に。\n\n```scala\n  val f: Future[String] = Future(\"hello\")\n  val ff: Future[Int] = f.map(_.size)\n\n  println(Await.result(ff, Duration.Inf)) // 5\n```\n\n## failed\nFuture内で例外が起きると、Future#valueした結果のTryはFailureになっている。このようなFutureに対してfailedメソッドを呼ぶことでSuccess[Throwable]なFutureを返すことが出来る。\n但し、Successなものにfailedメソッドを実行するとNoSuchElementExceptionとなり今度はFailureになってしまう。\n\nどういうところで使うのか一瞬戸惑うが、この性質上、失敗した時だけxxxするといった使い道しか無いと考えられる。\nFuture#mapなどはFailureになっていると実行されない。よって、failedメソッドを呼ぶことで失敗した時だけ後続処理を続けることができるようになる。\n\n## flatMap\n結果に対して何かしら加工する際、Futureの入れ子になるような場合はflatMapで。\n結果が条件を満たさないような場合も失敗にしてしまえば後続処理は行われない。\n\n```scala\n  val f1: Future[Int] = Future{ Thread.sleep(3000); 1 }\n  val f2: Future[Int] = Future{ Thread.sleep(2000); 2 }\n\n  val f: Future[Int] = f1.flatMap{ n1: Int =>\n    val ff: Future[String] = f2.map{ n2: Int => \"hello\" * (n1 + n2) }\n    if (Await.result(ff, Duration.Inf).size > 10) ff else Future.failed(new Exception(\"not over 10\"))\n  }.map { str: String =>\n    str.size\n  }\n\n  f.onComplete {\n    case Success(result) => println(result)\n    case Failure(t)      => println(t.getMessage())\n  }\n\n  Await.ready(f, Duration.Inf)\n```\n\n### mapTo\nなお、上記プログラム中に```Await.result(ff, Duration.Inf).size```と記述している箇所がありここでブロッキングが発生している。\nとはいえ、```ff.value.get.get```だとNone.getが呼ばれてしまう。\nこの時、以下のようにmapToで置き換えることでノンブロッキングなコードに変えることが出来る。\n\n```scala\nif (ff.mapTo[String].value.get.get.size > 10)\n```\n\n## transform\n成功時と失敗時、それぞれで変換処理を登録しておく。\nなお、失敗時は-1に、というような変換はできない。第二引数の関数の戻り値はThrowableと定義されているためだ。\n\n```scala\n  val f: Future[Int] = Future{ 55 }\n  val ff: Future[Int] = f.transform(\n    { n => n * 2 },\n    { t => throw new Exception(\"error!\") })\n  ff foreach println\n\n  Await.ready(ff, Duration.Inf)\n```\n\n# フィルタリング\n\n## filterとfilterWith\n条件を満たさない場合はNoSuchElementExceptionが発生しFailureになる。\n以下の例の場合はfilter後のmap処理は呼ばれない。\n\n```scala\n  val f: Future[Int] = Future{ 5 }\n  val ff: Future[Int] = f.filter(_ % 2 == 0).map(_ * 2)\n  ff.onComplete {\n    case Success(result) => println(result)\n    case Failure(t)      => println(t.getMessage())\n  }\n\n  Await.ready(ff, Duration.Inf)\n```\n\nFutureの場合は、コレクション系と異なり複数要素があるわけではないのでwithFilterとfilterを使い分けるようなシーンはあまりないように思う。\nと思っていたら、公式ドキュメントにもそう書いてあった。\n> For futures calling filter has exactly the same effect as does calling withFilter.\n\nwithFilterは直接使うというよりはfor内包記法のif文使用時に裏側で呼ばれるというくらいだろうか。\n\n```scala\n  val f1: Future[Int] = Future{ Thread.sleep(3000); 1 }\n  val f2: Future[Int] = Future{ Thread.sleep(2000); 2 }\n\n  val f: Future[Int] = for (n1 <- f1 if (n1 % 2 == 0); n2 <- f2) yield { n1 + n2 }\n```\n\n## collect\nfilterとwithFilterの明示的な使い分けが無いのであればcollectはパフォーマンスを意識した使い方というよりはfilter + mapと書くのかcollect一発で書くのかというスタイル的な選択になるだろう。\n上記filter + mapの例は以下の一行で書き換え可能だ。\n\n```scala\nf.collect{ case v: Int if (v % 2 == 0) => v * 2 }\n```\n\n# 例外発生時のリカバリ処理\n\n## recoverとrecoverWith\nFuture#traverseは複数のFutureのうち１つでもエラーがあるとonFailでしか結果を受け取れなくなってしまう。\nまた、mapやflatMapなどはFutureがFailureになっているとスキップされるので後続処理が行われなくなってしまう。\n通常はこれで問題ない場合のほうが多いと思うが、例えば10個のFutureのうち、途中でエラーが起きたとしても全てをやりきり、最後に9つが成功して1つが失敗したといった情報を得たい場合はどうすればよいだろうか。\nひとつのアイディアとしてrecoverを使ってSuccess状態にすることで処理を続行するというアイディアがある。以下そのサンプル。\n\n```scala\n  val f: Future[List[Int]] = Future.traverse((1 to 10).toList) { i =>\n    Future {\n      if (i == 5 || i == 7) throw new Exception(s\"error in $i\") else i\n    } recover {\n      case t => -1\n    }\n  }\n\n  f.onSuccess{\n    case result: List[Int] => {\n      val grouped = result.groupBy(v => v != -1)\n      def count(key: Boolean): Int = grouped.get(key).map(_.size) getOrElse 0\n\n      println(s\"success: ${count(true)}, fail: ${count(false)}\")\n    }\n  }\n\n  Await.ready(f, Duration.Inf)\n```\n\nrecover部分はrecoverWithを使ってFutureを返すように書くことも出来る。\n実行済みFutureと組み合わせて使うことが多いだろうか。\n\n```scala\n} recoverWith {\n  case t => Future.successful(-1)\n}\n```\n\n## fallbackTo\nrecoverWithとほぼ同じ。fallbackToでSuccessなFutureを登録しておけば、失敗時にそちらが返される。\nなお、recoverWithは失敗した時にだけ呼ばれるが、fallbackToは成功時も呼ばれ、結果は同じだが新たにFutureが生成されるという違いがある。\nfallbackToの方がPartialFunctionでない分すっきり書けて好みだったが、あまり気にしなくてもいいレベルかも知れないものの基本はrecover/recoverWithを使うことになりそうだ。\n\n```scala\n  val f: Future[Int] = Future { throw new Exception(\"error!\") } fallbackTo Future.successful(-1)\n  f.foreach(println)\n  \n  Await.ready(f, Duration.Inf)\n```\n\n# その他\n\n## foreach\nFuture#foreachは公式ドキュメントによると、onSuccessと同等であるとのこと。\n\n> This means that the foreach has exactly the same semantics as the onSuccess callback.\n\n```scala\nval f: Future[Int] = Future.successful(5)\nf.foreach(println)\n```\n\n## andThen\nこのメソッドは少し特殊で副作用を前提とした処理とのこと。\n\n> The andThen combinator is used purely for side-effecting purposes.\n\n引数にPartialFunctionを取るものの、その戻り値は一切考慮されず常に同じ結果を持つ新しいFutureが返されるだけである。\nなお、以下のプログラム例のように値を変えたり型を変えたりしても結局は100を保持したFuture[Int]が返ってくる。\nもちろん、exeCntに対する処理は2回実行されることから出力時は2と表示される。\nなお、FutureがFailure状態であってもandThenは都度実行されるというのも他のメソッドと違っているところである。\n\n```scala\n  var exeCnt = 0\n\n  val f: Future[Int] = Future.successful(5)\n\n  val ff: Future[Int] = f\n    .andThen { case n: Try[Int] => exeCnt += 1; n.get * 2 }\n    .andThen { case n: Try[Int] => exeCnt += 1; \"hello\" * n.get }\n  ff.foreach{ r => println(s\"$r : $exeCnt\") }\n```\n\n## zip\n2つのFutureの結果をzipする。\n\n```scala\n  val f1: Future[Int] = Future{ Thread.sleep(1500); 1 }\n  val f2: Future[String] = Future{ Thread.sleep(2000); \"one\" }\n\n  val f: Future[(Int, String)] = f1 zip f2\n  f.onSuccess {\n    case (k, v) => println(s\"$k : $v\")\n  }\n\n  Await.ready(f, Duration.Inf)\n```\n\n# メソッドコンプリート状況\n完了！\n\ntrait Awaitable: 5つ/5つ\ntrait Future: 16つ/16つ\nobject Future: 10つ/10つ\n",
        "body": "<p>最後はFutureトレイトに関する操作をやりきる。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>シリーズ目次\n      </h1><p><a href=\"http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc\" title=\"\">はじめに</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/297f6acdfe610440c719\" title=\"\">コンパニオンオブジェクト操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/f68beb17710c3819697f\" title=\"\">インスタンス操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9\" title=\"\">おまけ</a></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>変換\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>map\n      </h2><p>お馴染みの。結果を何かしら変換する際に。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">ff</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">)</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">))</span> <span class=\"c1\">// 5</span>\n</pre></div></div><h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>failed\n      </h2><p>Future内で例外が起きると、Future#valueした結果のTryはFailureになっている。このようなFutureに対してfailedメソッドを呼ぶことでSuccess[Throwable]なFutureを返すことが出来る。<br>\n但し、Successなものにfailedメソッドを実行するとNoSuchElementExceptionとなり今度はFailureになってしまう。</p>\n<p>どういうところで使うのか一瞬戸惑うが、この性質上、失敗した時だけxxxするといった使い道しか無いと考えられる。<br>\nFuture#mapなどはFailureになっていると実行されない。よって、failedメソッドを呼ぶことで失敗した時だけ後続処理を続けることができるようになる。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>flatMap\n      </h2><p>結果に対して何かしら加工する際、Futureの入れ子になるような場合はflatMapで。<br>\n結果が条件を満たさないような場合も失敗にしてしまえば後続処理は行われない。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f1</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">f2</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">flatMap</span><span class=\"o\">{</span> <span class=\"n\">n1</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"n\">ff</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">{</span> <span class=\"n\">n2</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=&gt;</span> <span class=\"s\">&quot;hello&quot;</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">).</span><span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">failed</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"s\">&quot;not over 10&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">}.</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">str</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=&gt;</span>\n    <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">size</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onComplete</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>      <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">getMessage</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>mapTo\n      </h3><p>なお、上記プログラム中に<code>Await.result(ff, Duration.Inf).size</code>と記述している箇所がありここでブロッキングが発生している。<br>\nとはいえ、<code>ff.value.get.get</code>だとNone.getが呼ばれてしまう。<br>\nこの時、以下のようにmapToで置き換えることでノンブロッキングなコードに変えることが出来る。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mapTo</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">].</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>transform\n      </h2><p>成功時と失敗時、それぞれで変換処理を登録しておく。<br>\nなお、失敗時は-1に、というような変換はできない。第二引数の関数の戻り値はThrowableと定義されているためだ。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"mi\">55</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">ff</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">(</span>\n    <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"k\">=&gt;</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"k\">=&gt;</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"s\">&quot;error!&quot;</span><span class=\"o\">)</span> <span class=\"o\">})</span>\n  <span class=\"n\">ff</span> <span class=\"n\">foreach</span> <span class=\"n\">println</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>フィルタリング\n      </h1><h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>filterとfilterWith\n      </h2><p>条件を満たさない場合はNoSuchElementExceptionが発生しFailureになる。<br>\n以下の例の場合はfilter後のmap処理は呼ばれない。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"mi\">5</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">ff</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">onComplete</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>      <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">getMessage</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><p>Futureの場合は、コレクション系と異なり複数要素があるわけではないのでwithFilterとfilterを使い分けるようなシーンはあまりないように思う。<br>\nと思っていたら、公式ドキュメントにもそう書いてあった。</p>\n\n<blockquote>\n<p>For futures calling filter has exactly the same effect as does calling withFilter.</p>\n</blockquote>\n<p>withFilterは直接使うというよりはfor内包記法のif文使用時に裏側で呼ばれるというくらいだろうか。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f1</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">f2</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"k\">&lt;-</span> <span class=\"n\">f1</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">);</span> <span class=\"n\">n2</span> <span class=\"k\">&lt;-</span> <span class=\"n\">f2</span><span class=\"o\">)</span> <span class=\"k\">yield</span> <span class=\"o\">{</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>collect\n      </h2><p>filterとwithFilterの明示的な使い分けが無いのであればcollectはパフォーマンスを意識した使い方というよりはfilter + mapと書くのかcollect一発で書くのかというスタイル的な選択になるだろう。<br>\n上記filter + mapの例は以下の一行で書き換え可能だ。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">v</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"kt\">if</span> <span class=\"o\">(</span><span class=\"kt\">v</span> <span class=\"kt\">%</span> <span class=\"err\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>例外発生時のリカバリ処理\n      </h1><h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>recoverとrecoverWith\n      </h2><p>Future#traverseは複数のFutureのうち１つでもエラーがあるとonFailでしか結果を受け取れなくなってしまう。<br>\nまた、mapやflatMapなどはFutureがFailureになっているとスキップされるので後続処理が行われなくなってしまう。<br>\n通常はこれで問題ない場合のほうが多いと思うが、例えば10個のFutureのうち、途中でエラーが起きたとしても全てをやりきり、最後に9つが成功して1つが失敗したといった情報を得たい場合はどうすればよいだろうか。<br>\nひとつのアイディアとしてrecoverを使ってSuccess状態にすることで処理を続行するというアイディアがある。以下そのサンプル。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">traverse</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">10</span><span class=\"o\">).</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;error in $i&quot;</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">i</span>\n    <span class=\"o\">}</span> <span class=\"n\">recover</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"n\">t</span> <span class=\"k\">=&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">grouped</span> <span class=\"k\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">groupBy</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"k\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">def</span> <span class=\"n\">count</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"n\">grouped</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"n\">getOrElse</span> <span class=\"mi\">0</span>\n\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;success: ${count(true)}, fail: ${count(false)}&quot;</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><p>recover部分はrecoverWithを使ってFutureを返すように書くことも出来る。<br>\n実行済みFutureと組み合わせて使うことが多いだろうか。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"o\">}</span> <span class=\"n\">recoverWith</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"n\">t</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>fallbackTo\n      </h2><p>recoverWithとほぼ同じ。fallbackToでSuccessなFutureを登録しておけば、失敗時にそちらが返される。<br>\nなお、recoverWithは失敗した時にだけ呼ばれるが、fallbackToは成功時も呼ばれ、結果は同じだが新たにFutureが生成されるという違いがある。<br>\nfallbackToの方がPartialFunctionでない分すっきり書けて好みだったが、あまり気にしなくてもいいレベルかも知れないものの基本はrecover/recoverWithを使うことになりそうだ。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span> <span class=\"o\">{</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"s\">&quot;error!&quot;</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">fallbackTo</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">foreach</span><span class=\"o\">(</span><span class=\"n\">println</span><span class=\"o\">)</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>その他\n      </h1><h2>\n        <span id=\"2-9\" class=\"fragment\"></span>\n        <a href=\"#2-9\"><i class=\"fa fa-link\"></i></a>foreach\n      </h2><p>Future#foreachは公式ドキュメントによると、onSuccessと同等であるとのこと。</p>\n\n<blockquote>\n<p>This means that the foreach has exactly the same semantics as the onSuccess callback.</p>\n</blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">foreach</span><span class=\"o\">(</span><span class=\"n\">println</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-10\" class=\"fragment\"></span>\n        <a href=\"#2-10\"><i class=\"fa fa-link\"></i></a>andThen\n      </h2><p>このメソッドは少し特殊で副作用を前提とした処理とのこと。</p>\n\n<blockquote>\n<p>The andThen combinator is used purely for side-effecting purposes.</p>\n</blockquote>\n<p>引数にPartialFunctionを取るものの、その戻り値は一切考慮されず常に同じ結果を持つ新しいFutureが返されるだけである。<br>\nなお、以下のプログラム例のように値を変えたり型を変えたりしても結局は100を保持したFuture[Int]が返ってくる。<br>\nもちろん、exeCntに対する処理は2回実行されることから出力時は2と表示される。<br>\nなお、FutureがFailure状態であってもandThenは都度実行されるというのも他のメソッドと違っているところである。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">var</span> <span class=\"n\">exeCnt</span> <span class=\"k\">=</span> <span class=\"mi\">0</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">ff</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">f</span>\n    <span class=\"o\">.</span><span class=\"n\">andThen</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Try</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">exeCnt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n    <span class=\"o\">.</span><span class=\"n\">andThen</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">n</span><span class=\"k\">:</span> <span class=\"kt\">Try</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">exeCnt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"s\">&quot;hello&quot;</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"o\">}</span>\n  <span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">foreach</span><span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;$r : $exeCnt&quot;</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-11\" class=\"fragment\"></span>\n        <a href=\"#2-11\"><i class=\"fa fa-link\"></i></a>zip\n      </h2><p>2つのFutureの結果をzipする。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f1</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1500</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">f2</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"s\">&quot;one&quot;</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">)]</span> <span class=\"k\">=</span> <span class=\"n\">f1</span> <span class=\"n\">zip</span> <span class=\"n\">f2</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;$k : $v&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>メソッドコンプリート状況\n      </h1><p>完了！</p>\n<p>trait Awaitable: 5つ/5つ<br>\ntrait Future: 16つ/16つ<br>\nobject Future: 10つ/10つ</p>\n",
        "stock_users": [
            "ygurumi",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 86008,
        "uuid": "297f6acdfe610440c719",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Futureをマスターする -コンパニオンオブジェクト操作-",
        "created_at": "2014-06-30 12:34:44 +0900",
        "updated_at": "2014-06-30 12:42:49 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/297f6acdfe610440c719",
        "created_at_as_seconds": 1404099284,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "コンパニオンオブジェクトFutureの全メソッド網羅いきます。\n\n# シリーズ目次\n[はじめに](http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc)\n[コンパニオンオブジェクト操作](http://qiita.com/mtoyoshi/items/297f6acdfe610440c719)\n[インスタンス操作](http://qiita.com/mtoyoshi/items/f68beb17710c3819697f)\n[おまけ](http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9)\n\n# Futureの単独生成&並列実行\n\n## apply\n通常はapplyを明示的に呼ぶことはないでしょう。以下のように使用。\n\n```scala\nval f: Future[String] = Future {\n  \"hello\"\n}\n```\n\nなお、ネットでよく見るサンプルも[公式ドキュメント](http://docs.scala-lang.org/overviews/core/futures.html)もfuture{...}で生成しているものばかりなのですが、Scala2.11から[scala.concurrent](http://www.scala-lang.org/api/current/#scala.concurrent.package)のfutureメソッドはdeprecated扱いになっており、代わりにFutureを使うよう記述されています。\nよって本記事ではfutre{ ... }は使用せずFuture{ ... }で統一しています。\n\n# Futureの単独生成（実行済みFuture）\n実行済みFutureを作成するため並列実行は行われない。よってAwaitによる待ちは不要。\n当然、valueで呼び出してもNoneではなく全てSomeである。\n\n## successful\nscala.util.Successなvalueを生成。\n\n```scala\nval f: Future[Int] = Future.successful(100)\n```\n\n## failed\nscala.util.Failureなvalueを生成。\n\n```scala\nval f: Future[String] = Future.failed{ new Exception(\"error in future\") }\n```\n\n## fromTry\nTryからFutureを作成する。\n\n```scala\nval f: Future[String] = Future.fromTry(Try{ \n  if (...) \"hello\" else throw new Exception(\"error in f\") \n})\n```\n\n# Futureの複数生成&複数の並列実行\n\n## traverse\nTraversableOnceなものからFutureを複数生成&実行。\n5だけ意図的に遅らせているが、結果は終わった順ではなく、traverseで処理した順に返ってくる。\nよってこの結果は1,2,3,4,5,6,7,8,9,10,11,12となる。\n\n```scala\n  val f: Future[List[Int]] = Future.traverse((1 to 12).toList) { i =>\n    Future {\n      println(s\"start: $i\")\n      if (i == 5) Thread.sleep(5000) else Thread.sleep(1000)\n      println(s\"end: $i\")\n      i\n    }\n  }\n  f.onSuccess{ case result: List[Int] => println(result.mkString(\",\")) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n4コアCPUのMacBookの環境で実行すると、4つずつ同時に処理されることが確認できる。\n\n## sequence\ntraverseの簡易版で、引数にFutureのTraversableOnceを取る。\n結果については上記と同様。\n\n```scala\n  val futures: List[Future[Int]] = (1 to 12).toList.map { i =>\n    Future {\n      println(i)\n      Thread.sleep(1000)\n      i\n    }\n  }\n\n  val f: Future[List[Int]] = Future.sequence(futures)\n  f.onSuccess{ case result => println(result.mkString) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n# Futureの複数生成&複数並列実行&特定の条件を満たしたFutureをひとつ返す\n\n## firstCompleteOf\n並列実行するFutureの中で最初に終わったFutureをひとつ返す。\n3で例外が出るが、4の方が先に終わるのでonSuccessコールバックのほうが呼ばれる。なお、3と4の処理を入れ替えれば、onFailureコールバックのほうが呼ばれる。\n\n```scala\n  val futures: Seq[Future[Int]] = Seq(\n    Future{ Thread.sleep(3000); 1 },\n    Future{ Thread.sleep(2000); 2 },\n    Future{ Thread.sleep(1000); throw new Exception(\"error in 3\") },\n    Future{ Thread.sleep(500); 4 })\n\n  val f = Future.firstCompletedOf(futures)\n  f.onSuccess{ case result: Int => println(result) }\n  f.onFailure{ case t => println(t.getMessage()) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n## find\n第一引数にFutureのTraversableOnce、第二引数にBooleanを返す関数を指定し、それを満たす最初のFutureが返る。\n以下の例の場合は最初に処理が終わるのは4だが、条件は奇数のものなのでこの場合は3が返る。\nなお、例外が起きるFutureがある場合の振る舞いはfirstCompleteOfと同じ。\n\n\n```scala\n  val futures: Seq[Future[Int]] = Seq(\n    Future{ Thread.sleep(3000); 1 },\n    Future{ Thread.sleep(2000); 2 },\n    Future{ Thread.sleep(1000); 3 },\n    Future{ Thread.sleep(500); 4 })\n\n  val f = Future.find(futures){ _ % 2 == 1 }\n  f.onSuccess{ case result: Option[Int] => println(result.get) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n# Futureの複数生成&複数並列実行&全てのFutureの結果のまとめあげ\n\n# fold\n各Futureの結果を畳み込み演算する。\n以下は初期値10から初めて、畳み込んだ結果、20が返ってくる。\nなお、ひとつでも例外が起きるFutureがいるとonFailureコールバックが呼ばれる。\n\n```scala\n  val futures: Seq[Future[Int]] = Seq(\n    Future{ Thread.sleep(3000); 1 },\n    Future{ Thread.sleep(2000); 2 },\n    Future{ Thread.sleep(1000); 3 },\n    Future{ Thread.sleep(500); 4 })\n\n  val f = Future.fold(futures)(10){ (total, v) => total + v }\n  f.onSuccess{ case result: Int => println(result) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n# reduce\n初期値なしのfold。0から始まるので結果は10となる。\nなお、ひとつでも例外が起きるFutureがいるとonFailureコールバックが呼ばれる。\n\n```scala\n  val futures: Seq[Future[Int]] = Seq(\n    Future{ Thread.sleep(3000); 1 },\n    Future{ Thread.sleep(2000); 2 },\n    Future{ Thread.sleep(1000); 3 },\n    Future{ Thread.sleep(500); 4 })\n\n  val f = Future.reduce(futures){ (total, v) => total + v }\n  f.onSuccess{ case result: Int => println(result) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n# 応用：組み合わせ\n10個のFutureを実行するf1とf2を作成し、それらの結果をfoldで足し合わせるfを定義。\n全てが終わったら数字を足し合わせて結果を出力する。結果は220。\n\n```scala\n  val f1: Future[List[Int]] = Future.traverse((1 to 10).toList) { i =>\n    Future { Thread.sleep(i * 100); i }\n  }\n  val f2: Future[List[Int]] = Future.traverse((11 to 20).toList) { i =>\n    Future { Thread.sleep(i * 100); i }\n  }\n\n  val f: Future[List[Int]] = Future.fold(List(f1, f2))(List(10)){ (total, v) => v ++: total }\n  f.onSuccess{ case result: List[Int] => println(result.sum) }\n\n  Await.ready(f, Duration.Inf)\n```\n\n# メソッドコンプリート状況\n基本編と生成編を終えてメソッドコンプリート率は現時点では以下となりました。\n\ntrait Awaitable: 5つ/5つ\ntrait Future: 3つ/16つ\nobject Future: 10つ/10つ\n",
        "body": "<p>コンパニオンオブジェクトFutureの全メソッド網羅いきます。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>シリーズ目次\n      </h1><p><a href=\"http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc\" title=\"\">はじめに</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/297f6acdfe610440c719\" title=\"\">コンパニオンオブジェクト操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/f68beb17710c3819697f\" title=\"\">インスタンス操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9\" title=\"\">おまけ</a></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>Futureの単独生成&amp;並列実行\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>apply\n      </h2><p>通常はapplyを明示的に呼ぶことはないでしょう。以下のように使用。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n  <span class=\"s\">&quot;hello&quot;</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>なお、ネットでよく見るサンプルも<a href=\"http://docs.scala-lang.org/overviews/core/futures.html\" title=\"\" target=\"_blank\">公式ドキュメント</a>もfuture{...}で生成しているものばかりなのですが、Scala2.11から<a href=\"http://www.scala-lang.org/api/current/#scala.concurrent.package\" title=\"\" target=\"_blank\">scala.concurrent</a>のfutureメソッドはdeprecated扱いになっており、代わりにFutureを使うよう記述されています。<br>\nよって本記事ではfutre{ ... }は使用せずFuture{ ... }で統一しています。</p>\n<h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>Futureの単独生成（実行済みFuture）\n      </h1><p>実行済みFutureを作成するため並列実行は行われない。よってAwaitによる待ちは不要。<br>\n当然、valueで呼び出してもNoneではなく全てSomeである。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>successful\n      </h2><p>scala.util.Successなvalueを生成。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">successful</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>failed\n      </h2><p>scala.util.Failureなvalueを生成。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">failed</span><span class=\"o\">{</span> <span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"s\">&quot;error in future&quot;</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>fromTry\n      </h2><p>TryからFutureを作成する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">fromTry</span><span class=\"o\">(</span><span class=\"nc\">Try</span><span class=\"o\">{</span> \n  <span class=\"k\">if</span> <span class=\"o\">(...)</span> <span class=\"s\">&quot;hello&quot;</span> <span class=\"k\">else</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"s\">&quot;error in f&quot;</span><span class=\"o\">)</span> \n<span class=\"o\">})</span>\n</pre></div></div><h1>\n        <span id=\"1-4\" class=\"fragment\"></span>\n        <a href=\"#1-4\"><i class=\"fa fa-link\"></i></a>Futureの複数生成&amp;複数の並列実行\n      </h1><h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>traverse\n      </h2><p>TraversableOnceなものからFutureを複数生成&amp;実行。<br>\n5だけ意図的に遅らせているが、結果は終わった順ではなく、traverseで処理した順に返ってくる。<br>\nよってこの結果は1,2,3,4,5,6,7,8,9,10,11,12となる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">traverse</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">12</span><span class=\"o\">).</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;start: $i&quot;</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">5000</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;end: $i&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">i</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">(</span><span class=\"s\">&quot;,&quot;</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><p>4コアCPUのMacBookの環境で実行すると、4つずつ同時に処理されることが確認できる。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>sequence\n      </h2><p>traverseの簡易版で、引数にFutureのTraversableOnceを取る。<br>\n結果については上記と同様。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">futures</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">12</span><span class=\"o\">).</span><span class=\"n\">toList</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n      <span class=\"n\">i</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">(</span><span class=\"n\">futures</span><span class=\"o\">)</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">mkString</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-5\" class=\"fragment\"></span>\n        <a href=\"#1-5\"><i class=\"fa fa-link\"></i></a>Futureの複数生成&amp;複数並列実行&amp;特定の条件を満たしたFutureをひとつ返す\n      </h1><h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>firstCompleteOf\n      </h2><p>並列実行するFutureの中で最初に終わったFutureをひとつ返す。<br>\n3で例外が出るが、4の方が先に終わるのでonSuccessコールバックのほうが呼ばれる。なお、3と4の処理を入れ替えれば、onFailureコールバックのほうが呼ばれる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">futures</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">);</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Exception</span><span class=\"o\">(</span><span class=\"s\">&quot;error in 3&quot;</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">500</span><span class=\"o\">);</span> <span class=\"mi\">4</span> <span class=\"o\">})</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">firstCompletedOf</span><span class=\"o\">(</span><span class=\"n\">futures</span><span class=\"o\">)</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onFailure</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">t</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">getMessage</span><span class=\"o\">())</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>find\n      </h2><p>第一引数にFutureのTraversableOnce、第二引数にBooleanを返す関数を指定し、それを満たす最初のFutureが返る。<br>\n以下の例の場合は最初に処理が終わるのは4だが、条件は奇数のものなのでこの場合は3が返る。<br>\nなお、例外が起きるFutureがある場合の振る舞いはfirstCompleteOfと同じ。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">futures</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">);</span> <span class=\"mi\">3</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">500</span><span class=\"o\">);</span> <span class=\"mi\">4</span> <span class=\"o\">})</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">futures</span><span class=\"o\">){</span> <span class=\"k\">_</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-6\" class=\"fragment\"></span>\n        <a href=\"#1-6\"><i class=\"fa fa-link\"></i></a>Futureの複数生成&amp;複数並列実行&amp;全てのFutureの結果のまとめあげ\n      </h1><h1>\n        <span id=\"1-7\" class=\"fragment\"></span>\n        <a href=\"#1-7\"><i class=\"fa fa-link\"></i></a>fold\n      </h1><p>各Futureの結果を畳み込み演算する。<br>\n以下は初期値10から初めて、畳み込んだ結果、20が返ってくる。<br>\nなお、ひとつでも例外が起きるFutureがいるとonFailureコールバックが呼ばれる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">futures</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">);</span> <span class=\"mi\">3</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">500</span><span class=\"o\">);</span> <span class=\"mi\">4</span> <span class=\"o\">})</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"n\">futures</span><span class=\"o\">)(</span><span class=\"mi\">10</span><span class=\"o\">){</span> <span class=\"o\">(</span><span class=\"n\">total</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-8\" class=\"fragment\"></span>\n        <a href=\"#1-8\"><i class=\"fa fa-link\"></i></a>reduce\n      </h1><p>初期値なしのfold。0から始まるので結果は10となる。<br>\nなお、ひとつでも例外が起きるFutureがいるとonFailureコールバックが呼ばれる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">futures</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">3000</span><span class=\"o\">);</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">);</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">);</span> <span class=\"mi\">3</span> <span class=\"o\">},</span>\n    <span class=\"nc\">Future</span><span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">500</span><span class=\"o\">);</span> <span class=\"mi\">4</span> <span class=\"o\">})</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"o\">(</span><span class=\"n\">futures</span><span class=\"o\">){</span> <span class=\"o\">(</span><span class=\"n\">total</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-9\" class=\"fragment\"></span>\n        <a href=\"#1-9\"><i class=\"fa fa-link\"></i></a>応用：組み合わせ\n      </h1><p>10個のFutureを実行するf1とf2を作成し、それらの結果をfoldで足し合わせるfを定義。<br>\n全てが終わったら数字を足し合わせて結果を出力する。結果は220。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>  <span class=\"k\">val</span> <span class=\"n\">f1</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">traverse</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"mi\">10</span><span class=\"o\">).</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Future</span> <span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"o\">);</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">val</span> <span class=\"n\">f2</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">traverse</span><span class=\"o\">((</span><span class=\"mi\">11</span> <span class=\"n\">to</span> <span class=\"mi\">20</span><span class=\"o\">).</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"k\">=&gt;</span>\n    <span class=\"nc\">Future</span> <span class=\"o\">{</span> <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"o\">);</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">f2</span><span class=\"o\">))(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)){</span> <span class=\"o\">(</span><span class=\"n\">total</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">++:</span> <span class=\"n\">total</span> <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span><span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n</pre></div></div><h1>\n        <span id=\"1-10\" class=\"fragment\"></span>\n        <a href=\"#1-10\"><i class=\"fa fa-link\"></i></a>メソッドコンプリート状況\n      </h1><p>基本編と生成編を終えてメソッドコンプリート率は現時点では以下となりました。</p>\n<p>trait Awaitable: 5つ/5つ<br>\ntrait Future: 3つ/16つ<br>\nobject Future: 10つ/10つ</p>\n",
        "stock_users": [
            "j5ik2o",
            "castersupermild",
            "ygurumi",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 86007,
        "uuid": "08766629abea6eb8e4bc",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Futureをマスターする -はじめに-",
        "created_at": "2014-06-30 12:34:06 +0900",
        "updated_at": "2014-06-30 12:53:20 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 9,
        "comment_count": 0,
        "url": "http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc",
        "created_at_as_seconds": 1404099246,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "Futureについてちゃんと使いこなせるようになろうと思い立ち全操作ひと通りやってみることにした。\n**※Scala 2.11.1のscaladocの全操作となります。**\n\ntrait Awaitable: 5つ\ntrait Future: 16つ\nobject Future: 10つ\n\n# シリーズ目次\n[はじめに](http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc)\n[コンパニオンオブジェクト操作](http://qiita.com/mtoyoshi/items/297f6acdfe610440c719)\n[インスタンス操作](http://qiita.com/mtoyoshi/items/f68beb17710c3819697f)\n[おまけ](http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9)\n\n# はじめに\n全操作やっていく前に、最低限Futureの動きやFutureと組み合わせてよく使うものをはじめに確認しておく。\n\n## その１\n\n```scala\nimport scala.concurrent._\nimport ExecutionContext.Implicits.global\nimport scala.concurrent.duration.Duration\n\nobject Main extends App {\n  val msg = \"hello\"\n  val f: Future[String] = Future {\n    Thread.sleep(1000)\n    msg * 5\n  }\n\n  println(f.isCompleted) // false\n  val result1: Option[Try[String]] = f.value\n  println(result1) // None\n\n  Thread.sleep(2000)\n\n  println(f.isCompleted) // true\n  val result2: Option[Try[String]] = f.value\n  println(result2.get.get) // hellohellohellohellohello\n}\n```\n\nFuture {}はFuture#applyであり、Futureインスタンスを生成する際の典型的なコードである。\n\nなお、ネットでよく見るサンプルも[公式ドキュメント](http://docs.scala-lang.org/overviews/core/futures.html)もfuture{...}で生成しているものばかりなのですが、Scala2.11から[scala.concurrent](http://www.scala-lang.org/api/current/#scala.concurrent.package)のfutureメソッドはdeprecated扱いになっており、代わりにFutureを使うよう記述されています。\nよって本記事ではfutre{ ... }は使用せずFuture{ ... }で統一しています。\n\nこれで、インスタンス生成と同時にMainとは別に並列実行が行われる。\nisCompleteで並列実行側が終了したかどうかを確認できる。\nvalueで現時点の値を取得できる。終わっていなければNone、終わっていればSome[Try[T]]となる。\n\nなお、このisCompletedやvalueはFutureではなく、mix-inされているAwaitableトレイトで宣言されたメソッドである。\nAwaitableトレイトにはその他のメソッドとしてresult、ready、onCompleteがあるのだが、それらのメソッドを実行してみると、```Don't call `Awaitable` methods directly, use the `Await` object.```とこちらはコンパイルエラーになり強制的に呼び出せないようになっている。\n\n## その２\n\n```scala\nimport scala.concurrent._\nimport ExecutionContext.Implicits.global\nimport scala.concurrent.duration.Duration\n\nobject Main extends App {\n  val msg = \"hello\"\n  val f: Future[String] = Future {\n    Thread.sleep(1000)\n    msg * 5\n  }\n\n  val result: String = Await.result(f, Duration.Inf)\n  println(result) // hellohellohellohellohello\n}\n```\n\nその１でコンパイルエラーメッセージにあったAwaitを使ったプログラム例である。\nMain側でなんらかFutureの処理を待っておかないとMainスレッドが終了してしまうため、その１ではThread.sleepで待っていたわけだが当然こんなやり方は通常はせず、Awaitを使うことで特定のFutureインスタンスの処理を待つことができるようになる。\n\nなお、Await#resultの問題点はFuture内で例外が起きるとこのメソッド実行時にも例外で返ってくる点であり、せっかくvalueの戻り値がTryになっているのにこの旨みを活かせてないように感じる。\nこういうときはAwait#readyを使用する。Await#resultでは処理終了のタイミング調整&値取り出しの２つを行っているのに対し、readyは処理終了のタイミング調整だけを行う。よって値取り出しコードは自分で記述する。\n\n```scala\nAwait.ready(f, Duration.Inf)\nf.value.get match {\n  case Success(msg) => println(msg)\n  case Failure(ex) => println(ex.getMessage)\n}\n```\n\n## その３\n\n```scala\nimport scala.concurrent._\nimport ExecutionContext.Implicits.global\nimport scala.concurrent.duration.Duration\nimport scala.util.{ Try, Success, Failure }\n\nobject Main extends App {\n  val msg = \"hello\"\n  val f: Future[String] = Future {\n    Thread.sleep(1000)\n    msg * 2\n  }\n  f.onSuccess { case msg: String => println(msg) }\n  f.onFailure { case t: Throwable => println(t.getMessage()) }\n\n  Await.ready(f, Duration.Inf)\n}\n```\n\nコールバック関数を登録するコード例。\n成功時と失敗時の両方を記述するなら通常はonCompleteを使う。\n\n```scala\nf.onComplete {\n  case Success(msg) => println(msg)\n  case Failure(t)   => println(t.getMessage())\n}\n```\n\n# メソッドコンプリート状況\n今回でカバーしたメソッド数は以下。\n\ntrait Awaitable: 5つ/5つ\ntrait Future: 3つ/16つ\nobject Future: 1つ/10つ\n",
        "body": "<p>Futureについてちゃんと使いこなせるようになろうと思い立ち全操作ひと通りやってみることにした。<br>\n<strong>※Scala 2.11.1のscaladocの全操作となります。</strong></p>\n<p>trait Awaitable: 5つ<br>\ntrait Future: 16つ<br>\nobject Future: 10つ</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>シリーズ目次\n      </h1><p><a href=\"http://qiita.com/mtoyoshi/items/08766629abea6eb8e4bc\" title=\"\">はじめに</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/297f6acdfe610440c719\" title=\"\">コンパニオンオブジェクト操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/f68beb17710c3819697f\" title=\"\">インスタンス操作</a><br>\n<a href=\"http://qiita.com/mtoyoshi/items/cc34d95bdffb6ce012e9\" title=\"\">おまけ</a></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>はじめに\n      </h1><p>全操作やっていく前に、最低限Futureの動きやFutureと組み合わせてよく使うものをはじめに確認しておく。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>その１\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.concurrent._</span>\n<span class=\"k\">import</span> <span class=\"nn\">ExecutionContext.Implicits.global</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.duration.Duration</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">msg</span> <span class=\"k\">=</span> <span class=\"s\">&quot;hello&quot;</span>\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n    <span class=\"n\">msg</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">isCompleted</span><span class=\"o\">)</span> <span class=\"c1\">// false</span>\n  <span class=\"k\">val</span> <span class=\"n\">result1</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Try</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">value</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result1</span><span class=\"o\">)</span> <span class=\"c1\">// None</span>\n\n  <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">2000</span><span class=\"o\">)</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">isCompleted</span><span class=\"o\">)</span> <span class=\"c1\">// true</span>\n  <span class=\"k\">val</span> <span class=\"n\">result2</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Try</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">value</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result2</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"c1\">// hellohellohellohellohello</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>Future {}はFuture#applyであり、Futureインスタンスを生成する際の典型的なコードである。</p>\n<p>なお、ネットでよく見るサンプルも<a href=\"http://docs.scala-lang.org/overviews/core/futures.html\" title=\"\" target=\"_blank\">公式ドキュメント</a>もfuture{...}で生成しているものばかりなのですが、Scala2.11から<a href=\"http://www.scala-lang.org/api/current/#scala.concurrent.package\" title=\"\" target=\"_blank\">scala.concurrent</a>のfutureメソッドはdeprecated扱いになっており、代わりにFutureを使うよう記述されています。<br>\nよって本記事ではfutre{ ... }は使用せずFuture{ ... }で統一しています。</p>\n<p>これで、インスタンス生成と同時にMainとは別に並列実行が行われる。<br>\nisCompleteで並列実行側が終了したかどうかを確認できる。<br>\nvalueで現時点の値を取得できる。終わっていなければNone、終わっていればSome[Try[T]]となる。</p>\n<p>なお、このisCompletedやvalueはFutureではなく、mix-inされているAwaitableトレイトで宣言されたメソッドである。<br>\nAwaitableトレイトにはその他のメソッドとしてresult、ready、onCompleteがあるのだが、それらのメソッドを実行してみると、<code>Don&#39;t call `Awaitable` methods directly, use the `Await` object.</code>とこちらはコンパイルエラーになり強制的に呼び出せないようになっている。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>その２\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.concurrent._</span>\n<span class=\"k\">import</span> <span class=\"nn\">ExecutionContext.Implicits.global</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.duration.Duration</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">msg</span> <span class=\"k\">=</span> <span class=\"s\">&quot;hello&quot;</span>\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n    <span class=\"n\">msg</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">result</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"c1\">// hellohellohellohellohello</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>その１でコンパイルエラーメッセージにあったAwaitを使ったプログラム例である。<br>\nMain側でなんらかFutureの処理を待っておかないとMainスレッドが終了してしまうため、その１ではThread.sleepで待っていたわけだが当然こんなやり方は通常はせず、Awaitを使うことで特定のFutureインスタンスの処理を待つことができるようになる。</p>\n<p>なお、Await#resultの問題点はFuture内で例外が起きるとこのメソッド実行時にも例外で返ってくる点であり、せっかくvalueの戻り値がTryになっているのにこの旨みを活かせてないように感じる。<br>\nこういうときはAwait#readyを使用する。Await#resultでは処理終了のタイミング調整&amp;値取り出しの２つを行っているのに対し、readyは処理終了のタイミング調整だけを行う。よって値取り出しコードは自分で記述する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">.</span><span class=\"n\">getMessage</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>その３\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.concurrent._</span>\n<span class=\"k\">import</span> <span class=\"nn\">ExecutionContext.Implicits.global</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.duration.Duration</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.util.</span><span class=\"o\">{</span> <span class=\"nc\">Try</span><span class=\"o\">,</span> <span class=\"nc\">Success</span><span class=\"o\">,</span> <span class=\"nc\">Failure</span> <span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">msg</span> <span class=\"k\">=</span> <span class=\"s\">&quot;hello&quot;</span>\n  <span class=\"k\">val</span> <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Future</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">)</span>\n    <span class=\"n\">msg</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onSuccess</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">msg</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onFailure</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"kt\">Throwable</span> <span class=\"o\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">getMessage</span><span class=\"o\">())</span> <span class=\"o\">}</span>\n\n  <span class=\"nc\">Await</span><span class=\"o\">.</span><span class=\"n\">ready</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"nc\">Duration</span><span class=\"o\">.</span><span class=\"nc\">Inf</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>コールバック関数を登録するコード例。<br>\n成功時と失敗時の両方を記述するなら通常はonCompleteを使う。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">onComplete</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Success</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">msg</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"nc\">Failure</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">getMessage</span><span class=\"o\">())</span>\n<span class=\"o\">}</span>\n</pre></div></div><h1>\n        <span id=\"1-3\" class=\"fragment\"></span>\n        <a href=\"#1-3\"><i class=\"fa fa-link\"></i></a>メソッドコンプリート状況\n      </h1><p>今回でカバーしたメソッド数は以下。</p>\n<p>trait Awaitable: 5つ/5つ<br>\ntrait Future: 3つ/16つ<br>\nobject Future: 1つ/10つ</p>\n",
        "stock_users": [
            "satoshihirose",
            "gale2001",
            "yutaono",
            "ys16",
            "grimrose@github",
            "ygurumi",
            "kasumani",
            "Reds",
            "ngsw_taro"
        ]
    },
    {
        "id": 85960,
        "uuid": "257cc65584464172c0fa",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Akka: 5秒おきに処理を行いたい",
        "created_at": "2014-06-30 10:47:09 +0900",
        "updated_at": "2014-06-30 10:47:09 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Akka",
                "url_name": "akka",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "actor",
                "url_name": "actor",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/257cc65584464172c0fa",
        "created_at_as_seconds": 1404092829,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nAkkaのActorで数秒おきなど一定間隔で処理を行うには、Schedulerを使うことでできる。\n\n```scala\nimport akka.actor.{ ActorLogging, Actor, ActorSystem, Props }\n\nobject Boot extends App {\n  val system = ActorSystem(\"my-actor-system\")\n  val heartBeat = system.actorOf(Props[HeartBeatActor])\n}\n\nimport concurrent.duration._\nimport concurrent.ExecutionContext.Implicits.global\n\nclass HeartBeatActor extends Actor with ActorLogging {\n\n  // 5秒おきに \"I'm alive\" とログに出す\n  context.system.scheduler.schedule(0.seconds, 5.seconds)(log.info(s\"I'm alive.\"))\n\n  override def receive: Receive = {\n    case _ =>\n  }\n}\n\n```\n\n自分自身にメッセージを来る方法もある。何かActor内の状態を変更する場合は、こちらのほうがメッセージがメールボックスにキューイングされるので、スレッドセーフになると思う。\n\n```scala\n// ...\n\ncase object HeartBeat\n\nclass HeartBeatActor extends Actor with ActorLogging {\n  context.system.scheduler.schedule(0.seconds, 5.seconds, self, HeartBeat)\n\n  override def receive: Receive = {\n    case HeartBeat => log.info(\"I'm alive\")\n    case _         =>\n  }\n}\n```\n",
        "body": "<p>AkkaのActorで数秒おきなど一定間隔で処理を行うには、Schedulerを使うことでできる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.actor.</span><span class=\"o\">{</span> <span class=\"nc\">ActorLogging</span><span class=\"o\">,</span> <span class=\"nc\">Actor</span><span class=\"o\">,</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">,</span> <span class=\"nc\">Props</span> <span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Boot</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">(</span><span class=\"s\">&quot;my-actor-system&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">heartBeat</span> <span class=\"k\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">actorOf</span><span class=\"o\">(</span><span class=\"nc\">Props</span><span class=\"o\">[</span><span class=\"kt\">HeartBeatActor</span><span class=\"o\">])</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">concurrent.duration._</span>\n<span class=\"k\">import</span> <span class=\"nn\">concurrent.ExecutionContext.Implicits.global</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HeartBeatActor</span> <span class=\"k\">extends</span> <span class=\"nc\">Actor</span> <span class=\"k\">with</span> <span class=\"nc\">ActorLogging</span> <span class=\"o\">{</span>\n\n  <span class=\"c1\">// 5秒おきに &quot;I&#39;m alive&quot; とログに出す</span>\n  <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"o\">(</span><span class=\"mf\">0.</span><span class=\"n\">seconds</span><span class=\"o\">,</span> <span class=\"mf\">5.</span><span class=\"n\">seconds</span><span class=\"o\">)(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">&quot;I&#39;m alive.&quot;</span><span class=\"o\">))</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">receive</span><span class=\"k\">:</span> <span class=\"kt\">Receive</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>自分自身にメッセージを来る方法もある。何かActor内の状態を変更する場合は、こちらのほうがメッセージがメールボックスにキューイングされるので、スレッドセーフになると思う。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"c1\">// ...</span>\n\n<span class=\"k\">case</span> <span class=\"k\">object</span> <span class=\"nc\">HeartBeat</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HeartBeatActor</span> <span class=\"k\">extends</span> <span class=\"nc\">Actor</span> <span class=\"k\">with</span> <span class=\"nc\">ActorLogging</span> <span class=\"o\">{</span>\n  <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"o\">(</span><span class=\"mf\">0.</span><span class=\"n\">seconds</span><span class=\"o\">,</span> <span class=\"mf\">5.</span><span class=\"n\">seconds</span><span class=\"o\">,</span> <span class=\"n\">self</span><span class=\"o\">,</span> <span class=\"nc\">HeartBeat</span><span class=\"o\">)</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">receive</span><span class=\"k\">:</span> <span class=\"kt\">Receive</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">HeartBeat</span> <span class=\"k\">=&gt;</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">&quot;I&#39;m alive&quot;</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"k\">_</span>         <span class=\"k\">=&gt;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "ygurumi",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 85930,
        "uuid": "8e7c538257f70a839113",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Spray:引数が1つのクラスはJSON文字列に変換したい",
        "created_at": "2014-06-30 09:37:24 +0900",
        "updated_at": "2014-06-30 09:37:24 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "spray",
                "url_name": "spray",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/8e7c538257f70a839113",
        "created_at_as_seconds": 1404088644,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nコンストラクタの引数がひとつしかないcase classをJSONに変換するとき、`{\"key\": \"value\"}` という形ではなく、ストレートに `\"value\"` という形に整形したい。\n\nspray-jsonの `jsonFormat1` 関数を使うと前者になってしまう。次の例は、苗字と名前で氏名を構成する概念的な統一体(conceptual whole)についてのコードだ。このコードでは苗字と名前それぞれを `jsonFormat1` を用いてJSONを変換している。\n\n```scala\ncase class FirstName(firstName: String)\ncase class LastName(lastName: String)\ncase class Name(first: FirstName, last: LastName)\n\nimport spray.json.DefaultJsonProtocol\n\nobject NameJsonProtocol extends DefaultJsonProtocol {\n  implicit val FirstNameFormat = jsonFormat1(FirstName)\n  implicit val LastNameFormat = jsonFormat1(LastName)\n  implicit val NameFormat = jsonFormat2(Name)\n}\n\nimport spray.json._\nimport NameJsonProtocol._\n\nprintln(Name(FirstName(\"Alice\"), LastName(\"Brown\")).toJson)\n```\n\n出力結果が冗長的になってしまう。firstやlastが2度出てくるためバイト数が増える。\n加えて、ネストしているのでJSONをデコードするクライアント実装にも負担になる。\n\n```json\n{\"first\":{\"firstName\":\"Alice\"},\"last\":{\"lastName\":\"Brown\"}}\n```\n\n理想的にはネストがなく冗長的でないJSONになってほしい。たとえばこのような:\n\n```json\n{\"first\":\"Alice\",\"last\":\"Brown\"}\n```\n\nこれを実現するコードはこうなる:\n\n```scala\ncase class FirstName(firstName: String)\ncase class LastName(lastName: String)\ncase class Name(first: FirstName, last: LastName)\n\nimport spray.json.{ JsString, JsValue, RootJsonFormat, DefaultJsonProtocol }\n\nobject NameJsonProtocol extends DefaultJsonProtocol {\n  // map case classes with 1 string parameter to JSON string\n  def jsonString[A](construct: (String) => A)(stringify: A => String): RootJsonFormat[A] = new RootJsonFormat[A] {\n    def write(x: A): JsString = JsString(stringify(x))\n    def read(value: JsValue): A = construct(value.toString())\n  }\n\n  implicit val FirstNameFormat = jsonString(FirstName)(_.firstName)\n  implicit val LastNameFormat = jsonString(LastName)(_.lastName)\n  implicit val NameFormat = jsonFormat2(Name)\n}\n\nimport spray.json._\nimport NameJsonProtocol._\n\nprintln(Name(FirstName(\"Alice\"), LastName(\"Brown\")).toJson)\n```\n",
        "body": "<p>コンストラクタの引数がひとつしかないcase classをJSONに変換するとき、<code>{&quot;key&quot;: &quot;value&quot;}</code> という形ではなく、ストレートに <code>&quot;value&quot;</code> という形に整形したい。</p>\n<p>spray-jsonの <code>jsonFormat1</code> 関数を使うと前者になってしまう。次の例は、苗字と名前で氏名を構成する概念的な統一体(conceptual whole)についてのコードだ。このコードでは苗字と名前それぞれを <code>jsonFormat1</code> を用いてJSONを変換している。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">FirstName</span><span class=\"o\">(</span><span class=\"n\">firstName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">LastName</span><span class=\"o\">(</span><span class=\"n\">lastName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Name</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"k\">:</span> <span class=\"kt\">FirstName</span><span class=\"o\">,</span> <span class=\"n\">last</span><span class=\"k\">:</span> <span class=\"kt\">LastName</span><span class=\"o\">)</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.DefaultJsonProtocol</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">NameJsonProtocol</span> <span class=\"k\">extends</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">FirstNameFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat1</span><span class=\"o\">(</span><span class=\"nc\">FirstName</span><span class=\"o\">)</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">LastNameFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat1</span><span class=\"o\">(</span><span class=\"nc\">LastName</span><span class=\"o\">)</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">NameFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat2</span><span class=\"o\">(</span><span class=\"nc\">Name</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">spray.json._</span>\n<span class=\"k\">import</span> <span class=\"nn\">NameJsonProtocol._</span>\n\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Name</span><span class=\"o\">(</span><span class=\"nc\">FirstName</span><span class=\"o\">(</span><span class=\"s\">&quot;Alice&quot;</span><span class=\"o\">),</span> <span class=\"nc\">LastName</span><span class=\"o\">(</span><span class=\"s\">&quot;Brown&quot;</span><span class=\"o\">)).</span><span class=\"n\">toJson</span><span class=\"o\">)</span>\n</pre></div></div><p>出力結果が冗長的になってしまう。firstやlastが2度出てくるためバイト数が増える。<br>\n加えて、ネストしているのでJSONをデコードするクライアント実装にも負担になる。</p>\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"nt\">&quot;first&quot;</span><span class=\"p\">:{</span><span class=\"nt\">&quot;firstName&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;Alice&quot;</span><span class=\"p\">},</span><span class=\"nt\">&quot;last&quot;</span><span class=\"p\">:{</span><span class=\"nt\">&quot;lastName&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;Brown&quot;</span><span class=\"p\">}}</span>\n</pre></div></div><p>理想的にはネストがなく冗長的でないJSONになってほしい。たとえばこのような:</p>\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"nt\">&quot;first&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;Alice&quot;</span><span class=\"p\">,</span><span class=\"nt\">&quot;last&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;Brown&quot;</span><span class=\"p\">}</span>\n</pre></div></div><p>これを実現するコードはこうなる:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">FirstName</span><span class=\"o\">(</span><span class=\"n\">firstName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">LastName</span><span class=\"o\">(</span><span class=\"n\">lastName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Name</span><span class=\"o\">(</span><span class=\"n\">first</span><span class=\"k\">:</span> <span class=\"kt\">FirstName</span><span class=\"o\">,</span> <span class=\"n\">last</span><span class=\"k\">:</span> <span class=\"kt\">LastName</span><span class=\"o\">)</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.</span><span class=\"o\">{</span> <span class=\"nc\">JsString</span><span class=\"o\">,</span> <span class=\"nc\">JsValue</span><span class=\"o\">,</span> <span class=\"nc\">RootJsonFormat</span><span class=\"o\">,</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">NameJsonProtocol</span> <span class=\"k\">extends</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">{</span>\n  <span class=\"c1\">// map case classes with 1 string parameter to JSON string</span>\n  <span class=\"k\">def</span> <span class=\"n\">jsonString</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">construct</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">stringify</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">RootJsonFormat</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">RootJsonFormat</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">JsString</span> <span class=\"o\">=</span> <span class=\"nc\">JsString</span><span class=\"o\">(</span><span class=\"n\">stringify</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"k\">def</span> <span class=\"n\">read</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">JsValue</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=</span> <span class=\"n\">construct</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">FirstNameFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonString</span><span class=\"o\">(</span><span class=\"nc\">FirstName</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">firstName</span><span class=\"o\">)</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">LastNameFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonString</span><span class=\"o\">(</span><span class=\"nc\">LastName</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">lastName</span><span class=\"o\">)</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">NameFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat2</span><span class=\"o\">(</span><span class=\"nc\">Name</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">spray.json._</span>\n<span class=\"k\">import</span> <span class=\"nn\">NameJsonProtocol._</span>\n\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Name</span><span class=\"o\">(</span><span class=\"nc\">FirstName</span><span class=\"o\">(</span><span class=\"s\">&quot;Alice&quot;</span><span class=\"o\">),</span> <span class=\"nc\">LastName</span><span class=\"o\">(</span><span class=\"s\">&quot;Brown&quot;</span><span class=\"o\">)).</span><span class=\"n\">toJson</span><span class=\"o\">)</span>\n</pre></div></div>",
        "stock_users": [
            "reoring",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 85910,
        "uuid": "d1b772b2cfed0b17299b",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "SprayでUUIDをJSONに変換したい",
        "created_at": "2014-06-30 08:08:48 +0900",
        "updated_at": "2014-06-30 08:13:08 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "spray",
                "url_name": "spray",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/d1b772b2cfed0b17299b",
        "created_at_as_seconds": 1404083328,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nspray-jsonを使ってUUIDをJSONに変換する方法。\n\nUUIDのエンコード・デコードの方法のプロトコルを定義する:\n\n```scala:UUIDJsonProtocol.scala\nimport java.util.UUID\nimport spray.json.deserializationError\nimport spray.json.{ JsString, JsValue, RootJsonFormat, DefaultJsonProtocol }\n\nobject UUIDJsonProtocol extends DefaultJsonProtocol {\n  implicit object UuidJsonFormat extends RootJsonFormat[UUID] {\n    def write(x: UUID): JsString = JsString(x.toString)\n    def read(value: JsValue): UUID = value match {\n      case JsString(x) => UUID.fromString(x)\n      case x           => deserializationError(\"Expected UUID as JsString, but got \" + x)\n    }\n  }\n}\n\n```\n\nJSONに変換するサンプルコード:\n\n```scala\nimport java.util.UUID\n\nimport spray.json._ // toJsonを使えるようになる\nimport UUIDJsonProtocol._ // プロトコルを元にコンバートできるようになる\n\nprintln(UUID.randomUUID.toJson)\n```\n",
        "body": "<p>spray-jsonを使ってUUIDをJSONに変換する方法。</p>\n<p>UUIDのエンコード・デコードの方法のプロトコルを定義する:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UUIDJsonProtocol.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.util.UUID</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.deserializationError</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.</span><span class=\"o\">{</span> <span class=\"nc\">JsString</span><span class=\"o\">,</span> <span class=\"nc\">JsValue</span><span class=\"o\">,</span> <span class=\"nc\">RootJsonFormat</span><span class=\"o\">,</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">UUIDJsonProtocol</span> <span class=\"k\">extends</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">object</span> <span class=\"nc\">UuidJsonFormat</span> <span class=\"k\">extends</span> <span class=\"nc\">RootJsonFormat</span><span class=\"o\">[</span><span class=\"kt\">UUID</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">def</span> <span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">UUID</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">JsString</span> <span class=\"o\">=</span> <span class=\"nc\">JsString</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">read</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">JsValue</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">UUID</span> <span class=\"o\">=</span> <span class=\"n\">value</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">JsString</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">UUID</span><span class=\"o\">.</span><span class=\"n\">fromString</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"k\">case</span> <span class=\"n\">x</span>           <span class=\"k\">=&gt;</span> <span class=\"n\">deserializationError</span><span class=\"o\">(</span><span class=\"s\">&quot;Expected UUID as JsString, but got &quot;</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>JSONに変換するサンプルコード:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">java.util.UUID</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">spray.json._</span> <span class=\"c1\">// toJsonを使えるようになる</span>\n<span class=\"k\">import</span> <span class=\"nn\">UUIDJsonProtocol._</span> <span class=\"c1\">// プロトコルを元にコンバートできるようになる</span>\n\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">UUID</span><span class=\"o\">.</span><span class=\"n\">randomUUID</span><span class=\"o\">.</span><span class=\"n\">toJson</span><span class=\"o\">)</span>\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 85908,
        "uuid": "b8ca77e5e04995487a39",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "SprayでDateTimeをJSONに変換したい",
        "created_at": "2014-06-30 07:37:22 +0900",
        "updated_at": "2014-06-30 07:52:35 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Joda",
                "url_name": "joda",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "spray",
                "url_name": "spray",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 2,
        "url": "http://qiita.com/suin/items/b8ca77e5e04995487a39",
        "created_at_as_seconds": 1404081442,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nspray-jsonを使ってjoda-timeのDateTimeをJSONに変換する方法。\n\n\nDateTimeのエンコード・デコードの方法のプロトコルを定義する:\n\n```scala:DateTimeJsonProtocol.scala\nimport org.joda.time.{ DateTimeZone, DateTime }\nimport org.joda.time.format.ISODateTimeFormat\nimport spray.json.deserializationError\nimport spray.json.{ JsString, JsValue, RootJsonFormat, DefaultJsonProtocol }\n\nobject DateTimeJsonProtocol extends DefaultJsonProtocol {\n  implicit object DateTimeJsonFormat extends RootJsonFormat[DateTime] {\n    private lazy val format = ISODateTimeFormat.dateTimeNoMillis()\n    def write(datetime: DateTime): JsValue = JsString(format.print(datetime.withZone(DateTimeZone.UTC)))\n    def read(json: JsValue): DateTime = json match {\n      case JsString(x) => format.parseDateTime(x)\n      case x           => deserializationError(\"Expected DateTime as JsString, but got \" + x)\n    }\n  }\n}\n\n```\n\nJSONに変換するサンプルコード:\n\n```scala\nimport org.joda.time.DateTime\n\nimport spray.json._ // toJsonを使えるようになる\nimport DateTimeJsonProtocol._ // プロトコルを元にコンバートできるようになる\n\nprintln(new DateTime().toJson)\n```\n\n出力結果:\n\n```\n\"2014-06-29T22:33:33Z\"\n```\n",
        "body": "<p>spray-jsonを使ってjoda-timeのDateTimeをJSONに変換する方法。</p>\n<p>DateTimeのエンコード・デコードの方法のプロトコルを定義する:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">DateTimeJsonProtocol.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.joda.time.</span><span class=\"o\">{</span> <span class=\"nc\">DateTimeZone</span><span class=\"o\">,</span> <span class=\"nc\">DateTime</span> <span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.joda.time.format.ISODateTimeFormat</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.deserializationError</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.</span><span class=\"o\">{</span> <span class=\"nc\">JsString</span><span class=\"o\">,</span> <span class=\"nc\">JsValue</span><span class=\"o\">,</span> <span class=\"nc\">RootJsonFormat</span><span class=\"o\">,</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">DateTimeJsonProtocol</span> <span class=\"k\">extends</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">object</span> <span class=\"nc\">DateTimeJsonFormat</span> <span class=\"k\">extends</span> <span class=\"nc\">RootJsonFormat</span><span class=\"o\">[</span><span class=\"kt\">DateTime</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">private</span> <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">format</span> <span class=\"k\">=</span> <span class=\"nc\">ISODateTimeFormat</span><span class=\"o\">.</span><span class=\"n\">dateTimeNoMillis</span><span class=\"o\">()</span>\n    <span class=\"k\">def</span> <span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">datetime</span><span class=\"k\">:</span> <span class=\"kt\">DateTime</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">JsValue</span> <span class=\"o\">=</span> <span class=\"nc\">JsString</span><span class=\"o\">(</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">withZone</span><span class=\"o\">(</span><span class=\"nc\">DateTimeZone</span><span class=\"o\">.</span><span class=\"nc\">UTC</span><span class=\"o\">)))</span>\n    <span class=\"k\">def</span> <span class=\"n\">read</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"k\">:</span> <span class=\"kt\">JsValue</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">DateTime</span> <span class=\"o\">=</span> <span class=\"n\">json</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">JsString</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">parseDateTime</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"k\">case</span> <span class=\"n\">x</span>           <span class=\"k\">=&gt;</span> <span class=\"n\">deserializationError</span><span class=\"o\">(</span><span class=\"s\">&quot;Expected DateTime as JsString, but got &quot;</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>JSONに変換するサンプルコード:</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.joda.time.DateTime</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">spray.json._</span> <span class=\"c1\">// toJsonを使えるようになる</span>\n<span class=\"k\">import</span> <span class=\"nn\">DateTimeJsonProtocol._</span> <span class=\"c1\">// プロトコルを元にコンバートできるようになる</span>\n\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DateTime</span><span class=\"o\">().</span><span class=\"n\">toJson</span><span class=\"o\">)</span>\n</pre></div></div><p>出力結果:</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>&quot;2014-06-29T22:33:33Z&quot;\n</pre></div></div>",
        "stock_users": [
            "hazima",
            "reoring",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 85907,
        "uuid": "6070551c95bdae88dd2b",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Scala: joda-timeで日付をISO-8601形式にフォーマットしたい",
        "created_at": "2014-06-30 07:22:31 +0900",
        "updated_at": "2014-06-30 07:22:31 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Joda",
                "url_name": "joda",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 3,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/6070551c95bdae88dd2b",
        "created_at_as_seconds": 1404080551,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nScalaでjoda-timeライブラリを用いて、現在日時を[ISO-8601]形式で整形する方法。\n\n```scala\nimport org.joda.time.DateTime\nimport org.joda.time.format._\n\nval parserISO = ISODateTimeFormat.dateTimeNoMillis()\nval dateString = parserISO.print(new DateTime())\n\n// dateString: String = 2014-06-30T07:13:33+09:00\n```\n\n上の例では実行環境のタイムゾーンになる。UTCでフォーマットしたい場合は、タイムゾーンをUTCに指定したDateTimeオブジェクトを渡す。\n\n```scala\nimport org.joda.time.DateTime\nimport org.joda.time.format._\nimport org.joda.time.DateTimeZone\n\nval parserISO = ISODateTimeFormat.dateTimeNoMillis()\nval dateString = parserISO.print(new DateTime().withZone(DateTimeZone.UTC))\n```\n\n\nなお、joda-timeを使うためには、build.sbt の `libraryDependencies` に `joda-time` と `joda-convert` を書いておく。\n\n```scala:build.sbt\nlibraryDependencies ++= Seq(\n  \"joda-time\" % \"joda-time\" % \"2.3\",\n  \"org.joda\" % \"joda-convert\" % \"1.6\"\n)\n```\n\n[ISO-8601]: http://en.wikipedia.org/wiki/ISO_8601\n",
        "body": "<p>Scalaでjoda-timeライブラリを用いて、現在日時を<a href=\"http://en.wikipedia.org/wiki/ISO_8601\" title=\"\" target=\"_blank\">ISO-8601</a>形式で整形する方法。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.joda.time.DateTime</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.joda.time.format._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">parserISO</span> <span class=\"k\">=</span> <span class=\"nc\">ISODateTimeFormat</span><span class=\"o\">.</span><span class=\"n\">dateTimeNoMillis</span><span class=\"o\">()</span>\n<span class=\"k\">val</span> <span class=\"n\">dateString</span> <span class=\"k\">=</span> <span class=\"n\">parserISO</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DateTime</span><span class=\"o\">())</span>\n\n<span class=\"c1\">// dateString: String = 2014-06-30T07:13:33+09:00</span>\n</pre></div></div><p>上の例では実行環境のタイムゾーンになる。UTCでフォーマットしたい場合は、タイムゾーンをUTCに指定したDateTimeオブジェクトを渡す。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.joda.time.DateTime</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.joda.time.format._</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.joda.time.DateTimeZone</span>\n\n<span class=\"k\">val</span> <span class=\"n\">parserISO</span> <span class=\"k\">=</span> <span class=\"nc\">ISODateTimeFormat</span><span class=\"o\">.</span><span class=\"n\">dateTimeNoMillis</span><span class=\"o\">()</span>\n<span class=\"k\">val</span> <span class=\"n\">dateString</span> <span class=\"k\">=</span> <span class=\"n\">parserISO</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">DateTime</span><span class=\"o\">().</span><span class=\"n\">withZone</span><span class=\"o\">(</span><span class=\"nc\">DateTimeZone</span><span class=\"o\">.</span><span class=\"nc\">UTC</span><span class=\"o\">))</span>\n</pre></div></div><p>なお、joda-timeを使うためには、build.sbt の <code>libraryDependencies</code> に <code>joda-time</code> と <code>joda-convert</code> を書いておく。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"s\">&quot;joda-time&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;joda-time&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;2.3&quot;</span><span class=\"o\">,</span>\n  <span class=\"s\">&quot;org.joda&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;joda-convert&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;1.6&quot;</span>\n<span class=\"o\">)</span>\n</pre></div></div>",
        "stock_users": [
            "ultradenshi",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 85890,
        "uuid": "539d877b6e0f058a0a95",
        "user": {
            "id": 7340,
            "url_name": "i18n",
            "profile_image_url": "https://pbs.twimg.com/profile_images/1119764464/tiwtter_normal.png"
        },
        "title": "PlayFrameworkでHikariCPとSkinnyORMを使うメモ",
        "created_at": "2014-06-30 01:35:30 +0900",
        "updated_at": "2014-07-02 02:32:46 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "PlayFramework",
                "url_name": "playframework",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8c5624d3de7311710249e76f7e1614f892c1c5bd/medium.jpg?1364840461",
                "versions": [
                    "2.3.1"
                ]
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            }
        ],
        "stock_count": 6,
        "comment_count": 1,
        "url": "http://qiita.com/i18n/items/539d877b6e0f058a0a95",
        "created_at_as_seconds": 1404059730,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\nPlayFrameworkでHikariCPとSkinnyORMを使うメモです。\nいろいろ試しているときに scalikejdbcとSkinny Frameworkの作者様からコメントを頂いたので、そのとおりにやってみました。\n\nPlayFrameworkのpluginについてほとんど理解していないので、自分にとってはおまじないに近いですが、MySQLにそれなりのコネクションが張られているので、たぶん出来てる、はず。\n\n\n~~~scala:build.sbt\nname := \"\"\"test\"\"\"\n\nversion := \"1.0-SNAPSHOT\"\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala)\n\nscalaVersion := \"2.11.1\"\n\nresolvers += Resolver.url(\"Edulify Repository\", url(\"http://edulify.github.io/modules/releases/\"))(Resolver.ivyStylePatterns)\n\nlibraryDependencies ++= Seq(\n  \"com.edulify\"          %% \"play-hikaricp\"                     % \"1.3.1\",\n  \"org.skinny-framework\" %% \"skinny-orm\"                        % \"1.1.1\",\n  \"org.scalikejdbc\"      %% \"scalikejdbc\"                       % \"2.0.4\",\n  \"org.scalikejdbc\"      %% \"scalikejdbc-play-dbplugin-adapter\" % \"2.3.0\",\n  \"mysql\"                %  \"mysql-connector-java\"              % \"5.1.31\"\n)\n~~~\n\n~~~text:application.conf(抜粋)\ndb {\n  default {\n    driver = \"com.mysql.jdbc.Driver\"\n    url = \"jdbc:mysql://localhost:3306/test\"\n    user = \"root\"\n    password = \"\"\n    partitionCount = 1\n    minConnectionsPerPartition = 5\n    maxConnectionsPerPartition = 50\n    maxConnectionAge = 30\n    defaultReadOnly = false\n    acquireRetryDelay = 1\n    statisticsEnabled = false\n    initSQL = \"SET NAMES utf8mb4\"\n  }\n}\n~~~\n\ninitSQLはどうだか分からないけど、とりあえずset names utf8mb4 にしておきました。\n",
        "body": "<p>PlayFrameworkでHikariCPとSkinnyORMを使うメモです。<br>\nいろいろ試しているときに scalikejdbcとSkinny Frameworkの作者様からコメントを頂いたので、そのとおりにやってみました。</p>\n<p>PlayFrameworkのpluginについてほとんど理解していないので、自分にとってはおまじないに近いですが、MySQLにそれなりのコネクションが張られているので、たぶん出来てる、はず。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">build.sbt</span></div><div class=\"highlight\"><pre><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;&quot;&quot;test&quot;&quot;&quot;</span>\n\n<span class=\"n\">version</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;1.0-SNAPSHOT&quot;</span>\n\n<span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">root</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">project</span> <span class=\"n\">in</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"o\">)).</span><span class=\"n\">enablePlugins</span><span class=\"o\">(</span><span class=\"nc\">PlayScala</span><span class=\"o\">)</span>\n\n<span class=\"n\">scalaVersion</span> <span class=\"o\">:=</span> <span class=\"s\">&quot;2.11.1&quot;</span>\n\n<span class=\"n\">resolvers</span> <span class=\"o\">+=</span> <span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">(</span><span class=\"s\">&quot;Edulify Repository&quot;</span><span class=\"o\">,</span> <span class=\"n\">url</span><span class=\"o\">(</span><span class=\"s\">&quot;http://edulify.github.io/modules/releases/&quot;</span><span class=\"o\">))(</span><span class=\"nc\">Resolver</span><span class=\"o\">.</span><span class=\"n\">ivyStylePatterns</span><span class=\"o\">)</span>\n\n<span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span>\n  <span class=\"s\">&quot;com.edulify&quot;</span>          <span class=\"o\">%%</span> <span class=\"s\">&quot;play-hikaricp&quot;</span>                     <span class=\"o\">%</span> <span class=\"s\">&quot;1.3.1&quot;</span><span class=\"o\">,</span>\n  <span class=\"s\">&quot;org.skinny-framework&quot;</span> <span class=\"o\">%%</span> <span class=\"s\">&quot;skinny-orm&quot;</span>                        <span class=\"o\">%</span> <span class=\"s\">&quot;1.1.1&quot;</span><span class=\"o\">,</span>\n  <span class=\"s\">&quot;org.scalikejdbc&quot;</span>      <span class=\"o\">%%</span> <span class=\"s\">&quot;scalikejdbc&quot;</span>                       <span class=\"o\">%</span> <span class=\"s\">&quot;2.0.4&quot;</span><span class=\"o\">,</span>\n  <span class=\"s\">&quot;org.scalikejdbc&quot;</span>      <span class=\"o\">%%</span> <span class=\"s\">&quot;scalikejdbc-play-dbplugin-adapter&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;2.3.0&quot;</span><span class=\"o\">,</span>\n  <span class=\"s\">&quot;mysql&quot;</span>                <span class=\"o\">%</span>  <span class=\"s\">&quot;mysql-connector-java&quot;</span>              <span class=\"o\">%</span> <span class=\"s\">&quot;5.1.31&quot;</span>\n<span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"text\"><div class=\"code-lang\"><span class=\"bold\">application.conf(抜粋)</span></div><div class=\"highlight\"><pre>db {\n  default {\n    driver = &quot;com.mysql.jdbc.Driver&quot;\n    url = &quot;jdbc:mysql://localhost:3306/test&quot;\n    user = &quot;root&quot;\n    password = &quot;&quot;\n    partitionCount = 1\n    minConnectionsPerPartition = 5\n    maxConnectionsPerPartition = 50\n    maxConnectionAge = 30\n    defaultReadOnly = false\n    acquireRetryDelay = 1\n    statisticsEnabled = false\n    initSQL = &quot;SET NAMES utf8mb4&quot;\n  }\n}\n</pre></div></div><p>initSQLはどうだか分からないけど、とりあえずset names utf8mb4 にしておきました。</p>\n",
        "stock_users": [
            "hirokaki",
            "rynkjm",
            "akokubu",
            "castersupermild",
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 85817,
        "uuid": "faef29aacb521a2a8d1d",
        "user": {
            "id": 16928,
            "url_name": "sa-wa-m@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/ea9e9592b59069d1d086953068208733?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "ScaloidでSpinnerやListViewを作る（任意のオブジェクト編）",
        "created_at": "2014-06-29 17:22:35 +0900",
        "updated_at": "2014-06-29 17:22:35 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Android",
                "url_name": "android",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0062451c92bb932b6bb257a40a35eee709b5597c/medium.jpg?1403644757",
                "versions": []
            },
            {
                "name": "scaloid",
                "url_name": "scaloid",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 0,
        "url": "http://qiita.com/sa-wa-m@github/items/faef29aacb521a2a8d1d",
        "created_at_as_seconds": 1404030155,
        "tweet": false,
        "gist_url": "https://gist.github.com/96e16a223a619a9ffbe2",
        "private": false,
        "raw_body": "## 実装の要件\n今回は、次のようなケースクラスがあって、このクラスのオブジェクトの配列からユーザに一つを選択させるためのUIを実装します。\n\n``` Category.scala\ncase class Category(val id: Int, val name: String)\n```\nSpinnerにはカテゴリの名前のリストを表示して、Spinnerのいずれかを選択してボタンを押すと選択しているカテゴリのIDと名前がToastで表示されることとします。\n\n## 実装方針\nSArrayAdapterの役割がリストを表示するUIと表示対象のデータの橋渡しであることから、SArrayAdapterを何らかの方法で拡張して、ArrayAdapterオブジェクトを作成すると良さそうです。SArrayAdapterクラスには[定義](https://github.com/pocorall/scaloid/blob/master/scaloid-common/src/main/scala/org/scaloid/common/widget.scala#L356)に基づくと、2つの型パラメータを渡せるようになっていますが、このまま使うより、[SArrayAdapterのコンパニオンオブジェクト](https://github.com/pocorall/scaloid/blob/master/scaloid-common/src/main/scala/org/scaloid/common/widget.scala#L393)を使って生成するほうが配列の型から推論してくれるので楽です。\n\n\n## サンプルコード\n``` SObjectSpinnerSample.scala\nimport org.scaloid.common._\nimport android.graphics.Color\n\nclass SObjectSpinnerSampleActivity extends SActivity {\n  var items = Array(Category(1, \"Apple\"), Category(2, \"Banana\"), Category(3, \"Orange\"))\n\n  onCreate {\n    contentView = new SVerticalLayout {\n      SSpinner() id(100) adapter createSpinnerAdapter(items)\n      SListView() id(200) adapter createListAdapter(items)\n\n      SButton(\"Add items\").onClick({\n        items = items ++ Array(Category(4, \"Mango\"), Category(5, \"Pineapple\"))\n        find[SSpinner](100).adapter(createSpinnerAdapter(items))\n        find[SListView](200).adapter(createListAdapter(items))\n      })\n      SButton(\"Show selected item\").onClick({\n        val selectedCategory = items(find[SSpinner](100).selectedItemPosition)\n        toast(\"%d-%s\".format(selectedCategory.id, selectedCategory.name))\n      })\n    } padding 20.dip\n  }\n  def createSpinnerAdapter(items: Array[Category]) = {\n    SArrayAdapter(items.map(_.name)).dropDownStyle(_.textSize(26 dip))\n  }\n  def createListAdapter(items: Array[Category]) = {\n    SArrayAdapter(items.map(_.name)).style(_.textColor(Color.BLUE))\n  }\n}\n```\nレイアウトを生成している箇所では、SSpinnerオブジェクトの生成、SListViewオブジェクトの生成をして、それぞれのオブジェクトにIDの割り当てとアダプタのセットをしています。「Add items」ボタンをクリックした際は、新しい配列とその配列を持ったAdapterを生成して、IDで検索したViewに対してそれを渡しています。「Show selected Items」をクリックした場合は、SpinnerのViewをfindメソッドを用いてIDで見つけてきて、選択されているアイテムの位置を取得してそれに対応するCategoryオブジェクトをitemsクラスから取ってきています。\n\n毎回、SArrayAdapterを生成しなおしている理由は、SArrayAdapterクラスではaddメソッド, addAllメソッドやclearメソッドは実装されていないからです。イミュータブルなオブジェクトとなっているようです。なので、毎回SSpinnerにadapterをセットしなおす感じで実装する必要があります。なので、createSpinnerAdapterで、spinner用のAdapterを生成して、createListAdapterでlistview用のAdapterを生成するようにして\n、変更時にこれらを呼び出すようにしています。\n\n実行すると次のスクリーンショットのような画面が表示されます。\n\n![screen.png](https://qiita-image-store.s3.amazonaws.com/0/16928/341ec504-2654-762e-fa12-8e50afbce22a.png \"screen.png\")\n\n以上がListViewとSpinnernの使い方でした。\n",
        "body": "<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>実装の要件\n      </h2><p>今回は、次のようなケースクラスがあって、このクラスのオブジェクトの配列からユーザに一つを選択させるためのUIを実装します。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Category.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Category</span><span class=\"o\">(</span><span class=\"k\">val</span> <span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"k\">val</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n</pre></div></div><p>Spinnerにはカテゴリの名前のリストを表示して、Spinnerのいずれかを選択してボタンを押すと選択しているカテゴリのIDと名前がToastで表示されることとします。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>実装方針\n      </h2><p>SArrayAdapterの役割がリストを表示するUIと表示対象のデータの橋渡しであることから、SArrayAdapterを何らかの方法で拡張して、ArrayAdapterオブジェクトを作成すると良さそうです。SArrayAdapterクラスには<a href=\"https://github.com/pocorall/scaloid/blob/master/scaloid-common/src/main/scala/org/scaloid/common/widget.scala#L356\" title=\"\" target=\"_blank\">定義</a>に基づくと、2つの型パラメータを渡せるようになっていますが、このまま使うより、<a href=\"https://github.com/pocorall/scaloid/blob/master/scaloid-common/src/main/scala/org/scaloid/common/widget.scala#L393\" title=\"\" target=\"_blank\">SArrayAdapterのコンパニオンオブジェクト</a>を使って生成するほうが配列の型から推論してくれるので楽です。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>サンプルコード\n      </h2><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">SObjectSpinnerSample.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.scaloid.common._</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.graphics.Color</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SObjectSpinnerSampleActivity</span> <span class=\"k\">extends</span> <span class=\"nc\">SActivity</span> <span class=\"o\">{</span>\n  <span class=\"k\">var</span> <span class=\"n\">items</span> <span class=\"k\">=</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"nc\">Category</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;Apple&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Category</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s\">&quot;Banana&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Category</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"s\">&quot;Orange&quot;</span><span class=\"o\">))</span>\n\n  <span class=\"n\">onCreate</span> <span class=\"o\">{</span>\n    <span class=\"n\">contentView</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SVerticalLayout</span> <span class=\"o\">{</span>\n      <span class=\"nc\">SSpinner</span><span class=\"o\">()</span> <span class=\"n\">id</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">adapter</span> <span class=\"n\">createSpinnerAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">)</span>\n      <span class=\"nc\">SListView</span><span class=\"o\">()</span> <span class=\"n\">id</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">)</span> <span class=\"n\">adapter</span> <span class=\"n\">createListAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">)</span>\n\n      <span class=\"nc\">SButton</span><span class=\"o\">(</span><span class=\"s\">&quot;Add items&quot;</span><span class=\"o\">).</span><span class=\"n\">onClick</span><span class=\"o\">({</span>\n        <span class=\"n\">items</span> <span class=\"k\">=</span> <span class=\"n\">items</span> <span class=\"o\">++</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"nc\">Category</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"s\">&quot;Mango&quot;</span><span class=\"o\">),</span> <span class=\"nc\">Category</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"s\">&quot;Pineapple&quot;</span><span class=\"o\">))</span>\n        <span class=\"n\">find</span><span class=\"o\">[</span><span class=\"kt\">SSpinner</span><span class=\"o\">](</span><span class=\"mi\">100</span><span class=\"o\">).</span><span class=\"n\">adapter</span><span class=\"o\">(</span><span class=\"n\">createSpinnerAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">))</span>\n        <span class=\"n\">find</span><span class=\"o\">[</span><span class=\"kt\">SListView</span><span class=\"o\">](</span><span class=\"mi\">200</span><span class=\"o\">).</span><span class=\"n\">adapter</span><span class=\"o\">(</span><span class=\"n\">createListAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">))</span>\n      <span class=\"o\">})</span>\n      <span class=\"nc\">SButton</span><span class=\"o\">(</span><span class=\"s\">&quot;Show selected item&quot;</span><span class=\"o\">).</span><span class=\"n\">onClick</span><span class=\"o\">({</span>\n        <span class=\"k\">val</span> <span class=\"n\">selectedCategory</span> <span class=\"k\">=</span> <span class=\"n\">items</span><span class=\"o\">(</span><span class=\"n\">find</span><span class=\"o\">[</span><span class=\"kt\">SSpinner</span><span class=\"o\">](</span><span class=\"mi\">100</span><span class=\"o\">).</span><span class=\"n\">selectedItemPosition</span><span class=\"o\">)</span>\n        <span class=\"n\">toast</span><span class=\"o\">(</span><span class=\"s\">&quot;%d-%s&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">(</span><span class=\"n\">selectedCategory</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">selectedCategory</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">))</span>\n      <span class=\"o\">})</span>\n    <span class=\"o\">}</span> <span class=\"n\">padding</span> <span class=\"mf\">20.d</span><span class=\"n\">ip</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">createSpinnerAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Category</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"nc\">SArrayAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">)).</span><span class=\"n\">dropDownStyle</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">textSize</span><span class=\"o\">(</span><span class=\"mi\">26</span> <span class=\"n\">dip</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">createListAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Category</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"nc\">SArrayAdapter</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">)).</span><span class=\"n\">style</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">textColor</span><span class=\"o\">(</span><span class=\"nc\">Color</span><span class=\"o\">.</span><span class=\"nc\">BLUE</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>レイアウトを生成している箇所では、SSpinnerオブジェクトの生成、SListViewオブジェクトの生成をして、それぞれのオブジェクトにIDの割り当てとアダプタのセットをしています。「Add items」ボタンをクリックした際は、新しい配列とその配列を持ったAdapterを生成して、IDで検索したViewに対してそれを渡しています。「Show selected Items」をクリックした場合は、SpinnerのViewをfindメソッドを用いてIDで見つけてきて、選択されているアイテムの位置を取得してそれに対応するCategoryオブジェクトをitemsクラスから取ってきています。</p>\n<p>毎回、SArrayAdapterを生成しなおしている理由は、SArrayAdapterクラスではaddメソッド, addAllメソッドやclearメソッドは実装されていないからです。イミュータブルなオブジェクトとなっているようです。なので、毎回SSpinnerにadapterをセットしなおす感じで実装する必要があります。なので、createSpinnerAdapterで、spinner用のAdapterを生成して、createListAdapterでlistview用のAdapterを生成するようにして<br>\n、変更時にこれらを呼び出すようにしています。</p>\n<p>実行すると次のスクリーンショットのような画面が表示されます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/16928/341ec504-2654-762e-fa12-8e50afbce22a.png\" alt=\"screen.png\" title=\"screen.png\"></p>\n<p>以上がListViewとSpinnernの使い方でした。</p>\n",
        "stock_users": [
            "nijojin",
            "sawamur@github",
            "futo4",
            "kasumani",
            "kazica",
            "Reds"
        ]
    },
    {
        "id": 85356,
        "uuid": "73c957f9d2ec0d2ef6fb",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Scala:日付をISO-8601形式にフォーマットしたい",
        "created_at": "2014-06-27 19:01:28 +0900",
        "updated_at": "2014-06-27 19:01:28 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.10.3"
                ]
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/73c957f9d2ec0d2ef6fb",
        "created_at_as_seconds": 1403863288,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "`java.util.Date`を[ISO-8601]の形式にフォーマットする方法。\n\n```scala\nval tz = java.util.TimeZone.getTimeZone(\"UTC\")\nval df = new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\")\ndf.setTimeZone(tz)\ndf.format(new java.util.Date())  //> res0: String = 2014-06-27T09:54:57Z\n````\n\n[ISO-8601]: http://en.wikipedia.org/wiki/ISO_8601\n",
        "body": "<p><code>java.util.Date</code>を<a href=\"http://en.wikipedia.org/wiki/ISO_8601\" title=\"\" target=\"_blank\">ISO-8601</a>の形式にフォーマットする方法。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">tz</span> <span class=\"k\">=</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">TimeZone</span><span class=\"o\">.</span><span class=\"n\">getTimeZone</span><span class=\"o\">(</span><span class=\"s\">&quot;UTC&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">df</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"nc\">SimpleDateFormat</span><span class=\"o\">(</span><span class=\"s\">&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">setTimeZone</span><span class=\"o\">(</span><span class=\"n\">tz</span><span class=\"o\">)</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Date</span><span class=\"o\">())</span>  <span class=\"c1\">//&gt; res0: String = 2014-06-27T09:54:57Z</span>\n</pre></div></div>",
        "stock_users": [
            "Reds",
            "kasumani",
            "sharow",
            "akmiyoshi"
        ]
    },
    {
        "id": 85252,
        "uuid": "09029d90c3a217f9c28f",
        "user": {
            "id": 47014,
            "url_name": "rubyu",
            "profile_image_url": "https://pbs.twimg.com/profile_images/585391487/qBqPu0mK.20061024094725_normal.jpg"
        },
        "title": "print/printlnを使う関数をテストするときはConsole.withOutを使おう",
        "created_at": "2014-06-27 16:21:37 +0900",
        "updated_at": "2014-06-29 19:45:55 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 2,
        "url": "http://qiita.com/rubyu/items/09029d90c3a217f9c28f",
        "created_at_as_seconds": 1403853697,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "# `System.out`が`Console.outVar`にキャッシュされるのを知らなかったという話です\n\n`print`と`println`の両方について当てはまるので以下は`print`の例だけを書きます。\n\n## `print`が処理される流れ\nまず前提として`print`は暗黙に`import Predef._`されてる`Predef.print`です。\n\n```Predef.scala\n\nobject Predef extends LowPriorityImplicits {\n  def print(x: Any) = Console.print(x)\n```\n\n```Conole.scala\nobject Console {\n  def print(obj: Any) {\n    out.print(if (null == obj) \"null\" else obj.toString())\n  }\n  def out = outVar.value\n  private val outVar = new DynamicVariable[PrintStream](java.lang.System.out)\n```\n\n順に辿っていくと、`Console.outVar`が`System.out`の値で初期化されていることがわかります。\n## `Console`はobjectなので遅延評価（最初にメンバーへのアクセスがあった時に評価）されます\n`System.out`はキャッシュされて、その後の`System.setOut`は効果を及ぼしません。\n`Console.setOut`で強制的に`Console.outVar.value`を上書きすることもできますが、2.11から非推奨になっていますので、`Console.withOut`を使うのがいいようです。\n\n```Conole.scala\nobject Console {\n  def withOut[T](out: PrintStream)(thunk: =>T): T =\n    outVar.withValue(out)(thunk)\n```\n\n```Test.scala\n\"Predef.print\" should {\n  \"print hello\" in {\n    val outStream = new ByteArrayOutputStream\n    val out = new PrintStream(new BufferedOutputStream(outStream), true, \"utf-8\")\n    Console.withOut(out) {\n      print(\"hello\")\n      out.flush()\n      outStream.toString(\"utf-8\") mustEqual \"hello\"\n    }\n  }\n}\n```\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a><code>System.out</code>が<code>Console.outVar</code>にキャッシュされるのを知らなかったという話です\n      </h1><p><code>print</code>と<code>println</code>の両方について当てはまるので以下は<code>print</code>の例だけを書きます。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a><code>print</code>が処理される流れ\n      </h2><p>まず前提として<code>print</code>は暗黙に<code>import Predef._</code>されてる<code>Predef.print</code>です。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Predef.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Predef</span> <span class=\"k\">extends</span> <span class=\"nc\">LowPriorityImplicits</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"nc\">Console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Conole.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Console</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"k\">:</span> <span class=\"kt\">Any</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"s\">&quot;null&quot;</span> <span class=\"k\">else</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">())</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">def</span> <span class=\"n\">out</span> <span class=\"k\">=</span> <span class=\"n\">outVar</span><span class=\"o\">.</span><span class=\"n\">value</span>\n  <span class=\"k\">private</span> <span class=\"k\">val</span> <span class=\"n\">outVar</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DynamicVariable</span><span class=\"o\">[</span><span class=\"kt\">PrintStream</span><span class=\"o\">](</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">)</span>\n</pre></div></div><p>順に辿っていくと、<code>Console.outVar</code>が<code>System.out</code>の値で初期化されていることがわかります。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a><code>Console</code>はobjectなので遅延評価（最初にメンバーへのアクセスがあった時に評価）されます\n      </h2><p><code>System.out</code>はキャッシュされて、その後の<code>System.setOut</code>は効果を及ぼしません。<br>\n<code>Console.setOut</code>で強制的に<code>Console.outVar.value</code>を上書きすることもできますが、2.11から非推奨になっていますので、<code>Console.withOut</code>を使うのがいいようです。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Conole.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">Console</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">withOut</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">out</span><span class=\"k\">:</span> <span class=\"kt\">PrintStream</span><span class=\"o\">)(</span><span class=\"n\">thunk</span><span class=\"k\">:</span> <span class=\"o\">=&gt;</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">T</span> <span class=\"o\">=</span>\n    <span class=\"n\">outVar</span><span class=\"o\">.</span><span class=\"n\">withValue</span><span class=\"o\">(</span><span class=\"n\">out</span><span class=\"o\">)(</span><span class=\"n\">thunk</span><span class=\"o\">)</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Test.scala</span></div><div class=\"highlight\"><pre><span class=\"s\">&quot;Predef.print&quot;</span> <span class=\"n\">should</span> <span class=\"o\">{</span>\n  <span class=\"s\">&quot;print hello&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">outStream</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ByteArrayOutputStream</span>\n    <span class=\"k\">val</span> <span class=\"n\">out</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintStream</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">BufferedOutputStream</span><span class=\"o\">(</span><span class=\"n\">outStream</span><span class=\"o\">),</span> <span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"s\">&quot;utf-8&quot;</span><span class=\"o\">)</span>\n    <span class=\"nc\">Console</span><span class=\"o\">.</span><span class=\"n\">withOut</span><span class=\"o\">(</span><span class=\"n\">out</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span>\n      <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"o\">()</span>\n      <span class=\"n\">outStream</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">(</span><span class=\"s\">&quot;utf-8&quot;</span><span class=\"o\">)</span> <span class=\"n\">mustEqual</span> <span class=\"s\">&quot;hello&quot;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>",
        "stock_users": [
            "suin",
            "khiraiwa",
            "Reds",
            "kasumani"
        ]
    },
    {
        "id": 85216,
        "uuid": "604b2f0823371f16e07d",
        "user": {
            "id": 27773,
            "url_name": "asmasa",
            "profile_image_url": "https://secure.gravatar.com/avatar/ffd76e11956095ef32effffb5fc5878b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "独書会 Scala IN DEPTH @夜のイタリアンカフェ その4",
        "created_at": "2014-06-27 14:52:48 +0900",
        "updated_at": "2014-06-27 14:52:48 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/asmasa/items/604b2f0823371f16e07d",
        "created_at_as_seconds": 1403848368,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "[独書会 Scala IN DEPTH @大人のバーガー屋 その3](http://qiita.com/asmasa/items/82efd4dd473ce14973a2)で記述した、第2章 __The core rules__ の続き。\n\n要約\n--\n\n# Nullの代わりにNoneを使う\n\n- `null`を阻止するプログラミングをするには、Scalaはベストな選択である。\n- `null`を阻止するために、`scala.Option`を使うことができる。\n- `Option`は __あるか・ないか__ のコンテナと考えることができる。\n- `Option`には、`Some`と`None`の2つのサブクラスがある。\n\n`null`を許す言語は、`null`は戻り値として致命的でないエラーを示す。\nまた、 __初期化されていないこと__ を示すプレースホルダとして使われる。\n\n## Scalaでの表現\n    \n- `Option`のサブクラス`None`で、`null`を表せる。\n- `Option`のサブクラス`Some`で、 __初期化された変数__ と __致命的でない変数__ の状態を表せる。\n\n## `Option`の生成\n\n- 値を含まない`Option`は、`None`オブジェクトを通して生成される。\n- 値を含む`Option`は、`Some`のファクトリメソッドを通して生成される。\n\n## `Option`の内部の値の取得\n\n### `get`\n\n- `Option`に格納した値にアクセスする\n- 存在しない場合は、`Exception`をスローする。\n- 他の言語で`null`値を許容するのに似ている。\n\n### `getOrElse`\n\n- 値が存在する場合は、`Option`に格納された値にアクセスしようとする。\n- 値が存在しない場合は、メソッドに指定した値を返す。\n\n__`get`よりも`getOrElse`を常に選ぶべきである。__\n\n## `Option`のファクトリメソッド\n\n`Option`のコンパニオンオブジェクトでは、ファクトリメソッドを提供している。\n\n- 入力が`null`なら`None`を作る。\n- 入力が初期化されているなら`Some`を作る。\n\n`Option`にラップすることは、信頼出来ないソース(別のJVM言語とか)からの入力を受け取ることを簡単にする。\n\nコードで`null`チェックする箇所がシンプルになる。\n`Option`は、`null`を使ったり`if`チェックするよりも高度な機能を提供する。\n\n## `Option`のテクニック\n\n- `Option`の最大の特徴は、 __collection__ のように扱えること。\n- `map`, `flatMap`, `foreach`メソッドを使うことができるし、内部で式を利用することもできる。\n- これにより簡潔なシンタックスで書けるし、初期化されていない値を処理する様々なメソッドを使える。\n\n### オブジェクトを生成するかデフォルトを返すか\n\n> ```scala:Listing&nbsp;2.17&nbsp;Creating&nbsp;an&nbsp;object&nbsp;or&nbsp;returning&nbsp;a&nbsp;default\ndef getTemporaryDirectory(tmpArg: Option[String]): java.io.File = {\n￼￼\ntmpArg.map(name => new java.io.File(name)).\n    filter(_.isDirectory).\n    getOrElse(new java.io.File(\n      System.getProperty(\"java.io.tmpdir\")))\n￼￼￼￼￼￼}\n```\n> (Joshua D. Suereth, Scala in Depth, p.35)\n\nここでは、以下の場合に適切なテンポラリディレクトリを返したい。\n\n- ユーザが新しいファイルを指定しない場合\n- ユーザが与えた引数が存在しないディレクトリの場合\n- ディレクトリを提供できなかった場合\n\n`if`文やブロックのネストに頼ることなく強力なチェックを可能にする。\n特定のパラメータの利用に基づいたコードブロックを実行したいときには、ブロックを好んで使う。\n\n### 変数が初期化されていれば、ブロックを実行する\n\n> ```scala:Listing&nbsp;2.18&nbsp;Executing&nbsp;code&nbsp;if&nbsp;option&nbsp;is&nbsp;defined\nval username: Option[String] = ...\nfor(uname <- username) {\n   println(\"User: \" + uname)\n}\n```\n> (Joshua D. Suereth, Scala in Depth, p.36)\n\n- `Option`は値を含む場合に、コードブロックを実行することができる。\n- `foreach`メソッドで実現できる。つまり、`Option`内の全ての要素を反復処理する。\n- `Option`は、0 or 1つの値だけを含む。これは、ブロックが __実行される__ か __無視される__ かを意味する。\n- このシンタックスは特に式に適している。\n\n> ```scala:Listing&nbsp;2.19&nbsp;Executing&nbsp;code&nbsp;if&nbsp;several&nbsp;options&nbsp;are&nbsp;defined\ndef authenticateSession(session: HttpSession,\n                        username: Option[String],\n                        password: Option[Array[Char]]) = {\n   for(u <- username;\n       p <- password;\n       if canAuthenticate(u, p)) {\n     val privileges = privilegesFor(u)\n     injectPrivilegesIntoSession(session, privileges)\n￼￼} }\n```\n> (Joshua D. Suereth, Scala in Depth, p.36)\n\nユーザ認証をして、セキュリティトークンをHTTPSessionにインジェクションする例。 \nこうしておけば、後でフィルタとサーブレットがアクセス権限をチェックできる。\n\n- この例では、式で条件ロジックを組み込んでいる。少ないネストで論理ブロックを保持するのに役に立つ。\n- 全てのヘルパーメソッドが`Option`クラスを使う必要ないことは、重要なことである。\n- `Option`は、初期化していない変数の最前線の防御として機能する。`Option`がコードの残りを汚染する必要はない。\n- 引数としての`Option`は、 __初期化されていない・初期化されている可能性__ があることを意味する。\n- メソッドが`Option`として受け取らないなら、値を`null` or __初期化されていないパラメータ__ で渡すべきではない。\n\n\n### 別の変数を生成するために、潜在的に初期化されていない変数を使う\n\n> ```scala:Listing&nbsp;2.20&nbsp;Merging&nbsp;options\ndef createConnection(conn_url: Option[String],\n                    conn_user: Option[String],\n                    conn_pw: Option[String]) : Option[Connection] =\n  for {\n    url <- conn_url\n    user <- conn_user\n    pw <- conn_pw\n  } yield DriverManager.getConnection(url, user, pw)\n```\n> (Joshua D. Suereth, Scala in Depth, p.37)\n\n\n初期化されていない可能性がある変数の集合を変換したい場合がある。\nこの時は`for`式を使い、同時に`yield`も使う。\n\n#### `lift`関数\n\n> ```scala:Listing&nbsp;2.21&nbsp;Generically&nbsp;converting&nbsp;functions\nscala>  def lift3[A,B,C,D](\n     |  f: Function3[A,B,C,D]): Function3[Option[A], Option[B],\n     |                                    Option[C], Option[D]] = {\n     |     (oa : Option[A], ob : Option[B], oc : Option[C]) =>\n     |        for(a <- oa; b <- ob; c <- oc) yield f(a,b,c)\n     |   }\nlift3: [A,B,C,D](f: (A, B, C) => D)(Option[A],\n                                       Option[B],\n                                       Option[C]) => Option[D]\nscala> lift3(DriverManager.getConnection)\nres4: (Option[java.lang.String],\n       Option[java.lang.String],\n       Option[java.lang.String]) => Option[java.sql.Connection] =\n  <function3>\n```\n> (Joshua D. Suereth, Scala in Depth, p.37)\n\n- `lift3`メソッドは、唯一のパラメータとして関数を受け取ることを除いて、先ほどの`createConnection`メソッドに似ている。\n- `Function3`traitは、3つの引数を受け取り結果を返す関数である。\n- `lift3`関数は、入力として3つの引数の関数を受け取り、3つの引数の関数を出力する。\n- REPLの出力からわかるように、`Option`フレンドリーな関数を作るために、既存の関数に対して使うことができる。\n\n直接`DriverManager.getConnection`メソッドを受け取り、初期の`createConnection`メソッドと意味的に等価な関数になる。\n\n__初期化されていない変数のカプセル化で使われる時、このテクニックはうまく動作する。__\n\n初期化されていると仮定して、ユーティリティメソッドも含めてコードのほとんどで書くことができる。\nそして必要な時に、これらの関数を`Option`フレンドリーの変種にする。\n\n重要な点は、`Option`に含まれるものからequalityとhashCodeを導出することである。\n__Scalaでは、`equality`と`hashCode`理解することは、特に多態では重要である。__\n\n# Rule\n## 4. `null`の代わりに`None`を使う\n- Javaでは値を`null`で初期化するのが習慣であったが、Scalaでは同じ目的で`Option`が用意されている。\n- `None`を使うと、意図しない __null pointer__ を防げる。\n\n所感\n--\n\n- `Option`はどこで使うかを見極めるのが重要。なんでもかんでも使うと、逆に簡潔性が失われる。\n- 複数の`Option`型の変数を扱うのに __for-comprehension__ を使うのは有用。\n- 同一ブロック内で、ある`Option`型の変数を2回以上評価させたら負けかな。\n    - つまり、関数の戻り値を`Option`型で変数に入れるのは、いけていない。値を __取り出す前__ と __取り出した後__ の変数名で悩むため。。。\n\n\n",
        "body": "<p><a href=\"http://qiita.com/asmasa/items/82efd4dd473ce14973a2\" title=\"\">独書会 Scala IN DEPTH @大人のバーガー屋 その3</a>で記述した、第2章 <strong>The core rules</strong> の続き。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>要約\n      </h2><h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>Nullの代わりにNoneを使う\n      </h1>\n<ul>\n<li><code>null</code>を阻止するプログラミングをするには、Scalaはベストな選択である。</li>\n<li><code>null</code>を阻止するために、<code>scala.Option</code>を使うことができる。</li>\n<li><code>Option</code>は <strong>あるか・ないか</strong> のコンテナと考えることができる。</li>\n<li><code>Option</code>には、<code>Some</code>と<code>None</code>の2つのサブクラスがある。</li>\n</ul>\n<p><code>null</code>を許す言語は、<code>null</code>は戻り値として致命的でないエラーを示す。<br>\nまた、 <strong>初期化されていないこと</strong> を示すプレースホルダとして使われる。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Scalaでの表現\n      </h2>\n<ul>\n<li><code>Option</code>のサブクラス<code>None</code>で、<code>null</code>を表せる。</li>\n<li><code>Option</code>のサブクラス<code>Some</code>で、 <strong>初期化された変数</strong> と <strong>致命的でない変数</strong> の状態を表せる。</li>\n</ul>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a><code>Option</code>の生成\n      </h2>\n<ul>\n<li>値を含まない<code>Option</code>は、<code>None</code>オブジェクトを通して生成される。</li>\n<li>値を含む<code>Option</code>は、<code>Some</code>のファクトリメソッドを通して生成される。</li>\n</ul>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a><code>Option</code>の内部の値の取得\n      </h2><h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a><code>get</code>\n      </h3>\n<ul>\n<li><code>Option</code>に格納した値にアクセスする</li>\n<li>存在しない場合は、<code>Exception</code>をスローする。</li>\n<li>他の言語で<code>null</code>値を許容するのに似ている。</li>\n</ul>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a><code>getOrElse</code>\n      </h3>\n<ul>\n<li>値が存在する場合は、<code>Option</code>に格納された値にアクセスしようとする。</li>\n<li>値が存在しない場合は、メソッドに指定した値を返す。</li>\n</ul>\n<p><strong><code>get</code>よりも<code>getOrElse</code>を常に選ぶべきである。</strong></p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a><code>Option</code>のファクトリメソッド\n      </h2><p><code>Option</code>のコンパニオンオブジェクトでは、ファクトリメソッドを提供している。</p>\n\n<ul>\n<li>入力が<code>null</code>なら<code>None</code>を作る。</li>\n<li>入力が初期化されているなら<code>Some</code>を作る。</li>\n</ul>\n<p><code>Option</code>にラップすることは、信頼出来ないソース(別のJVM言語とか)からの入力を受け取ることを簡単にする。</p>\n<p>コードで<code>null</code>チェックする箇所がシンプルになる。<br>\n<code>Option</code>は、<code>null</code>を使ったり<code>if</code>チェックするよりも高度な機能を提供する。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a><code>Option</code>のテクニック\n      </h2>\n<ul>\n<li><code>Option</code>の最大の特徴は、 <strong>collection</strong> のように扱えること。</li>\n<li><code>map</code>, <code>flatMap</code>, <code>foreach</code>メソッドを使うことができるし、内部で式を利用することもできる。</li>\n<li>これにより簡潔なシンタックスで書けるし、初期化されていない値を処理する様々なメソッドを使える。</li>\n</ul>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>オブジェクトを生成するかデフォルトを返すか\n      </h3>\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.17&nbsp;Creating&nbsp;an&nbsp;object&nbsp;or&nbsp;returning&nbsp;a&nbsp;default</span></div><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">getTemporaryDirectory</span><span class=\"o\">(</span><span class=\"n\">tmpArg</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">java.io.File</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n<span class=\"o\">￼￼</span>\n<span class=\"n\">tmpArg</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">)).</span>\n    <span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">isDirectory</span><span class=\"o\">).</span>\n    <span class=\"n\">getOrElse</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"nc\">File</span><span class=\"o\">(</span>\n      <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">getProperty</span><span class=\"o\">(</span><span class=\"s\">&quot;java.io.tmpdir&quot;</span><span class=\"o\">)))</span>\n<span class=\"o\">￼￼￼￼￼￼}</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.35)</p>\n</blockquote>\n<p>ここでは、以下の場合に適切なテンポラリディレクトリを返したい。</p>\n\n<ul>\n<li>ユーザが新しいファイルを指定しない場合</li>\n<li>ユーザが与えた引数が存在しないディレクトリの場合</li>\n<li>ディレクトリを提供できなかった場合</li>\n</ul>\n<p><code>if</code>文やブロックのネストに頼ることなく強力なチェックを可能にする。<br>\n特定のパラメータの利用に基づいたコードブロックを実行したいときには、ブロックを好んで使う。</p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>変数が初期化されていれば、ブロックを実行する\n      </h3>\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.18&nbsp;Executing&nbsp;code&nbsp;if&nbsp;option&nbsp;is&nbsp;defined</span></div><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">username</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">...</span>\n<span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">uname</span> <span class=\"k\">&lt;-</span> <span class=\"n\">username</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;User: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">uname</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.36)</p>\n</blockquote>\n\n<ul>\n<li><code>Option</code>は値を含む場合に、コードブロックを実行することができる。</li>\n<li><code>foreach</code>メソッドで実現できる。つまり、<code>Option</code>内の全ての要素を反復処理する。</li>\n<li><code>Option</code>は、0 or 1つの値だけを含む。これは、ブロックが <strong>実行される</strong> か <strong>無視される</strong> かを意味する。</li>\n<li>このシンタックスは特に式に適している。</li>\n</ul>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.19&nbsp;Executing&nbsp;code&nbsp;if&nbsp;several&nbsp;options&nbsp;are&nbsp;defined</span></div><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">authenticateSession</span><span class=\"o\">(</span><span class=\"n\">session</span><span class=\"k\">:</span> <span class=\"kt\">HttpSession</span><span class=\"o\">,</span>\n                        <span class=\"n\">username</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">],</span>\n                        <span class=\"n\">password</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Char</span><span class=\"o\">]])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n   <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"k\">&lt;-</span> <span class=\"n\">username</span><span class=\"o\">;</span>\n       <span class=\"n\">p</span> <span class=\"k\">&lt;-</span> <span class=\"n\">password</span><span class=\"o\">;</span>\n       <span class=\"k\">if</span> <span class=\"n\">canAuthenticate</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n     <span class=\"k\">val</span> <span class=\"n\">privileges</span> <span class=\"k\">=</span> <span class=\"n\">privilegesFor</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">)</span>\n     <span class=\"n\">injectPrivilegesIntoSession</span><span class=\"o\">(</span><span class=\"n\">session</span><span class=\"o\">,</span> <span class=\"n\">privileges</span><span class=\"o\">)</span>\n<span class=\"o\">￼￼}</span> <span class=\"o\">}</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.36)</p>\n</blockquote>\n<p>ユーザ認証をして、セキュリティトークンをHTTPSessionにインジェクションする例。 <br>\nこうしておけば、後でフィルタとサーブレットがアクセス権限をチェックできる。</p>\n\n<ul>\n<li>この例では、式で条件ロジックを組み込んでいる。少ないネストで論理ブロックを保持するのに役に立つ。</li>\n<li>全てのヘルパーメソッドが<code>Option</code>クラスを使う必要ないことは、重要なことである。</li>\n<li><code>Option</code>は、初期化していない変数の最前線の防御として機能する。<code>Option</code>がコードの残りを汚染する必要はない。</li>\n<li>引数としての<code>Option</code>は、 <strong>初期化されていない・初期化されている可能性</strong> があることを意味する。</li>\n<li>メソッドが<code>Option</code>として受け取らないなら、値を<code>null</code> or <strong>初期化されていないパラメータ</strong> で渡すべきではない。</li>\n</ul>\n<h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>別の変数を生成するために、潜在的に初期化されていない変数を使う\n      </h3>\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.20&nbsp;Merging&nbsp;options</span></div><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">createConnection</span><span class=\"o\">(</span><span class=\"n\">conn_url</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">],</span>\n                    <span class=\"n\">conn_user</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">],</span>\n                    <span class=\"n\">conn_pw</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Connection</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">url</span> <span class=\"k\">&lt;-</span> <span class=\"n\">conn_url</span>\n    <span class=\"n\">user</span> <span class=\"k\">&lt;-</span> <span class=\"n\">conn_user</span>\n    <span class=\"n\">pw</span> <span class=\"k\">&lt;-</span> <span class=\"n\">conn_pw</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"nc\">DriverManager</span><span class=\"o\">.</span><span class=\"n\">getConnection</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">pw</span><span class=\"o\">)</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.37)</p>\n</blockquote>\n<p>初期化されていない可能性がある変数の集合を変換したい場合がある。<br>\nこの時は<code>for</code>式を使い、同時に<code>yield</code>も使う。</p>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a><code>lift</code>関数\n      </h4>\n<blockquote>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Listing&nbsp;2.21&nbsp;Generically&nbsp;converting&nbsp;functions</span></div><div class=\"highlight\"><pre><span class=\"n\">scala</span><span class=\"o\">&gt;</span>  <span class=\"k\">def</span> <span class=\"n\">lift3</span><span class=\"o\">[</span><span class=\"kt\">A</span>,<span class=\"kt\">B</span>,<span class=\"kt\">C</span>,<span class=\"kt\">D</span><span class=\"o\">](</span>\n     <span class=\"o\">|</span>  <span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Function3</span><span class=\"o\">[</span><span class=\"kt\">A</span>,<span class=\"kt\">B</span>,<span class=\"kt\">C</span>,<span class=\"kt\">D</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Function3</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>, <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>,\n     <span class=\"kt\">|</span>                                    <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">C</span><span class=\"o\">]</span>, <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">D</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n     <span class=\"o\">|</span>     <span class=\"o\">(</span><span class=\"n\">oa</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span> <span class=\"n\">ob</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">],</span> <span class=\"n\">oc</span> <span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">C</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span>\n     <span class=\"o\">|</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"k\">&lt;-</span> <span class=\"n\">oa</span><span class=\"o\">;</span> <span class=\"n\">b</span> <span class=\"k\">&lt;-</span> <span class=\"n\">ob</span><span class=\"o\">;</span> <span class=\"n\">c</span> <span class=\"k\">&lt;-</span> <span class=\"n\">oc</span><span class=\"o\">)</span> <span class=\"k\">yield</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span>\n     <span class=\"o\">|</span>   <span class=\"o\">}</span>\n<span class=\"n\">lift3</span><span class=\"k\">:</span> <span class=\"err\">[</span><span class=\"kt\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"err\">]</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"kt\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">D</span><span class=\"o\">)(</span><span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">],</span>\n                                       <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">],</span>\n                                       <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">C</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">D</span><span class=\"o\">]</span>\n<span class=\"n\">scala</span><span class=\"o\">&gt;</span> <span class=\"n\">lift3</span><span class=\"o\">(</span><span class=\"nc\">DriverManager</span><span class=\"o\">.</span><span class=\"n\">getConnection</span><span class=\"o\">)</span>\n<span class=\"n\">res4</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">java.lang.String</span><span class=\"o\">],</span>\n       <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">java.lang.String</span><span class=\"o\">],</span>\n       <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">java.lang.String</span><span class=\"o\">])</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Option</span><span class=\"o\">[</span><span class=\"kt\">java.sql.Connection</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">function3</span><span class=\"o\">&gt;</span>\n</pre></div></div><p>(Joshua D. Suereth, Scala in Depth, p.37)</p>\n</blockquote>\n\n<ul>\n<li><code>lift3</code>メソッドは、唯一のパラメータとして関数を受け取ることを除いて、先ほどの<code>createConnection</code>メソッドに似ている。</li>\n<li><code>Function3</code>traitは、3つの引数を受け取り結果を返す関数である。</li>\n<li><code>lift3</code>関数は、入力として3つの引数の関数を受け取り、3つの引数の関数を出力する。</li>\n<li>REPLの出力からわかるように、<code>Option</code>フレンドリーな関数を作るために、既存の関数に対して使うことができる。</li>\n</ul>\n<p>直接<code>DriverManager.getConnection</code>メソッドを受け取り、初期の<code>createConnection</code>メソッドと意味的に等価な関数になる。</p>\n<p><strong>初期化されていない変数のカプセル化で使われる時、このテクニックはうまく動作する。</strong></p>\n<p>初期化されていると仮定して、ユーティリティメソッドも含めてコードのほとんどで書くことができる。<br>\nそして必要な時に、これらの関数を<code>Option</code>フレンドリーの変種にする。</p>\n<p>重要な点は、<code>Option</code>に含まれるものからequalityとhashCodeを導出することである。<br>\n<strong>Scalaでは、<code>equality</code>と<code>hashCode</code>理解することは、特に多態では重要である。</strong></p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>Rule\n      </h1><h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>4. <code>null</code>の代わりに<code>None</code>を使う\n      </h2>\n<ul>\n<li>Javaでは値を<code>null</code>で初期化するのが習慣であったが、Scalaでは同じ目的で<code>Option</code>が用意されている。</li>\n<li><code>None</code>を使うと、意図しない <strong>null pointer</strong> を防げる。</li>\n</ul>\n<h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>所感\n      </h2>\n<ul>\n<li><code>Option</code>はどこで使うかを見極めるのが重要。なんでもかんでも使うと、逆に簡潔性が失われる。</li>\n<li>複数の<code>Option</code>型の変数を扱うのに <strong>for-comprehension</strong> を使うのは有用。</li>\n<li>同一ブロック内で、ある<code>Option</code>型の変数を2回以上評価させたら負けかな。\n\n<ul>\n<li>つまり、関数の戻り値を<code>Option</code>型で変数に入れるのは、いけていない。値を <strong>取り出す前</strong> と <strong>取り出した後</strong> の変数名で悩むため。。。</li>\n</ul></li>\n</ul>\n",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 84651,
        "uuid": "28c0fbd1140df1a5f91e",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Spray: 現在のURLを取得する方法",
        "created_at": "2014-06-26 12:24:26 +0900",
        "updated_at": "2014-06-26 12:24:42 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "spray",
                "url_name": "spray",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "1.3.1"
                ]
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.10.4"
                ]
            },
            {
                "name": "HTTP",
                "url_name": "http",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "1.1"
                ]
            }
        ],
        "stock_count": 2,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/28c0fbd1140df1a5f91e",
        "created_at_as_seconds": 1403753066,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n* [requierstUri](http://spray.io/documentation/1.2.1/spray-routing/misc-directives/requestUri/)で取ることができる。\n* 現在のURIをもとに、別の完全なURLを作ることもできる。\n\n```scala\n    path(\"foo\") {\n      requestUri { uri =>\n        val barURL = uri.withPath(Uri.Path(\"/bar\")) // 別の完全なURLを生成\n        complete(barURL.toString())\n      }\n    }\n```\n\n```http\nHTTP/1.1 200 OK\nContent-Length: 25\nContent-Type: text/plain; charset=UTF-8\nDate: Thu, 26 Jun 2014 03:18:49 GMT\nServer: spray-can/1.3.1\n\nhttp://localhost:8080/bar\n```\n",
        "body": "<ul>\n<li><a href=\"http://spray.io/documentation/1.2.1/spray-routing/misc-directives/requestUri/\" title=\"\" target=\"_blank\">requierstUri</a>で取ることができる。</li>\n<li>現在のURIをもとに、別の完全なURLを作ることもできる。</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre>    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">requestUri</span> <span class=\"o\">{</span> <span class=\"n\">uri</span> <span class=\"k\">=&gt;</span>\n        <span class=\"k\">val</span> <span class=\"n\">barURL</span> <span class=\"k\">=</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">withPath</span><span class=\"o\">(</span><span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"nc\">Path</span><span class=\"o\">(</span><span class=\"s\">&quot;/bar&quot;</span><span class=\"o\">))</span> <span class=\"c1\">// 別の完全なURLを生成</span>\n        <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"n\">barURL</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">())</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"http\"><div class=\"highlight\"><pre><span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span> <span class=\"m\">200</span> <span class=\"ne\">OK</span>\n<span class=\"na\">Content-Length</span><span class=\"o\">:</span> <span class=\"l\">25</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">text/plain; charset=UTF-8</span>\n<span class=\"na\">Date</span><span class=\"o\">:</span> <span class=\"l\">Thu, 26 Jun 2014 03:18:49 GMT</span>\n<span class=\"na\">Server</span><span class=\"o\">:</span> <span class=\"l\">spray-can/1.3.1</span>\n\nhttp://localhost:8080/bar\n</pre></div></div>",
        "stock_users": [
            "kasumani",
            "Reds"
        ]
    },
    {
        "id": 84211,
        "uuid": "f4adf12ce43cb8107a88",
        "user": {
            "id": 7565,
            "url_name": "reoring",
            "profile_image_url": "https://secure.gravatar.com/avatar/3735457720e670a400e445ae0f419ac1?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"
        },
        "title": "ScalaでUUIDを生成する関数",
        "created_at": "2014-06-25 15:46:24 +0900",
        "updated_at": "2014-06-25 15:46:24 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/reoring/items/f4adf12ce43cb8107a88",
        "created_at_as_seconds": 1403678784,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n```scala\ndef uuid = java.util.UUID.randomUUID.toString\n```\n\n```\nres0: String = 40d98b06-788e-4e06-aa87-abb3cdf653fd\n```\n",
        "body": "<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">uuid</span> <span class=\"k\">=</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">UUID</span><span class=\"o\">.</span><span class=\"n\">randomUUID</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>res0: String = 40d98b06-788e-4e06-aa87-abb3cdf653fd\n</pre></div></div>",
        "stock_users": [
            "suin",
            "akmiyoshi",
            "kasumani",
            "Reds",
            "poad1010"
        ]
    },
    {
        "id": 84112,
        "uuid": "f3c1c465aa0b74f10236",
        "user": {
            "id": 14950,
            "url_name": "mather314",
            "profile_image_url": "https://secure.gravatar.com/avatar/3204f6241aaca4a1082bfe1202e60d69"
        },
        "title": "SlickでJDBCドライバを実行時に切り替えるメモ",
        "created_at": "2014-06-25 11:43:13 +0900",
        "updated_at": "2014-07-02 10:35:29 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "slick",
                "url_name": "slick",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/7d1876d6693943de113729bfe4ec68505dc45c41/medium.jpg?1384315712",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 5,
        "comment_count": 0,
        "url": "http://qiita.com/mather314/items/f3c1c465aa0b74f10236",
        "created_at_as_seconds": 1403664193,
        "tweet": true,
        "gist_url": "https://gist.github.com/72ab86a39b7866fe37d2",
        "private": false,
        "raw_body": "\nとあるコードで見かけたので、自分自身のためにメモ。\n\nSlick公式のコードサンプル : https://github.com/slick/slick-examples/blob/master/src/main/scala/com/typesafe/slick/examples/lifted/MultiDBCakeExample.scala\n\n## やりたいこと\n\n稼働時は PostgreSQL に接続するけど、単体テスト時は H2Database に接続してCRUDとかその上のサービスクラスの挙動をテスト記述したい時がある。\n\n[Slickのサンプル](http://slick.typesafe.com/doc/2.0.2/gettingstarted.html#quick-introduction)にもあるように通常はデータベースを選んで、その上でテーブル設計を作る。以下はPostgreSQLの場合。\n\n```scala\nimport scala.slick.driver.PostgresDriver.simple._\n\n// データモデル\ncase class User(id: Int, name: String)\n\n// テーブル定義\nclass UserTable(tag: Tag) extends Table[User](tag, \"users\") {\n  def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)\n  def name = column[String](\"name\")\n  def * = (id, name) <> (User.tupled, User.unapply) \n}\n\n// クエリ実行オブジェクト\nval Users = TableQuery[UserTable]\n```\n\nでも使う段になって、上記コードの中身は全くPostgreSQLに依存しているわけではないのに、`Table`や`TableQuery`が`PostgresDriver`によって生成されるものであるため、 `H2Driver` に切り替えることは出来ない。\n\n```scala\nimport scala.slick.driver.H2Driver.simple._\n\nDatabase.forURL(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\") withSession { implicit session =>\n  // 定義時とドライバが合わないのでコンパイルエラー\n  Users.insert(User(-1, \"sample\")) \n}\n```\n\nSlick 2.x にはいくつかのProfileが設定されていてざっくりとは以下の様な階層になっているようだ。\n上記でimportしているのはobjectに定義されたsimple以下を使っている。（ここに暗黙の型変換とか定義されてる）ちなみに、objectは同名のクラスをシングルトンインスタンスにしたもの。\n\n```\nJdbcProfile -> JdbcDriver(class) -> PostgresDriver(class), H2Driver(class), ...\n                 JdbcDriver(object)   PostgresDriver(object)  H2Driver(object) ...            \n```\n\nじゃあ、 例えば上位クラスの `JdbcDriver` を定義時にセットして実行時に `PostgresDriver` を利用していいかというと、やはり同じく実行時のドライバ指定ができない。\n\nそこで、実行時に依存性注入(DI)することになる。\n\n## テーブル定義のComponent化\n\nDIでは、「何らかの `JdbcProfile` には依存するが、それは実行時に決まる」という形で宣言する。\n\n```Profile.scala\ntrait Profile {\n  def profile: JdbcProfile\n}\n```\n\n```UserTable.scala\ntrait UserTableComponent { this: Profile =>\n  import profile.simple._\n\n  // UserTableの定義を内包\n}\n```\n\nこのように定義しておくことで、どのProfileが使われるかは実行時に決めることができる。\n\n```scala\ntrait H2Profile extends Profile {\n  val profile = H2Driver\n}\n\ntrait PostgresProfile extends Profile {\n  val profile = PostgresDriver\n}\n```\n\nそして、実行時に `UserTable` を使うクラスは、 `UserTableComponent` をmix-inして使うように宣言する。\n\n```scala\nclass SomeService { this: UserTableComponent =>\n  // UserTableの処理\n}\n\n// サービスクラスのインスタンス化\nobject SomeService extends SomeService with UserTableComponent with PostgresProfile\n```\n\n## DBコネクションのComponent化\n\n上記の説明で足りない部分があり、それはずばりDBへの接続の部分。\n\n- `Database.forURL` のように呼び出したくても、`SomeService`クラスでは実際には `Database` オブジェクトのメソッドは呼び出せない。(Profileを持ってないから)\n- [Slickの説明](http://slick.typesafe.com/doc/2.0.2/connection.html#connection-pools)にもある通り、コネクションプーリングは機能に含まれていないので、コネクションプーリングライブラリから生成された `DataSource` を使うようにする。\n- でも、テスト時はコネクションプーリングは要らない。\n\nということで、 `Database` のインスタンスを提供するコンポーネントが別に必要になる。\n例えば、ドライバのクラス名を提供できるようにすればシンプルになる、などの工夫は必要かと思います。\n\n```Profile.scala\ntrait Profile {\n  def profile: JdbcProfile\n  def driverClassName: String\n}\n```\n\n```Database.scala\ntrait DatabaseComponent { this: Profile =>\n  def database: profile.simple.Database\n}\n\n// テスト時\ntrait H2DatabaseComponent extends DatabaseComponent {\n  import profile.simple._\n\n  def database = Database.forURL(\"jdbc:h2:mem:test\")\n}\n\n// 稼働時など\ntrait DbcpBasicDatabaseComponent extends DatabaseComponent {\n  import profile.simple._\n　import org.apache.commons.dbcp2.BasicDataSource\n\n  def database = {\n    val ds = new BasicDataSource\n    ds.setDriverClassName(driverClassName)\n    // ...\n    Database.forDataSource(ds)\n  }\n}\n```\n\nあえて省略していますが、実際にはdatabaseメソッドに引数を設定するか、別のConfigをmix-inするなどして接続先情報を定義する必要があります。\n\n## DI, DI, またDI\n\nということで、結果的に以下のものを実際のサービスから分離して、実行時にmix-inすることになります。\n\n- `JdbcProfile`: Slickで定義された各種RDBMS用のドライバ（DDLとかクエリの差分とかよしなに生成してくれる）\n- コネクション: 普通に接続するとか、DBCPやBoneCPなどでプーリングしたものから取得するとか。\n- 接続先情報: これはそもそも実行時にしか決まらないもの。設定情報を提供する `Config` などのコンポーネントを使うことになる。\n\n実行するためには絡めなきゃいけない情報でも、DIでうまく分離することで一つ一つの役割を明確にしたり、あるいはモックで置き換えることができるようになるので便利です。\n\n欠点としてはこれらの仕組みを理解するのに時間がかかることと、クラスが増えてしまうことくらいでしょうか。\n",
        "body": "<p>とあるコードで見かけたので、自分自身のためにメモ。</p>\n<p>Slick公式のコードサンプル : <a href=\"https://github.com/slick/slick-examples/blob/master/src/main/scala/com/typesafe/slick/examples/lifted/MultiDBCakeExample.scala\" title=\"https://github.com/slick/slick-examples/blob/master/src/main/scala/com/typesafe/slick/examples/lifted/MultiDBCakeExample.scala\" target=\"_blank\">https://github.com/slick/slick-examples/blob/master/src/main/scala/com/typesafe/slick/examples/lifted/MultiDBCakeExample.scala</a></p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>やりたいこと\n      </h2><p>稼働時は PostgreSQL に接続するけど、単体テスト時は H2Database に接続してCRUDとかその上のサービスクラスの挙動をテスト記述したい時がある。</p>\n<p><a href=\"http://slick.typesafe.com/doc/2.0.2/gettingstarted.html#quick-introduction\" title=\"\" target=\"_blank\">Slickのサンプル</a>にもあるように通常はデータベースを選んで、その上でテーブル設計を作る。以下はPostgreSQLの場合。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.slick.driver.PostgresDriver.simple._</span>\n\n<span class=\"c1\">// データモデル</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// テーブル定義</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserTable</span><span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"k\">:</span> <span class=\"kt\">Tag</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">Table</span><span class=\"o\">[</span><span class=\"kt\">User</span><span class=\"o\">](</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"s\">&quot;users&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">id</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"s\">&quot;id&quot;</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">PrimaryKey</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">.</span><span class=\"nc\">AutoInc</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">name</span> <span class=\"k\">=</span> <span class=\"n\">column</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"s\">&quot;name&quot;</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"o\">*</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">&lt;&gt;</span> <span class=\"o\">(</span><span class=\"nc\">User</span><span class=\"o\">.</span><span class=\"n\">tupled</span><span class=\"o\">,</span> <span class=\"nc\">User</span><span class=\"o\">.</span><span class=\"n\">unapply</span><span class=\"o\">)</span> \n<span class=\"o\">}</span>\n\n<span class=\"c1\">// クエリ実行オブジェクト</span>\n<span class=\"k\">val</span> <span class=\"nc\">Users</span> <span class=\"k\">=</span> <span class=\"nc\">TableQuery</span><span class=\"o\">[</span><span class=\"kt\">UserTable</span><span class=\"o\">]</span>\n</pre></div></div><p>でも使う段になって、上記コードの中身は全くPostgreSQLに依存しているわけではないのに、<code>Table</code>や<code>TableQuery</code>が<code>PostgresDriver</code>によって生成されるものであるため、 <code>H2Driver</code> に切り替えることは出来ない。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.slick.driver.H2Driver.simple._</span>\n\n<span class=\"nc\">Database</span><span class=\"o\">.</span><span class=\"n\">forURL</span><span class=\"o\">(</span><span class=\"s\">&quot;jdbc:h2:mem:test&quot;</span><span class=\"o\">,</span> <span class=\"n\">driver</span> <span class=\"k\">=</span> <span class=\"s\">&quot;org.h2.Driver&quot;</span><span class=\"o\">)</span> <span class=\"n\">withSession</span> <span class=\"o\">{</span> <span class=\"k\">implicit</span> <span class=\"n\">session</span> <span class=\"k\">=&gt;</span>\n  <span class=\"c1\">// 定義時とドライバが合わないのでコンパイルエラー</span>\n  <span class=\"nc\">Users</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"nc\">User</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;sample&quot;</span><span class=\"o\">))</span> \n<span class=\"o\">}</span>\n</pre></div></div><p>Slick 2.x にはいくつかのProfileが設定されていてざっくりとは以下の様な階層になっているようだ。<br>\n上記でimportしているのはobjectに定義されたsimple以下を使っている。（ここに暗黙の型変換とか定義されてる）ちなみに、objectは同名のクラスをシングルトンインスタンスにしたもの。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>JdbcProfile -&gt; JdbcDriver(class) -&gt; PostgresDriver(class), H2Driver(class), ...\n                 JdbcDriver(object)   PostgresDriver(object)  H2Driver(object) ...            \n</pre></div></div><p>じゃあ、 例えば上位クラスの <code>JdbcDriver</code> を定義時にセットして実行時に <code>PostgresDriver</code> を利用していいかというと、やはり同じく実行時のドライバ指定ができない。</p>\n<p>そこで、実行時に依存性注入(DI)することになる。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>テーブル定義のComponent化\n      </h2><p>DIでは、「何らかの <code>JdbcProfile</code> には依存するが、それは実行時に決まる」という形で宣言する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Profile.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Profile</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">profile</span><span class=\"k\">:</span> <span class=\"kt\">JdbcProfile</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">UserTable.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">UserTableComponent</span> <span class=\"o\">{</span> <span class=\"k\">this:</span> <span class=\"kt\">Profile</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">import</span> <span class=\"nn\">profile.simple._</span>\n\n  <span class=\"c1\">// UserTableの定義を内包</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>このように定義しておくことで、どのProfileが使われるかは実行時に決めることができる。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">H2Profile</span> <span class=\"k\">extends</span> <span class=\"nc\">Profile</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">profile</span> <span class=\"k\">=</span> <span class=\"n\">H2Driver</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">PostgresProfile</span> <span class=\"k\">extends</span> <span class=\"nc\">Profile</span> <span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">profile</span> <span class=\"k\">=</span> <span class=\"nc\">PostgresDriver</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>そして、実行時に <code>UserTable</code> を使うクラスは、 <code>UserTableComponent</code> をmix-inして使うように宣言する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">SomeService</span> <span class=\"o\">{</span> <span class=\"k\">this:</span> <span class=\"kt\">UserTableComponent</span> <span class=\"o\">=&gt;</span>\n  <span class=\"c1\">// UserTableの処理</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// サービスクラスのインスタンス化</span>\n<span class=\"k\">object</span> <span class=\"nc\">SomeService</span> <span class=\"k\">extends</span> <span class=\"nc\">SomeService</span> <span class=\"k\">with</span> <span class=\"nc\">UserTableComponent</span> <span class=\"k\">with</span> <span class=\"nc\">PostgresProfile</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>DBコネクションのComponent化\n      </h2><p>上記の説明で足りない部分があり、それはずばりDBへの接続の部分。</p>\n\n<ul>\n<li><code>Database.forURL</code> のように呼び出したくても、<code>SomeService</code>クラスでは実際には <code>Database</code> オブジェクトのメソッドは呼び出せない。(Profileを持ってないから)</li>\n<li><a href=\"http://slick.typesafe.com/doc/2.0.2/connection.html#connection-pools\" title=\"\" target=\"_blank\">Slickの説明</a>にもある通り、コネクションプーリングは機能に含まれていないので、コネクションプーリングライブラリから生成された <code>DataSource</code> を使うようにする。</li>\n<li>でも、テスト時はコネクションプーリングは要らない。</li>\n</ul>\n<p>ということで、 <code>Database</code> のインスタンスを提供するコンポーネントが別に必要になる。<br>\n例えば、ドライバのクラス名を提供できるようにすればシンプルになる、などの工夫は必要かと思います。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Profile.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Profile</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">profile</span><span class=\"k\">:</span> <span class=\"kt\">JdbcProfile</span>\n  <span class=\"k\">def</span> <span class=\"n\">driverClassName</span><span class=\"k\">:</span> <span class=\"kt\">String</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Database.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">DatabaseComponent</span> <span class=\"o\">{</span> <span class=\"k\">this:</span> <span class=\"kt\">Profile</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">def</span> <span class=\"n\">database</span><span class=\"k\">:</span> <span class=\"kt\">profile.simple.Database</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// テスト時</span>\n<span class=\"k\">trait</span> <span class=\"nc\">H2DatabaseComponent</span> <span class=\"k\">extends</span> <span class=\"nc\">DatabaseComponent</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">profile.simple._</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">database</span> <span class=\"k\">=</span> <span class=\"nc\">Database</span><span class=\"o\">.</span><span class=\"n\">forURL</span><span class=\"o\">(</span><span class=\"s\">&quot;jdbc:h2:mem:test&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 稼働時など</span>\n<span class=\"k\">trait</span> <span class=\"nc\">DbcpBasicDatabaseComponent</span> <span class=\"k\">extends</span> <span class=\"nc\">DatabaseComponent</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">profile.simple._</span>\n<span class=\"err\">　</span><span class=\"k\">import</span> <span class=\"nn\">org.apache.commons.dbcp2.BasicDataSource</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">database</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">ds</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BasicDataSource</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">setDriverClassName</span><span class=\"o\">(</span><span class=\"n\">driverClassName</span><span class=\"o\">)</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"nc\">Database</span><span class=\"o\">.</span><span class=\"n\">forDataSource</span><span class=\"o\">(</span><span class=\"n\">ds</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>あえて省略していますが、実際にはdatabaseメソッドに引数を設定するか、別のConfigをmix-inするなどして接続先情報を定義する必要があります。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>DI, DI, またDI\n      </h2><p>ということで、結果的に以下のものを実際のサービスから分離して、実行時にmix-inすることになります。</p>\n\n<ul>\n<li><code>JdbcProfile</code>: Slickで定義された各種RDBMS用のドライバ（DDLとかクエリの差分とかよしなに生成してくれる）</li>\n<li>コネクション: 普通に接続するとか、DBCPやBoneCPなどでプーリングしたものから取得するとか。</li>\n<li>接続先情報: これはそもそも実行時にしか決まらないもの。設定情報を提供する <code>Config</code> などのコンポーネントを使うことになる。</li>\n</ul>\n<p>実行するためには絡めなきゃいけない情報でも、DIでうまく分離することで一つ一つの役割を明確にしたり、あるいはモックで置き換えることができるようになるので便利です。</p>\n<p>欠点としてはこれらの仕組みを理解するのに時間がかかることと、クラスが増えてしまうことくらいでしょうか。</p>\n",
        "stock_users": [
            "kasumani",
            "Reds",
            "poad1010",
            "takumakei@github",
            "akmiyoshi"
        ]
    },
    {
        "id": 83707,
        "uuid": "378adc7378ce7d6e1019",
        "user": {
            "id": 19163,
            "url_name": "seratch@github",
            "profile_image_url": "https://secure.gravatar.com/avatar/132fe0f031849e12eea7ce74f99b90f0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "Scala 2.11 + sbt-builldinfo + IntelliJ IDEA で &quot;BuildInfo is already defined as case class BuildInfo&quot;",
        "created_at": "2014-06-24 16:11:48 +0900",
        "updated_at": "2014-06-24 16:32:05 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": [
                    "2.11.1"
                ]
            },
            {
                "name": "IntelliJ",
                "url_name": "intellij",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/86ce6198a1ef4a3e5be6bf29893bff9bbda3fa4e/medium.jpg?1367911208",
                "versions": [
                    "13.1.3"
                ]
            },
            {
                "name": "sbt-buildinfo",
                "url_name": "sbt-buildinfo",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "0.3.2"
                ]
            },
            {
                "name": "sbt",
                "url_name": "sbt",
                "icon_url": "/icons/medium/missing.png",
                "versions": [
                    "0.13.5"
                ]
            }
        ],
        "stock_count": 9,
        "comment_count": 1,
        "url": "http://qiita.com/seratch@github/items/378adc7378ce7d6e1019",
        "created_at_as_seconds": 1403593908,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "Scala 2.11 で sbt-buildinfo を使っていて terminal から sbt でビルドする分には問題ないのに IntelliJ IDEA 上からコンパイルすると以下のような謎のエラーが必ず出るようになります（Scala 2.10.4 では起きない）。\n\n```\nError:(4, 13) BuildInfo is already defined as case class BuildInfo\ncase object BuildInfo {\n            ^\n```\n\n調べたところ、どうやらこれは IDEA のデフォルトのコンパイラ設定が Scala 2.11 にうまく対応できていない？ためのようで「Preferences > IDE Settings > Scala > Incremental compilation by」で「IntelliJ IDEA」ではなく「SBT incremental compiler」を選択すると回避できます。\n\n![Screen Shot 2014-06-24 at 16.05.56.png](https://qiita-image-store.s3.amazonaws.com/0/19163/a3935783-9ec7-d4fa-c9e2-f51e7d63ad8e.png)\n\n他にも影響が出そうな内容なので、そのうち直るかもしれませんけど。\n",
        "body": "<p>Scala 2.11 で sbt-buildinfo を使っていて terminal から sbt でビルドする分には問題ないのに IntelliJ IDEA 上からコンパイルすると以下のような謎のエラーが必ず出るようになります（Scala 2.10.4 では起きない）。</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>Error:(4, 13) BuildInfo is already defined as case class BuildInfo\ncase object BuildInfo {\n            ^\n</pre></div></div><p>調べたところ、どうやらこれは IDEA のデフォルトのコンパイラ設定が Scala 2.11 にうまく対応できていない？ためのようで「Preferences &gt; IDE Settings &gt; Scala &gt; Incremental compilation by」で「IntelliJ IDEA」ではなく「SBT incremental compiler」を選択すると回避できます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/19163/a3935783-9ec7-d4fa-c9e2-f51e7d63ad8e.png\" alt=\"Screen Shot 2014-06-24 at 16.05.56.png\"></p>\n<p>他にも影響が出そうな内容なので、そのうち直るかもしれませんけど。</p>\n",
        "stock_users": [
            "namutaka",
            "stormcat24",
            "ys16",
            "jawssame7",
            "nabezokodaikon",
            "kasumani",
            "kawachi",
            "Reds",
            "seratch@github"
        ]
    },
    {
        "id": 83188,
        "uuid": "82efd4dd473ce14973a2",
        "user": {
            "id": 27773,
            "url_name": "asmasa",
            "profile_image_url": "https://secure.gravatar.com/avatar/ffd76e11956095ef32effffb5fc5878b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png"
        },
        "title": "独書会 Scala IN DEPTH @大人のバーガー屋 その3",
        "created_at": "2014-06-23 15:33:32 +0900",
        "updated_at": "2014-06-23 15:33:32 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 0,
        "url": "http://qiita.com/asmasa/items/82efd4dd473ce14973a2",
        "created_at_as_seconds": 1403505212,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "[独書会 Scala IN DEPTH @大人の喫茶店 その2](http://qiita.com/asmasa/items/d36a48515e8b95ad14a4)で記述した、第2章 __The core rules__ の続き。\n\n# 要約\n\n## 不変性を選ぶ\n\n- 不変性は、オブジェクトを生成した後に状態を変えないこと。\n- 関数型プログラミングの優れた特徴の1つであるけど、オブジェクト指向設計のオススメのプラクティスでもある。\n- Scalaでも多くのケースで、デフォルトで不変性になる。\n- 不変性は特に __equality issues__ と __concurrent program__ で役に立つ。\n- __immutable object__ と __immutable reference__ は違う。\n\n### immutable reference\n\n- Scalaでは全ての変数が、オブジェクトへの参照。\n- `val`で変数定義することは、 __immutable reference__ であることを指す。\n- 全てのメソッドパラメータは、 __immutable references__ である。\n- クラスの引数はデフォルトでは、 __immutable references__ である。\n- mutable変数を作るための方法の一つが、`var`シンタックス。。\n- 参照の不変性は、参照されるオブジェクトがimmutableかどうかは関係ない。\n    - immutable objectのためのmutable referenceを持てる。\n    - mutable objectのためのimmutable referenceを持てる。\n- オブジェクト自体がimmutable or mutableなのかを知ることが重要であることを意味している。\n\n### オブジェクトの不変性の制約の定義\n\n- 定義は明らかになっていない。\n- 一般的にドキュメントが述べているなら、オブジェクトはimmutableと仮定しても安全であり、それ以外の場合は注意が必要。\n- Scala標準ライブラリでは、パラレルパッケージ階層とimmutable class, mutable classを持つことによりコレクションクラス内での線引を明確にしている。\n- 不変性の利点は、equality issueとconcurrent programで顕著になる。\n \n### オブジェクトのequality\n\n- 不変性はオブジェクトのequalityを簡略化する。\n- ライフサイクルの中でオブジェクトが状態変化がなければ、深さと正確さの両方でを満たす等価の実装を作ることができる。\n- これは`hash`関数を作るときにも重要で、`hash`関数はオブジェクトの簡略された表現を返すものであり、通常は`Integer`である。すばやくオブジェクトの識別をするために使われる。\n- `hash`関数は`equals`メソッドとペアにするべき。\n- オブジェクトの状態が変化した時、hashコードは壊れる。\n\n\n#### Scalaでのequalityの実装\n\nScalaでは`java.lang.Object`で定義された`equals` `hashCode`メソッドを利用する。\n\n- primitiveオブジェクトは、`scala.AnyVal`のサブタイプである。\n- 一方、`java.lang.Object`を拡張している標準objectは、`scala.AnyRef`のサブタイプである。\n- `scala.AnyRef`は`java.lang.Object`のためのエイリアスと考えるられる。\n- `hasCode`と`equals`は、`AnyRef`で定義している。メソッド`##` `==`で提供していて、`AnyRef` `AnyVal`の両方で使える。\n- `hasCode`と`equals`は、常に実装するべき。例えば、`x == y` なら `x.## == y.##`。\n\n#### equalityの実装制約\n\nequalityは以下の実装を取り入れる。そしてこの制約を満たすのが __immutable object__。\n\n- 2つのオブジェクトが等しい場合は、同じ`hashCode`を持つべき\n- オブジェクトのために計算された`hashCode`は、オブジェクトのライフサイクルで変更しない\n- 別のJVMにオブジェクトを送るとき、equalityは両方のJVMで利用できる属性であるべき\n\n1つ目、2つ目の制約を満足させる簡単な方法が、2つある。\n\n- `hashCode`の計算内ではimmutable objectの内部状態のみを利用する\n- `equals`と`hashCode`のために、デフォルトの概念を使う\n\nオブジェクト内に存在するモノはimmutableでなければ __いけない__ 。  \n全てのobjectをimmutableにすることは、プロセス全体を簡素化する。\n\n### Concurrency\n\n- 不変性はconcurrentのデータアクセスを単純化する。\n- concurrent threadでの実行の必要性が高まっている。\n    - スレッド間でのデータ共有の手段が必要。\n    - 伝統的な手段は、mutable dataを守るためlockの仕組み。\n- 不変性だとlockを減らして状態の共有ができる。\n- lockはパフォーマンスのオーバヘッドを生じる。\n\n\n## Rule\n### 3. 不変性を選ぶ\n\n- immutable classを作ることは、潜在的な実行時の問題をドラスティックに減らす。\n \n# 所感\n\n- immutable objectは安全性を高めれる。関数型プログラミングに馴れるための最初の一歩として、immutable objectを使い続けてみるのが良さそう。\n- 所謂 __情報保持役__ のオブジェクトに関しては、`##`と`==`メソッドを実装した方が良いのは、Javaと変わらない。\n",
        "body": "<p><a href=\"http://qiita.com/asmasa/items/d36a48515e8b95ad14a4\" title=\"\">独書会 Scala IN DEPTH @大人の喫茶店 その2</a>で記述した、第2章 <strong>The core rules</strong> の続き。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>要約\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>不変性を選ぶ\n      </h2>\n<ul>\n<li>不変性は、オブジェクトを生成した後に状態を変えないこと。</li>\n<li>関数型プログラミングの優れた特徴の1つであるけど、オブジェクト指向設計のオススメのプラクティスでもある。</li>\n<li>Scalaでも多くのケースで、デフォルトで不変性になる。</li>\n<li>不変性は特に <strong>equality issues</strong> と <strong>concurrent program</strong> で役に立つ。</li>\n<li><strong>immutable object</strong> と <strong>immutable reference</strong> は違う。</li>\n</ul>\n<h3>\n        <span id=\"3-1\" class=\"fragment\"></span>\n        <a href=\"#3-1\"><i class=\"fa fa-link\"></i></a>immutable reference\n      </h3>\n<ul>\n<li>Scalaでは全ての変数が、オブジェクトへの参照。</li>\n<li><code>val</code>で変数定義することは、 <strong>immutable reference</strong> であることを指す。</li>\n<li>全てのメソッドパラメータは、 <strong>immutable references</strong> である。</li>\n<li>クラスの引数はデフォルトでは、 <strong>immutable references</strong> である。</li>\n<li>mutable変数を作るための方法の一つが、<code>var</code>シンタックス。。</li>\n<li>参照の不変性は、参照されるオブジェクトがimmutableかどうかは関係ない。\n\n<ul>\n<li>immutable objectのためのmutable referenceを持てる。</li>\n<li>mutable objectのためのimmutable referenceを持てる。</li>\n</ul></li>\n<li>オブジェクト自体がimmutable or mutableなのかを知ることが重要であることを意味している。</li>\n</ul>\n<h3>\n        <span id=\"3-2\" class=\"fragment\"></span>\n        <a href=\"#3-2\"><i class=\"fa fa-link\"></i></a>オブジェクトの不変性の制約の定義\n      </h3>\n<ul>\n<li>定義は明らかになっていない。</li>\n<li>一般的にドキュメントが述べているなら、オブジェクトはimmutableと仮定しても安全であり、それ以外の場合は注意が必要。</li>\n<li>Scala標準ライブラリでは、パラレルパッケージ階層とimmutable class, mutable classを持つことによりコレクションクラス内での線引を明確にしている。</li>\n<li>不変性の利点は、equality issueとconcurrent programで顕著になる。</li>\n</ul>\n<h3>\n        <span id=\"3-3\" class=\"fragment\"></span>\n        <a href=\"#3-3\"><i class=\"fa fa-link\"></i></a>オブジェクトのequality\n      </h3>\n<ul>\n<li>不変性はオブジェクトのequalityを簡略化する。</li>\n<li>ライフサイクルの中でオブジェクトが状態変化がなければ、深さと正確さの両方でを満たす等価の実装を作ることができる。</li>\n<li>これは<code>hash</code>関数を作るときにも重要で、<code>hash</code>関数はオブジェクトの簡略された表現を返すものであり、通常は<code>Integer</code>である。すばやくオブジェクトの識別をするために使われる。</li>\n<li><code>hash</code>関数は<code>equals</code>メソッドとペアにするべき。</li>\n<li>オブジェクトの状態が変化した時、hashコードは壊れる。</li>\n</ul>\n<h4>\n        <span id=\"4-1\" class=\"fragment\"></span>\n        <a href=\"#4-1\"><i class=\"fa fa-link\"></i></a>Scalaでのequalityの実装\n      </h4><p>Scalaでは<code>java.lang.Object</code>で定義された<code>equals</code> <code>hashCode</code>メソッドを利用する。</p>\n\n<ul>\n<li>primitiveオブジェクトは、<code>scala.AnyVal</code>のサブタイプである。</li>\n<li>一方、<code>java.lang.Object</code>を拡張している標準objectは、<code>scala.AnyRef</code>のサブタイプである。</li>\n<li><code>scala.AnyRef</code>は<code>java.lang.Object</code>のためのエイリアスと考えるられる。</li>\n<li><code>hasCode</code>と<code>equals</code>は、<code>AnyRef</code>で定義している。メソッド<code>##</code> <code>==</code>で提供していて、<code>AnyRef</code> <code>AnyVal</code>の両方で使える。</li>\n<li><code>hasCode</code>と<code>equals</code>は、常に実装するべき。例えば、<code>x == y</code> なら <code>x.## == y.##</code>。</li>\n</ul>\n<h4>\n        <span id=\"4-2\" class=\"fragment\"></span>\n        <a href=\"#4-2\"><i class=\"fa fa-link\"></i></a>equalityの実装制約\n      </h4><p>equalityは以下の実装を取り入れる。そしてこの制約を満たすのが <strong>immutable object</strong>。</p>\n\n<ul>\n<li>2つのオブジェクトが等しい場合は、同じ<code>hashCode</code>を持つべき</li>\n<li>オブジェクトのために計算された<code>hashCode</code>は、オブジェクトのライフサイクルで変更しない</li>\n<li>別のJVMにオブジェクトを送るとき、equalityは両方のJVMで利用できる属性であるべき</li>\n</ul>\n<p>1つ目、2つ目の制約を満足させる簡単な方法が、2つある。</p>\n\n<ul>\n<li><code>hashCode</code>の計算内ではimmutable objectの内部状態のみを利用する</li>\n<li><code>equals</code>と<code>hashCode</code>のために、デフォルトの概念を使う</li>\n</ul>\n<p>オブジェクト内に存在するモノはimmutableでなければ <strong>いけない</strong> 。<br><br>\n全てのobjectをimmutableにすることは、プロセス全体を簡素化する。</p>\n<h3>\n        <span id=\"3-4\" class=\"fragment\"></span>\n        <a href=\"#3-4\"><i class=\"fa fa-link\"></i></a>Concurrency\n      </h3>\n<ul>\n<li>不変性はconcurrentのデータアクセスを単純化する。</li>\n<li>concurrent threadでの実行の必要性が高まっている。\n\n<ul>\n<li>スレッド間でのデータ共有の手段が必要。</li>\n<li>伝統的な手段は、mutable dataを守るためlockの仕組み。</li>\n</ul></li>\n<li>不変性だとlockを減らして状態の共有ができる。</li>\n<li>lockはパフォーマンスのオーバヘッドを生じる。</li>\n</ul>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>Rule\n      </h2><h3>\n        <span id=\"3-5\" class=\"fragment\"></span>\n        <a href=\"#3-5\"><i class=\"fa fa-link\"></i></a>3. 不変性を選ぶ\n      </h3>\n<ul>\n<li>immutable classを作ることは、潜在的な実行時の問題をドラスティックに減らす。</li>\n</ul>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>所感\n      </h1>\n<ul>\n<li>immutable objectは安全性を高めれる。関数型プログラミングに馴れるための最初の一歩として、immutable objectを使い続けてみるのが良さそう。</li>\n<li>所謂 <strong>情報保持役</strong> のオブジェクトに関しては、<code>##</code>と<code>==</code>メソッドを実装した方が良いのは、Javaと変わらない。</li>\n</ul>\n",
        "stock_users": [
            "kasumani",
            "nilfigo",
            "hiro_matsuno2",
            "Reds"
        ]
    },
    {
        "id": 82610,
        "uuid": "a45f14aeb31f169c616e",
        "user": {
            "id": 889,
            "url_name": "suin",
            "profile_image_url": "https://secure.gravatar.com/avatar/152ead2a935d1c21b585286d7587b183"
        },
        "title": "Mac始めて6年目にして、使い続けている開発ツール73選",
        "created_at": "2014-06-21 09:33:32 +0900",
        "updated_at": "2014-06-21 09:40:09 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Mac",
                "url_name": "mac",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/0cbda729ead4559760ec64ae744a5aef937e0b08/medium.jpg?1403645170",
                "versions": []
            },
            {
                "name": "ツール",
                "url_name": "%e3%83%84%e3%83%bc%e3%83%ab",
                "icon_url": "/icons/medium/missing.png",
                "versions": []
            },
            {
                "name": "PHP",
                "url_name": "php",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/bea656787429d261e190cef347af9879ffd98343/medium.jpg?1387912718",
                "versions": []
            },
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            },
            {
                "name": "Git",
                "url_name": "git",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/5d9ff7508a0c2d5bfa9536b6a0fe1864c11cee89/medium.jpg?1387912380",
                "versions": []
            }
        ],
        "stock_count": 736,
        "comment_count": 0,
        "url": "http://qiita.com/suin/items/a45f14aeb31f169c616e",
        "created_at_as_seconds": 1403310812,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "\n先日Macを再インストールするに当って、いい機会なので使ってないツールを省き使っているツールを厳選してインストールすることにした。あまり増やす気はなかったが、使うものだけ入れても73個になった。\n\n# コマンドライン\n\n## ツール管理\n\nbrew-cask: HomebrewでMacアプリをインストールできる。\nbrew-gem: Homebrewでgemツールをインストールできる。\nbrew-pip: Homebrewでpipツールをインストールできる。\nnpm: Node.jsのパッケージ管理ツール。\n\n## DevOps\n\n[ansible][]: Python製の構成管理ツール。Chefから乗り換え。\nboot2docker: MacでDockerを使える。\n[packer][]: 仮想マシンのイメージを作るのに便利。\n\n## Git\n\ngit: バージョン管理ツール。\nhub: GitHubのコマンドラインクライアント。プルリクなどができる。\ntig: gitのログを見やすく表示。\n\n## HTTP・RESTful APIのデバッグ\n\ncurl: コマンドラインでHTTPリクエストできる。\n[jq][]: JSONから部分的にデータを取り出すときに便利。\n[jsonpp][]: JSONを書式化して出力できる。1行のJSONを見やすく表示するときに便利。\n[httpie][]: RESTful APIのデバッグがしやすくなる。\nwget: HTTPでファイルをダウンロードするときに便利。\n\n\n## エディタ\n\nvim: エディタ。\nvimpager: vim風のless。\n\n## セキュリティ\n\nnmap: ポートスキャナ。サーバのファイアウォールを設定したときの確認に便利。\n\n## シェルの操作効率化\n\nbash-completion: Bashコマンドの補完。\nreattach-to-user-namespace: tmuxをMacで使うときに必要。\ntmux: コンソール内にタブ・ウィンドウ分割機能をつける。\nzsh: カスタマイズの自由度が高いシェル。\nzsh-completions: zshのコマンド補完。\ntmuxinator: tmuxのタブやウィンドウ分割をスクリプト化できる。\n\n## その他\n\nterminal-notifier: ターミナルから通知センターに通知を出せる。\ntree: ディレクトリの構造をツリー形式で表示できる。\nthe_silver_searcher: grepより早いgrep検索。\n\n\n# アプリ\n\n## エディタ・IDE\n\n[Atom][]: GitHub製のエディタ。\n[CotEditor][]: とにかく起動が早いシンプルなエディタ。\n[IntelliJ IDEA CE][]: Scala開発に使う無料のIDE。\n[MacVim][]: Mac用のvim。\n[PhpStorm][]: PHP開発に使うIDE。\n[Mou][]: Markdownエディタ。\n[Scala IDE][]: Scala開発に使うIDE。中身はEclipse。\n[Tree][]: ツリー形式のエディタ。\n[CodeRunner][]: スニペットを書いてその場で実行できるエディタ。\n\n## グラフィックデザイン\n\n[Colors][]: シンプルなカラーピッカー。\nAdobe Fireworks: お絵かきツール。\n\n## ナリッジベース\n\n[Dash][]: オフラインでも沢山の言語・フレームワークのドキュメントを読める。\n[Kobito][]: スニペットをローカルで書いてQiitaにシェアできる。\n[Evernote][]: なんでも放り込むメモ帳。\n\n## DevOps\n\n[Vagrant][]: 仮想マシンの環境設定ツール。\n[VirtualBox][]: 無料で仮想化できるアプリ。\n\n## 開発のユーティリティ\n\n[GitHub][]: GitHubのMacクライアント。\n[iTerm2][]: Terminalより細かい設定が可能なターミナル。\n[Kaleidoscope][]: ファイルの差分を見やすく表示。\n[Sequel Pro][]: MySQLのGUIクライアント。\n[Tunnelblick][]: VPNを張れる。\n[Microsoft Remote Desktop][]: Windowsマシンにリモートデスクトップできる。\n[Horst][]: hostsファイルをGUIで管理。\n\n\n## 操作性向上\n\n[Alfred][]: どんなアプリもキーボードだけで立ち上げられる。\n[Bartender][]: Macのメニューバーのアイコンを自由自在に整理できる。\n[Google Japanese IME][]: 日本語IME。\n[Knock][]: iPhoneをノックするだけでMacのロックを解除できる。\n[Flexiglass][]: Macのウィンドウの操作性を上げる。\n[TotalSpaces2][]: ミッションコントロールの操作性を上げる。\n\n## セキュリティ\n\n[Little Snitch][]: アプリ単位で設定できるファイアウォール。\n[1Password][]: パスワード管理ツール\n\n## ストレージ\n\n[Bitcasa][]: あまり使わないファイルやOSイメージなどを置いとくクラウドストレージ。\n[Dropbox][]: 自動でフォルダを共有してくれるクラウドストレージ。\n\n## オフィススイート\n\n[OpenOffice][]: オープンソースのオフィススイート。\niMovie: 動画編集。\nMicrosoft Office: オフィススイート。\nKeynote: スライド作成ツール。\nPages: ワードプロセッサー。\n\n## コミュニケーションツール\n\n[Skype][]: 無料音声通話。\n[Airmail][]: メーラー\n[Slack][]: グループチャット。\n[Skitch][]: スクリーンショットを撮影して注釈を書ける。\n\n## その他\n\n[Fluid][]: WebサイトならなんでもMacのアプリにできる。\n[ScreenFlow][]: スクリーンショットの動画が撮れる。\n[The Unarchiver][]: 圧縮ファイルの解凍ツール。\n[MindNode Lite][]: マインドマップ。\n\n\n※掲題は6年となっているが、6年使い続けたものもあれば、最近リリースされたツールで6年経ってないものもある。\n\n[ansible]: http://www.ansible.com/home\n[jq]: http://stedolan.github.io/jq/\n[jsonpp]: http://jmhodges.github.io/jsonpp/\n[packer]: http://www.packer.io\n[httpie]: https://github.com/jakubroztocil/httpie\n[Alfred]: http://www.alfredapp.com\n[Atom]: https://atom.io\n[Bartender]: http://www.macbartender.com\n[Bitcasa]: https://www.bitcasa.com\n[Colors]: http://mattpatenaude.com\n[CotEditor]: http://coteditor.github.io\n[Dash]: http://kapeli.com/dash\n[Dropbox]: https://www.dropbox.com\n[Fluid]: http://fluidapp.com\n[GitHub]: https://mac.github.com\n[Google Japanese IME]: http://www.google.co.jp/ime/\n[IntelliJ IDEA CE]: http://www.jetbrains.com/idea/\n[iTerm2]: http://www.iterm2.com\n[Kaleidoscope]: http://www.kaleidoscopeapp.com\n[Knock]: http://www.knocktounlock.com\n[Kobito]: http://kobito.qiita.com\n[Little Snitch]: http://www.obdev.at/products/littlesnitch/index.html\n[MacVim]: https://code.google.com/p/macvim/\n[Mou]: http://mouapp.com\n[OpenOffice]: https://www.openoffice.org\n[PhpStorm]: http://www.jetbrains.com/phpstorm/\n[Scala IDE]: http://scala-ide.org\n[Sequel Pro]: http://www.sequelpro.com\n[Skype]: http://www.skype.com/en/\n[Tunnelblick]: https://www.tunnelblick.net\n[Vagrant]: http://www.vagrantup.com\n[VirtualBox]: https://www.virtualbox.org\n[Flexiglass]: http://www.nulana.com/flexiglass/\n[Microsoft Remote Desktop]: https://itunes.apple.com/jp/app/microsoft-remote-desktop/id714464092?mt=8\n[Airmail]: http://airmailapp.com\n[1Password]: https://agilebits.com/onepassword\n[Tree]: https://itunes.apple.com/us/app/tree/id451104825?mt=12\n[CodeRunner]: http://krillapps.com/coderunner/\n[Skitch]: http://evernote.com/skitch/\n[Slack]: https://slack.com\n[ScreenFlow]: http://www.telestream.net/screenflow/overview.htm\n[The Unarchiver]: https://itunes.apple.com/en/app/the-unarchiver/id425424353?mt=12\n[MindNode Lite]: http://mindnode.com\n[Evernote]: https://evernote.com\n[Horst]: http://penck.de/horst/\n[TotalSpaces2]: http://totalspaces.binaryage.com\n",
        "body": "<p>先日Macを再インストールするに当って、いい機会なので使ってないツールを省き使っているツールを厳選してインストールすることにした。あまり増やす気はなかったが、使うものだけ入れても73個になった。</p>\n<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>コマンドライン\n      </h1><h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>ツール管理\n      </h2><p>brew-cask: HomebrewでMacアプリをインストールできる。<br>\nbrew-gem: Homebrewでgemツールをインストールできる。<br>\nbrew-pip: Homebrewでpipツールをインストールできる。<br>\nnpm: Node.jsのパッケージ管理ツール。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>DevOps\n      </h2><p><a href=\"http://www.ansible.com/home\" title=\"\" target=\"_blank\">ansible</a>: Python製の構成管理ツール。Chefから乗り換え。<br>\nboot2docker: MacでDockerを使える。<br>\n<a href=\"http://www.packer.io\" title=\"\" target=\"_blank\">packer</a>: 仮想マシンのイメージを作るのに便利。</p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Git\n      </h2><p>git: バージョン管理ツール。<br>\nhub: GitHubのコマンドラインクライアント。プルリクなどができる。<br>\ntig: gitのログを見やすく表示。</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>HTTP・RESTful APIのデバッグ\n      </h2><p>curl: コマンドラインでHTTPリクエストできる。<br>\n<a href=\"http://stedolan.github.io/jq/\" title=\"\" target=\"_blank\">jq</a>: JSONから部分的にデータを取り出すときに便利。<br>\n<a href=\"http://jmhodges.github.io/jsonpp/\" title=\"\" target=\"_blank\">jsonpp</a>: JSONを書式化して出力できる。1行のJSONを見やすく表示するときに便利。<br>\n<a href=\"https://github.com/jakubroztocil/httpie\" title=\"\" target=\"_blank\">httpie</a>: RESTful APIのデバッグがしやすくなる。<br>\nwget: HTTPでファイルをダウンロードするときに便利。</p>\n<h2>\n        <span id=\"2-5\" class=\"fragment\"></span>\n        <a href=\"#2-5\"><i class=\"fa fa-link\"></i></a>エディタ\n      </h2><p>vim: エディタ。<br>\nvimpager: vim風のless。</p>\n<h2>\n        <span id=\"2-6\" class=\"fragment\"></span>\n        <a href=\"#2-6\"><i class=\"fa fa-link\"></i></a>セキュリティ\n      </h2><p>nmap: ポートスキャナ。サーバのファイアウォールを設定したときの確認に便利。</p>\n<h2>\n        <span id=\"2-7\" class=\"fragment\"></span>\n        <a href=\"#2-7\"><i class=\"fa fa-link\"></i></a>シェルの操作効率化\n      </h2><p>bash-completion: Bashコマンドの補完。<br>\nreattach-to-user-namespace: tmuxをMacで使うときに必要。<br>\ntmux: コンソール内にタブ・ウィンドウ分割機能をつける。<br>\nzsh: カスタマイズの自由度が高いシェル。<br>\nzsh-completions: zshのコマンド補完。<br>\ntmuxinator: tmuxのタブやウィンドウ分割をスクリプト化できる。</p>\n<h2>\n        <span id=\"2-8\" class=\"fragment\"></span>\n        <a href=\"#2-8\"><i class=\"fa fa-link\"></i></a>その他\n      </h2><p>terminal-notifier: ターミナルから通知センターに通知を出せる。<br>\ntree: ディレクトリの構造をツリー形式で表示できる。<br>\nthe_silver_searcher: grepより早いgrep検索。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a>アプリ\n      </h1><h2>\n        <span id=\"2-9\" class=\"fragment\"></span>\n        <a href=\"#2-9\"><i class=\"fa fa-link\"></i></a>エディタ・IDE\n      </h2><p><a href=\"https://atom.io\" title=\"\" target=\"_blank\">Atom</a>: GitHub製のエディタ。<br>\n<a href=\"http://coteditor.github.io\" title=\"\" target=\"_blank\">CotEditor</a>: とにかく起動が早いシンプルなエディタ。<br>\n<a href=\"http://www.jetbrains.com/idea/\" title=\"\" target=\"_blank\">IntelliJ IDEA CE</a>: Scala開発に使う無料のIDE。<br>\n<a href=\"https://code.google.com/p/macvim/\" title=\"\" target=\"_blank\">MacVim</a>: Mac用のvim。<br>\n<a href=\"http://www.jetbrains.com/phpstorm/\" title=\"\" target=\"_blank\">PhpStorm</a>: PHP開発に使うIDE。<br>\n<a href=\"http://mouapp.com\" title=\"\" target=\"_blank\">Mou</a>: Markdownエディタ。<br>\n<a href=\"http://scala-ide.org\" title=\"\" target=\"_blank\">Scala IDE</a>: Scala開発に使うIDE。中身はEclipse。<br>\n<a href=\"https://itunes.apple.com/us/app/tree/id451104825?mt=12\" title=\"\" target=\"_blank\">Tree</a>: ツリー形式のエディタ。<br>\n<a href=\"http://krillapps.com/coderunner/\" title=\"\" target=\"_blank\">CodeRunner</a>: スニペットを書いてその場で実行できるエディタ。</p>\n<h2>\n        <span id=\"2-10\" class=\"fragment\"></span>\n        <a href=\"#2-10\"><i class=\"fa fa-link\"></i></a>グラフィックデザイン\n      </h2><p><a href=\"http://mattpatenaude.com\" title=\"\" target=\"_blank\">Colors</a>: シンプルなカラーピッカー。<br>\nAdobe Fireworks: お絵かきツール。</p>\n<h2>\n        <span id=\"2-11\" class=\"fragment\"></span>\n        <a href=\"#2-11\"><i class=\"fa fa-link\"></i></a>ナリッジベース\n      </h2><p><a href=\"http://kapeli.com/dash\" title=\"\" target=\"_blank\">Dash</a>: オフラインでも沢山の言語・フレームワークのドキュメントを読める。<br>\n<a href=\"http://kobito.qiita.com\" title=\"\" target=\"_blank\">Kobito</a>: スニペットをローカルで書いてQiitaにシェアできる。<br>\n<a href=\"https://evernote.com\" title=\"\" target=\"_blank\">Evernote</a>: なんでも放り込むメモ帳。</p>\n<h2>\n        <span id=\"2-12\" class=\"fragment\"></span>\n        <a href=\"#2-12\"><i class=\"fa fa-link\"></i></a>DevOps\n      </h2><p><a href=\"http://www.vagrantup.com\" title=\"\" target=\"_blank\">Vagrant</a>: 仮想マシンの環境設定ツール。<br>\n<a href=\"https://www.virtualbox.org\" title=\"\" target=\"_blank\">VirtualBox</a>: 無料で仮想化できるアプリ。</p>\n<h2>\n        <span id=\"2-13\" class=\"fragment\"></span>\n        <a href=\"#2-13\"><i class=\"fa fa-link\"></i></a>開発のユーティリティ\n      </h2><p><a href=\"https://mac.github.com\" title=\"\" target=\"_blank\">GitHub</a>: GitHubのMacクライアント。<br>\n<a href=\"http://www.iterm2.com\" title=\"\" target=\"_blank\">iTerm2</a>: Terminalより細かい設定が可能なターミナル。<br>\n<a href=\"http://www.kaleidoscopeapp.com\" title=\"\" target=\"_blank\">Kaleidoscope</a>: ファイルの差分を見やすく表示。<br>\n<a href=\"http://www.sequelpro.com\" title=\"\" target=\"_blank\">Sequel Pro</a>: MySQLのGUIクライアント。<br>\n<a href=\"https://www.tunnelblick.net\" title=\"\" target=\"_blank\">Tunnelblick</a>: VPNを張れる。<br>\n<a href=\"https://itunes.apple.com/jp/app/microsoft-remote-desktop/id714464092?mt=8\" title=\"\" target=\"_blank\">Microsoft Remote Desktop</a>: Windowsマシンにリモートデスクトップできる。<br>\n<a href=\"http://penck.de/horst/\" title=\"\" target=\"_blank\">Horst</a>: hostsファイルをGUIで管理。</p>\n<h2>\n        <span id=\"2-14\" class=\"fragment\"></span>\n        <a href=\"#2-14\"><i class=\"fa fa-link\"></i></a>操作性向上\n      </h2><p><a href=\"http://www.alfredapp.com\" title=\"\" target=\"_blank\">Alfred</a>: どんなアプリもキーボードだけで立ち上げられる。<br>\n<a href=\"http://www.macbartender.com\" title=\"\" target=\"_blank\">Bartender</a>: Macのメニューバーのアイコンを自由自在に整理できる。<br>\n<a href=\"http://www.google.co.jp/ime/\" title=\"\" target=\"_blank\">Google Japanese IME</a>: 日本語IME。<br>\n<a href=\"http://www.knocktounlock.com\" title=\"\" target=\"_blank\">Knock</a>: iPhoneをノックするだけでMacのロックを解除できる。<br>\n<a href=\"http://www.nulana.com/flexiglass/\" title=\"\" target=\"_blank\">Flexiglass</a>: Macのウィンドウの操作性を上げる。<br>\n<a href=\"http://totalspaces.binaryage.com\" title=\"\" target=\"_blank\">TotalSpaces2</a>: ミッションコントロールの操作性を上げる。</p>\n<h2>\n        <span id=\"2-15\" class=\"fragment\"></span>\n        <a href=\"#2-15\"><i class=\"fa fa-link\"></i></a>セキュリティ\n      </h2><p><a href=\"http://www.obdev.at/products/littlesnitch/index.html\" title=\"\" target=\"_blank\">Little Snitch</a>: アプリ単位で設定できるファイアウォール。<br>\n<a href=\"https://agilebits.com/onepassword\" title=\"\" target=\"_blank\">1Password</a>: パスワード管理ツール</p>\n<h2>\n        <span id=\"2-16\" class=\"fragment\"></span>\n        <a href=\"#2-16\"><i class=\"fa fa-link\"></i></a>ストレージ\n      </h2><p><a href=\"https://www.bitcasa.com\" title=\"\" target=\"_blank\">Bitcasa</a>: あまり使わないファイルやOSイメージなどを置いとくクラウドストレージ。<br>\n<a href=\"https://www.dropbox.com\" title=\"\" target=\"_blank\">Dropbox</a>: 自動でフォルダを共有してくれるクラウドストレージ。</p>\n<h2>\n        <span id=\"2-17\" class=\"fragment\"></span>\n        <a href=\"#2-17\"><i class=\"fa fa-link\"></i></a>オフィススイート\n      </h2><p><a href=\"https://www.openoffice.org\" title=\"\" target=\"_blank\">OpenOffice</a>: オープンソースのオフィススイート。<br>\niMovie: 動画編集。<br>\nMicrosoft Office: オフィススイート。<br>\nKeynote: スライド作成ツール。<br>\nPages: ワードプロセッサー。</p>\n<h2>\n        <span id=\"2-18\" class=\"fragment\"></span>\n        <a href=\"#2-18\"><i class=\"fa fa-link\"></i></a>コミュニケーションツール\n      </h2><p><a href=\"http://www.skype.com/en/\" title=\"\" target=\"_blank\">Skype</a>: 無料音声通話。<br>\n<a href=\"http://airmailapp.com\" title=\"\" target=\"_blank\">Airmail</a>: メーラー<br>\n<a href=\"https://slack.com\" title=\"\" target=\"_blank\">Slack</a>: グループチャット。<br>\n<a href=\"http://evernote.com/skitch/\" title=\"\" target=\"_blank\">Skitch</a>: スクリーンショットを撮影して注釈を書ける。</p>\n<h2>\n        <span id=\"2-19\" class=\"fragment\"></span>\n        <a href=\"#2-19\"><i class=\"fa fa-link\"></i></a>その他\n      </h2><p><a href=\"http://fluidapp.com\" title=\"\" target=\"_blank\">Fluid</a>: WebサイトならなんでもMacのアプリにできる。<br>\n<a href=\"http://www.telestream.net/screenflow/overview.htm\" title=\"\" target=\"_blank\">ScreenFlow</a>: スクリーンショットの動画が撮れる。<br>\n<a href=\"https://itunes.apple.com/en/app/the-unarchiver/id425424353?mt=12\" title=\"\" target=\"_blank\">The Unarchiver</a>: 圧縮ファイルの解凍ツール。<br>\n<a href=\"http://mindnode.com\" title=\"\" target=\"_blank\">MindNode Lite</a>: マインドマップ。</p>\n<p>※掲題は6年となっているが、6年使い続けたものもあれば、最近リリースされたツールで6年経ってないものもある。</p>\n",
        "stock_users": [
            "inodev",
            "ku_neko",
            "onibakidd@github",
            "miguse",
            "bradbkn",
            "oshou",
            "i97506051502@github",
            "Liberty",
            "kasimiya",
            "ikura_oxo",
            "sumlibe",
            "ngmdesign",
            "nakanaide",
            "chichi1091",
            "hiroyasu55",
            "vantjp",
            "Tanin_326",
            "tama5",
            "masatoyamamura1986",
            "tossy_yukky",
            "oppey",
            "Kamon",
            "koyanai",
            "bwRaven",
            "toshi-o",
            "uehara@github",
            "k_shoho",
            "hmu29",
            "shimpeiws",
            "nalabjp",
            "mitsuhiro",
            "KENJU",
            "bells17",
            "koishi",
            "tempest200903",
            "sota0805",
            "kousukeOsaka",
            "imagepit",
            "masa7351",
            "sumusu",
            "yuyuchu3333",
            "akata",
            "sutekicut",
            "onsh@github",
            "murajun1978",
            "nhsgwa",
            "tnamigata",
            "masayuki560303",
            "18hb",
            "mattarijinsei",
            "k-ta-yamada",
            "_kossi_",
            "marsa746079",
            "tomisawk",
            "eijisatoh@github",
            "hissanova",
            "takechiyo29",
            "kidachi_",
            "stormyMonday@github",
            "ayasegiken",
            "usui-tk",
            "sputnikhorn",
            "chopwave",
            "daichan4649@github",
            "KeithYokoma",
            "yoshikazusawa",
            "aotake@github",
            "ayuri",
            "griffin_stewie",
            "kntr",
            "rano",
            "ottie27",
            "seteoceano",
            "okamu",
            "hiruyuki3",
            "yasuda_hikaru",
            "mochizukikotaro",
            "229msms",
            "vicugna",
            "ultimakazu",
            "fainder",
            "sunpo",
            "ekobayashi",
            "quark",
            "YousukeTezuka",
            "KeBiNdz",
            "sanmalife",
            "hamaponz",
            "yutaf",
            "Hironobu",
            "cb400sp2",
            "katsuhara",
            "SIshihara",
            "relax4u",
            "sakkk",
            "foo9",
            "kamemoge",
            "mknkisk",
            "kzt00d@github",
            "gplains",
            "e24ns",
            "erubis",
            "phyllite",
            "ma_sumikko",
            "kento1218@github",
            "blue-emc2-github",
            "cinicsea",
            "yang_orz",
            "tomoyoshi",
            "hondasports8",
            "ganta",
            "kasahi",
            "wg99js19",
            "sinapps",
            "yamagata",
            "toocheap",
            "a_yasui",
            "naoyuki1019",
            "ishideo",
            "shimizumasaru",
            "duketadano",
            "muttan",
            "emuesuaip",
            "SnowHideJP",
            "nero0617",
            "suzu-k",
            "MakoTano@github",
            "beryu",
            "h-yoshie",
            "kotazi_",
            "reneice",
            "blueberrystream",
            "KAGE_MIKU",
            "ddddkimura",
            "ifkatie",
            "LandscapeSketch",
            "HirokiDaido",
            "nakataka777",
            "syguer",
            "ymiura@github",
            "rico",
            "hiroh",
            "longroofitter",
            "TakumiTakahashi",
            "kuniponG3",
            "megane9988",
            "questbeat",
            "wivern888",
            "virusVer001",
            "usk4buya",
            "4study2u",
            "koi3man",
            "ksymmsk",
            "jac",
            "_shimada",
            "266c",
            "omorinrin",
            "j1ichikawa",
            "benchan",
            "yharikita",
            "_sakimidori",
            "DQNEO",
            "tsurai33",
            "m1nato",
            "akitanak",
            "kimagure",
            "nakano_mi",
            "mymneco",
            "kainabels",
            "nemmui",
            "ThugStyle4ever",
            "kmu",
            "g_leonina",
            "budongji",
            "ichi_s",
            "stoybox",
            "kenji_tayama",
            "kurumaya",
            "taishigami",
            "tienlen",
            "mapyo",
            "5a3i",
            "shisogohan",
            "munepuyo",
            "stbison",
            "itaru",
            "imura81gt",
            "tutui",
            "takemizu",
            "boheanimato",
            "shela",
            "geopelia",
            "zirosas",
            "highly-snow",
            "lassy423",
            "naomacaroni",
            "xeooon",
            "FujiharaTatsuya",
            "ken_ton",
            "kennyqi",
            "tamano",
            "kinojirou",
            "hiraishi",
            "SShojiro",
            "taisa_007",
            "ishiyu",
            "mteranisi",
            "furushchev",
            "t-okamoto19",
            "knife0125",
            "masia02",
            "totz",
            "tgate6",
            "ryu00026@github",
            "shou10152208",
            "gonhainu",
            "chatii0079",
            "skyis",
            "little",
            "61503891",
            "yuki777",
            "MasahiroSakoda",
            "maangie",
            "saltyshiomix",
            "kohei0418",
            "morani80",
            "roshbyz",
            "adachihdx",
            "giwa@github",
            "MattsThat",
            "k_kawak",
            "honosama",
            "inutano",
            "kayanonaka",
            "ysaito8015@github",
            "wakaba260",
            "snowsunny",
            "wanashi",
            "roppen",
            "kiwifruit@github",
            "maaru",
            "ban05",
            "takoba",
            "hiroseabook",
            "ymdkdk",
            "etcroom",
            "LordOfNightmare",
            "dekchi",
            "keigan",
            "capp",
            "nanoninejp",
            "7310chain",
            "miragestage@github",
            "unicode48",
            "magifd2",
            "fair_sg",
            "crois",
            "minowaman",
            "brain-box",
            "chiali@github",
            "dodo5522",
            "gyhino@github",
            "guohaijiao",
            "takemichi@github",
            "nakaharatt",
            "kakipo",
            "miura-rio",
            "Kurimotti",
            "one_pattern",
            "Silmaril",
            "dayoshix",
            "ykominami",
            "tk_0225",
            "sugard12",
            "intermezzo-fr",
            "moon",
            "taku_m",
            "ooDEMi",
            "yudppp",
            "sasasin@github",
            "tyamoto@github",
            "azul",
            "saltheads",
            "hidek84",
            "offthewall@github",
            "flydrleo",
            "shimitei",
            "arihara",
            "jiskanulo",
            "ledmonster",
            "komiya_atsushi",
            "ogatomo",
            "aveguen",
            "tmizo",
            "ikawaha",
            "MacLifeLabs",
            "mmatsumoto1973",
            "shanonim",
            "bonetaro",
            "kanji",
            "ngyoi",
            "tokomagu",
            "kwkz",
            "dorayaki_kun",
            "yukiyan",
            "kuronama",
            "windturtle",
            "ymmtdisk",
            "solight",
            "ootomo-k",
            "sakihama",
            "nob1005",
            "tuiterukun",
            "junichi",
            "TONY0922",
            "thc_oO",
            "greeeenkew",
            "Airin",
            "catparadox",
            "gosshys",
            "shachi",
            "kzslim",
            "azarashi55",
            "314mic",
            "nagatashinya",
            "satoshi-kubota",
            "amemiya4126",
            "wolfmasa",
            "dica33",
            "kotori_pichan",
            "kenichi_cc",
            "nori1027",
            "nekoallergie",
            "terura",
            "hitvine_ipod",
            "raf_T",
            "ogawa_agentec",
            "s0912079",
            "htomine",
            "ozaki_shigenobu",
            "negita",
            "oguraya",
            "mothule",
            "watarumohawk",
            "ashinya",
            "shintaros",
            "kazul",
            "ktu",
            "jfujima",
            "k2zo_o",
            "kui23",
            "From_F",
            "quenhulu",
            "kantapapan",
            "takano32",
            "ktykogm",
            "sakuna63",
            "Noboruhi",
            "llhrkll",
            "xkumiyu",
            "toruta39",
            "huchiwa",
            "tohrinagi",
            "gyagya1111",
            "mekashin",
            "Mocel",
            "srtkmsw",
            "xanadu62",
            "numeri84",
            "manjilab",
            "ichiyaman@github",
            "azakazu",
            "hasssie",
            "kobutya",
            "matsubo",
            "kudohamu",
            "gnkm",
            "hrtkz",
            "iput01",
            "yasulab",
            "yosshi",
            "toraiwa",
            "msaito3",
            "y_motosugi",
            "TomoyaIgarashi",
            "oosugi20",
            "kidatti",
            "pokota86@github",
            "102782",
            "hjm_ssk",
            "tacamula@github",
            "9joneg",
            "onuma1004",
            "iyuto",
            "zeroyonichihachi",
            "ux-01",
            "chikathreesix@github",
            "zaziko_github",
            "Gacchan36",
            "mc-kusaka",
            "slowrider924",
            "itcom",
            "toshiyuki",
            "kashi-digion",
            "kimiya",
            "mox2",
            "saka39",
            "novita",
            "ina_ryu",
            "ponkichi4",
            "barasixi",
            "senosa",
            "CANAO",
            "5831hirotomo",
            "Shunta_Suzuki",
            "HappyLuckyAkira",
            "genei",
            "ttwwiitttteerr0",
            "junishitsuka",
            "t39@github",
            "machupicchubeta",
            "ooyabuh",
            "again22",
            "miyagi389",
            "masashi0127",
            "hiphi@github",
            "MainaShibata",
            "kksn2501",
            "ksato",
            "white_aspara25",
            "aokazu",
            "issei_c",
            "osd",
            "calmscape@github",
            "kilica",
            "9ryu",
            "N_Oda",
            "sutetotanuki",
            "kimikimi714",
            "abpla",
            "kaito_blackcat",
            "hana_da",
            "obanaopon",
            "masassiez",
            "foresta",
            "daisuke-3",
            "nackii",
            "gitmarchon",
            "miu_suke",
            "nqounet",
            "mozuku99jp",
            "rokipy",
            "droibiter",
            "shinomiya_33",
            "mountcedar",
            "maru",
            "Chalon37699077",
            "MorimotoYasunori@github",
            "kaizumt",
            "baruok",
            "miura",
            "water_resistant",
            "shiima1116",
            "poppen@github",
            "nyarla",
            "segawa",
            "satton_maroyaka",
            "kou_tana77",
            "shin106",
            "gips_nita",
            "NowhereMan21",
            "yoshikatu79",
            "shotaAkasaka",
            "ryu1_okd",
            "zyun1109",
            "kttrader",
            "hogenishi",
            "tkd55",
            "tomokane@github",
            "yoshipa",
            "ume3_",
            "flatstone1990",
            "tyaspi",
            "damassima",
            "amyrom@github",
            "SongOfYste",
            "k-okishima@github",
            "ysh86",
            "meatball55",
            "mmakmo",
            "KenjiI",
            "dot@github",
            "moya",
            "te28",
            "while_vblank",
            "abechangyu",
            "Y-0",
            "myzato",
            "tantan",
            "t-shuichi",
            "Fly_high_747",
            "flame1980",
            "murayama",
            "macchaberrycream",
            "yukiharu403",
            "selious",
            "msykiino",
            "voogie01",
            "v_sugiyama",
            "redamoon",
            "toui",
            "goldspring",
            "mkkproject",
            "knsh14",
            "futo4",
            "luccafort",
            "ongaq",
            "karinharp",
            "vh5150",
            "KumaChan88",
            "rhina",
            "HamaTech",
            "nagakenjs",
            "5LOG",
            "yu_wasama",
            "rakuten_saitama",
            "rikizawa",
            "hidesuke",
            "hrs_sano645",
            "uokada",
            "issy-s16",
            "rentalname@github",
            "uriuriuriu",
            "riocampos",
            "Tom_G3X",
            "gami_san",
            "kazzy",
            "abenben",
            "sako-j",
            "bitgleams",
            "kinushu",
            "nozhaan",
            "ozw_sei",
            "aalnocomb",
            "rivinerworks",
            "yaibayamana",
            "kyuns",
            "techwkg-mc@github",
            "pomero",
            "ApricotHoney",
            "melito",
            "saaaaaaku",
            "mrtsh@github",
            "GENYA",
            "m-nagae",
            "monodera",
            "gggami",
            "kkabetani",
            "cyasova",
            "Mt_blue81",
            "midasmn",
            "applesnow",
            "kiiita",
            "HiroyukiOgawa",
            "richasonson",
            "syo-sa1982",
            "maecchi",
            "thleap",
            "RyoIkarashi",
            "ryuone",
            "ltd",
            "FUKUZAWA-Tadashi@github",
            "naominix@github",
            "simota",
            "tomaju",
            "endu@github",
            "yshrsmz@github",
            "soundTricker",
            "LikeARitsu",
            "okb_m",
            "pixyzehn",
            "karumado",
            "tm8r@github",
            "fjyuu",
            "komiiisan",
            "ANTON072",
            "sa104",
            "masatoru",
            "immr",
            "yanap",
            "ftsan",
            "kantoku@github",
            "parakeety",
            "akiyoshi83",
            "big2men",
            "shige0501",
            "pocket7878",
            "ta1kt0me@github",
            "kengo_0628",
            "pika-shi@github",
            "kwkm",
            "sofpyon",
            "ymzkryo",
            "monstersatoshi",
            "mgi166",
            "tanayan3",
            "howardmong",
            "sora0513@github",
            "merborne",
            "tmtk75",
            "toshiakiokano@github",
            "eishis",
            "katz",
            "omatty198",
            "yamu_key",
            "kazuma1107",
            "cd01",
            "adachi68",
            "syui",
            "comeonly",
            "knt45",
            "bosturbo",
            "akishin",
            "yonozawa",
            "oval66",
            "sprechchor44",
            "u_engine",
            "heiz123@github",
            "ymorired",
            "yuyawata",
            "sakura_bird1",
            "jinho",
            "katzkawai",
            "ayaniimi213",
            "odamax@github",
            "ngc224",
            "kenokabe",
            "Humangas",
            "cu39",
            "uribou@github",
            "takuya6@github",
            "basi",
            "ksomemo",
            "domokun70cm",
            "comutt",
            "ShimojiK",
            "yura",
            "noppe18@github",
            "hachiman8",
            "nagodon",
            "mhara",
            "matsudam",
            "hiroton_fx",
            "takeshi-seki",
            "nomade_toshi",
            "wakuworks",
            "kimuraya",
            "kanda_net",
            "starcat",
            "satotin",
            "7_stars",
            "hatch2",
            "betahikaru",
            "qpgmr516",
            "guyon@github",
            "laishin17@github",
            "STAR_ZERO",
            "habu0104",
            "ohtsuka",
            "fleugel",
            "an7s",
            "stuons",
            "Kawa1128",
            "gungle",
            "ryurock",
            "yuki3738",
            "tetsuzin",
            "yukika231",
            "clomie",
            "yabuchin_y",
            "quanon86",
            "hiroyuki_hon",
            "yuma_iwasaki",
            "hiro_at_Aichi",
            "wgkoro@github",
            "yoshihiro",
            "asakasa",
            "NeXTSTEP2OSX",
            "kazica",
            "niwatori720",
            "hikaruna",
            "aidahomame",
            "nibushibu",
            "arm",
            "nextschool",
            "takecian",
            "xiang_7120",
            "ringo",
            "motty1009",
            "DandyMania",
            "kasumani",
            "peketamin",
            "kilhyungdoo",
            "Hakuja",
            "abe00makoto",
            "katapad",
            "itoKami1123",
            "hiyuzawa",
            "Tamadon",
            "kimihiro_n",
            "RyoAtNet",
            "windhorn",
            "meganek0",
            "stvjbz",
            "dany1468",
            "veryblue",
            "mmizutani",
            "w3110",
            "syunta0817",
            "Masaharu",
            "eririringi",
            "yukimunet",
            "macococo",
            "fkshom",
            "Reds",
            "maestro",
            "tomohidex",
            "amaron518",
            "conifer_cone",
            "sts",
            "JunSuzukiJapan@github",
            "cubdesign",
            "yuukichi",
            "takumakei@github",
            "akmiyoshi",
            "mono0926"
        ]
    },
    {
        "id": 82301,
        "uuid": "d329250ca66ce0c68725",
        "user": {
            "id": 47014,
            "url_name": "rubyu",
            "profile_image_url": "https://pbs.twimg.com/profile_images/585391487/qBqPu0mK.20061024094725_normal.jpg"
        },
        "title": "ScalaのRegexParsersで書いたパーサのチューニング方法 #1",
        "created_at": "2014-06-20 16:20:19 +0900",
        "updated_at": "2014-07-13 10:17:55 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 9,
        "comment_count": 0,
        "url": "http://qiita.com/rubyu/items/d329250ca66ce0c68725",
        "created_at_as_seconds": 1403248819,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "注記: 各テストで、[ScalaのRegexParsersがすごく遅くなる件の原因と対策 - Qiita](http://qiita.com/rubyu/items/2832c1967a71ab83a4d4)の対策を施したCharSequenceをParserに与えています。\n\n---\n\n## CSVパーサを書きます。\n\nまず素直に定義してみます。\n\n```Parser.scala\nimport util.parsing.combinator.RegexParsers\n\ntrait Parser extends RegexParsers {\n  override val skipWhitespace = false\n\n  lazy val line          : Parser[Result.Element] = ls  ^^^ Result.Row(Nil) | row <~ ls\n  lazy val lastLine      : Parser[Result.Element] = eof ^^^ Result.Row(Nil) | row <~ eof | invalidString\n  lazy val row           : Parser[Result.Element] = repsep( field, fs ) ^^ { Result.Row(_) }\n  lazy val invalidString : Parser[Result.Element] = \"\"\".+\"\"\".r ^^ { Result.InvalidString(_) }\n\n  def field : Parser[String]\n  def fs    : Parser[String]\n  def ls    : Parser[String]\n  val eof   : Parser[String] = \"\"\"\\z\"\"\".r\n}\n```\n\n```Parser1.scala\nclass Parser1 extends Parser {\n\n  lazy val fs : Parser[String] = \"\\t\"\n  lazy val ls : Parser[String] = \"(\\r\\n|\\r|\\n)\".r\n\n  //長さ0以上の文字列。\n  lazy val field             = quoted_field | raw_value\n\n  //QUOTEに囲まれていること。前後にスペースによるパディングが存在してもよい。\n  lazy val quoted_field      = padding ~> quote ~> quoted_value <~ quote <~ padding\n\n  //QUOTE以外の文字, エスケープされたQUOTEからなる長さ0以上の文字列。\n  lazy val quoted_value      = rep( escaped_quote | not_quote | ls | fs ) ^^ { _.mkString }\n\n  //QUOTE, fs, ls以外から開始し、fs, ls以外が後続する、長さ0以上の文字列。\n  lazy val raw_value         = ( not_quote_and_fs ~ rep( not_fs )).? ^^ { case Some(head ~ tail) => head :: tail mkString; case None => \"\" }\n\n  lazy val padding           = rep( space )\n  lazy val escaped_quote     = quote ~ quote ^^^ quote\n  lazy val not_quote         = not( quote ) ~> char\n  lazy val not_fs            = not( fs ) ~> char\n  lazy val not_quote_and_fs  = not( guard(quote) | fs ) ~> char\n\n  lazy val char            = \".\".r\n  lazy val space           = ' '\n  lazy val quote           = '\"'\n}\n```\n\n1文字1文字をParserがチェックしてていて、想像がつくとおり、すごく遅いです。\n\n```bat\n> sbt \"run Reader3WithParser1 test2.tsv\"\ntotal row: 12000\ntotal field: 36000\ntotal char: 47448571\ntotal sec: 39.3310\nrow (per/sec): 305.1028\nfield (per/sec): 915.3085\nchar (per/sec): 1206391.1250\n```\n\n![874ea2d7645b7a61d572cf377dba9926.png](https://qiita-image-store.s3.amazonaws.com/0/47014/d4186826-9259-69db-9c4a-6b8e9c7b62a9.png)\n\n## パフォーマンスを改善するためには、\nなるべくParserが文字列をチェックする回数を減らすことが重要です。つまり、正規表現で表現可能できる部分をなるべくRegexで定義してしまいます。\n\n```Parser2.scala\n\nclass Parser2 extends Parser {\n\n  lazy val fs : Parser[String] = \"\\t\"\n  lazy val ls : Parser[String] = \"(\\r\\n|\\r|\\n)\".r\n\n  //長さ0以上の文字列。\n  lazy val field        : Parser[String] = quoted_field | raw_value\n\n  //QUOTEに囲まれていること。前後にスペースによるパディングが存在してもよい。\n  lazy val quoted_field : Parser[String] = \" *\\\"\".r ~> quoted_value <~ \"\\\" *\".r\n\n  //QUOTE以外の文字, エスケープされたQUOTEからなる長さ0以上の文字列。\n  lazy val quoted_value : Parser[String] = rep( \"\\\"\\\"\" ^^^ \"\\\"\" | \"[^\\\"]+\".r ) ^^ { _.mkString }\n\n  //QUOTE, fs, ls以外から開始し、fs, ls以外が後続する、長さ0以上の文字列。\n  lazy val raw_value    : Parser[String] = \"([^\\t\\\"\\r\\n][^\\t\\r\\n]*)?\".r\n}\n```\n\n```bat\n> sbt \"run Reader3WithParser2 test2.tsv\"\ntotal row: 12000\ntotal field: 36000\ntotal char: 47448571\ntotal sec: 3.3910\nrow (per/sec): 3538.7791\nfield (per/sec): 10616.3369\nchar (per/sec): 13992501.0000\n```\n\n![4a041a322599451f674bd11761ba3d82.png](https://qiita-image-store.s3.amazonaws.com/0/47014/5195f45f-9bef-6f14-fd81-64645f070f23.png)\n\nいきなり爆速になりました。CSVはルールが単純で、raw_value, quoted_valueをシンプルに記述できたことが効きました。\n\nVS [OrangeSignal CSV](https://github.com/orangesignal/orangesignal-csv) で 17% 高速です!!\n\n```bat\n> sbt \"run OrangeSignal test2.tsv\"\ntotal row: 12001\ntotal field: 36001\ntotal char: 47448571\ntotal sec: 3.9770\nrow (per/sec): 3017.6013\nfield (per/sec): 9052.3008\nchar (per/sec): 11930745.0000\n```\n\n![d84cd129dae7b361b440ac09920ff83b.png](https://qiita-image-store.s3.amazonaws.com/0/47014/6257b676-d584-9e9d-f3e9-49e6b1002760.png)\n\n## Parserを定義するRegexをハードコードしてしまうと、\n可読性や柔軟性がかなり損なわれますが、後者については正規表現を使いこなすことでなんとかなることが多いです。\n例えばここのCSVパーサの例において、任意のパターンをフィールドや行の区切りとして与えることは、正規表現のNegative Lookaheadを使えば可能です。\n\n```Parser3.scala\nclass Parser3 extends Parser {\n\n  val LS = \"(\\r\\n|\\r|\\n)\"\n  val FS = \"\\t\"\n\n  val ls : Parser[String] = new Regex(LS)\n  val fs : Parser[String] = new Regex(FS)\n\n  //長さ0以上の文字列。\n  lazy val field        : Parser[String] = quoted_field | raw_field\n\n  //QUOTEに囲まれていること。前後にスペースによるパディングが存在してもよい。\n  lazy val quoted_field : Parser[String] = \" *\\\"\".r ~> quoted_value <~ \"\\\" *\".r\n\n  //QUOTE以外の文字, エスケープされたQUOTEからなる長さ0以上の文字列。\n  lazy val quoted_value : Parser[String] = rep( \"\\\"\\\"\" ^^^ \"\\\"\" | \"\"\"[^\"]+\"\"\".r ) ^^ { _.mkString }\n\n  //QUOTE, fs, ls以外から開始し、fs, ls以外が後続する、長さ0以上の文字列。\n  lazy val raw_field    : Parser[String] = s\"\"\"(((?!$FS)(?!$LS)[^\"])((?!$FS)(?!$LS).)*)?\"\"\".r\n}\n```\n\nここで注意しなければいけないことは、先読み否定の`((?!ab)(?!b).)+`は、`ab`と`ｂ`にはマッチしますが、`a`にはマッチしないことです。Parser3.LSの定義が`(\\r\\n|\\r|\\n)`になっているのはそのためで、もしこれが`(\\r\\n|\\n)`だった場合、Parser3.raw_fieldの定義は`(((?!\\t)(?!(\\r\\n|\\n))[^\"])((?!\\t)(?!(\\r\\n|\\n)).)*)?`になってしまい、Parser.lineだと`\\r\\r\\n`のようなパターン、Parser.lastLineだとCSVファイルが`\\r`で終わっている場合に、フィールド値に`\\r`が紛れ込むバグが発生します。\n\nどうですか？　簡単ですね！\n\n## 正規表現にはその他様々な機能が備わっています。\nどんどんBNFから正規表現に置き換えていきましょう！　楽しくなってきますよ\n\n",
        "body": "<p>注記: 各テストで、<a href=\"http://qiita.com/rubyu/items/2832c1967a71ab83a4d4\" title=\"\">ScalaのRegexParsersがすごく遅くなる件の原因と対策 - Qiita</a>の対策を施したCharSequenceをParserに与えています。</p>\n\n<hr>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>CSVパーサを書きます。\n      </h2><p>まず素直に定義してみます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Parser.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">util.parsing.combinator.RegexParsers</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">Parser</span> <span class=\"k\">extends</span> <span class=\"nc\">RegexParsers</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">val</span> <span class=\"n\">skipWhitespace</span> <span class=\"k\">=</span> <span class=\"kc\">false</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">line</span>          <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">Result.Element</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">ls</span>  <span class=\"o\">^^^</span> <span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"nc\">Nil</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"n\">row</span> <span class=\"o\">&lt;~</span> <span class=\"n\">ls</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">lastLine</span>      <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">Result.Element</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">eof</span> <span class=\"o\">^^^</span> <span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"nc\">Nil</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"n\">row</span> <span class=\"o\">&lt;~</span> <span class=\"n\">eof</span> <span class=\"o\">|</span> <span class=\"n\">invalidString</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">row</span>           <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">Result.Element</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">repsep</span><span class=\"o\">(</span> <span class=\"n\">field</span><span class=\"o\">,</span> <span class=\"n\">fs</span> <span class=\"o\">)</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">invalidString</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">Result.Element</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;.+&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"nc\">InvalidString</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">field</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">fs</span>    <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">ls</span>    <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n  <span class=\"k\">val</span> <span class=\"n\">eof</span>   <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;&quot;&quot;\\z&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Parser1.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Parser1</span> <span class=\"k\">extends</span> <span class=\"nc\">Parser</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">fs</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\t&quot;</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">ls</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;(\\r\\n|\\r|\\n)&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n  <span class=\"c1\">//長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">field</span>             <span class=\"k\">=</span> <span class=\"n\">quoted_field</span> <span class=\"o\">|</span> <span class=\"n\">raw_value</span>\n\n  <span class=\"c1\">//QUOTEに囲まれていること。前後にスペースによるパディングが存在してもよい。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quoted_field</span>      <span class=\"k\">=</span> <span class=\"n\">padding</span> <span class=\"o\">~&gt;</span> <span class=\"n\">quote</span> <span class=\"o\">~&gt;</span> <span class=\"n\">quoted_value</span> <span class=\"o\">&lt;~</span> <span class=\"n\">quote</span> <span class=\"o\">&lt;~</span> <span class=\"n\">padding</span>\n\n  <span class=\"c1\">//QUOTE以外の文字, エスケープされたQUOTEからなる長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quoted_value</span>      <span class=\"k\">=</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"n\">escaped_quote</span> <span class=\"o\">|</span> <span class=\"n\">not_quote</span> <span class=\"o\">|</span> <span class=\"n\">ls</span> <span class=\"o\">|</span> <span class=\"n\">fs</span> <span class=\"o\">)</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">mkString</span> <span class=\"o\">}</span>\n\n  <span class=\"c1\">//QUOTE, fs, ls以外から開始し、fs, ls以外が後続する、長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">raw_value</span>         <span class=\"k\">=</span> <span class=\"o\">(</span> <span class=\"n\">not_quote_and_fs</span> <span class=\"o\">~</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"n\">not_fs</span> <span class=\"o\">)).?</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"k\">case</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">~</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"n\">mkString</span><span class=\"o\">;</span> <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">padding</span>           <span class=\"k\">=</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"n\">space</span> <span class=\"o\">)</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">escaped_quote</span>     <span class=\"k\">=</span> <span class=\"n\">quote</span> <span class=\"o\">~</span> <span class=\"n\">quote</span> <span class=\"o\">^^^</span> <span class=\"n\">quote</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">not_quote</span>         <span class=\"k\">=</span> <span class=\"n\">not</span><span class=\"o\">(</span> <span class=\"n\">quote</span> <span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">char</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">not_fs</span>            <span class=\"k\">=</span> <span class=\"n\">not</span><span class=\"o\">(</span> <span class=\"n\">fs</span> <span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">char</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">not_quote_and_fs</span>  <span class=\"k\">=</span> <span class=\"n\">not</span><span class=\"o\">(</span> <span class=\"n\">guard</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"n\">fs</span> <span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">char</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">char</span>            <span class=\"k\">=</span> <span class=\"s\">&quot;.&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">space</span>           <span class=\"k\">=</span> <span class=\"sc\">&#39; &#39;</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quote</span>           <span class=\"k\">=</span> <span class=\"sc\">&#39;&quot;&#39;</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>1文字1文字をParserがチェックしてていて、想像がつくとおり、すごく遅いです。</p>\n<div class=\"code-frame\" data-lang=\"bat\"><div class=\"highlight\"><pre><span class=\"p\">&gt;</span> <span class=\"n\">sbt</span> <span class=\"s2\">&quot;run Reader3WithParser1 test2.tsv&quot;</span>\ntotal row: <span class=\"m\">12000</span>\ntotal field: <span class=\"m\">36000</span>\ntotal char: <span class=\"m\">47448571</span>\ntotal sec: <span class=\"m\">39</span>.<span class=\"m\">3310</span>\nrow (per<span class=\"n\">/sec):</span> <span class=\"m\">305</span>.<span class=\"m\">1028</span>\nfield (per<span class=\"n\">/sec):</span> <span class=\"m\">915</span>.<span class=\"m\">3085</span>\nchar (per<span class=\"n\">/sec):</span> <span class=\"m\">1206391</span>.<span class=\"m\">1250</span>\n</pre></div></div><p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/d4186826-9259-69db-9c4a-6b8e9c7b62a9.png\" alt=\"874ea2d7645b7a61d572cf377dba9926.png\"></p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>パフォーマンスを改善するためには、\n      </h2><p>なるべくParserが文字列をチェックする回数を減らすことが重要です。つまり、正規表現で表現可能できる部分をなるべくRegexで定義してしまいます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Parser2.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Parser2</span> <span class=\"k\">extends</span> <span class=\"nc\">Parser</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">fs</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\t&quot;</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">ls</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;(\\r\\n|\\r|\\n)&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n  <span class=\"c1\">//長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">field</span>        <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">quoted_field</span> <span class=\"o\">|</span> <span class=\"n\">raw_value</span>\n\n  <span class=\"c1\">//QUOTEに囲まれていること。前後にスペースによるパディングが存在してもよい。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quoted_field</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot; *\\&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">~&gt;</span> <span class=\"n\">quoted_value</span> <span class=\"o\">&lt;~</span> <span class=\"s\">&quot;\\&quot; *&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n  <span class=\"c1\">//QUOTE以外の文字, エスケープされたQUOTEからなる長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quoted_value</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"s\">&quot;\\&quot;\\&quot;&quot;</span> <span class=\"o\">^^^</span> <span class=\"s\">&quot;\\&quot;&quot;</span> <span class=\"o\">|</span> <span class=\"s\">&quot;[^\\&quot;]+&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">mkString</span> <span class=\"o\">}</span>\n\n  <span class=\"c1\">//QUOTE, fs, ls以外から開始し、fs, ls以外が後続する、長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">raw_value</span>    <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot;([^\\t\\&quot;\\r\\n][^\\t\\r\\n]*)?&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n<span class=\"o\">}</span>\n</pre></div></div><div class=\"code-frame\" data-lang=\"bat\"><div class=\"highlight\"><pre><span class=\"p\">&gt;</span> <span class=\"n\">sbt</span> <span class=\"s2\">&quot;run Reader3WithParser2 test2.tsv&quot;</span>\ntotal row: <span class=\"m\">12000</span>\ntotal field: <span class=\"m\">36000</span>\ntotal char: <span class=\"m\">47448571</span>\ntotal sec: <span class=\"m\">3</span>.<span class=\"m\">3910</span>\nrow (per<span class=\"n\">/sec):</span> <span class=\"m\">3538</span>.<span class=\"m\">7791</span>\nfield (per<span class=\"n\">/sec):</span> <span class=\"m\">10616</span>.<span class=\"m\">3369</span>\nchar (per<span class=\"n\">/sec):</span> <span class=\"m\">13992501</span>.<span class=\"m\">0000</span>\n</pre></div></div><p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/5195f45f-9bef-6f14-fd81-64645f070f23.png\" alt=\"4a041a322599451f674bd11761ba3d82.png\"></p>\n<p>いきなり爆速になりました。CSVはルールが単純で、raw_value, quoted_valueをシンプルに記述できたことが効きました。</p>\n<p>VS <a href=\"https://github.com/orangesignal/orangesignal-csv\" title=\"\" target=\"_blank\">OrangeSignal CSV</a> で 17% 高速です!!</p>\n<div class=\"code-frame\" data-lang=\"bat\"><div class=\"highlight\"><pre><span class=\"p\">&gt;</span> <span class=\"n\">sbt</span> <span class=\"s2\">&quot;run OrangeSignal test2.tsv&quot;</span>\ntotal row: <span class=\"m\">12001</span>\ntotal field: <span class=\"m\">36001</span>\ntotal char: <span class=\"m\">47448571</span>\ntotal sec: <span class=\"m\">3</span>.<span class=\"m\">9770</span>\nrow (per<span class=\"n\">/sec):</span> <span class=\"m\">3017</span>.<span class=\"m\">6013</span>\nfield (per<span class=\"n\">/sec):</span> <span class=\"m\">9052</span>.<span class=\"m\">3008</span>\nchar (per<span class=\"n\">/sec):</span> <span class=\"m\">11930745</span>.<span class=\"m\">0000</span>\n</pre></div></div><p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/6257b676-d584-9e9d-f3e9-49e6b1002760.png\" alt=\"d84cd129dae7b361b440ac09920ff83b.png\"></p>\n<h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>Parserを定義するRegexをハードコードしてしまうと、\n      </h2><p>可読性や柔軟性がかなり損なわれますが、後者については正規表現を使いこなすことでなんとかなることが多いです。<br>\n例えばここのCSVパーサの例において、任意のパターンをフィールドや行の区切りとして与えることは、正規表現のNegative Lookaheadを使えば可能です。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">Parser3.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Parser3</span> <span class=\"k\">extends</span> <span class=\"nc\">Parser</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"nc\">LS</span> <span class=\"k\">=</span> <span class=\"s\">&quot;(\\r\\n|\\r|\\n)&quot;</span>\n  <span class=\"k\">val</span> <span class=\"nc\">FS</span> <span class=\"k\">=</span> <span class=\"s\">&quot;\\t&quot;</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">ls</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Regex</span><span class=\"o\">(</span><span class=\"nc\">LS</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">fs</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Regex</span><span class=\"o\">(</span><span class=\"nc\">FS</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">//長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">field</span>        <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">quoted_field</span> <span class=\"o\">|</span> <span class=\"n\">raw_field</span>\n\n  <span class=\"c1\">//QUOTEに囲まれていること。前後にスペースによるパディングが存在してもよい。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quoted_field</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"s\">&quot; *\\&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">~&gt;</span> <span class=\"n\">quoted_value</span> <span class=\"o\">&lt;~</span> <span class=\"s\">&quot;\\&quot; *&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n\n  <span class=\"c1\">//QUOTE以外の文字, エスケープされたQUOTEからなる長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">quoted_value</span> <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">rep</span><span class=\"o\">(</span> <span class=\"s\">&quot;\\&quot;\\&quot;&quot;</span> <span class=\"o\">^^^</span> <span class=\"s\">&quot;\\&quot;&quot;</span> <span class=\"o\">|</span> <span class=\"s\">&quot;&quot;&quot;[^&quot;]+&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"o\">^^</span> <span class=\"o\">{</span> <span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">mkString</span> <span class=\"o\">}</span>\n\n  <span class=\"c1\">//QUOTE, fs, ls以外から開始し、fs, ls以外が後続する、長さ0以上の文字列。</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">raw_field</span>    <span class=\"k\">:</span> <span class=\"kt\">Parser</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">s</span><span class=\"s\">&quot;&quot;&quot;(((?!$FS)(?!$LS)[^&quot;])((?!$FS)(?!$LS).)*)?&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">r</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>ここで注意しなければいけないことは、先読み否定の<code>((?!ab)(?!b).)+</code>は、<code>ab</code>と<code>ｂ</code>にはマッチしますが、<code>a</code>にはマッチしないことです。Parser3.LSの定義が<code>(\\r\\n|\\r|\\n)</code>になっているのはそのためで、もしこれが<code>(\\r\\n|\\n)</code>だった場合、Parser3.raw_fieldの定義は<code>(((?!\\t)(?!(\\r\\n|\\n))[^&quot;])((?!\\t)(?!(\\r\\n|\\n)).)*)?</code>になってしまい、Parser.lineだと<code>\\r\\r\\n</code>のようなパターン、Parser.lastLineだとCSVファイルが<code>\\r</code>で終わっている場合に、フィールド値に<code>\\r</code>が紛れ込むバグが発生します。</p>\n<p>どうですか？　簡単ですね！</p>\n<h2>\n        <span id=\"2-4\" class=\"fragment\"></span>\n        <a href=\"#2-4\"><i class=\"fa fa-link\"></i></a>正規表現にはその他様々な機能が備わっています。\n      </h2><p>どんどんBNFから正規表現に置き換えていきましょう！　楽しくなってきますよ</p>\n",
        "stock_users": [
            "JunSuzukiJapan@github",
            "astronaughts",
            "Noboruhi",
            "koizuka",
            "kimuraya",
            "kasumani",
            "suin",
            "Reds",
            "hiro_matsuno2"
        ]
    },
    {
        "id": 82267,
        "uuid": "2832c1967a71ab83a4d4",
        "user": {
            "id": 47014,
            "url_name": "rubyu",
            "profile_image_url": "https://pbs.twimg.com/profile_images/585391487/qBqPu0mK.20061024094725_normal.jpg"
        },
        "title": "ScalaのRegexParsersがすごく遅くなる件の原因と対策（version 1.0.2で修正されました）",
        "created_at": "2014-06-20 15:12:27 +0900",
        "updated_at": "2014-07-27 15:43:53 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "約2ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 6,
        "comment_count": 2,
        "url": "http://qiita.com/rubyu/items/2832c1967a71ab83a4d4",
        "created_at_as_seconds": 1403244747,
        "tweet": true,
        "gist_url": null,
        "private": false,
        "raw_body": "# 追記： この問題はversion 1.0.2で修正されました。\nhttps://groups.google.com/d/topic/scala-announce/AnIPnB1rfUQ/discussion\nhttp://repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.2/\n\nScala 2.11から[scala-parser-combinators](https://github.com/scala/scala-parser-combinators)は別jarになってますのでサクッとbuild.sbtを書き換えて修正できるようです。\n\n# [RegexParsers](http://www.scala-lang.org/api/2.10.4/index.html#scala.util.parsing.combinator.RegexParsers)でCSVパーサを書いていました\nテストコードはパスして、実際にある程度のサイズのファイルを食べさせてみると、すごく遅い。まあそんなものなのかなぁと一晩放置すると\n\n```\njava.lang.OutOfMemoryError: Java heap space\n```\n\nとなりました。\n\n## VisualVMでプロファイルしたものが以下です\nReader1WithParser1\n![parser1](https://qiita-image-store.s3.amazonaws.com/0/47014/8825a2db-3570-8c9f-8237-ef7edba3acc5.png)\n\n![4361ec54766bc80fc470de34a5b4296c.png](https://qiita-image-store.s3.amazonaws.com/0/47014/dbe88083-9eb4-ebec-2522-263b59458037.png)\n\n![b8d2b349f5ccd23888a88ea367043bf0\n.png](https://qiita-image-store.s3.amazonaws.com/0/47014/5a72f2a9-d8ac-5514-e469-3988b5b2b245.png)\n\nRegex.findPrefixMatchOf()がほとんどの時間を占めていて、char[]の消費がすごい。\n\n## 調べてみると[該当するIssueが見つかり](https://issues.scala-lang.org/browse/SI-7710)ました\nどうやらJavaのStringに関する仕様変更をまともに食らったらしく、メモリパフォーマンスがO(入力長)！！になってしまった模様。[修正パッチはマージされています](https://github.com/scala/scala-parser-combinators/pull/17)が、単純に[RegexParsers.scala has O(inputlength) memory performance on java >= 7u6](https://issues.scala-lang.org/browse/SI-7710)に書かれているFastCharSequenceを参考にArray[Char]をラップして、RegexParsers.parseまたはRegexParsers.parseAllに渡せばよさそうです。charAtのindexが負の場合のチェックが抜けてますので、そこを修正して\n\n```FastCharSequence.scala\n\n/**\n * https://issues.scala-lang.org/browse/SI-7710\n */\nclass FastCharSequence(chars: Array[Char], val sb: Int, val eb: Int) extends CharSequence {\n  def this(chars: Array[Char]) = this(chars, 0, chars.length)\n\n  lazy val length = eb - sb\n\n  def charAt(i: Int): Char = {\n    if (i < 0 || i >= length) {\n      throw new IndexOutOfBoundsException\n    }\n    chars(i + sb)\n  }\n\n  def subSequence(s: Int, e: Int): CharSequence = {\n    if (s < 0 || e < 0 || s > e || e > length) {\n      throw new IndexOutOfBoundsException\n    }\n    new FastCharSequence(chars, sb + s, sb + e)\n  }\n\n  override def toString(): String = new String(chars, sb, length)\n}\n```\n\nまた、ファイル全体を読み込んでパーサに渡すのでなく、一定サイズをバッファに読み込み、順次パースしていき、失敗するとバッファを増やしてトライする…というような処理を行う場合、このFastCharSequenceをなるべく低コストで連結できるとうれしいので、その場合は以下のように対応できます。\n\n```JointCharSequence.scala\nclass JointCharSequence(a: CharSequence, b: CharSequence) extends CharSequence {\n  lazy val length = a.length + b.length\n\n  def charAt(i: Int) = {\n    if (i < 0 || i >= length) {\n      throw new IndexOutOfBoundsException\n    }\n    if (i < a.length) {\n      a.charAt(i)\n    } else {\n      b.charAt(i-a.length)\n    }\n  }\n\n  def subSequence(s: Int, e: Int) = {\n    if (s < 0 || e < 0 || s > e || e > length) {\n      throw new IndexOutOfBoundsException\n    }\n    if (s < a.length) {\n      if (e <= a.length) {\n        a.subSequence(s, e)\n      } else {\n        val _e = e-a.length\n        val _a = if (s == 0) a else a.subSequence(s, a.length)\n        val _b = if (_e == b.length) b else b.subSequence(0, _e)\n        new JointCharSequence(_a, _b)\n      }\n    } else {\n      b.subSequence(s-a.length, e-a.length)\n    }\n  }\n\n  override def toString(): String = a.toString + b.toString\n}\n```\n\n## 上記の修正を適用して、なんとか実用的な速度でCSVパーサが動くようになりました\nReader2WithParser1\n![1d2d8655dec622eb581dd06e2ce4e4d4.png](https://qiita-image-store.s3.amazonaws.com/0/47014/292cc776-fc19-2011-e13e-94e9d92c1db4.png)\n\n\nしかし[OrangeSignal CSV](https://github.com/orangesignal/orangesignal-csv)比ではわずか10%の速度。\n\n\n\nOrangeSignal CSV\n![d84cd129dae7b361b440ac09920ff83b.png](https://qiita-image-store.s3.amazonaws.com/0/47014/6257b676-d584-9e9d-f3e9-49e6b1002760.png)\nはやい！\n",
        "body": "<h1>\n        <span id=\"1-1\" class=\"fragment\"></span>\n        <a href=\"#1-1\"><i class=\"fa fa-link\"></i></a>追記： この問題はversion 1.0.2で修正されました。\n      </h1><p><a href=\"https://groups.google.com/d/topic/scala-announce/AnIPnB1rfUQ/discussion\" title=\"https://groups.google.com/d/topic/scala-announce/AnIPnB1rfUQ/discussion\" target=\"_blank\">https://groups.google.com/d/topic/scala-announce/AnIPnB1rfUQ/discussion</a><br>\n<a href=\"http://repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.2/\" title=\"http://repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.2/\" target=\"_blank\">http://repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.2/</a></p>\n<p>Scala 2.11から<a href=\"https://github.com/scala/scala-parser-combinators\" title=\"\" target=\"_blank\">scala-parser-combinators</a>は別jarになってますのでサクッとbuild.sbtを書き換えて修正できるようです。</p>\n<h1>\n        <span id=\"1-2\" class=\"fragment\"></span>\n        <a href=\"#1-2\"><i class=\"fa fa-link\"></i></a><a href=\"http://www.scala-lang.org/api/2.10.4/index.html#scala.util.parsing.combinator.RegexParsers\" title=\"\">RegexParsers</a>でCSVパーサを書いていました\n      </h1><p>テストコードはパスして、実際にある程度のサイズのファイルを食べさせてみると、すごく遅い。まあそんなものなのかなぁと一晩放置すると</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>java.lang.OutOfMemoryError: Java heap space\n</pre></div></div><p>となりました。</p>\n<h2>\n        <span id=\"2-1\" class=\"fragment\"></span>\n        <a href=\"#2-1\"><i class=\"fa fa-link\"></i></a>VisualVMでプロファイルしたものが以下です\n      </h2><p>Reader1WithParser1<br>\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/8825a2db-3570-8c9f-8237-ef7edba3acc5.png\" alt=\"parser1\"></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/dbe88083-9eb4-ebec-2522-263b59458037.png\" alt=\"4361ec54766bc80fc470de34a5b4296c.png\"></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/5a72f2a9-d8ac-5514-e469-3988b5b2b245.png\" alt=\"b8d2b349f5ccd23888a88ea367043bf0<br>\n.png\"></p>\n<p>Regex.findPrefixMatchOf()がほとんどの時間を占めていて、char[]の消費がすごい。</p>\n<h2>\n        <span id=\"2-2\" class=\"fragment\"></span>\n        <a href=\"#2-2\"><i class=\"fa fa-link\"></i></a>調べてみると<a href=\"https://issues.scala-lang.org/browse/SI-7710\" title=\"\">該当するIssueが見つかり</a>ました\n      </h2><p>どうやらJavaのStringに関する仕様変更をまともに食らったらしく、メモリパフォーマンスがO(入力長)！！になってしまった模様。<a href=\"https://github.com/scala/scala-parser-combinators/pull/17\" title=\"\" target=\"_blank\">修正パッチはマージされています</a>が、単純に<a href=\"https://issues.scala-lang.org/browse/SI-7710\" title=\"\" target=\"_blank\">RegexParsers.scala has O(inputlength) memory performance on java &gt;= 7u6</a>に書かれているFastCharSequenceを参考にArray[Char]をラップして、RegexParsers.parseまたはRegexParsers.parseAllに渡せばよさそうです。charAtのindexが負の場合のチェックが抜けてますので、そこを修正して</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">FastCharSequence.scala</span></div><div class=\"highlight\"><pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * https://issues.scala-lang.org/browse/SI-7710</span>\n<span class=\"cm\"> */</span>\n<span class=\"k\">class</span> <span class=\"nc\">FastCharSequence</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Char</span><span class=\"o\">],</span> <span class=\"k\">val</span> <span class=\"n\">sb</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"k\">val</span> <span class=\"n\">eb</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">CharSequence</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">Char</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">chars</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">length</span> <span class=\"k\">=</span> <span class=\"n\">eb</span> <span class=\"o\">-</span> <span class=\"n\">sb</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Char</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">IndexOutOfBoundsException</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">chars</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">sb</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">CharSequence</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">e</span> <span class=\"o\">||</span> <span class=\"n\">e</span> <span class=\"o\">&gt;</span> <span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">IndexOutOfBoundsException</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">new</span> <span class=\"nc\">FastCharSequence</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">,</span> <span class=\"n\">sb</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">sb</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">String</span><span class=\"o\">(</span><span class=\"n\">chars</span><span class=\"o\">,</span> <span class=\"n\">sb</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div></div><p>また、ファイル全体を読み込んでパーサに渡すのでなく、一定サイズをバッファに読み込み、順次パースしていき、失敗するとバッファを増やしてトライする…というような処理を行う場合、このFastCharSequenceをなるべく低コストで連結できるとうれしいので、その場合は以下のように対応できます。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"code-lang\"><span class=\"bold\">JointCharSequence.scala</span></div><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">JointCharSequence</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">CharSequence</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">CharSequence</span><span class=\"o\">)</span> <span class=\"k\">extends</span> <span class=\"nc\">CharSequence</span> <span class=\"o\">{</span>\n  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">length</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">length</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">IndexOutOfBoundsException</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">e</span> <span class=\"o\">||</span> <span class=\"n\">e</span> <span class=\"o\">&gt;</span> <span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">IndexOutOfBoundsException</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">val</span> <span class=\"nc\">_e</span> <span class=\"k\">=</span> <span class=\"n\">e</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"k\">val</span> <span class=\"nc\">_a</span> <span class=\"k\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n        <span class=\"k\">val</span> <span class=\"nc\">_b</span> <span class=\"k\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">_e</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"nc\">_e</span><span class=\"o\">)</span>\n        <span class=\"k\">new</span> <span class=\"nc\">JointCharSequence</span><span class=\"o\">(</span><span class=\"nc\">_a</span><span class=\"o\">,</span> <span class=\"nc\">_b</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">subSequence</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">toString</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">toString</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">toString</span>\n<span class=\"o\">}</span>\n</pre></div></div><h2>\n        <span id=\"2-3\" class=\"fragment\"></span>\n        <a href=\"#2-3\"><i class=\"fa fa-link\"></i></a>上記の修正を適用して、なんとか実用的な速度でCSVパーサが動くようになりました\n      </h2><p>Reader2WithParser1<br>\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/292cc776-fc19-2011-e13e-94e9d92c1db4.png\" alt=\"1d2d8655dec622eb581dd06e2ce4e4d4.png\"></p>\n<p>しかし<a href=\"https://github.com/orangesignal/orangesignal-csv\" title=\"\" target=\"_blank\">OrangeSignal CSV</a>比ではわずか10%の速度。</p>\n<p>OrangeSignal CSV<br>\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/47014/6257b676-d584-9e9d-f3e9-49e6b1002760.png\" alt=\"d84cd129dae7b361b440ac09920ff83b.png\"><br>\nはやい！</p>\n",
        "stock_users": [
            "kasumani",
            "suin",
            "takumakei@github",
            "Reds",
            "poad1010",
            "JunSuzukiJapan@github"
        ]
    },
    {
        "id": 80858,
        "uuid": "7965cdcc89672901bae8",
        "user": {
            "id": 159,
            "url_name": "mtoyoshi",
            "profile_image_url": "https://pbs.twimg.com/profile_images/297834191/DSC_2427_normal.JPG"
        },
        "title": "Scalaにおけるプライベートコンストラクタの定義方法について",
        "created_at": "2014-06-17 20:48:51 +0900",
        "updated_at": "2014-06-18 14:18:23 +0900",
        "created_at_in_words": "3ヶ月",
        "updated_at_in_words": "3ヶ月",
        "tags": [
            {
                "name": "Scala",
                "url_name": "scala",
                "icon_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/8d5fcf7e3b476efcace1e848aba2244ed9778480/medium.jpg?1364838172",
                "versions": []
            }
        ],
        "stock_count": 4,
        "comment_count": 2,
        "url": "http://qiita.com/mtoyoshi/items/7965cdcc89672901bae8",
        "created_at_as_seconds": 1403005731,
        "tweet": false,
        "gist_url": null,
        "private": false,
        "raw_body": "シングルトンを表現する場合や自身のファクトリメソッド経由でのみ生成を強制させたい場合などの利用シーンにおいてコンストラクタを隠蔽するということがよく行われる。\n\nJavaだと以下の様にコンストラクタにprivate宣言するだけだ。\n\n```java\nprivate Foo(String name) {\n```\n\nScalaの場合はコンパニオンオブジェクトがあるため、コンパニオン経由で生成をするようにしている場合もやはり直接のnewを防ぎたい。\nしかしながら、Javaと同じように以下のようにしてしまうとコンパニオンからもアクセス出来なくなってしまうという困った問題がある。\n\n```scala\nprivate class Foo(name: String) {\n```\n\n以下の様に書けばパッケージプライベートになり、コンパニオンからアクセスできるようになるもののスコープが不必要に広がってしまう。\n\n```scala\nprivate[pkg] class Foo(name: String) {\n```\n\nスコープを不必要に広げることなく、自身とコンパニオンからだけアクセスできるようにする定義方法は以下のように記述する。\n\n```scala\nclass Foo private (name: String) {\n```\n",
        "body": "<p>シングルトンを表現する場合や自身のファクトリメソッド経由でのみ生成を強制させたい場合などの利用シーンにおいてコンストラクタを隠蔽するということがよく行われる。</p>\n<p>Javaだと以下の様にコンストラクタにprivate宣言するだけだ。</p>\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">private</span> <span class=\"nf\">Foo</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div><p>Scalaの場合はコンパニオンオブジェクトがあるため、コンパニオン経由で生成をするようにしている場合もやはり直接のnewを防ぎたい。<br>\nしかしながら、Javaと同じように以下のようにしてしまうとコンパニオンからもアクセス出来なくなってしまうという困った問題がある。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">private</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div><p>以下の様に書けばパッケージプライベートになり、コンパニオンからアクセスできるようになるもののスコープが不必要に広がってしまう。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">private</span><span class=\"o\">[</span><span class=\"kt\">pkg</span><span class=\"o\">]</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div><p>スコープを不必要に広げることなく、自身とコンパニオンからだけアクセスできるようにする定義方法は以下のように記述する。</p>\n<div class=\"code-frame\" data-lang=\"scala\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span> <span class=\"k\">private</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</pre></div></div>",
        "stock_users": [
            "fjmtmnb",
            "morozumi_h",
            "khiraiwa",
            "kawachi"
        ]
    }
]